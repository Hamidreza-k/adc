
ADC_CONFIGURATIONS_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002908  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00002908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  20000020  00002928  00020020  2**2
                  ALLOC
  3 .stack        00002004  2000012c  00002a34  00020020  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002736e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003154  00000000  00000000  0004740f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002926  00000000  00000000  0004a563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007b0  00000000  00000000  0004ce89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006a0  00000000  00000000  0004d639  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005dda  00000000  00000000  0004dcd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bf5d  00000000  00000000  00053ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008eb35  00000000  00000000  0005fa10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000194c  00000000  00000000  000ee548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 21 00 20 d1 20 00 00 c9 21 00 00 c9 21 00 00     0!. . ...!...!..
	...
      2c:	c9 21 00 00 00 00 00 00 00 00 00 00 c9 21 00 00     .!...........!..
      3c:	c9 21 00 00 c9 21 00 00 c9 21 00 00 c9 21 00 00     .!...!...!...!..
      4c:	c9 21 00 00 c9 21 00 00 c9 21 00 00 c9 21 00 00     .!...!...!...!..
      5c:	c9 21 00 00 05 08 00 00 39 16 00 00 51 16 00 00     .!......9...Q...
      6c:	69 16 00 00 81 16 00 00 99 16 00 00 b1 16 00 00     i...............
      7c:	c9 21 00 00 c9 21 00 00 c9 21 00 00 89 01 00 00     .!...!...!......
      8c:	9d 01 00 00 b1 01 00 00 c5 01 00 00 d9 01 00 00     ................
      9c:	f5 14 00 00 c9 21 00 00 c9 21 00 00 c9 21 00 00     .....!...!...!..
      ac:	c9 21 00 00 00 00 00 00                             .!......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000020 	.word	0x20000020
      d4:	00000000 	.word	0x00000000
      d8:	00002908 	.word	0x00002908

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000024 	.word	0x20000024
     108:	00002908 	.word	0x00002908
     10c:	00002908 	.word	0x00002908
     110:	00000000 	.word	0x00000000

00000114 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	60f8      	str	r0, [r7, #12]
     11c:	60b9      	str	r1, [r7, #8]
     11e:	1dfb      	adds	r3, r7, #7
     120:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     122:	1dfb      	adds	r3, r7, #7
     124:	781a      	ldrb	r2, [r3, #0]
     126:	68fb      	ldr	r3, [r7, #12]
     128:	3202      	adds	r2, #2
     12a:	0092      	lsls	r2, r2, #2
     12c:	68b9      	ldr	r1, [r7, #8]
     12e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     130:	1dfb      	adds	r3, r7, #7
     132:	781b      	ldrb	r3, [r3, #0]
     134:	2b02      	cmp	r3, #2
     136:	d107      	bne.n	148 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     138:	68fb      	ldr	r3, [r7, #12]
     13a:	7e1b      	ldrb	r3, [r3, #24]
     13c:	2210      	movs	r2, #16
     13e:	4313      	orrs	r3, r2
     140:	b2da      	uxtb	r2, r3
     142:	68fb      	ldr	r3, [r7, #12]
     144:	761a      	strb	r2, [r3, #24]
     146:	e019      	b.n	17c <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     148:	1dfb      	adds	r3, r7, #7
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	2b03      	cmp	r3, #3
     14e:	d107      	bne.n	160 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     150:	68fb      	ldr	r3, [r7, #12]
     152:	7e1b      	ldrb	r3, [r3, #24]
     154:	2220      	movs	r2, #32
     156:	4313      	orrs	r3, r2
     158:	b2da      	uxtb	r2, r3
     15a:	68fb      	ldr	r3, [r7, #12]
     15c:	761a      	strb	r2, [r3, #24]
     15e:	e00d      	b.n	17c <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     160:	68fb      	ldr	r3, [r7, #12]
     162:	7e1b      	ldrb	r3, [r3, #24]
     164:	b25a      	sxtb	r2, r3
     166:	1dfb      	adds	r3, r7, #7
     168:	781b      	ldrb	r3, [r3, #0]
     16a:	2101      	movs	r1, #1
     16c:	4099      	lsls	r1, r3
     16e:	000b      	movs	r3, r1
     170:	b25b      	sxtb	r3, r3
     172:	4313      	orrs	r3, r2
     174:	b25b      	sxtb	r3, r3
     176:	b2da      	uxtb	r2, r3
     178:	68fb      	ldr	r3, [r7, #12]
     17a:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
     17c:	2300      	movs	r3, #0
}
     17e:	0018      	movs	r0, r3
     180:	46bd      	mov	sp, r7
     182:	b004      	add	sp, #16
     184:	bd80      	pop	{r7, pc}
	...

00000188 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     188:	b580      	push	{r7, lr}
     18a:	af00      	add	r7, sp, #0
     18c:	2000      	movs	r0, #0
     18e:	4b02      	ldr	r3, [pc, #8]	; (198 <TC3_Handler+0x10>)
     190:	4798      	blx	r3
     192:	46c0      	nop			; (mov r8, r8)
     194:	46bd      	mov	sp, r7
     196:	bd80      	pop	{r7, pc}
     198:	000001ed 	.word	0x000001ed

0000019c <TC4_Handler>:
     19c:	b580      	push	{r7, lr}
     19e:	af00      	add	r7, sp, #0
     1a0:	2001      	movs	r0, #1
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <TC4_Handler+0x10>)
     1a4:	4798      	blx	r3
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	46bd      	mov	sp, r7
     1aa:	bd80      	pop	{r7, pc}
     1ac:	000001ed 	.word	0x000001ed

000001b0 <TC5_Handler>:
     1b0:	b580      	push	{r7, lr}
     1b2:	af00      	add	r7, sp, #0
     1b4:	2002      	movs	r0, #2
     1b6:	4b02      	ldr	r3, [pc, #8]	; (1c0 <TC5_Handler+0x10>)
     1b8:	4798      	blx	r3
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	46bd      	mov	sp, r7
     1be:	bd80      	pop	{r7, pc}
     1c0:	000001ed 	.word	0x000001ed

000001c4 <TC6_Handler>:
     1c4:	b580      	push	{r7, lr}
     1c6:	af00      	add	r7, sp, #0
     1c8:	2003      	movs	r0, #3
     1ca:	4b02      	ldr	r3, [pc, #8]	; (1d4 <TC6_Handler+0x10>)
     1cc:	4798      	blx	r3
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	46bd      	mov	sp, r7
     1d2:	bd80      	pop	{r7, pc}
     1d4:	000001ed 	.word	0x000001ed

000001d8 <TC7_Handler>:
     1d8:	b580      	push	{r7, lr}
     1da:	af00      	add	r7, sp, #0
     1dc:	2004      	movs	r0, #4
     1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <TC7_Handler+0x10>)
     1e0:	4798      	blx	r3
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	46bd      	mov	sp, r7
     1e6:	bd80      	pop	{r7, pc}
     1e8:	000001ed 	.word	0x000001ed

000001ec <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	b084      	sub	sp, #16
     1f0:	af00      	add	r7, sp, #0
     1f2:	0002      	movs	r2, r0
     1f4:	1dfb      	adds	r3, r7, #7
     1f6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
     1fc:	4b28      	ldr	r3, [pc, #160]	; (2a0 <_tc_interrupt_handler+0xb4>)
     1fe:	0092      	lsls	r2, r2, #2
     200:	58d3      	ldr	r3, [r2, r3]
     202:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     204:	68fb      	ldr	r3, [r7, #12]
     206:	681b      	ldr	r3, [r3, #0]
     208:	7b9b      	ldrb	r3, [r3, #14]
     20a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     20c:	68fa      	ldr	r2, [r7, #12]
     20e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     210:	4013      	ands	r3, r2
     212:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
     214:	68fb      	ldr	r3, [r7, #12]
     216:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     218:	230b      	movs	r3, #11
     21a:	18fb      	adds	r3, r7, r3
     21c:	400a      	ands	r2, r1
     21e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     220:	230b      	movs	r3, #11
     222:	18fb      	adds	r3, r7, r3
     224:	781b      	ldrb	r3, [r3, #0]
     226:	2201      	movs	r2, #1
     228:	4013      	ands	r3, r2
     22a:	d008      	beq.n	23e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     22c:	68fb      	ldr	r3, [r7, #12]
     22e:	689b      	ldr	r3, [r3, #8]
     230:	68fa      	ldr	r2, [r7, #12]
     232:	0010      	movs	r0, r2
     234:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     236:	68fb      	ldr	r3, [r7, #12]
     238:	681b      	ldr	r3, [r3, #0]
     23a:	2201      	movs	r2, #1
     23c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     23e:	230b      	movs	r3, #11
     240:	18fb      	adds	r3, r7, r3
     242:	781b      	ldrb	r3, [r3, #0]
     244:	2202      	movs	r2, #2
     246:	4013      	ands	r3, r2
     248:	d008      	beq.n	25c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     24a:	68fb      	ldr	r3, [r7, #12]
     24c:	68db      	ldr	r3, [r3, #12]
     24e:	68fa      	ldr	r2, [r7, #12]
     250:	0010      	movs	r0, r2
     252:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     254:	68fb      	ldr	r3, [r7, #12]
     256:	681b      	ldr	r3, [r3, #0]
     258:	2202      	movs	r2, #2
     25a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     25c:	230b      	movs	r3, #11
     25e:	18fb      	adds	r3, r7, r3
     260:	781b      	ldrb	r3, [r3, #0]
     262:	2210      	movs	r2, #16
     264:	4013      	ands	r3, r2
     266:	d008      	beq.n	27a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     268:	68fb      	ldr	r3, [r7, #12]
     26a:	691b      	ldr	r3, [r3, #16]
     26c:	68fa      	ldr	r2, [r7, #12]
     26e:	0010      	movs	r0, r2
     270:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     272:	68fb      	ldr	r3, [r7, #12]
     274:	681b      	ldr	r3, [r3, #0]
     276:	2210      	movs	r2, #16
     278:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     27a:	230b      	movs	r3, #11
     27c:	18fb      	adds	r3, r7, r3
     27e:	781b      	ldrb	r3, [r3, #0]
     280:	2220      	movs	r2, #32
     282:	4013      	ands	r3, r2
     284:	d008      	beq.n	298 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     286:	68fb      	ldr	r3, [r7, #12]
     288:	695b      	ldr	r3, [r3, #20]
     28a:	68fa      	ldr	r2, [r7, #12]
     28c:	0010      	movs	r0, r2
     28e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     290:	68fb      	ldr	r3, [r7, #12]
     292:	681b      	ldr	r3, [r3, #0]
     294:	2220      	movs	r2, #32
     296:	739a      	strb	r2, [r3, #14]
	}
}
     298:	46c0      	nop			; (mov r8, r8)
     29a:	46bd      	mov	sp, r7
     29c:	b004      	add	sp, #16
     29e:	bd80      	pop	{r7, pc}
     2a0:	20000074 	.word	0x20000074

000002a4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b082      	sub	sp, #8
     2a8:	af00      	add	r7, sp, #0
     2aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	2200      	movs	r2, #0
     2b0:	701a      	strb	r2, [r3, #0]
}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	46bd      	mov	sp, r7
     2b6:	b002      	add	sp, #8
     2b8:	bd80      	pop	{r7, pc}
	...

000002bc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	0002      	movs	r2, r0
     2c4:	6039      	str	r1, [r7, #0]
     2c6:	1dfb      	adds	r3, r7, #7
     2c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     2ca:	1dfb      	adds	r3, r7, #7
     2cc:	781b      	ldrb	r3, [r3, #0]
     2ce:	2b01      	cmp	r3, #1
     2d0:	d00a      	beq.n	2e8 <system_apb_clock_set_mask+0x2c>
     2d2:	2b02      	cmp	r3, #2
     2d4:	d00f      	beq.n	2f6 <system_apb_clock_set_mask+0x3a>
     2d6:	2b00      	cmp	r3, #0
     2d8:	d114      	bne.n	304 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     2da:	4b0e      	ldr	r3, [pc, #56]	; (314 <system_apb_clock_set_mask+0x58>)
     2dc:	4a0d      	ldr	r2, [pc, #52]	; (314 <system_apb_clock_set_mask+0x58>)
     2de:	6991      	ldr	r1, [r2, #24]
     2e0:	683a      	ldr	r2, [r7, #0]
     2e2:	430a      	orrs	r2, r1
     2e4:	619a      	str	r2, [r3, #24]
			break;
     2e6:	e00f      	b.n	308 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     2e8:	4b0a      	ldr	r3, [pc, #40]	; (314 <system_apb_clock_set_mask+0x58>)
     2ea:	4a0a      	ldr	r2, [pc, #40]	; (314 <system_apb_clock_set_mask+0x58>)
     2ec:	69d1      	ldr	r1, [r2, #28]
     2ee:	683a      	ldr	r2, [r7, #0]
     2f0:	430a      	orrs	r2, r1
     2f2:	61da      	str	r2, [r3, #28]
			break;
     2f4:	e008      	b.n	308 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2f6:	4b07      	ldr	r3, [pc, #28]	; (314 <system_apb_clock_set_mask+0x58>)
     2f8:	4a06      	ldr	r2, [pc, #24]	; (314 <system_apb_clock_set_mask+0x58>)
     2fa:	6a11      	ldr	r1, [r2, #32]
     2fc:	683a      	ldr	r2, [r7, #0]
     2fe:	430a      	orrs	r2, r1
     300:	621a      	str	r2, [r3, #32]
			break;
     302:	e001      	b.n	308 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     304:	2317      	movs	r3, #23
     306:	e000      	b.n	30a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     308:	2300      	movs	r3, #0
}
     30a:	0018      	movs	r0, r3
     30c:	46bd      	mov	sp, r7
     30e:	b002      	add	sp, #8
     310:	bd80      	pop	{r7, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	40000400 	.word	0x40000400

00000318 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     318:	b580      	push	{r7, lr}
     31a:	b082      	sub	sp, #8
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     320:	687b      	ldr	r3, [r7, #4]
     322:	2280      	movs	r2, #128	; 0x80
     324:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     326:	687b      	ldr	r3, [r7, #4]
     328:	2200      	movs	r2, #0
     32a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	2201      	movs	r2, #1
     330:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     332:	687b      	ldr	r3, [r7, #4]
     334:	2200      	movs	r2, #0
     336:	70da      	strb	r2, [r3, #3]
}
     338:	46c0      	nop			; (mov r8, r8)
     33a:	46bd      	mov	sp, r7
     33c:	b002      	add	sp, #8
     33e:	bd80      	pop	{r7, pc}

00000340 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     340:	b580      	push	{r7, lr}
     342:	b084      	sub	sp, #16
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     348:	687b      	ldr	r3, [r7, #4]
     34a:	681b      	ldr	r3, [r3, #0]
     34c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     34e:	68fb      	ldr	r3, [r7, #12]
     350:	7bdb      	ldrb	r3, [r3, #15]
     352:	b2db      	uxtb	r3, r3
     354:	001a      	movs	r2, r3
     356:	2380      	movs	r3, #128	; 0x80
     358:	4013      	ands	r3, r2
     35a:	1e5a      	subs	r2, r3, #1
     35c:	4193      	sbcs	r3, r2
     35e:	b2db      	uxtb	r3, r3
#endif
}
     360:	0018      	movs	r0, r3
     362:	46bd      	mov	sp, r7
     364:	b004      	add	sp, #16
     366:	bd80      	pop	{r7, pc}

00000368 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     368:	b590      	push	{r4, r7, lr}
     36a:	b089      	sub	sp, #36	; 0x24
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     370:	2308      	movs	r3, #8
     372:	18fb      	adds	r3, r7, r3
     374:	4a0e      	ldr	r2, [pc, #56]	; (3b0 <_tc_get_inst_index+0x48>)
     376:	ca13      	ldmia	r2!, {r0, r1, r4}
     378:	c313      	stmia	r3!, {r0, r1, r4}
     37a:	ca03      	ldmia	r2!, {r0, r1}
     37c:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     37e:	2300      	movs	r3, #0
     380:	61fb      	str	r3, [r7, #28]
     382:	e00d      	b.n	3a0 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
     384:	2308      	movs	r3, #8
     386:	18fb      	adds	r3, r7, r3
     388:	69fa      	ldr	r2, [r7, #28]
     38a:	0092      	lsls	r2, r2, #2
     38c:	58d2      	ldr	r2, [r2, r3]
     38e:	687b      	ldr	r3, [r7, #4]
     390:	429a      	cmp	r2, r3
     392:	d102      	bne.n	39a <_tc_get_inst_index+0x32>
			return i;
     394:	69fb      	ldr	r3, [r7, #28]
     396:	b2db      	uxtb	r3, r3
     398:	e006      	b.n	3a8 <_tc_get_inst_index+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     39a:	69fb      	ldr	r3, [r7, #28]
     39c:	3301      	adds	r3, #1
     39e:	61fb      	str	r3, [r7, #28]
     3a0:	69fb      	ldr	r3, [r7, #28]
     3a2:	2b04      	cmp	r3, #4
     3a4:	d9ee      	bls.n	384 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     3a6:	2300      	movs	r3, #0
}
     3a8:	0018      	movs	r0, r3
     3aa:	46bd      	mov	sp, r7
     3ac:	b009      	add	sp, #36	; 0x24
     3ae:	bd90      	pop	{r4, r7, pc}
     3b0:	00002778 	.word	0x00002778

000003b4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     3b4:	b590      	push	{r4, r7, lr}
     3b6:	b08d      	sub	sp, #52	; 0x34
     3b8:	af00      	add	r7, sp, #0
     3ba:	60f8      	str	r0, [r7, #12]
     3bc:	60b9      	str	r1, [r7, #8]
     3be:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
     3c0:	232e      	movs	r3, #46	; 0x2e
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	2200      	movs	r2, #0
     3c6:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     3c8:	232d      	movs	r3, #45	; 0x2d
     3ca:	18fb      	adds	r3, r7, r3
     3cc:	2200      	movs	r2, #0
     3ce:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
     3d0:	232c      	movs	r3, #44	; 0x2c
     3d2:	18fb      	adds	r3, r7, r3
     3d4:	2200      	movs	r2, #0
     3d6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     3d8:	2329      	movs	r3, #41	; 0x29
     3da:	18fc      	adds	r4, r7, r3
     3dc:	68bb      	ldr	r3, [r7, #8]
     3de:	0018      	movs	r0, r3
     3e0:	4bbd      	ldr	r3, [pc, #756]	; (6d8 <tc_init+0x324>)
     3e2:	4798      	blx	r3
     3e4:	0003      	movs	r3, r0
     3e6:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     3e8:	2324      	movs	r3, #36	; 0x24
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	4abb      	ldr	r2, [pc, #748]	; (6dc <tc_init+0x328>)
     3ee:	6811      	ldr	r1, [r2, #0]
     3f0:	6019      	str	r1, [r3, #0]
     3f2:	7912      	ldrb	r2, [r2, #4]
     3f4:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     3f6:	2318      	movs	r3, #24
     3f8:	18fb      	adds	r3, r7, r3
     3fa:	4ab9      	ldr	r2, [pc, #740]	; (6e0 <tc_init+0x32c>)
     3fc:	ca03      	ldmia	r2!, {r0, r1}
     3fe:	c303      	stmia	r3!, {r0, r1}
     400:	8812      	ldrh	r2, [r2, #0]
     402:	801a      	strh	r2, [r3, #0]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     404:	232b      	movs	r3, #43	; 0x2b
     406:	18fb      	adds	r3, r7, r3
     408:	2200      	movs	r2, #0
     40a:	701a      	strb	r2, [r3, #0]
     40c:	e00e      	b.n	42c <tc_init+0x78>
		module_inst->callback[i]        = NULL;
     40e:	232b      	movs	r3, #43	; 0x2b
     410:	18fb      	adds	r3, r7, r3
     412:	781a      	ldrb	r2, [r3, #0]
     414:	68fb      	ldr	r3, [r7, #12]
     416:	3202      	adds	r2, #2
     418:	0092      	lsls	r2, r2, #2
     41a:	2100      	movs	r1, #0
     41c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     41e:	232b      	movs	r3, #43	; 0x2b
     420:	18fb      	adds	r3, r7, r3
     422:	781a      	ldrb	r2, [r3, #0]
     424:	232b      	movs	r3, #43	; 0x2b
     426:	18fb      	adds	r3, r7, r3
     428:	3201      	adds	r2, #1
     42a:	701a      	strb	r2, [r3, #0]
     42c:	232b      	movs	r3, #43	; 0x2b
     42e:	18fb      	adds	r3, r7, r3
     430:	781b      	ldrb	r3, [r3, #0]
     432:	2b03      	cmp	r3, #3
     434:	d9eb      	bls.n	40e <tc_init+0x5a>
	}
	module_inst->register_callback_mask     = 0x00;
     436:	68fb      	ldr	r3, [r7, #12]
     438:	2200      	movs	r2, #0
     43a:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     43c:	68fb      	ldr	r3, [r7, #12]
     43e:	2200      	movs	r2, #0
     440:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     442:	2329      	movs	r3, #41	; 0x29
     444:	18fb      	adds	r3, r7, r3
     446:	781a      	ldrb	r2, [r3, #0]
     448:	4ba6      	ldr	r3, [pc, #664]	; (6e4 <tc_init+0x330>)
     44a:	0092      	lsls	r2, r2, #2
     44c:	68f9      	ldr	r1, [r7, #12]
     44e:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     450:	68fb      	ldr	r3, [r7, #12]
     452:	68ba      	ldr	r2, [r7, #8]
     454:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     456:	687b      	ldr	r3, [r7, #4]
     458:	789b      	ldrb	r3, [r3, #2]
     45a:	2b08      	cmp	r3, #8
     45c:	d108      	bne.n	470 <tc_init+0xbc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     45e:	2329      	movs	r3, #41	; 0x29
     460:	18fb      	adds	r3, r7, r3
     462:	781b      	ldrb	r3, [r3, #0]
     464:	3303      	adds	r3, #3
     466:	2201      	movs	r2, #1
     468:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     46a:	d001      	beq.n	470 <tc_init+0xbc>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     46c:	2317      	movs	r3, #23
     46e:	e1c2      	b.n	7f6 <tc_init+0x442>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     470:	687b      	ldr	r3, [r7, #4]
     472:	789a      	ldrb	r2, [r3, #2]
     474:	68fb      	ldr	r3, [r7, #12]
     476:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     478:	68bb      	ldr	r3, [r7, #8]
     47a:	881b      	ldrh	r3, [r3, #0]
     47c:	b29b      	uxth	r3, r3
     47e:	001a      	movs	r2, r3
     480:	2301      	movs	r3, #1
     482:	4013      	ands	r3, r2
     484:	d001      	beq.n	48a <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     486:	2305      	movs	r3, #5
     488:	e1b5      	b.n	7f6 <tc_init+0x442>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     48a:	68bb      	ldr	r3, [r7, #8]
     48c:	7bdb      	ldrb	r3, [r3, #15]
     48e:	b2db      	uxtb	r3, r3
     490:	001a      	movs	r2, r3
     492:	2310      	movs	r3, #16
     494:	4013      	ands	r3, r2
     496:	d001      	beq.n	49c <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     498:	231c      	movs	r3, #28
     49a:	e1ac      	b.n	7f6 <tc_init+0x442>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     49c:	68bb      	ldr	r3, [r7, #8]
     49e:	881b      	ldrh	r3, [r3, #0]
     4a0:	b29b      	uxth	r3, r3
     4a2:	001a      	movs	r2, r3
     4a4:	2302      	movs	r3, #2
     4a6:	4013      	ands	r3, r2
     4a8:	d001      	beq.n	4ae <tc_init+0xfa>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     4aa:	231c      	movs	r3, #28
     4ac:	e1a3      	b.n	7f6 <tc_init+0x442>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	7c1b      	ldrb	r3, [r3, #16]
     4b2:	2b00      	cmp	r3, #0
     4b4:	d017      	beq.n	4e6 <tc_init+0x132>
		system_pinmux_get_config_defaults(&pin_config);
     4b6:	2314      	movs	r3, #20
     4b8:	18fb      	adds	r3, r7, r3
     4ba:	0018      	movs	r0, r3
     4bc:	4b8a      	ldr	r3, [pc, #552]	; (6e8 <tc_init+0x334>)
     4be:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	699b      	ldr	r3, [r3, #24]
     4c4:	b2da      	uxtb	r2, r3
     4c6:	2314      	movs	r3, #20
     4c8:	18fb      	adds	r3, r7, r3
     4ca:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     4cc:	2314      	movs	r3, #20
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	2201      	movs	r2, #1
     4d2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     4d4:	687b      	ldr	r3, [r7, #4]
     4d6:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
     4d8:	b2db      	uxtb	r3, r3
     4da:	2214      	movs	r2, #20
     4dc:	18ba      	adds	r2, r7, r2
     4de:	0011      	movs	r1, r2
     4e0:	0018      	movs	r0, r3
     4e2:	4b82      	ldr	r3, [pc, #520]	; (6ec <tc_init+0x338>)
     4e4:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	7f1b      	ldrb	r3, [r3, #28]
     4ea:	2b00      	cmp	r3, #0
     4ec:	d017      	beq.n	51e <tc_init+0x16a>
		system_pinmux_get_config_defaults(&pin_config);
     4ee:	2314      	movs	r3, #20
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	0018      	movs	r0, r3
     4f4:	4b7c      	ldr	r3, [pc, #496]	; (6e8 <tc_init+0x334>)
     4f6:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     4fc:	b2da      	uxtb	r2, r3
     4fe:	2314      	movs	r3, #20
     500:	18fb      	adds	r3, r7, r3
     502:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     504:	2314      	movs	r3, #20
     506:	18fb      	adds	r3, r7, r3
     508:	2201      	movs	r2, #1
     50a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
     510:	b2db      	uxtb	r3, r3
     512:	2214      	movs	r2, #20
     514:	18ba      	adds	r2, r7, r2
     516:	0011      	movs	r1, r2
     518:	0018      	movs	r0, r3
     51a:	4b74      	ldr	r3, [pc, #464]	; (6ec <tc_init+0x338>)
     51c:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     51e:	2329      	movs	r3, #41	; 0x29
     520:	18fb      	adds	r3, r7, r3
     522:	781a      	ldrb	r2, [r3, #0]
     524:	2318      	movs	r3, #24
     526:	18fb      	adds	r3, r7, r3
     528:	0052      	lsls	r2, r2, #1
     52a:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     52c:	0019      	movs	r1, r3
     52e:	2002      	movs	r0, #2
     530:	4b6f      	ldr	r3, [pc, #444]	; (6f0 <tc_init+0x33c>)
     532:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     534:	687b      	ldr	r3, [r7, #4]
     536:	789b      	ldrb	r3, [r3, #2]
     538:	2b08      	cmp	r3, #8
     53a:	d10b      	bne.n	554 <tc_init+0x1a0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     53c:	2329      	movs	r3, #41	; 0x29
     53e:	18fb      	adds	r3, r7, r3
     540:	781b      	ldrb	r3, [r3, #0]
     542:	1c5a      	adds	r2, r3, #1
     544:	2318      	movs	r3, #24
     546:	18fb      	adds	r3, r7, r3
     548:	0052      	lsls	r2, r2, #1
     54a:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     54c:	0019      	movs	r1, r3
     54e:	2002      	movs	r0, #2
     550:	4b67      	ldr	r3, [pc, #412]	; (6f0 <tc_init+0x33c>)
     552:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     554:	2310      	movs	r3, #16
     556:	18fb      	adds	r3, r7, r3
     558:	0018      	movs	r0, r3
     55a:	4b66      	ldr	r3, [pc, #408]	; (6f4 <tc_init+0x340>)
     55c:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
     55e:	687b      	ldr	r3, [r7, #4]
     560:	781a      	ldrb	r2, [r3, #0]
     562:	2310      	movs	r3, #16
     564:	18fb      	adds	r3, r7, r3
     566:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     568:	2329      	movs	r3, #41	; 0x29
     56a:	18fb      	adds	r3, r7, r3
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	2224      	movs	r2, #36	; 0x24
     570:	18ba      	adds	r2, r7, r2
     572:	5cd3      	ldrb	r3, [r2, r3]
     574:	2210      	movs	r2, #16
     576:	18ba      	adds	r2, r7, r2
     578:	0011      	movs	r1, r2
     57a:	0018      	movs	r0, r3
     57c:	4b5e      	ldr	r3, [pc, #376]	; (6f8 <tc_init+0x344>)
     57e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     580:	2329      	movs	r3, #41	; 0x29
     582:	18fb      	adds	r3, r7, r3
     584:	781b      	ldrb	r3, [r3, #0]
     586:	2224      	movs	r2, #36	; 0x24
     588:	18ba      	adds	r2, r7, r2
     58a:	5cd3      	ldrb	r3, [r2, r3]
     58c:	0018      	movs	r0, r3
     58e:	4b5b      	ldr	r3, [pc, #364]	; (6fc <tc_init+0x348>)
     590:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
     592:	687b      	ldr	r3, [r7, #4]
     594:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
     596:	687b      	ldr	r3, [r7, #4]
     598:	799b      	ldrb	r3, [r3, #6]
     59a:	4313      	orrs	r3, r2
     59c:	b2db      	uxtb	r3, r3
     59e:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
     5a4:	4313      	orrs	r3, r2
     5a6:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
     5ac:	232e      	movs	r3, #46	; 0x2e
     5ae:	18fb      	adds	r3, r7, r3
     5b0:	430a      	orrs	r2, r1
     5b2:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
     5b4:	687b      	ldr	r3, [r7, #4]
     5b6:	785b      	ldrb	r3, [r3, #1]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d008      	beq.n	5ce <tc_init+0x21a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     5bc:	232e      	movs	r3, #46	; 0x2e
     5be:	18fb      	adds	r3, r7, r3
     5c0:	222e      	movs	r2, #46	; 0x2e
     5c2:	18ba      	adds	r2, r7, r2
     5c4:	8812      	ldrh	r2, [r2, #0]
     5c6:	2180      	movs	r1, #128	; 0x80
     5c8:	0109      	lsls	r1, r1, #4
     5ca:	430a      	orrs	r2, r1
     5cc:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	68fb      	ldr	r3, [r7, #12]
     5d2:	0018      	movs	r0, r3
     5d4:	4b4a      	ldr	r3, [pc, #296]	; (700 <tc_init+0x34c>)
     5d6:	4798      	blx	r3
     5d8:	1e03      	subs	r3, r0, #0
     5da:	d1f9      	bne.n	5d0 <tc_init+0x21c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     5dc:	68bb      	ldr	r3, [r7, #8]
     5de:	222e      	movs	r2, #46	; 0x2e
     5e0:	18ba      	adds	r2, r7, r2
     5e2:	8812      	ldrh	r2, [r2, #0]
     5e4:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	7b5b      	ldrb	r3, [r3, #13]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d003      	beq.n	5f6 <tc_init+0x242>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     5ee:	232d      	movs	r3, #45	; 0x2d
     5f0:	18fb      	adds	r3, r7, r3
     5f2:	2204      	movs	r2, #4
     5f4:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	7b9b      	ldrb	r3, [r3, #14]
     5fa:	2b00      	cmp	r3, #0
     5fc:	d007      	beq.n	60e <tc_init+0x25a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     5fe:	232d      	movs	r3, #45	; 0x2d
     600:	18fb      	adds	r3, r7, r3
     602:	222d      	movs	r2, #45	; 0x2d
     604:	18ba      	adds	r2, r7, r2
     606:	7812      	ldrb	r2, [r2, #0]
     608:	2101      	movs	r1, #1
     60a:	430a      	orrs	r2, r1
     60c:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     60e:	46c0      	nop			; (mov r8, r8)
     610:	68fb      	ldr	r3, [r7, #12]
     612:	0018      	movs	r0, r3
     614:	4b3a      	ldr	r3, [pc, #232]	; (700 <tc_init+0x34c>)
     616:	4798      	blx	r3
     618:	1e03      	subs	r3, r0, #0
     61a:	d1f9      	bne.n	610 <tc_init+0x25c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     61c:	68bb      	ldr	r3, [r7, #8]
     61e:	22ff      	movs	r2, #255	; 0xff
     620:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     622:	232d      	movs	r3, #45	; 0x2d
     624:	18fb      	adds	r3, r7, r3
     626:	781b      	ldrb	r3, [r3, #0]
     628:	2b00      	cmp	r3, #0
     62a:	d00b      	beq.n	644 <tc_init+0x290>
		while (tc_is_syncing(module_inst)) {
     62c:	46c0      	nop			; (mov r8, r8)
     62e:	68fb      	ldr	r3, [r7, #12]
     630:	0018      	movs	r0, r3
     632:	4b33      	ldr	r3, [pc, #204]	; (700 <tc_init+0x34c>)
     634:	4798      	blx	r3
     636:	1e03      	subs	r3, r0, #0
     638:	d1f9      	bne.n	62e <tc_init+0x27a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     63a:	68bb      	ldr	r3, [r7, #8]
     63c:	222d      	movs	r2, #45	; 0x2d
     63e:	18ba      	adds	r2, r7, r2
     640:	7812      	ldrb	r2, [r2, #0]
     642:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     644:	232c      	movs	r3, #44	; 0x2c
     646:	18fb      	adds	r3, r7, r3
     648:	687a      	ldr	r2, [r7, #4]
     64a:	7a92      	ldrb	r2, [r2, #10]
     64c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     64e:	232a      	movs	r3, #42	; 0x2a
     650:	18fb      	adds	r3, r7, r3
     652:	2200      	movs	r2, #0
     654:	701a      	strb	r2, [r3, #0]
     656:	e01c      	b.n	692 <tc_init+0x2de>
		if (config->enable_capture_on_channel[i] == true) {
     658:	232a      	movs	r3, #42	; 0x2a
     65a:	18fb      	adds	r3, r7, r3
     65c:	781b      	ldrb	r3, [r3, #0]
     65e:	687a      	ldr	r2, [r7, #4]
     660:	18d3      	adds	r3, r2, r3
     662:	7adb      	ldrb	r3, [r3, #11]
     664:	2b00      	cmp	r3, #0
     666:	d00d      	beq.n	684 <tc_init+0x2d0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     668:	232a      	movs	r3, #42	; 0x2a
     66a:	18fb      	adds	r3, r7, r3
     66c:	781b      	ldrb	r3, [r3, #0]
     66e:	2210      	movs	r2, #16
     670:	409a      	lsls	r2, r3
     672:	0013      	movs	r3, r2
     674:	b2d9      	uxtb	r1, r3
     676:	232c      	movs	r3, #44	; 0x2c
     678:	18fb      	adds	r3, r7, r3
     67a:	222c      	movs	r2, #44	; 0x2c
     67c:	18ba      	adds	r2, r7, r2
     67e:	7812      	ldrb	r2, [r2, #0]
     680:	430a      	orrs	r2, r1
     682:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     684:	232a      	movs	r3, #42	; 0x2a
     686:	18fb      	adds	r3, r7, r3
     688:	781a      	ldrb	r2, [r3, #0]
     68a:	232a      	movs	r3, #42	; 0x2a
     68c:	18fb      	adds	r3, r7, r3
     68e:	3201      	adds	r2, #1
     690:	701a      	strb	r2, [r3, #0]
     692:	232a      	movs	r3, #42	; 0x2a
     694:	18fb      	adds	r3, r7, r3
     696:	781b      	ldrb	r3, [r3, #0]
     698:	2b01      	cmp	r3, #1
     69a:	d9dd      	bls.n	658 <tc_init+0x2a4>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     69c:	46c0      	nop			; (mov r8, r8)
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	0018      	movs	r0, r3
     6a2:	4b17      	ldr	r3, [pc, #92]	; (700 <tc_init+0x34c>)
     6a4:	4798      	blx	r3
     6a6:	1e03      	subs	r3, r0, #0
     6a8:	d1f9      	bne.n	69e <tc_init+0x2ea>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     6aa:	68bb      	ldr	r3, [r7, #8]
     6ac:	222c      	movs	r2, #44	; 0x2c
     6ae:	18ba      	adds	r2, r7, r2
     6b0:	7812      	ldrb	r2, [r2, #0]
     6b2:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	68fb      	ldr	r3, [r7, #12]
     6b8:	0018      	movs	r0, r3
     6ba:	4b11      	ldr	r3, [pc, #68]	; (700 <tc_init+0x34c>)
     6bc:	4798      	blx	r3
     6be:	1e03      	subs	r3, r0, #0
     6c0:	d1f9      	bne.n	6b6 <tc_init+0x302>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     6c2:	68fb      	ldr	r3, [r7, #12]
     6c4:	791b      	ldrb	r3, [r3, #4]
     6c6:	2b04      	cmp	r3, #4
     6c8:	d01c      	beq.n	704 <tc_init+0x350>
     6ca:	2b08      	cmp	r3, #8
     6cc:	d100      	bne.n	6d0 <tc_init+0x31c>
     6ce:	e06e      	b.n	7ae <tc_init+0x3fa>
     6d0:	2b00      	cmp	r3, #0
     6d2:	d049      	beq.n	768 <tc_init+0x3b4>
     6d4:	e08e      	b.n	7f4 <tc_init+0x440>
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	00000369 	.word	0x00000369
     6dc:	0000278c 	.word	0x0000278c
     6e0:	00002794 	.word	0x00002794
     6e4:	20000074 	.word	0x20000074
     6e8:	00000319 	.word	0x00000319
     6ec:	00002049 	.word	0x00002049
     6f0:	000002bd 	.word	0x000002bd
     6f4:	000002a5 	.word	0x000002a5
     6f8:	00001ce1 	.word	0x00001ce1
     6fc:	00001d25 	.word	0x00001d25
     700:	00000341 	.word	0x00000341
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     704:	46c0      	nop			; (mov r8, r8)
     706:	68fb      	ldr	r3, [r7, #12]
     708:	0018      	movs	r0, r3
     70a:	4b3d      	ldr	r3, [pc, #244]	; (800 <tc_init+0x44c>)
     70c:	4798      	blx	r3
     70e:	1e03      	subs	r3, r0, #0
     710:	d1f9      	bne.n	706 <tc_init+0x352>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     712:	687b      	ldr	r3, [r7, #4]
     714:	2228      	movs	r2, #40	; 0x28
     716:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
     718:	68bb      	ldr	r3, [r7, #8]
     71a:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
     71c:	46c0      	nop			; (mov r8, r8)
     71e:	68fb      	ldr	r3, [r7, #12]
     720:	0018      	movs	r0, r3
     722:	4b37      	ldr	r3, [pc, #220]	; (800 <tc_init+0x44c>)
     724:	4798      	blx	r3
     726:	1e03      	subs	r3, r0, #0
     728:	d1f9      	bne.n	71e <tc_init+0x36a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	2229      	movs	r2, #41	; 0x29
     72e:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
     730:	68bb      	ldr	r3, [r7, #8]
     732:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
     734:	46c0      	nop			; (mov r8, r8)
     736:	68fb      	ldr	r3, [r7, #12]
     738:	0018      	movs	r0, r3
     73a:	4b31      	ldr	r3, [pc, #196]	; (800 <tc_init+0x44c>)
     73c:	4798      	blx	r3
     73e:	1e03      	subs	r3, r0, #0
     740:	d1f9      	bne.n	736 <tc_init+0x382>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     742:	687b      	ldr	r3, [r7, #4]
     744:	222a      	movs	r2, #42	; 0x2a
     746:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
     748:	68bb      	ldr	r3, [r7, #8]
     74a:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
     74c:	46c0      	nop			; (mov r8, r8)
     74e:	68fb      	ldr	r3, [r7, #12]
     750:	0018      	movs	r0, r3
     752:	4b2b      	ldr	r3, [pc, #172]	; (800 <tc_init+0x44c>)
     754:	4798      	blx	r3
     756:	1e03      	subs	r3, r0, #0
     758:	d1f9      	bne.n	74e <tc_init+0x39a>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	222b      	movs	r2, #43	; 0x2b
     75e:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
     760:	68bb      	ldr	r3, [r7, #8]
     762:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
     764:	2300      	movs	r3, #0
     766:	e046      	b.n	7f6 <tc_init+0x442>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     768:	46c0      	nop			; (mov r8, r8)
     76a:	68fb      	ldr	r3, [r7, #12]
     76c:	0018      	movs	r0, r3
     76e:	4b24      	ldr	r3, [pc, #144]	; (800 <tc_init+0x44c>)
     770:	4798      	blx	r3
     772:	1e03      	subs	r3, r0, #0
     774:	d1f9      	bne.n	76a <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     776:	687b      	ldr	r3, [r7, #4]
     778:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
     77a:	68bb      	ldr	r3, [r7, #8]
     77c:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     77e:	46c0      	nop			; (mov r8, r8)
     780:	68fb      	ldr	r3, [r7, #12]
     782:	0018      	movs	r0, r3
     784:	4b1e      	ldr	r3, [pc, #120]	; (800 <tc_init+0x44c>)
     786:	4798      	blx	r3
     788:	1e03      	subs	r3, r0, #0
     78a:	d1f9      	bne.n	780 <tc_init+0x3cc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     790:	68bb      	ldr	r3, [r7, #8]
     792:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
     794:	46c0      	nop			; (mov r8, r8)
     796:	68fb      	ldr	r3, [r7, #12]
     798:	0018      	movs	r0, r3
     79a:	4b19      	ldr	r3, [pc, #100]	; (800 <tc_init+0x44c>)
     79c:	4798      	blx	r3
     79e:	1e03      	subs	r3, r0, #0
     7a0:	d1f9      	bne.n	796 <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     7a6:	68bb      	ldr	r3, [r7, #8]
     7a8:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
     7aa:	2300      	movs	r3, #0
     7ac:	e023      	b.n	7f6 <tc_init+0x442>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	0018      	movs	r0, r3
     7b4:	4b12      	ldr	r3, [pc, #72]	; (800 <tc_init+0x44c>)
     7b6:	4798      	blx	r3
     7b8:	1e03      	subs	r3, r0, #0
     7ba:	d1f9      	bne.n	7b0 <tc_init+0x3fc>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     7c0:	68bb      	ldr	r3, [r7, #8]
     7c2:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     7c4:	46c0      	nop			; (mov r8, r8)
     7c6:	68fb      	ldr	r3, [r7, #12]
     7c8:	0018      	movs	r0, r3
     7ca:	4b0d      	ldr	r3, [pc, #52]	; (800 <tc_init+0x44c>)
     7cc:	4798      	blx	r3
     7ce:	1e03      	subs	r3, r0, #0
     7d0:	d1f9      	bne.n	7c6 <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
     7d6:	68bb      	ldr	r3, [r7, #8]
     7d8:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	68fb      	ldr	r3, [r7, #12]
     7de:	0018      	movs	r0, r3
     7e0:	4b07      	ldr	r3, [pc, #28]	; (800 <tc_init+0x44c>)
     7e2:	4798      	blx	r3
     7e4:	1e03      	subs	r3, r0, #0
     7e6:	d1f9      	bne.n	7dc <tc_init+0x428>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     7ec:	68bb      	ldr	r3, [r7, #8]
     7ee:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
     7f0:	2300      	movs	r3, #0
     7f2:	e000      	b.n	7f6 <tc_init+0x442>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     7f4:	2317      	movs	r3, #23
}
     7f6:	0018      	movs	r0, r3
     7f8:	46bd      	mov	sp, r7
     7fa:	b00d      	add	sp, #52	; 0x34
     7fc:	bd90      	pop	{r4, r7, pc}
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	00000341 	.word	0x00000341

00000804 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
     80a:	4b15      	ldr	r3, [pc, #84]	; (860 <EVSYS_Handler+0x5c>)
     80c:	691b      	ldr	r3, [r3, #16]
     80e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     810:	4b14      	ldr	r3, [pc, #80]	; (864 <EVSYS_Handler+0x60>)
     812:	699b      	ldr	r3, [r3, #24]
     814:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
     816:	4b12      	ldr	r3, [pc, #72]	; (860 <EVSYS_Handler+0x5c>)
     818:	689a      	ldr	r2, [r3, #8]
     81a:	683b      	ldr	r3, [r7, #0]
     81c:	431a      	orrs	r2, r3
     81e:	4b10      	ldr	r3, [pc, #64]	; (860 <EVSYS_Handler+0x5c>)
     820:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     822:	4b10      	ldr	r3, [pc, #64]	; (864 <EVSYS_Handler+0x60>)
     824:	4a10      	ldr	r2, [pc, #64]	; (868 <EVSYS_Handler+0x64>)
     826:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     828:	e008      	b.n	83c <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	685a      	ldr	r2, [r3, #4]
     82e:	687b      	ldr	r3, [r7, #4]
     830:	681b      	ldr	r3, [r3, #0]
     832:	0018      	movs	r0, r3
     834:	4790      	blx	r2
		current_hook = current_hook->next;
     836:	687b      	ldr	r3, [r7, #4]
     838:	689b      	ldr	r3, [r3, #8]
     83a:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	2b00      	cmp	r3, #0
     840:	d1f3      	bne.n	82a <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     842:	4b07      	ldr	r3, [pc, #28]	; (860 <EVSYS_Handler+0x5c>)
     844:	68db      	ldr	r3, [r3, #12]
     846:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
     848:	4b05      	ldr	r3, [pc, #20]	; (860 <EVSYS_Handler+0x5c>)
     84a:	689b      	ldr	r3, [r3, #8]
     84c:	683a      	ldr	r2, [r7, #0]
     84e:	43d2      	mvns	r2, r2
     850:	401a      	ands	r2, r3
     852:	4b03      	ldr	r3, [pc, #12]	; (860 <EVSYS_Handler+0x5c>)
     854:	609a      	str	r2, [r3, #8]
}
     856:	46c0      	nop			; (mov r8, r8)
     858:	46bd      	mov	sp, r7
     85a:	b002      	add	sp, #8
     85c:	bd80      	pop	{r7, pc}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	20000000 	.word	0x20000000
     864:	42000400 	.word	0x42000400
     868:	0f0fffff 	.word	0x0f0fffff

0000086c <system_apb_clock_set_mask>:
{
     86c:	b580      	push	{r7, lr}
     86e:	b082      	sub	sp, #8
     870:	af00      	add	r7, sp, #0
     872:	0002      	movs	r2, r0
     874:	6039      	str	r1, [r7, #0]
     876:	1dfb      	adds	r3, r7, #7
     878:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     87a:	1dfb      	adds	r3, r7, #7
     87c:	781b      	ldrb	r3, [r3, #0]
     87e:	2b01      	cmp	r3, #1
     880:	d00a      	beq.n	898 <system_apb_clock_set_mask+0x2c>
     882:	2b02      	cmp	r3, #2
     884:	d00f      	beq.n	8a6 <system_apb_clock_set_mask+0x3a>
     886:	2b00      	cmp	r3, #0
     888:	d114      	bne.n	8b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     88a:	4b0e      	ldr	r3, [pc, #56]	; (8c4 <system_apb_clock_set_mask+0x58>)
     88c:	4a0d      	ldr	r2, [pc, #52]	; (8c4 <system_apb_clock_set_mask+0x58>)
     88e:	6991      	ldr	r1, [r2, #24]
     890:	683a      	ldr	r2, [r7, #0]
     892:	430a      	orrs	r2, r1
     894:	619a      	str	r2, [r3, #24]
			break;
     896:	e00f      	b.n	8b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     898:	4b0a      	ldr	r3, [pc, #40]	; (8c4 <system_apb_clock_set_mask+0x58>)
     89a:	4a0a      	ldr	r2, [pc, #40]	; (8c4 <system_apb_clock_set_mask+0x58>)
     89c:	69d1      	ldr	r1, [r2, #28]
     89e:	683a      	ldr	r2, [r7, #0]
     8a0:	430a      	orrs	r2, r1
     8a2:	61da      	str	r2, [r3, #28]
			break;
     8a4:	e008      	b.n	8b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     8a6:	4b07      	ldr	r3, [pc, #28]	; (8c4 <system_apb_clock_set_mask+0x58>)
     8a8:	4a06      	ldr	r2, [pc, #24]	; (8c4 <system_apb_clock_set_mask+0x58>)
     8aa:	6a11      	ldr	r1, [r2, #32]
     8ac:	683a      	ldr	r2, [r7, #0]
     8ae:	430a      	orrs	r2, r1
     8b0:	621a      	str	r2, [r3, #32]
			break;
     8b2:	e001      	b.n	8b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     8b4:	2317      	movs	r3, #23
     8b6:	e000      	b.n	8ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     8b8:	2300      	movs	r3, #0
}
     8ba:	0018      	movs	r0, r3
     8bc:	46bd      	mov	sp, r7
     8be:	b002      	add	sp, #8
     8c0:	bd80      	pop	{r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	40000400 	.word	0x40000400

000008c8 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
     8cc:	2102      	movs	r1, #2
     8ce:	2002      	movs	r0, #2
     8d0:	4b07      	ldr	r3, [pc, #28]	; (8f0 <_system_events_init+0x28>)
     8d2:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     8d4:	4b07      	ldr	r3, [pc, #28]	; (8f4 <_system_events_init+0x2c>)
     8d6:	2201      	movs	r2, #1
     8d8:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	4b05      	ldr	r3, [pc, #20]	; (8f4 <_system_events_init+0x2c>)
     8de:	781b      	ldrb	r3, [r3, #0]
     8e0:	b2db      	uxtb	r3, r3
     8e2:	001a      	movs	r2, r3
     8e4:	2301      	movs	r3, #1
     8e6:	4013      	ands	r3, r2
     8e8:	d1f8      	bne.n	8dc <_system_events_init+0x14>
	}
}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	46bd      	mov	sp, r7
     8ee:	bd80      	pop	{r7, pc}
     8f0:	0000086d 	.word	0x0000086d
     8f4:	42000400 	.word	0x42000400

000008f8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b082      	sub	sp, #8
     8fc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     8fe:	4b10      	ldr	r3, [pc, #64]	; (940 <cpu_irq_enter_critical+0x48>)
     900:	681b      	ldr	r3, [r3, #0]
     902:	2b00      	cmp	r3, #0
     904:	d112      	bne.n	92c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     906:	f3ef 8310 	mrs	r3, PRIMASK
     90a:	607b      	str	r3, [r7, #4]
  return(result);
     90c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     90e:	2b00      	cmp	r3, #0
     910:	d109      	bne.n	926 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     912:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     914:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     918:	4b0a      	ldr	r3, [pc, #40]	; (944 <cpu_irq_enter_critical+0x4c>)
     91a:	2200      	movs	r2, #0
     91c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     91e:	4b0a      	ldr	r3, [pc, #40]	; (948 <cpu_irq_enter_critical+0x50>)
     920:	2201      	movs	r2, #1
     922:	701a      	strb	r2, [r3, #0]
     924:	e002      	b.n	92c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     926:	4b08      	ldr	r3, [pc, #32]	; (948 <cpu_irq_enter_critical+0x50>)
     928:	2200      	movs	r2, #0
     92a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     92c:	4b04      	ldr	r3, [pc, #16]	; (940 <cpu_irq_enter_critical+0x48>)
     92e:	681b      	ldr	r3, [r3, #0]
     930:	1c5a      	adds	r2, r3, #1
     932:	4b03      	ldr	r3, [pc, #12]	; (940 <cpu_irq_enter_critical+0x48>)
     934:	601a      	str	r2, [r3, #0]
}
     936:	46c0      	nop			; (mov r8, r8)
     938:	46bd      	mov	sp, r7
     93a:	b002      	add	sp, #8
     93c:	bd80      	pop	{r7, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	2000003c 	.word	0x2000003c
     944:	20000014 	.word	0x20000014
     948:	20000040 	.word	0x20000040

0000094c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     94c:	b580      	push	{r7, lr}
     94e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     950:	4b0b      	ldr	r3, [pc, #44]	; (980 <cpu_irq_leave_critical+0x34>)
     952:	681b      	ldr	r3, [r3, #0]
     954:	1e5a      	subs	r2, r3, #1
     956:	4b0a      	ldr	r3, [pc, #40]	; (980 <cpu_irq_leave_critical+0x34>)
     958:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     95a:	4b09      	ldr	r3, [pc, #36]	; (980 <cpu_irq_leave_critical+0x34>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	2b00      	cmp	r3, #0
     960:	d10a      	bne.n	978 <cpu_irq_leave_critical+0x2c>
     962:	4b08      	ldr	r3, [pc, #32]	; (984 <cpu_irq_leave_critical+0x38>)
     964:	781b      	ldrb	r3, [r3, #0]
     966:	b2db      	uxtb	r3, r3
     968:	2b00      	cmp	r3, #0
     96a:	d005      	beq.n	978 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     96c:	4b06      	ldr	r3, [pc, #24]	; (988 <cpu_irq_leave_critical+0x3c>)
     96e:	2201      	movs	r2, #1
     970:	701a      	strb	r2, [r3, #0]
     972:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     976:	b662      	cpsie	i
	}
}
     978:	46c0      	nop			; (mov r8, r8)
     97a:	46bd      	mov	sp, r7
     97c:	bd80      	pop	{r7, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	2000003c 	.word	0x2000003c
     984:	20000040 	.word	0x20000040
     988:	20000014 	.word	0x20000014

0000098c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     98c:	b580      	push	{r7, lr}
     98e:	b084      	sub	sp, #16
     990:	af00      	add	r7, sp, #0
     992:	0002      	movs	r2, r0
     994:	1dfb      	adds	r3, r7, #7
     996:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     998:	230f      	movs	r3, #15
     99a:	18fb      	adds	r3, r7, r3
     99c:	1dfa      	adds	r2, r7, #7
     99e:	7812      	ldrb	r2, [r2, #0]
     9a0:	09d2      	lsrs	r2, r2, #7
     9a2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     9a4:	230e      	movs	r3, #14
     9a6:	18fb      	adds	r3, r7, r3
     9a8:	1dfa      	adds	r2, r7, #7
     9aa:	7812      	ldrb	r2, [r2, #0]
     9ac:	0952      	lsrs	r2, r2, #5
     9ae:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     9b0:	4b0d      	ldr	r3, [pc, #52]	; (9e8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     9b2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     9b4:	230f      	movs	r3, #15
     9b6:	18fb      	adds	r3, r7, r3
     9b8:	781b      	ldrb	r3, [r3, #0]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d10f      	bne.n	9de <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     9be:	230f      	movs	r3, #15
     9c0:	18fb      	adds	r3, r7, r3
     9c2:	781b      	ldrb	r3, [r3, #0]
     9c4:	009b      	lsls	r3, r3, #2
     9c6:	2210      	movs	r2, #16
     9c8:	4694      	mov	ip, r2
     9ca:	44bc      	add	ip, r7
     9cc:	4463      	add	r3, ip
     9ce:	3b08      	subs	r3, #8
     9d0:	681a      	ldr	r2, [r3, #0]
     9d2:	230e      	movs	r3, #14
     9d4:	18fb      	adds	r3, r7, r3
     9d6:	781b      	ldrb	r3, [r3, #0]
     9d8:	01db      	lsls	r3, r3, #7
     9da:	18d3      	adds	r3, r2, r3
     9dc:	e000      	b.n	9e0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     9de:	2300      	movs	r3, #0
	}
}
     9e0:	0018      	movs	r0, r3
     9e2:	46bd      	mov	sp, r7
     9e4:	b004      	add	sp, #16
     9e6:	bd80      	pop	{r7, pc}
     9e8:	41004400 	.word	0x41004400

000009ec <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	0002      	movs	r2, r0
     9f4:	1dfb      	adds	r3, r7, #7
     9f6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     9f8:	1dfb      	adds	r3, r7, #7
     9fa:	781b      	ldrb	r3, [r3, #0]
     9fc:	0018      	movs	r0, r3
     9fe:	4b03      	ldr	r3, [pc, #12]	; (a0c <port_get_group_from_gpio_pin+0x20>)
     a00:	4798      	blx	r3
     a02:	0003      	movs	r3, r0
}
     a04:	0018      	movs	r0, r3
     a06:	46bd      	mov	sp, r7
     a08:	b002      	add	sp, #8
     a0a:	bd80      	pop	{r7, pc}
     a0c:	0000098d 	.word	0x0000098d

00000a10 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     a10:	b580      	push	{r7, lr}
     a12:	b082      	sub	sp, #8
     a14:	af00      	add	r7, sp, #0
     a16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	2200      	movs	r2, #0
     a1c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	2201      	movs	r2, #1
     a22:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	2200      	movs	r2, #0
     a28:	709a      	strb	r2, [r3, #2]
}
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	46bd      	mov	sp, r7
     a2e:	b002      	add	sp, #8
     a30:	bd80      	pop	{r7, pc}
	...

00000a34 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     a34:	b580      	push	{r7, lr}
     a36:	b084      	sub	sp, #16
     a38:	af00      	add	r7, sp, #0
     a3a:	0002      	movs	r2, r0
     a3c:	1dfb      	adds	r3, r7, #7
     a3e:	701a      	strb	r2, [r3, #0]
     a40:	1dbb      	adds	r3, r7, #6
     a42:	1c0a      	adds	r2, r1, #0
     a44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     a46:	1dfb      	adds	r3, r7, #7
     a48:	781b      	ldrb	r3, [r3, #0]
     a4a:	0018      	movs	r0, r3
     a4c:	4b0d      	ldr	r3, [pc, #52]	; (a84 <port_pin_set_output_level+0x50>)
     a4e:	4798      	blx	r3
     a50:	0003      	movs	r3, r0
     a52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a54:	1dfb      	adds	r3, r7, #7
     a56:	781b      	ldrb	r3, [r3, #0]
     a58:	221f      	movs	r2, #31
     a5a:	4013      	ands	r3, r2
     a5c:	2201      	movs	r2, #1
     a5e:	409a      	lsls	r2, r3
     a60:	0013      	movs	r3, r2
     a62:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     a64:	1dbb      	adds	r3, r7, #6
     a66:	781b      	ldrb	r3, [r3, #0]
     a68:	2b00      	cmp	r3, #0
     a6a:	d003      	beq.n	a74 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     a6c:	68fb      	ldr	r3, [r7, #12]
     a6e:	68ba      	ldr	r2, [r7, #8]
     a70:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     a72:	e002      	b.n	a7a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	68ba      	ldr	r2, [r7, #8]
     a78:	615a      	str	r2, [r3, #20]
}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	46bd      	mov	sp, r7
     a7e:	b004      	add	sp, #16
     a80:	bd80      	pop	{r7, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	000009ed 	.word	0x000009ed

00000a88 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     a88:	b580      	push	{r7, lr}
     a8a:	b082      	sub	sp, #8
     a8c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     a8e:	1d3b      	adds	r3, r7, #4
     a90:	0018      	movs	r0, r3
     a92:	4b0e      	ldr	r3, [pc, #56]	; (acc <system_board_init+0x44>)
     a94:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a96:	1d3b      	adds	r3, r7, #4
     a98:	2201      	movs	r2, #1
     a9a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     a9c:	1d3b      	adds	r3, r7, #4
     a9e:	0019      	movs	r1, r3
     aa0:	203e      	movs	r0, #62	; 0x3e
     aa2:	4b0b      	ldr	r3, [pc, #44]	; (ad0 <system_board_init+0x48>)
     aa4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     aa6:	2101      	movs	r1, #1
     aa8:	203e      	movs	r0, #62	; 0x3e
     aaa:	4b0a      	ldr	r3, [pc, #40]	; (ad4 <system_board_init+0x4c>)
     aac:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     aae:	1d3b      	adds	r3, r7, #4
     ab0:	2200      	movs	r2, #0
     ab2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     ab4:	1d3b      	adds	r3, r7, #4
     ab6:	2201      	movs	r2, #1
     ab8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     aba:	1d3b      	adds	r3, r7, #4
     abc:	0019      	movs	r1, r3
     abe:	200f      	movs	r0, #15
     ac0:	4b03      	ldr	r3, [pc, #12]	; (ad0 <system_board_init+0x48>)
     ac2:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     ac4:	46c0      	nop			; (mov r8, r8)
     ac6:	46bd      	mov	sp, r7
     ac8:	b002      	add	sp, #8
     aca:	bd80      	pop	{r7, pc}
     acc:	00000a11 	.word	0x00000a11
     ad0:	000015d9 	.word	0x000015d9
     ad4:	00000a35 	.word	0x00000a35

00000ad8 <system_gclk_chan_get_config_defaults>:
{
     ad8:	b580      	push	{r7, lr}
     ada:	b082      	sub	sp, #8
     adc:	af00      	add	r7, sp, #0
     ade:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	2200      	movs	r2, #0
     ae4:	701a      	strb	r2, [r3, #0]
}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	46bd      	mov	sp, r7
     aea:	b002      	add	sp, #8
     aec:	bd80      	pop	{r7, pc}
	...

00000af0 <system_apb_clock_set_mask>:
{
     af0:	b580      	push	{r7, lr}
     af2:	b082      	sub	sp, #8
     af4:	af00      	add	r7, sp, #0
     af6:	0002      	movs	r2, r0
     af8:	6039      	str	r1, [r7, #0]
     afa:	1dfb      	adds	r3, r7, #7
     afc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     afe:	1dfb      	adds	r3, r7, #7
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	2b01      	cmp	r3, #1
     b04:	d00a      	beq.n	b1c <system_apb_clock_set_mask+0x2c>
     b06:	2b02      	cmp	r3, #2
     b08:	d00f      	beq.n	b2a <system_apb_clock_set_mask+0x3a>
     b0a:	2b00      	cmp	r3, #0
     b0c:	d114      	bne.n	b38 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     b0e:	4b0e      	ldr	r3, [pc, #56]	; (b48 <system_apb_clock_set_mask+0x58>)
     b10:	4a0d      	ldr	r2, [pc, #52]	; (b48 <system_apb_clock_set_mask+0x58>)
     b12:	6991      	ldr	r1, [r2, #24]
     b14:	683a      	ldr	r2, [r7, #0]
     b16:	430a      	orrs	r2, r1
     b18:	619a      	str	r2, [r3, #24]
			break;
     b1a:	e00f      	b.n	b3c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     b1c:	4b0a      	ldr	r3, [pc, #40]	; (b48 <system_apb_clock_set_mask+0x58>)
     b1e:	4a0a      	ldr	r2, [pc, #40]	; (b48 <system_apb_clock_set_mask+0x58>)
     b20:	69d1      	ldr	r1, [r2, #28]
     b22:	683a      	ldr	r2, [r7, #0]
     b24:	430a      	orrs	r2, r1
     b26:	61da      	str	r2, [r3, #28]
			break;
     b28:	e008      	b.n	b3c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     b2a:	4b07      	ldr	r3, [pc, #28]	; (b48 <system_apb_clock_set_mask+0x58>)
     b2c:	4a06      	ldr	r2, [pc, #24]	; (b48 <system_apb_clock_set_mask+0x58>)
     b2e:	6a11      	ldr	r1, [r2, #32]
     b30:	683a      	ldr	r2, [r7, #0]
     b32:	430a      	orrs	r2, r1
     b34:	621a      	str	r2, [r3, #32]
			break;
     b36:	e001      	b.n	b3c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     b38:	2317      	movs	r3, #23
     b3a:	e000      	b.n	b3e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     b3c:	2300      	movs	r3, #0
}
     b3e:	0018      	movs	r0, r3
     b40:	46bd      	mov	sp, r7
     b42:	b002      	add	sp, #8
     b44:	bd80      	pop	{r7, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	40000400 	.word	0x40000400

00000b4c <system_pinmux_get_config_defaults>:
{
     b4c:	b580      	push	{r7, lr}
     b4e:	b082      	sub	sp, #8
     b50:	af00      	add	r7, sp, #0
     b52:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	2280      	movs	r2, #128	; 0x80
     b58:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	2200      	movs	r2, #0
     b5e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b60:	687b      	ldr	r3, [r7, #4]
     b62:	2201      	movs	r2, #1
     b64:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	2200      	movs	r2, #0
     b6a:	70da      	strb	r2, [r3, #3]
}
     b6c:	46c0      	nop			; (mov r8, r8)
     b6e:	46bd      	mov	sp, r7
     b70:	b002      	add	sp, #8
     b72:	bd80      	pop	{r7, pc}

00000b74 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     b74:	b580      	push	{r7, lr}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
     b7a:	0002      	movs	r2, r0
     b7c:	1dfb      	adds	r3, r7, #7
     b7e:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     b80:	1dfb      	adds	r3, r7, #7
     b82:	781b      	ldrb	r3, [r3, #0]
     b84:	2b00      	cmp	r3, #0
     b86:	d002      	beq.n	b8e <system_voltage_reference_enable+0x1a>
     b88:	2b01      	cmp	r3, #1
     b8a:	d007      	beq.n	b9c <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     b8c:	e00d      	b.n	baa <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     b8e:	4b08      	ldr	r3, [pc, #32]	; (bb0 <system_voltage_reference_enable+0x3c>)
     b90:	4a07      	ldr	r2, [pc, #28]	; (bb0 <system_voltage_reference_enable+0x3c>)
     b92:	6c12      	ldr	r2, [r2, #64]	; 0x40
     b94:	2102      	movs	r1, #2
     b96:	430a      	orrs	r2, r1
     b98:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     b9a:	e006      	b.n	baa <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     b9c:	4b04      	ldr	r3, [pc, #16]	; (bb0 <system_voltage_reference_enable+0x3c>)
     b9e:	4a04      	ldr	r2, [pc, #16]	; (bb0 <system_voltage_reference_enable+0x3c>)
     ba0:	6c12      	ldr	r2, [r2, #64]	; 0x40
     ba2:	2104      	movs	r1, #4
     ba4:	430a      	orrs	r2, r1
     ba6:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     ba8:	46c0      	nop			; (mov r8, r8)
	}
}
     baa:	46bd      	mov	sp, r7
     bac:	b002      	add	sp, #8
     bae:	bd80      	pop	{r7, pc}
     bb0:	40000800 	.word	0x40000800

00000bb4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     bb4:	b580      	push	{r7, lr}
     bb6:	b084      	sub	sp, #16
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     bbc:	687b      	ldr	r3, [r7, #4]
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     bc2:	68fb      	ldr	r3, [r7, #12]
     bc4:	7e5b      	ldrb	r3, [r3, #25]
     bc6:	b2db      	uxtb	r3, r3
     bc8:	b25b      	sxtb	r3, r3
     bca:	2b00      	cmp	r3, #0
     bcc:	da01      	bge.n	bd2 <adc_is_syncing+0x1e>
		return true;
     bce:	2301      	movs	r3, #1
     bd0:	e000      	b.n	bd4 <adc_is_syncing+0x20>
	}

	return false;
     bd2:	2300      	movs	r3, #0
}
     bd4:	0018      	movs	r0, r3
     bd6:	46bd      	mov	sp, r7
     bd8:	b004      	add	sp, #16
     bda:	bd80      	pop	{r7, pc}

00000bdc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     bdc:	b580      	push	{r7, lr}
     bde:	b082      	sub	sp, #8
     be0:	af00      	add	r7, sp, #0
     be2:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     be4:	687b      	ldr	r3, [r7, #4]
     be6:	2200      	movs	r2, #0
     be8:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     bea:	687b      	ldr	r3, [r7, #4]
     bec:	2200      	movs	r2, #0
     bee:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     bf0:	687b      	ldr	r3, [r7, #4]
     bf2:	2200      	movs	r2, #0
     bf4:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	2200      	movs	r2, #0
     bfa:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	2200      	movs	r2, #0
     c00:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	2200      	movs	r2, #0
     c06:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     c08:	687b      	ldr	r3, [r7, #4]
     c0a:	2200      	movs	r2, #0
     c0c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	2200      	movs	r2, #0
     c12:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	2200      	movs	r2, #0
     c18:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	22c0      	movs	r2, #192	; 0xc0
     c1e:	0152      	lsls	r2, r2, #5
     c20:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	2200      	movs	r2, #0
     c26:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	2200      	movs	r2, #0
     c2c:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	2200      	movs	r2, #0
     c32:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	2200      	movs	r2, #0
     c38:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     c3a:	687b      	ldr	r3, [r7, #4]
     c3c:	2200      	movs	r2, #0
     c3e:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	222a      	movs	r2, #42	; 0x2a
     c44:	2100      	movs	r1, #0
     c46:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	2200      	movs	r2, #0
     c4c:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	2200      	movs	r2, #0
     c52:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	2224      	movs	r2, #36	; 0x24
     c58:	2100      	movs	r1, #0
     c5a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	2200      	movs	r2, #0
     c60:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     c62:	687b      	ldr	r3, [r7, #4]
     c64:	2200      	movs	r2, #0
     c66:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	2200      	movs	r2, #0
     c6c:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	222b      	movs	r2, #43	; 0x2b
     c72:	2100      	movs	r1, #0
     c74:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	222c      	movs	r2, #44	; 0x2c
     c7a:	2100      	movs	r1, #0
     c7c:	5499      	strb	r1, [r3, r2]
}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	46bd      	mov	sp, r7
     c82:	b002      	add	sp, #8
     c84:	bd80      	pop	{r7, pc}
	...

00000c88 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     c88:	b580      	push	{r7, lr}
     c8a:	b098      	sub	sp, #96	; 0x60
     c8c:	af00      	add	r7, sp, #0
     c8e:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     c90:	230c      	movs	r3, #12
     c92:	18fa      	adds	r2, r7, r3
     c94:	4b15      	ldr	r3, [pc, #84]	; (cec <_adc_configure_ain_pin+0x64>)
     c96:	0010      	movs	r0, r2
     c98:	0019      	movs	r1, r3
     c9a:	2350      	movs	r3, #80	; 0x50
     c9c:	001a      	movs	r2, r3
     c9e:	4b14      	ldr	r3, [pc, #80]	; (cf0 <_adc_configure_ain_pin+0x68>)
     ca0:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     ca2:	4b14      	ldr	r3, [pc, #80]	; (cf4 <_adc_configure_ain_pin+0x6c>)
     ca4:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	2b13      	cmp	r3, #19
     caa:	d81a      	bhi.n	ce2 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     cac:	230c      	movs	r3, #12
     cae:	18fb      	adds	r3, r7, r3
     cb0:	687a      	ldr	r2, [r7, #4]
     cb2:	0092      	lsls	r2, r2, #2
     cb4:	58d3      	ldr	r3, [r2, r3]
     cb6:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     cb8:	2308      	movs	r3, #8
     cba:	18fb      	adds	r3, r7, r3
     cbc:	0018      	movs	r0, r3
     cbe:	4b0e      	ldr	r3, [pc, #56]	; (cf8 <_adc_configure_ain_pin+0x70>)
     cc0:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     cc2:	2308      	movs	r3, #8
     cc4:	18fb      	adds	r3, r7, r3
     cc6:	2200      	movs	r2, #0
     cc8:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     cca:	2308      	movs	r3, #8
     ccc:	18fb      	adds	r3, r7, r3
     cce:	2201      	movs	r2, #1
     cd0:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     cd4:	b2db      	uxtb	r3, r3
     cd6:	2208      	movs	r2, #8
     cd8:	18ba      	adds	r2, r7, r2
     cda:	0011      	movs	r1, r2
     cdc:	0018      	movs	r0, r3
     cde:	4b07      	ldr	r3, [pc, #28]	; (cfc <_adc_configure_ain_pin+0x74>)
     ce0:	4798      	blx	r3
	}
}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	46bd      	mov	sp, r7
     ce6:	b018      	add	sp, #96	; 0x60
     ce8:	bd80      	pop	{r7, pc}
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	000027a0 	.word	0x000027a0
     cf0:	00002765 	.word	0x00002765
     cf4:	0000ffff 	.word	0x0000ffff
     cf8:	00000b4d 	.word	0x00000b4d
     cfc:	00002049 	.word	0x00002049

00000d00 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     d00:	b5f0      	push	{r4, r5, r6, r7, lr}
     d02:	b089      	sub	sp, #36	; 0x24
     d04:	af00      	add	r7, sp, #0
     d06:	6078      	str	r0, [r7, #4]
     d08:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     d0a:	231f      	movs	r3, #31
     d0c:	18fb      	adds	r3, r7, r3
     d0e:	2200      	movs	r2, #0
     d10:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     d12:	2310      	movs	r3, #16
     d14:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     d16:	2317      	movs	r3, #23
     d18:	18fb      	adds	r3, r7, r3
     d1a:	2200      	movs	r2, #0
     d1c:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     d24:	230c      	movs	r3, #12
     d26:	18fb      	adds	r3, r7, r3
     d28:	0018      	movs	r0, r3
     d2a:	4bce      	ldr	r3, [pc, #824]	; (1064 <_adc_set_config+0x364>)
     d2c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     d2e:	683b      	ldr	r3, [r7, #0]
     d30:	781a      	ldrb	r2, [r3, #0]
     d32:	230c      	movs	r3, #12
     d34:	18fb      	adds	r3, r7, r3
     d36:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     d38:	230c      	movs	r3, #12
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	0019      	movs	r1, r3
     d3e:	201e      	movs	r0, #30
     d40:	4bc9      	ldr	r3, [pc, #804]	; (1068 <_adc_set_config+0x368>)
     d42:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     d44:	201e      	movs	r0, #30
     d46:	4bc9      	ldr	r3, [pc, #804]	; (106c <_adc_set_config+0x36c>)
     d48:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     d4a:	683b      	ldr	r3, [r7, #0]
     d4c:	222c      	movs	r2, #44	; 0x2c
     d4e:	5c9b      	ldrb	r3, [r3, r2]
     d50:	2b00      	cmp	r3, #0
     d52:	d040      	beq.n	dd6 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     d54:	2316      	movs	r3, #22
     d56:	18fb      	adds	r3, r7, r3
     d58:	683a      	ldr	r2, [r7, #0]
     d5a:	212b      	movs	r1, #43	; 0x2b
     d5c:	5c52      	ldrb	r2, [r2, r1]
     d5e:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     d60:	683b      	ldr	r3, [r7, #0]
     d62:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
     d64:	2315      	movs	r3, #21
     d66:	18fb      	adds	r3, r7, r3
     d68:	2216      	movs	r2, #22
     d6a:	18ba      	adds	r2, r7, r2
     d6c:	7812      	ldrb	r2, [r2, #0]
     d6e:	188a      	adds	r2, r1, r2
     d70:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     d72:	683b      	ldr	r3, [r7, #0]
     d74:	222c      	movs	r2, #44	; 0x2c
     d76:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
     d78:	230f      	movs	r3, #15
     d7a:	18fb      	adds	r3, r7, r3
     d7c:	2215      	movs	r2, #21
     d7e:	18ba      	adds	r2, r7, r2
     d80:	7812      	ldrb	r2, [r2, #0]
     d82:	188a      	adds	r2, r1, r2
     d84:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
     d86:	e018      	b.n	dba <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     d88:	2316      	movs	r3, #22
     d8a:	18fb      	adds	r3, r7, r3
     d8c:	781b      	ldrb	r3, [r3, #0]
     d8e:	220f      	movs	r2, #15
     d90:	4013      	ands	r3, r2
     d92:	683a      	ldr	r2, [r7, #0]
     d94:	7b12      	ldrb	r2, [r2, #12]
     d96:	189b      	adds	r3, r3, r2
     d98:	0018      	movs	r0, r3
     d9a:	4bb5      	ldr	r3, [pc, #724]	; (1070 <_adc_set_config+0x370>)
     d9c:	4798      	blx	r3
			start_pin++;
     d9e:	2315      	movs	r3, #21
     da0:	18fb      	adds	r3, r7, r3
     da2:	781a      	ldrb	r2, [r3, #0]
     da4:	2315      	movs	r3, #21
     da6:	18fb      	adds	r3, r7, r3
     da8:	3201      	adds	r2, #1
     daa:	701a      	strb	r2, [r3, #0]
			offset++;
     dac:	2316      	movs	r3, #22
     dae:	18fb      	adds	r3, r7, r3
     db0:	781a      	ldrb	r2, [r3, #0]
     db2:	2316      	movs	r3, #22
     db4:	18fb      	adds	r3, r7, r3
     db6:	3201      	adds	r2, #1
     db8:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
     dba:	2315      	movs	r3, #21
     dbc:	18fa      	adds	r2, r7, r3
     dbe:	230f      	movs	r3, #15
     dc0:	18fb      	adds	r3, r7, r3
     dc2:	7812      	ldrb	r2, [r2, #0]
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	429a      	cmp	r2, r3
     dc8:	d3de      	bcc.n	d88 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
     dca:	683b      	ldr	r3, [r7, #0]
     dcc:	89db      	ldrh	r3, [r3, #14]
     dce:	0018      	movs	r0, r3
     dd0:	4ba7      	ldr	r3, [pc, #668]	; (1070 <_adc_set_config+0x370>)
     dd2:	4798      	blx	r3
     dd4:	e009      	b.n	dea <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     dd6:	683b      	ldr	r3, [r7, #0]
     dd8:	7b1b      	ldrb	r3, [r3, #12]
     dda:	0018      	movs	r0, r3
     ddc:	4ba4      	ldr	r3, [pc, #656]	; (1070 <_adc_set_config+0x370>)
     dde:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     de0:	683b      	ldr	r3, [r7, #0]
     de2:	89db      	ldrh	r3, [r3, #14]
     de4:	0018      	movs	r0, r3
     de6:	4ba2      	ldr	r3, [pc, #648]	; (1070 <_adc_set_config+0x370>)
     de8:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     dea:	683b      	ldr	r3, [r7, #0]
     dec:	7d5b      	ldrb	r3, [r3, #21]
     dee:	009b      	lsls	r3, r3, #2
     df0:	b2da      	uxtb	r2, r3
     df2:	693b      	ldr	r3, [r7, #16]
     df4:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     df6:	683b      	ldr	r3, [r7, #0]
     df8:	7d9b      	ldrb	r3, [r3, #22]
     dfa:	01db      	lsls	r3, r3, #7
     dfc:	b25a      	sxtb	r2, r3
			(config->reference);
     dfe:	683b      	ldr	r3, [r7, #0]
     e00:	785b      	ldrb	r3, [r3, #1]
     e02:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     e04:	4313      	orrs	r3, r2
     e06:	b25b      	sxtb	r3, r3
     e08:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     e0a:	693b      	ldr	r3, [r7, #16]
     e0c:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     e0e:	683b      	ldr	r3, [r7, #0]
     e10:	791b      	ldrb	r3, [r3, #4]
     e12:	2b34      	cmp	r3, #52	; 0x34
     e14:	d846      	bhi.n	ea4 <_adc_set_config+0x1a4>
     e16:	009a      	lsls	r2, r3, #2
     e18:	4b96      	ldr	r3, [pc, #600]	; (1074 <_adc_set_config+0x374>)
     e1a:	18d3      	adds	r3, r2, r3
     e1c:	681b      	ldr	r3, [r3, #0]
     e1e:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     e20:	231f      	movs	r3, #31
     e22:	18fb      	adds	r3, r7, r3
     e24:	683a      	ldr	r2, [r7, #0]
     e26:	7c52      	ldrb	r2, [r2, #17]
     e28:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     e2a:	2317      	movs	r3, #23
     e2c:	18fb      	adds	r3, r7, r3
     e2e:	683a      	ldr	r2, [r7, #0]
     e30:	7c12      	ldrb	r2, [r2, #16]
     e32:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e34:	2310      	movs	r3, #16
     e36:	61bb      	str	r3, [r7, #24]
		break;
     e38:	e036      	b.n	ea8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e3a:	231f      	movs	r3, #31
     e3c:	18fb      	adds	r3, r7, r3
     e3e:	2201      	movs	r2, #1
     e40:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     e42:	2317      	movs	r3, #23
     e44:	18fb      	adds	r3, r7, r3
     e46:	2202      	movs	r2, #2
     e48:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e4a:	2310      	movs	r3, #16
     e4c:	61bb      	str	r3, [r7, #24]
		break;
     e4e:	e02b      	b.n	ea8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     e50:	231f      	movs	r3, #31
     e52:	18fb      	adds	r3, r7, r3
     e54:	2202      	movs	r2, #2
     e56:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     e58:	2317      	movs	r3, #23
     e5a:	18fb      	adds	r3, r7, r3
     e5c:	2204      	movs	r2, #4
     e5e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e60:	2310      	movs	r3, #16
     e62:	61bb      	str	r3, [r7, #24]
		break;
     e64:	e020      	b.n	ea8 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e66:	231f      	movs	r3, #31
     e68:	18fb      	adds	r3, r7, r3
     e6a:	2201      	movs	r2, #1
     e6c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     e6e:	2317      	movs	r3, #23
     e70:	18fb      	adds	r3, r7, r3
     e72:	2206      	movs	r2, #6
     e74:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e76:	2310      	movs	r3, #16
     e78:	61bb      	str	r3, [r7, #24]
		break;
     e7a:	e015      	b.n	ea8 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     e7c:	231f      	movs	r3, #31
     e7e:	18fb      	adds	r3, r7, r3
     e80:	2200      	movs	r2, #0
     e82:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     e84:	2317      	movs	r3, #23
     e86:	18fb      	adds	r3, r7, r3
     e88:	2208      	movs	r2, #8
     e8a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e8c:	2310      	movs	r3, #16
     e8e:	61bb      	str	r3, [r7, #24]
		break;
     e90:	e00a      	b.n	ea8 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     e92:	2330      	movs	r3, #48	; 0x30
     e94:	61bb      	str	r3, [r7, #24]
		break;
     e96:	e007      	b.n	ea8 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     e98:	2320      	movs	r3, #32
     e9a:	61bb      	str	r3, [r7, #24]
		break;
     e9c:	e004      	b.n	ea8 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     e9e:	2300      	movs	r3, #0
     ea0:	61bb      	str	r3, [r7, #24]
		break;
     ea2:	e001      	b.n	ea8 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     ea4:	2317      	movs	r3, #23
     ea6:	e1ae      	b.n	1206 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     ea8:	231f      	movs	r3, #31
     eaa:	18fb      	adds	r3, r7, r3
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	011b      	lsls	r3, r3, #4
     eb0:	b2db      	uxtb	r3, r3
     eb2:	2270      	movs	r2, #112	; 0x70
     eb4:	4013      	ands	r3, r2
     eb6:	b2da      	uxtb	r2, r3
     eb8:	2317      	movs	r3, #23
     eba:	18fb      	adds	r3, r7, r3
     ebc:	781b      	ldrb	r3, [r3, #0]
     ebe:	4313      	orrs	r3, r2
     ec0:	b2da      	uxtb	r2, r3
     ec2:	693b      	ldr	r3, [r7, #16]
     ec4:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     ec6:	683b      	ldr	r3, [r7, #0]
     ec8:	7ddb      	ldrb	r3, [r3, #23]
     eca:	2b3f      	cmp	r3, #63	; 0x3f
     ecc:	d901      	bls.n	ed2 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     ece:	2317      	movs	r3, #23
     ed0:	e199      	b.n	1206 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     ed2:	683b      	ldr	r3, [r7, #0]
     ed4:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
     ed6:	693b      	ldr	r3, [r7, #16]
     ed8:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	687b      	ldr	r3, [r7, #4]
     ede:	0018      	movs	r0, r3
     ee0:	4b65      	ldr	r3, [pc, #404]	; (1078 <_adc_set_config+0x378>)
     ee2:	4798      	blx	r3
     ee4:	1e03      	subs	r3, r0, #0
     ee6:	d1f9      	bne.n	edc <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     ee8:	683b      	ldr	r3, [r7, #0]
     eea:	885a      	ldrh	r2, [r3, #2]
     eec:	69bb      	ldr	r3, [r7, #24]
     eee:	b29b      	uxth	r3, r3
     ef0:	4313      	orrs	r3, r2
     ef2:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     ef4:	683b      	ldr	r3, [r7, #0]
     ef6:	2124      	movs	r1, #36	; 0x24
     ef8:	5c5b      	ldrb	r3, [r3, r1]
     efa:	b29b      	uxth	r3, r3
     efc:	00db      	lsls	r3, r3, #3
     efe:	b29b      	uxth	r3, r3
			resolution |
     f00:	4313      	orrs	r3, r2
     f02:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     f04:	683b      	ldr	r3, [r7, #0]
     f06:	7d1b      	ldrb	r3, [r3, #20]
     f08:	b29b      	uxth	r3, r3
     f0a:	009b      	lsls	r3, r3, #2
     f0c:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     f0e:	4313      	orrs	r3, r2
     f10:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     f12:	683b      	ldr	r3, [r7, #0]
     f14:	7c9b      	ldrb	r3, [r3, #18]
     f16:	b29b      	uxth	r3, r3
     f18:	18db      	adds	r3, r3, r3
     f1a:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     f1c:	4313      	orrs	r3, r2
     f1e:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     f20:	683b      	ldr	r3, [r7, #0]
     f22:	7cdb      	ldrb	r3, [r3, #19]
     f24:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     f26:	4313      	orrs	r3, r2
     f28:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
     f2a:	693b      	ldr	r3, [r7, #16]
     f2c:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     f2e:	683b      	ldr	r3, [r7, #0]
     f30:	7e1b      	ldrb	r3, [r3, #24]
     f32:	2b00      	cmp	r3, #0
     f34:	d100      	bne.n	f38 <_adc_set_config+0x238>
     f36:	e0c4      	b.n	10c2 <_adc_set_config+0x3c2>
		switch (resolution) {
     f38:	69bb      	ldr	r3, [r7, #24]
     f3a:	2b10      	cmp	r3, #16
     f3c:	d100      	bne.n	f40 <_adc_set_config+0x240>
     f3e:	e076      	b.n	102e <_adc_set_config+0x32e>
     f40:	d802      	bhi.n	f48 <_adc_set_config+0x248>
     f42:	2b00      	cmp	r3, #0
     f44:	d04d      	beq.n	fe2 <_adc_set_config+0x2e2>
     f46:	e0bc      	b.n	10c2 <_adc_set_config+0x3c2>
     f48:	2b20      	cmp	r3, #32
     f4a:	d023      	beq.n	f94 <_adc_set_config+0x294>
     f4c:	2b30      	cmp	r3, #48	; 0x30
     f4e:	d000      	beq.n	f52 <_adc_set_config+0x252>
     f50:	e0b7      	b.n	10c2 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     f52:	683b      	ldr	r3, [r7, #0]
     f54:	7cdb      	ldrb	r3, [r3, #19]
     f56:	2b00      	cmp	r3, #0
     f58:	d011      	beq.n	f7e <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     f5a:	683b      	ldr	r3, [r7, #0]
     f5c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     f5e:	2b7f      	cmp	r3, #127	; 0x7f
     f60:	dc0b      	bgt.n	f7a <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
     f62:	683b      	ldr	r3, [r7, #0]
     f64:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     f66:	3380      	adds	r3, #128	; 0x80
     f68:	db07      	blt.n	f7a <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
     f6a:	683b      	ldr	r3, [r7, #0]
     f6c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     f6e:	2b7f      	cmp	r3, #127	; 0x7f
     f70:	dc03      	bgt.n	f7a <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
     f72:	683b      	ldr	r3, [r7, #0]
     f74:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     f76:	3380      	adds	r3, #128	; 0x80
     f78:	da01      	bge.n	f7e <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f7a:	2317      	movs	r3, #23
     f7c:	e143      	b.n	1206 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     f7e:	683b      	ldr	r3, [r7, #0]
     f80:	69db      	ldr	r3, [r3, #28]
     f82:	2bff      	cmp	r3, #255	; 0xff
     f84:	dc04      	bgt.n	f90 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     f86:	683b      	ldr	r3, [r7, #0]
     f88:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     f8a:	2bff      	cmp	r3, #255	; 0xff
     f8c:	dc00      	bgt.n	f90 <_adc_set_config+0x290>
     f8e:	e091      	b.n	10b4 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f90:	2317      	movs	r3, #23
     f92:	e138      	b.n	1206 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     f94:	683b      	ldr	r3, [r7, #0]
     f96:	7cdb      	ldrb	r3, [r3, #19]
     f98:	2b00      	cmp	r3, #0
     f9a:	d015      	beq.n	fc8 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     f9c:	683b      	ldr	r3, [r7, #0]
     f9e:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     fa0:	4a36      	ldr	r2, [pc, #216]	; (107c <_adc_set_config+0x37c>)
     fa2:	4293      	cmp	r3, r2
     fa4:	dc0e      	bgt.n	fc4 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
     fa6:	683b      	ldr	r3, [r7, #0]
     fa8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     faa:	4a35      	ldr	r2, [pc, #212]	; (1080 <_adc_set_config+0x380>)
     fac:	4293      	cmp	r3, r2
     fae:	db09      	blt.n	fc4 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
     fb0:	683b      	ldr	r3, [r7, #0]
     fb2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     fb4:	4a31      	ldr	r2, [pc, #196]	; (107c <_adc_set_config+0x37c>)
     fb6:	4293      	cmp	r3, r2
     fb8:	dc04      	bgt.n	fc4 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
     fba:	683b      	ldr	r3, [r7, #0]
     fbc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     fbe:	4a30      	ldr	r2, [pc, #192]	; (1080 <_adc_set_config+0x380>)
     fc0:	4293      	cmp	r3, r2
     fc2:	da01      	bge.n	fc8 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     fc4:	2317      	movs	r3, #23
     fc6:	e11e      	b.n	1206 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     fc8:	683b      	ldr	r3, [r7, #0]
     fca:	69db      	ldr	r3, [r3, #28]
     fcc:	4a2d      	ldr	r2, [pc, #180]	; (1084 <_adc_set_config+0x384>)
     fce:	4293      	cmp	r3, r2
     fd0:	dc05      	bgt.n	fde <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     fd6:	4a2b      	ldr	r2, [pc, #172]	; (1084 <_adc_set_config+0x384>)
     fd8:	4293      	cmp	r3, r2
     fda:	dc00      	bgt.n	fde <_adc_set_config+0x2de>
     fdc:	e06c      	b.n	10b8 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     fde:	2317      	movs	r3, #23
     fe0:	e111      	b.n	1206 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     fe2:	683b      	ldr	r3, [r7, #0]
     fe4:	7cdb      	ldrb	r3, [r3, #19]
     fe6:	2b00      	cmp	r3, #0
     fe8:	d015      	beq.n	1016 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     fea:	683b      	ldr	r3, [r7, #0]
     fec:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     fee:	4a26      	ldr	r2, [pc, #152]	; (1088 <_adc_set_config+0x388>)
     ff0:	4293      	cmp	r3, r2
     ff2:	dc0e      	bgt.n	1012 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
     ff4:	683b      	ldr	r3, [r7, #0]
     ff6:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     ff8:	4a24      	ldr	r2, [pc, #144]	; (108c <_adc_set_config+0x38c>)
     ffa:	4293      	cmp	r3, r2
     ffc:	db09      	blt.n	1012 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
     ffe:	683b      	ldr	r3, [r7, #0]
    1000:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    1002:	4a21      	ldr	r2, [pc, #132]	; (1088 <_adc_set_config+0x388>)
    1004:	4293      	cmp	r3, r2
    1006:	dc04      	bgt.n	1012 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    1008:	683b      	ldr	r3, [r7, #0]
    100a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    100c:	4a1f      	ldr	r2, [pc, #124]	; (108c <_adc_set_config+0x38c>)
    100e:	4293      	cmp	r3, r2
    1010:	da01      	bge.n	1016 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1012:	2317      	movs	r3, #23
    1014:	e0f7      	b.n	1206 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    1016:	683b      	ldr	r3, [r7, #0]
    1018:	69db      	ldr	r3, [r3, #28]
    101a:	4a1d      	ldr	r2, [pc, #116]	; (1090 <_adc_set_config+0x390>)
    101c:	4293      	cmp	r3, r2
    101e:	dc04      	bgt.n	102a <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    1020:	683b      	ldr	r3, [r7, #0]
    1022:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    1024:	4a1a      	ldr	r2, [pc, #104]	; (1090 <_adc_set_config+0x390>)
    1026:	4293      	cmp	r3, r2
    1028:	dd48      	ble.n	10bc <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    102a:	2317      	movs	r3, #23
    102c:	e0eb      	b.n	1206 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    102e:	683b      	ldr	r3, [r7, #0]
    1030:	7cdb      	ldrb	r3, [r3, #19]
    1032:	2b00      	cmp	r3, #0
    1034:	d032      	beq.n	109c <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    1036:	683b      	ldr	r3, [r7, #0]
    1038:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    103a:	4a16      	ldr	r2, [pc, #88]	; (1094 <_adc_set_config+0x394>)
    103c:	4293      	cmp	r3, r2
    103e:	dc0e      	bgt.n	105e <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    1040:	683b      	ldr	r3, [r7, #0]
    1042:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    1044:	4a14      	ldr	r2, [pc, #80]	; (1098 <_adc_set_config+0x398>)
    1046:	4293      	cmp	r3, r2
    1048:	db09      	blt.n	105e <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    104a:	683b      	ldr	r3, [r7, #0]
    104c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    104e:	4a11      	ldr	r2, [pc, #68]	; (1094 <_adc_set_config+0x394>)
    1050:	4293      	cmp	r3, r2
    1052:	dc04      	bgt.n	105e <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    1054:	683b      	ldr	r3, [r7, #0]
    1056:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    1058:	4a0f      	ldr	r2, [pc, #60]	; (1098 <_adc_set_config+0x398>)
    105a:	4293      	cmp	r3, r2
    105c:	da1e      	bge.n	109c <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    105e:	2317      	movs	r3, #23
    1060:	e0d1      	b.n	1206 <_adc_set_config+0x506>
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	00000ad9 	.word	0x00000ad9
    1068:	00001ce1 	.word	0x00001ce1
    106c:	00001d25 	.word	0x00001d25
    1070:	00000c89 	.word	0x00000c89
    1074:	000027f0 	.word	0x000027f0
    1078:	00000bb5 	.word	0x00000bb5
    107c:	000001ff 	.word	0x000001ff
    1080:	fffffe00 	.word	0xfffffe00
    1084:	000003ff 	.word	0x000003ff
    1088:	000007ff 	.word	0x000007ff
    108c:	fffff800 	.word	0xfffff800
    1090:	00000fff 	.word	0x00000fff
    1094:	00007fff 	.word	0x00007fff
    1098:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    109c:	683b      	ldr	r3, [r7, #0]
    109e:	69db      	ldr	r3, [r3, #28]
    10a0:	4a5b      	ldr	r2, [pc, #364]	; (1210 <_adc_set_config+0x510>)
    10a2:	4293      	cmp	r3, r2
    10a4:	dc04      	bgt.n	10b0 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    10aa:	4a59      	ldr	r2, [pc, #356]	; (1210 <_adc_set_config+0x510>)
    10ac:	4293      	cmp	r3, r2
    10ae:	dd07      	ble.n	10c0 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    10b0:	2317      	movs	r3, #23
    10b2:	e0a8      	b.n	1206 <_adc_set_config+0x506>
			break;
    10b4:	46c0      	nop			; (mov r8, r8)
    10b6:	e004      	b.n	10c2 <_adc_set_config+0x3c2>
			break;
    10b8:	46c0      	nop			; (mov r8, r8)
    10ba:	e002      	b.n	10c2 <_adc_set_config+0x3c2>
			break;
    10bc:	46c0      	nop			; (mov r8, r8)
    10be:	e000      	b.n	10c2 <_adc_set_config+0x3c2>
			}
			break;
    10c0:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	687b      	ldr	r3, [r7, #4]
    10c6:	0018      	movs	r0, r3
    10c8:	4b52      	ldr	r3, [pc, #328]	; (1214 <_adc_set_config+0x514>)
    10ca:	4798      	blx	r3
    10cc:	1e03      	subs	r3, r0, #0
    10ce:	d1f9      	bne.n	10c4 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    10d0:	683b      	ldr	r3, [r7, #0]
    10d2:	7e1a      	ldrb	r2, [r3, #24]
    10d4:	693b      	ldr	r3, [r7, #16]
    10d6:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    10d8:	46c0      	nop			; (mov r8, r8)
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	0018      	movs	r0, r3
    10de:	4b4d      	ldr	r3, [pc, #308]	; (1214 <_adc_set_config+0x514>)
    10e0:	4798      	blx	r3
    10e2:	1e03      	subs	r3, r0, #0
    10e4:	d1f9      	bne.n	10da <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    10e6:	683b      	ldr	r3, [r7, #0]
    10e8:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    10ea:	b29a      	uxth	r2, r3
    10ec:	693b      	ldr	r3, [r7, #16]
    10ee:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    10f0:	46c0      	nop			; (mov r8, r8)
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	0018      	movs	r0, r3
    10f6:	4b47      	ldr	r3, [pc, #284]	; (1214 <_adc_set_config+0x514>)
    10f8:	4798      	blx	r3
    10fa:	1e03      	subs	r3, r0, #0
    10fc:	d1f9      	bne.n	10f2 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    10fe:	683b      	ldr	r3, [r7, #0]
    1100:	6a1b      	ldr	r3, [r3, #32]
    1102:	b29a      	uxth	r2, r3
    1104:	693b      	ldr	r3, [r7, #16]
    1106:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1108:	2314      	movs	r3, #20
    110a:	18fb      	adds	r3, r7, r3
    110c:	683a      	ldr	r2, [r7, #0]
    110e:	212c      	movs	r1, #44	; 0x2c
    1110:	5c52      	ldrb	r2, [r2, r1]
    1112:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    1114:	2314      	movs	r3, #20
    1116:	18fb      	adds	r3, r7, r3
    1118:	781b      	ldrb	r3, [r3, #0]
    111a:	2b00      	cmp	r3, #0
    111c:	d006      	beq.n	112c <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    111e:	2314      	movs	r3, #20
    1120:	18fb      	adds	r3, r7, r3
    1122:	781a      	ldrb	r2, [r3, #0]
    1124:	2314      	movs	r3, #20
    1126:	18fb      	adds	r3, r7, r3
    1128:	3a01      	subs	r2, #1
    112a:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    112c:	2314      	movs	r3, #20
    112e:	18fb      	adds	r3, r7, r3
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	2b0f      	cmp	r3, #15
    1134:	d804      	bhi.n	1140 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1136:	683b      	ldr	r3, [r7, #0]
    1138:	222b      	movs	r2, #43	; 0x2b
    113a:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    113c:	2b0f      	cmp	r3, #15
    113e:	d901      	bls.n	1144 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    1140:	2317      	movs	r3, #23
    1142:	e060      	b.n	1206 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    1144:	46c0      	nop			; (mov r8, r8)
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	0018      	movs	r0, r3
    114a:	4b32      	ldr	r3, [pc, #200]	; (1214 <_adc_set_config+0x514>)
    114c:	4798      	blx	r3
    114e:	1e03      	subs	r3, r0, #0
    1150:	d1f9      	bne.n	1146 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    1152:	683b      	ldr	r3, [r7, #0]
    1154:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    1156:	683a      	ldr	r2, [r7, #0]
    1158:	212b      	movs	r1, #43	; 0x2b
    115a:	5c52      	ldrb	r2, [r2, r1]
    115c:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    115e:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1160:	2214      	movs	r2, #20
    1162:	18ba      	adds	r2, r7, r2
    1164:	7812      	ldrb	r2, [r2, #0]
    1166:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    1168:	4313      	orrs	r3, r2
			config->negative_input |
    116a:	683a      	ldr	r2, [r7, #0]
    116c:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    116e:	4313      	orrs	r3, r2
			config->positive_input;
    1170:	683a      	ldr	r2, [r7, #0]
    1172:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    1174:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    1176:	693b      	ldr	r3, [r7, #16]
    1178:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    117a:	683b      	ldr	r3, [r7, #0]
    117c:	222a      	movs	r2, #42	; 0x2a
    117e:	5c9a      	ldrb	r2, [r3, r2]
    1180:	693b      	ldr	r3, [r7, #16]
    1182:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    1184:	693b      	ldr	r3, [r7, #16]
    1186:	220f      	movs	r2, #15
    1188:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	2224      	movs	r2, #36	; 0x24
    118e:	5c9b      	ldrb	r3, [r3, r2]
    1190:	2b00      	cmp	r3, #0
    1192:	d01e      	beq.n	11d2 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    1198:	4a1f      	ldr	r2, [pc, #124]	; (1218 <_adc_set_config+0x518>)
    119a:	4293      	cmp	r3, r2
    119c:	d901      	bls.n	11a2 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    119e:	2317      	movs	r3, #23
    11a0:	e031      	b.n	1206 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    11a2:	683b      	ldr	r3, [r7, #0]
    11a4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    11a6:	693b      	ldr	r3, [r7, #16]
    11a8:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	2228      	movs	r2, #40	; 0x28
    11ae:	5e9b      	ldrsh	r3, [r3, r2]
    11b0:	4a1a      	ldr	r2, [pc, #104]	; (121c <_adc_set_config+0x51c>)
    11b2:	4293      	cmp	r3, r2
    11b4:	dc05      	bgt.n	11c2 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    11b6:	683b      	ldr	r3, [r7, #0]
    11b8:	2228      	movs	r2, #40	; 0x28
    11ba:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    11bc:	4a18      	ldr	r2, [pc, #96]	; (1220 <_adc_set_config+0x520>)
    11be:	4293      	cmp	r3, r2
    11c0:	da01      	bge.n	11c6 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    11c2:	2317      	movs	r3, #23
    11c4:	e01f      	b.n	1206 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    11c6:	683b      	ldr	r3, [r7, #0]
    11c8:	2228      	movs	r2, #40	; 0x28
    11ca:	5e9b      	ldrsh	r3, [r3, r2]
    11cc:	b29a      	uxth	r2, r3
    11ce:	693b      	ldr	r3, [r7, #16]
    11d0:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    11d2:	4b14      	ldr	r3, [pc, #80]	; (1224 <_adc_set_config+0x524>)
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	08db      	lsrs	r3, r3, #3
    11d8:	b29b      	uxth	r3, r3
    11da:	021b      	lsls	r3, r3, #8
    11dc:	b29a      	uxth	r2, r3
    11de:	23e0      	movs	r3, #224	; 0xe0
    11e0:	00db      	lsls	r3, r3, #3
    11e2:	4013      	ands	r3, r2
    11e4:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    11e6:	4b10      	ldr	r3, [pc, #64]	; (1228 <_adc_set_config+0x528>)
    11e8:	685c      	ldr	r4, [r3, #4]
    11ea:	681b      	ldr	r3, [r3, #0]
    11ec:	0161      	lsls	r1, r4, #5
    11ee:	0edd      	lsrs	r5, r3, #27
    11f0:	430d      	orrs	r5, r1
    11f2:	0ee6      	lsrs	r6, r4, #27
    11f4:	b2ab      	uxth	r3, r5
    11f6:	21ff      	movs	r1, #255	; 0xff
    11f8:	400b      	ands	r3, r1
    11fa:	b29b      	uxth	r3, r3
			) |
    11fc:	4313      	orrs	r3, r2
    11fe:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    1200:	693b      	ldr	r3, [r7, #16]
    1202:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    1204:	2300      	movs	r3, #0
}
    1206:	0018      	movs	r0, r3
    1208:	46bd      	mov	sp, r7
    120a:	b009      	add	sp, #36	; 0x24
    120c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	0000ffff 	.word	0x0000ffff
    1214:	00000bb5 	.word	0x00000bb5
    1218:	00000fff 	.word	0x00000fff
    121c:	000007ff 	.word	0x000007ff
    1220:	fffff800 	.word	0xfffff800
    1224:	00806024 	.word	0x00806024
    1228:	00806020 	.word	0x00806020

0000122c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    122c:	b580      	push	{r7, lr}
    122e:	b086      	sub	sp, #24
    1230:	af00      	add	r7, sp, #0
    1232:	60f8      	str	r0, [r7, #12]
    1234:	60b9      	str	r1, [r7, #8]
    1236:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1238:	68fb      	ldr	r3, [r7, #12]
    123a:	68ba      	ldr	r2, [r7, #8]
    123c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    123e:	2380      	movs	r3, #128	; 0x80
    1240:	025b      	lsls	r3, r3, #9
    1242:	0019      	movs	r1, r3
    1244:	2002      	movs	r0, #2
    1246:	4b32      	ldr	r3, [pc, #200]	; (1310 <adc_init+0xe4>)
    1248:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    124a:	68bb      	ldr	r3, [r7, #8]
    124c:	781b      	ldrb	r3, [r3, #0]
    124e:	b2db      	uxtb	r3, r3
    1250:	001a      	movs	r2, r3
    1252:	2301      	movs	r3, #1
    1254:	4013      	ands	r3, r2
    1256:	d001      	beq.n	125c <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1258:	2305      	movs	r3, #5
    125a:	e055      	b.n	1308 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    125c:	68bb      	ldr	r3, [r7, #8]
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	b2db      	uxtb	r3, r3
    1262:	001a      	movs	r2, r3
    1264:	2302      	movs	r3, #2
    1266:	4013      	ands	r3, r2
    1268:	d001      	beq.n	126e <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    126a:	231c      	movs	r3, #28
    126c:	e04c      	b.n	1308 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    126e:	687b      	ldr	r3, [r7, #4]
    1270:	785a      	ldrb	r2, [r3, #1]
    1272:	68fb      	ldr	r3, [r7, #12]
    1274:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1276:	68fb      	ldr	r3, [r7, #12]
    1278:	791b      	ldrb	r3, [r3, #4]
    127a:	2b00      	cmp	r3, #0
    127c:	d102      	bne.n	1284 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    127e:	2001      	movs	r0, #1
    1280:	4b24      	ldr	r3, [pc, #144]	; (1314 <adc_init+0xe8>)
    1282:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    1284:	2317      	movs	r3, #23
    1286:	18fb      	adds	r3, r7, r3
    1288:	2200      	movs	r2, #0
    128a:	701a      	strb	r2, [r3, #0]
    128c:	e00e      	b.n	12ac <adc_init+0x80>
		module_inst->callback[i] = NULL;
    128e:	2317      	movs	r3, #23
    1290:	18fb      	adds	r3, r7, r3
    1292:	781a      	ldrb	r2, [r3, #0]
    1294:	68fb      	ldr	r3, [r7, #12]
    1296:	3202      	adds	r2, #2
    1298:	0092      	lsls	r2, r2, #2
    129a:	2100      	movs	r1, #0
    129c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    129e:	2317      	movs	r3, #23
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	781a      	ldrb	r2, [r3, #0]
    12a4:	2317      	movs	r3, #23
    12a6:	18fb      	adds	r3, r7, r3
    12a8:	3201      	adds	r2, #1
    12aa:	701a      	strb	r2, [r3, #0]
    12ac:	2317      	movs	r3, #23
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	781b      	ldrb	r3, [r3, #0]
    12b2:	2b02      	cmp	r3, #2
    12b4:	d9eb      	bls.n	128e <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	2200      	movs	r2, #0
    12ba:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	2200      	movs	r2, #0
    12c0:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	2200      	movs	r2, #0
    12c6:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	2200      	movs	r2, #0
    12cc:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    12ce:	4b12      	ldr	r3, [pc, #72]	; (1318 <adc_init+0xec>)
    12d0:	68fa      	ldr	r2, [r7, #12]
    12d2:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	222a      	movs	r2, #42	; 0x2a
    12d8:	5c9b      	ldrb	r3, [r3, r2]
    12da:	2b00      	cmp	r3, #0
    12dc:	d10a      	bne.n	12f4 <adc_init+0xc8>
			!config->freerunning) {
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	7d1b      	ldrb	r3, [r3, #20]
    12e2:	2201      	movs	r2, #1
    12e4:	4053      	eors	r3, r2
    12e6:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    12e8:	2b00      	cmp	r3, #0
    12ea:	d003      	beq.n	12f4 <adc_init+0xc8>
		module_inst->software_trigger = true;
    12ec:	68fb      	ldr	r3, [r7, #12]
    12ee:	2201      	movs	r2, #1
    12f0:	775a      	strb	r2, [r3, #29]
    12f2:	e002      	b.n	12fa <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    12f4:	68fb      	ldr	r3, [r7, #12]
    12f6:	2200      	movs	r2, #0
    12f8:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    12fa:	687a      	ldr	r2, [r7, #4]
    12fc:	68fb      	ldr	r3, [r7, #12]
    12fe:	0011      	movs	r1, r2
    1300:	0018      	movs	r0, r3
    1302:	4b06      	ldr	r3, [pc, #24]	; (131c <adc_init+0xf0>)
    1304:	4798      	blx	r3
    1306:	0003      	movs	r3, r0
}
    1308:	0018      	movs	r0, r3
    130a:	46bd      	mov	sp, r7
    130c:	b006      	add	sp, #24
    130e:	bd80      	pop	{r7, pc}
    1310:	00000af1 	.word	0x00000af1
    1314:	00000b75 	.word	0x00000b75
    1318:	20000088 	.word	0x20000088
    131c:	00000d01 	.word	0x00000d01

00001320 <adc_is_syncing>:
{
    1320:	b580      	push	{r7, lr}
    1322:	b084      	sub	sp, #16
    1324:	af00      	add	r7, sp, #0
    1326:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	681b      	ldr	r3, [r3, #0]
    132c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	7e5b      	ldrb	r3, [r3, #25]
    1332:	b2db      	uxtb	r3, r3
    1334:	b25b      	sxtb	r3, r3
    1336:	2b00      	cmp	r3, #0
    1338:	da01      	bge.n	133e <adc_is_syncing+0x1e>
		return true;
    133a:	2301      	movs	r3, #1
    133c:	e000      	b.n	1340 <adc_is_syncing+0x20>
	return false;
    133e:	2300      	movs	r3, #0
}
    1340:	0018      	movs	r0, r3
    1342:	46bd      	mov	sp, r7
    1344:	b004      	add	sp, #16
    1346:	bd80      	pop	{r7, pc}

00001348 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    1348:	b580      	push	{r7, lr}
    134a:	b084      	sub	sp, #16
    134c:	af00      	add	r7, sp, #0
    134e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1350:	687b      	ldr	r3, [r7, #4]
    1352:	681b      	ldr	r3, [r3, #0]
    1354:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	0018      	movs	r0, r3
    135c:	4b0b      	ldr	r3, [pc, #44]	; (138c <adc_start_conversion+0x44>)
    135e:	4798      	blx	r3
    1360:	1e03      	subs	r3, r0, #0
    1362:	d1f9      	bne.n	1358 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1364:	68fb      	ldr	r3, [r7, #12]
    1366:	7b1b      	ldrb	r3, [r3, #12]
    1368:	b2db      	uxtb	r3, r3
    136a:	2202      	movs	r2, #2
    136c:	4313      	orrs	r3, r2
    136e:	b2da      	uxtb	r2, r3
    1370:	68fb      	ldr	r3, [r7, #12]
    1372:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    1374:	46c0      	nop			; (mov r8, r8)
    1376:	687b      	ldr	r3, [r7, #4]
    1378:	0018      	movs	r0, r3
    137a:	4b04      	ldr	r3, [pc, #16]	; (138c <adc_start_conversion+0x44>)
    137c:	4798      	blx	r3
    137e:	1e03      	subs	r3, r0, #0
    1380:	d1f9      	bne.n	1376 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	46bd      	mov	sp, r7
    1386:	b004      	add	sp, #16
    1388:	bd80      	pop	{r7, pc}
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	00001321 	.word	0x00001321

00001390 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    1390:	b580      	push	{r7, lr}
    1392:	b084      	sub	sp, #16
    1394:	af00      	add	r7, sp, #0
    1396:	6078      	str	r0, [r7, #4]
    1398:	000a      	movs	r2, r1
    139a:	1cfb      	adds	r3, r7, #3
    139c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	681b      	ldr	r3, [r3, #0]
    13a2:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    13a4:	68fb      	ldr	r3, [r7, #12]
    13a6:	1cfa      	adds	r2, r7, #3
    13a8:	7812      	ldrb	r2, [r2, #0]
    13aa:	75da      	strb	r2, [r3, #23]
}
    13ac:	46c0      	nop			; (mov r8, r8)
    13ae:	46bd      	mov	sp, r7
    13b0:	b004      	add	sp, #16
    13b2:	bd80      	pop	{r7, pc}

000013b4 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	b084      	sub	sp, #16
    13b8:	af00      	add	r7, sp, #0
    13ba:	6078      	str	r0, [r7, #4]
    13bc:	000a      	movs	r2, r1
    13be:	1cfb      	adds	r3, r7, #3
    13c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	681b      	ldr	r3, [r3, #0]
    13c6:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	1cfa      	adds	r2, r7, #3
    13cc:	7812      	ldrb	r2, [r2, #0]
    13ce:	759a      	strb	r2, [r3, #22]
}
    13d0:	46c0      	nop			; (mov r8, r8)
    13d2:	46bd      	mov	sp, r7
    13d4:	b004      	add	sp, #16
    13d6:	bd80      	pop	{r7, pc}

000013d8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    13d8:	b580      	push	{r7, lr}
    13da:	b084      	sub	sp, #16
    13dc:	af00      	add	r7, sp, #0
    13de:	0002      	movs	r2, r0
    13e0:	1dfb      	adds	r3, r7, #7
    13e2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    13e4:	1dfb      	adds	r3, r7, #7
    13e6:	781a      	ldrb	r2, [r3, #0]
    13e8:	4b3f      	ldr	r3, [pc, #252]	; (14e8 <_adc_interrupt_handler+0x110>)
    13ea:	0092      	lsls	r2, r2, #2
    13ec:	58d3      	ldr	r3, [r2, r3]
    13ee:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    13f0:	68fb      	ldr	r3, [r7, #12]
    13f2:	681b      	ldr	r3, [r3, #0]
    13f4:	7e1b      	ldrb	r3, [r3, #24]
    13f6:	b2db      	uxtb	r3, r3
    13f8:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    13fa:	68bb      	ldr	r3, [r7, #8]
    13fc:	2201      	movs	r2, #1
    13fe:	4013      	ands	r3, r2
    1400:	d03c      	beq.n	147c <_adc_interrupt_handler+0xa4>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	7edb      	ldrb	r3, [r3, #27]
    1406:	001a      	movs	r2, r3
    1408:	2301      	movs	r3, #1
    140a:	4013      	ands	r3, r2
    140c:	d036      	beq.n	147c <_adc_interrupt_handler+0xa4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	7e9b      	ldrb	r3, [r3, #26]
    1412:	001a      	movs	r2, r3
    1414:	2301      	movs	r3, #1
    1416:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1418:	d030      	beq.n	147c <_adc_interrupt_handler+0xa4>
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	681b      	ldr	r3, [r3, #0]
    141e:	2201      	movs	r2, #1
    1420:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	68fb      	ldr	r3, [r7, #12]
    1426:	0018      	movs	r0, r3
    1428:	4b30      	ldr	r3, [pc, #192]	; (14ec <_adc_interrupt_handler+0x114>)
    142a:	4798      	blx	r3
    142c:	1e03      	subs	r3, r0, #0
    142e:	d1f9      	bne.n	1424 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	695b      	ldr	r3, [r3, #20]
    1434:	1c99      	adds	r1, r3, #2
    1436:	68fa      	ldr	r2, [r7, #12]
    1438:	6151      	str	r1, [r2, #20]
    143a:	68fa      	ldr	r2, [r7, #12]
    143c:	6812      	ldr	r2, [r2, #0]
    143e:	8b52      	ldrh	r2, [r2, #26]
    1440:	b292      	uxth	r2, r2
    1442:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    1444:	68fb      	ldr	r3, [r7, #12]
    1446:	8b1b      	ldrh	r3, [r3, #24]
    1448:	b29b      	uxth	r3, r3
    144a:	3b01      	subs	r3, #1
    144c:	b29b      	uxth	r3, r3
    144e:	68fa      	ldr	r2, [r7, #12]
    1450:	1c19      	adds	r1, r3, #0
    1452:	8311      	strh	r1, [r2, #24]
    1454:	2b00      	cmp	r3, #0
    1456:	d111      	bne.n	147c <_adc_interrupt_handler+0xa4>
				if (module->software_trigger == true) {
					//adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	7f1b      	ldrb	r3, [r3, #28]
    145c:	b2db      	uxtb	r3, r3
    145e:	2b05      	cmp	r3, #5
    1460:	d10c      	bne.n	147c <_adc_interrupt_handler+0xa4>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    1462:	68fb      	ldr	r3, [r7, #12]
    1464:	2200      	movs	r2, #0
    1466:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    1468:	68fb      	ldr	r3, [r7, #12]
    146a:	2101      	movs	r1, #1
    146c:	0018      	movs	r0, r3
    146e:	4b20      	ldr	r3, [pc, #128]	; (14f0 <_adc_interrupt_handler+0x118>)
    1470:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	689b      	ldr	r3, [r3, #8]
    1476:	68fa      	ldr	r2, [r7, #12]
    1478:	0010      	movs	r0, r2
    147a:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    147c:	68bb      	ldr	r3, [r7, #8]
    147e:	2204      	movs	r2, #4
    1480:	4013      	ands	r3, r2
    1482:	d014      	beq.n	14ae <_adc_interrupt_handler+0xd6>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	681b      	ldr	r3, [r3, #0]
    1488:	2204      	movs	r2, #4
    148a:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    148c:	68fb      	ldr	r3, [r7, #12]
    148e:	7edb      	ldrb	r3, [r3, #27]
    1490:	001a      	movs	r2, r3
    1492:	2302      	movs	r3, #2
    1494:	4013      	ands	r3, r2
    1496:	d00a      	beq.n	14ae <_adc_interrupt_handler+0xd6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    1498:	68fb      	ldr	r3, [r7, #12]
    149a:	7e9b      	ldrb	r3, [r3, #26]
    149c:	001a      	movs	r2, r3
    149e:	2302      	movs	r3, #2
    14a0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    14a2:	d004      	beq.n	14ae <_adc_interrupt_handler+0xd6>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    14a4:	68fb      	ldr	r3, [r7, #12]
    14a6:	68db      	ldr	r3, [r3, #12]
    14a8:	68fa      	ldr	r2, [r7, #12]
    14aa:	0010      	movs	r0, r2
    14ac:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    14ae:	68bb      	ldr	r3, [r7, #8]
    14b0:	2202      	movs	r2, #2
    14b2:	4013      	ands	r3, r2
    14b4:	d014      	beq.n	14e0 <_adc_interrupt_handler+0x108>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	2202      	movs	r2, #2
    14bc:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    14be:	68fb      	ldr	r3, [r7, #12]
    14c0:	7edb      	ldrb	r3, [r3, #27]
    14c2:	001a      	movs	r2, r3
    14c4:	2304      	movs	r3, #4
    14c6:	4013      	ands	r3, r2
    14c8:	d00a      	beq.n	14e0 <_adc_interrupt_handler+0x108>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    14ca:	68fb      	ldr	r3, [r7, #12]
    14cc:	7e9b      	ldrb	r3, [r3, #26]
    14ce:	001a      	movs	r2, r3
    14d0:	2304      	movs	r3, #4
    14d2:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    14d4:	d004      	beq.n	14e0 <_adc_interrupt_handler+0x108>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    14d6:	68fb      	ldr	r3, [r7, #12]
    14d8:	691b      	ldr	r3, [r3, #16]
    14da:	68fa      	ldr	r2, [r7, #12]
    14dc:	0010      	movs	r0, r2
    14de:	4798      	blx	r3
		}
	}
}
    14e0:	46c0      	nop			; (mov r8, r8)
    14e2:	46bd      	mov	sp, r7
    14e4:	b004      	add	sp, #16
    14e6:	bd80      	pop	{r7, pc}
    14e8:	20000088 	.word	0x20000088
    14ec:	00001321 	.word	0x00001321
    14f0:	000013b5 	.word	0x000013b5

000014f4 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    14f4:	b580      	push	{r7, lr}
    14f6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    14f8:	2000      	movs	r0, #0
    14fa:	4b02      	ldr	r3, [pc, #8]	; (1504 <ADC_Handler+0x10>)
    14fc:	4798      	blx	r3
}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	46bd      	mov	sp, r7
    1502:	bd80      	pop	{r7, pc}
    1504:	000013d9 	.word	0x000013d9

00001508 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
    1508:	b580      	push	{r7, lr}
    150a:	b084      	sub	sp, #16
    150c:	af00      	add	r7, sp, #0
    150e:	60f8      	str	r0, [r7, #12]
    1510:	60b9      	str	r1, [r7, #8]
    1512:	1dfb      	adds	r3, r7, #7
    1514:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1516:	1dfb      	adds	r3, r7, #7
    1518:	781a      	ldrb	r2, [r3, #0]
    151a:	68fb      	ldr	r3, [r7, #12]
    151c:	3202      	adds	r2, #2
    151e:	0092      	lsls	r2, r2, #2
    1520:	68b9      	ldr	r1, [r7, #8]
    1522:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	7e9b      	ldrb	r3, [r3, #26]
    1528:	b25a      	sxtb	r2, r3
    152a:	1dfb      	adds	r3, r7, #7
    152c:	781b      	ldrb	r3, [r3, #0]
    152e:	2101      	movs	r1, #1
    1530:	4099      	lsls	r1, r3
    1532:	000b      	movs	r3, r1
    1534:	b25b      	sxtb	r3, r3
    1536:	4313      	orrs	r3, r2
    1538:	b25b      	sxtb	r3, r3
    153a:	b2da      	uxtb	r2, r3
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	769a      	strb	r2, [r3, #26]
}
    1540:	46c0      	nop			; (mov r8, r8)
    1542:	46bd      	mov	sp, r7
    1544:	b004      	add	sp, #16
    1546:	bd80      	pop	{r7, pc}

00001548 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    1548:	b580      	push	{r7, lr}
    154a:	b084      	sub	sp, #16
    154c:	af00      	add	r7, sp, #0
    154e:	60f8      	str	r0, [r7, #12]
    1550:	60b9      	str	r1, [r7, #8]
    1552:	1dbb      	adds	r3, r7, #6
    1554:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	8b1b      	ldrh	r3, [r3, #24]
    155a:	b29b      	uxth	r3, r3
    155c:	2b00      	cmp	r3, #0
    155e:	d104      	bne.n	156a <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
    1560:	68fb      	ldr	r3, [r7, #12]
    1562:	7f1b      	ldrb	r3, [r3, #28]
    1564:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
    1566:	2b05      	cmp	r3, #5
    1568:	d101      	bne.n	156e <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
    156a:	2305      	movs	r3, #5
    156c:	e017      	b.n	159e <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
    156e:	68fb      	ldr	r3, [r7, #12]
    1570:	2205      	movs	r2, #5
    1572:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
    1574:	68fb      	ldr	r3, [r7, #12]
    1576:	1dba      	adds	r2, r7, #6
    1578:	8812      	ldrh	r2, [r2, #0]
    157a:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
    157c:	68fb      	ldr	r3, [r7, #12]
    157e:	68ba      	ldr	r2, [r7, #8]
    1580:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	2101      	movs	r1, #1
    1586:	0018      	movs	r0, r3
    1588:	4b07      	ldr	r3, [pc, #28]	; (15a8 <adc_read_buffer_job+0x60>)
    158a:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
    158c:	68fb      	ldr	r3, [r7, #12]
    158e:	7f5b      	ldrb	r3, [r3, #29]
    1590:	2b00      	cmp	r3, #0
    1592:	d003      	beq.n	159c <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
    1594:	68fb      	ldr	r3, [r7, #12]
    1596:	0018      	movs	r0, r3
    1598:	4b04      	ldr	r3, [pc, #16]	; (15ac <adc_read_buffer_job+0x64>)
    159a:	4798      	blx	r3
	}

	return STATUS_OK;
    159c:	2300      	movs	r3, #0
}
    159e:	0018      	movs	r0, r3
    15a0:	46bd      	mov	sp, r7
    15a2:	b004      	add	sp, #16
    15a4:	bd80      	pop	{r7, pc}
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00001391 	.word	0x00001391
    15ac:	00001349 	.word	0x00001349

000015b0 <system_pinmux_get_config_defaults>:
{
    15b0:	b580      	push	{r7, lr}
    15b2:	b082      	sub	sp, #8
    15b4:	af00      	add	r7, sp, #0
    15b6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	2280      	movs	r2, #128	; 0x80
    15bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	2200      	movs	r2, #0
    15c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	2201      	movs	r2, #1
    15c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	2200      	movs	r2, #0
    15ce:	70da      	strb	r2, [r3, #3]
}
    15d0:	46c0      	nop			; (mov r8, r8)
    15d2:	46bd      	mov	sp, r7
    15d4:	b002      	add	sp, #8
    15d6:	bd80      	pop	{r7, pc}

000015d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b084      	sub	sp, #16
    15dc:	af00      	add	r7, sp, #0
    15de:	0002      	movs	r2, r0
    15e0:	6039      	str	r1, [r7, #0]
    15e2:	1dfb      	adds	r3, r7, #7
    15e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    15e6:	230c      	movs	r3, #12
    15e8:	18fb      	adds	r3, r7, r3
    15ea:	0018      	movs	r0, r3
    15ec:	4b10      	ldr	r3, [pc, #64]	; (1630 <port_pin_set_config+0x58>)
    15ee:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    15f0:	230c      	movs	r3, #12
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	2280      	movs	r2, #128	; 0x80
    15f6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    15f8:	683b      	ldr	r3, [r7, #0]
    15fa:	781a      	ldrb	r2, [r3, #0]
    15fc:	230c      	movs	r3, #12
    15fe:	18fb      	adds	r3, r7, r3
    1600:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1602:	683b      	ldr	r3, [r7, #0]
    1604:	785a      	ldrb	r2, [r3, #1]
    1606:	230c      	movs	r3, #12
    1608:	18fb      	adds	r3, r7, r3
    160a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    160c:	683b      	ldr	r3, [r7, #0]
    160e:	789a      	ldrb	r2, [r3, #2]
    1610:	230c      	movs	r3, #12
    1612:	18fb      	adds	r3, r7, r3
    1614:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1616:	230c      	movs	r3, #12
    1618:	18fa      	adds	r2, r7, r3
    161a:	1dfb      	adds	r3, r7, #7
    161c:	781b      	ldrb	r3, [r3, #0]
    161e:	0011      	movs	r1, r2
    1620:	0018      	movs	r0, r3
    1622:	4b04      	ldr	r3, [pc, #16]	; (1634 <port_pin_set_config+0x5c>)
    1624:	4798      	blx	r3
}
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	46bd      	mov	sp, r7
    162a:	b004      	add	sp, #16
    162c:	bd80      	pop	{r7, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	000015b1 	.word	0x000015b1
    1634:	00002049 	.word	0x00002049

00001638 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1638:	b580      	push	{r7, lr}
    163a:	af00      	add	r7, sp, #0
    163c:	4b03      	ldr	r3, [pc, #12]	; (164c <SERCOM0_Handler+0x14>)
    163e:	681b      	ldr	r3, [r3, #0]
    1640:	2000      	movs	r0, #0
    1642:	4798      	blx	r3
    1644:	46c0      	nop			; (mov r8, r8)
    1646:	46bd      	mov	sp, r7
    1648:	bd80      	pop	{r7, pc}
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	20000044 	.word	0x20000044

00001650 <SERCOM1_Handler>:
    1650:	b580      	push	{r7, lr}
    1652:	af00      	add	r7, sp, #0
    1654:	4b03      	ldr	r3, [pc, #12]	; (1664 <SERCOM1_Handler+0x14>)
    1656:	685b      	ldr	r3, [r3, #4]
    1658:	2001      	movs	r0, #1
    165a:	4798      	blx	r3
    165c:	46c0      	nop			; (mov r8, r8)
    165e:	46bd      	mov	sp, r7
    1660:	bd80      	pop	{r7, pc}
    1662:	46c0      	nop			; (mov r8, r8)
    1664:	20000044 	.word	0x20000044

00001668 <SERCOM2_Handler>:
    1668:	b580      	push	{r7, lr}
    166a:	af00      	add	r7, sp, #0
    166c:	4b03      	ldr	r3, [pc, #12]	; (167c <SERCOM2_Handler+0x14>)
    166e:	689b      	ldr	r3, [r3, #8]
    1670:	2002      	movs	r0, #2
    1672:	4798      	blx	r3
    1674:	46c0      	nop			; (mov r8, r8)
    1676:	46bd      	mov	sp, r7
    1678:	bd80      	pop	{r7, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	20000044 	.word	0x20000044

00001680 <SERCOM3_Handler>:
    1680:	b580      	push	{r7, lr}
    1682:	af00      	add	r7, sp, #0
    1684:	4b03      	ldr	r3, [pc, #12]	; (1694 <SERCOM3_Handler+0x14>)
    1686:	68db      	ldr	r3, [r3, #12]
    1688:	2003      	movs	r0, #3
    168a:	4798      	blx	r3
    168c:	46c0      	nop			; (mov r8, r8)
    168e:	46bd      	mov	sp, r7
    1690:	bd80      	pop	{r7, pc}
    1692:	46c0      	nop			; (mov r8, r8)
    1694:	20000044 	.word	0x20000044

00001698 <SERCOM4_Handler>:
    1698:	b580      	push	{r7, lr}
    169a:	af00      	add	r7, sp, #0
    169c:	4b03      	ldr	r3, [pc, #12]	; (16ac <SERCOM4_Handler+0x14>)
    169e:	691b      	ldr	r3, [r3, #16]
    16a0:	2004      	movs	r0, #4
    16a2:	4798      	blx	r3
    16a4:	46c0      	nop			; (mov r8, r8)
    16a6:	46bd      	mov	sp, r7
    16a8:	bd80      	pop	{r7, pc}
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	20000044 	.word	0x20000044

000016b0 <SERCOM5_Handler>:
    16b0:	b580      	push	{r7, lr}
    16b2:	af00      	add	r7, sp, #0
    16b4:	4b03      	ldr	r3, [pc, #12]	; (16c4 <SERCOM5_Handler+0x14>)
    16b6:	695b      	ldr	r3, [r3, #20]
    16b8:	2005      	movs	r0, #5
    16ba:	4798      	blx	r3
    16bc:	46c0      	nop			; (mov r8, r8)
    16be:	46bd      	mov	sp, r7
    16c0:	bd80      	pop	{r7, pc}
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	20000044 	.word	0x20000044

000016c8 <system_gclk_gen_get_config_defaults>:
{
    16c8:	b580      	push	{r7, lr}
    16ca:	b082      	sub	sp, #8
    16cc:	af00      	add	r7, sp, #0
    16ce:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	2201      	movs	r2, #1
    16d4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	2200      	movs	r2, #0
    16da:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	2206      	movs	r2, #6
    16e0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	2200      	movs	r2, #0
    16e6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	2200      	movs	r2, #0
    16ec:	725a      	strb	r2, [r3, #9]
}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	46bd      	mov	sp, r7
    16f2:	b002      	add	sp, #8
    16f4:	bd80      	pop	{r7, pc}

000016f6 <system_clock_source_osc8m_get_config_defaults>:
{
    16f6:	b580      	push	{r7, lr}
    16f8:	b082      	sub	sp, #8
    16fa:	af00      	add	r7, sp, #0
    16fc:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    16fe:	687b      	ldr	r3, [r7, #4]
    1700:	2203      	movs	r2, #3
    1702:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	2200      	movs	r2, #0
    1708:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	2201      	movs	r2, #1
    170e:	709a      	strb	r2, [r3, #2]
}
    1710:	46c0      	nop			; (mov r8, r8)
    1712:	46bd      	mov	sp, r7
    1714:	b002      	add	sp, #8
    1716:	bd80      	pop	{r7, pc}

00001718 <system_cpu_clock_set_divider>:
{
    1718:	b580      	push	{r7, lr}
    171a:	b082      	sub	sp, #8
    171c:	af00      	add	r7, sp, #0
    171e:	0002      	movs	r2, r0
    1720:	1dfb      	adds	r3, r7, #7
    1722:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    1724:	4a03      	ldr	r2, [pc, #12]	; (1734 <system_cpu_clock_set_divider+0x1c>)
    1726:	1dfb      	adds	r3, r7, #7
    1728:	781b      	ldrb	r3, [r3, #0]
    172a:	7213      	strb	r3, [r2, #8]
}
    172c:	46c0      	nop			; (mov r8, r8)
    172e:	46bd      	mov	sp, r7
    1730:	b002      	add	sp, #8
    1732:	bd80      	pop	{r7, pc}
    1734:	40000400 	.word	0x40000400

00001738 <system_apb_clock_set_divider>:
{
    1738:	b580      	push	{r7, lr}
    173a:	b082      	sub	sp, #8
    173c:	af00      	add	r7, sp, #0
    173e:	0002      	movs	r2, r0
    1740:	1dfb      	adds	r3, r7, #7
    1742:	701a      	strb	r2, [r3, #0]
    1744:	1dbb      	adds	r3, r7, #6
    1746:	1c0a      	adds	r2, r1, #0
    1748:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    174a:	1dfb      	adds	r3, r7, #7
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	2b01      	cmp	r3, #1
    1750:	d008      	beq.n	1764 <system_apb_clock_set_divider+0x2c>
    1752:	2b02      	cmp	r3, #2
    1754:	d00b      	beq.n	176e <system_apb_clock_set_divider+0x36>
    1756:	2b00      	cmp	r3, #0
    1758:	d10e      	bne.n	1778 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    175a:	4a0b      	ldr	r2, [pc, #44]	; (1788 <system_apb_clock_set_divider+0x50>)
    175c:	1dbb      	adds	r3, r7, #6
    175e:	781b      	ldrb	r3, [r3, #0]
    1760:	7253      	strb	r3, [r2, #9]
			break;
    1762:	e00b      	b.n	177c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    1764:	4a08      	ldr	r2, [pc, #32]	; (1788 <system_apb_clock_set_divider+0x50>)
    1766:	1dbb      	adds	r3, r7, #6
    1768:	781b      	ldrb	r3, [r3, #0]
    176a:	7293      	strb	r3, [r2, #10]
			break;
    176c:	e006      	b.n	177c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    176e:	4a06      	ldr	r2, [pc, #24]	; (1788 <system_apb_clock_set_divider+0x50>)
    1770:	1dbb      	adds	r3, r7, #6
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	72d3      	strb	r3, [r2, #11]
			break;
    1776:	e001      	b.n	177c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    1778:	2317      	movs	r3, #23
    177a:	e000      	b.n	177e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    177c:	2300      	movs	r3, #0
}
    177e:	0018      	movs	r0, r3
    1780:	46bd      	mov	sp, r7
    1782:	b002      	add	sp, #8
    1784:	bd80      	pop	{r7, pc}
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	40000400 	.word	0x40000400

0000178c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	0002      	movs	r2, r0
    1794:	1dfb      	adds	r3, r7, #7
    1796:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1798:	4a08      	ldr	r2, [pc, #32]	; (17bc <system_flash_set_waitstates+0x30>)
    179a:	1dfb      	adds	r3, r7, #7
    179c:	781b      	ldrb	r3, [r3, #0]
    179e:	210f      	movs	r1, #15
    17a0:	400b      	ands	r3, r1
    17a2:	b2d9      	uxtb	r1, r3
    17a4:	6853      	ldr	r3, [r2, #4]
    17a6:	200f      	movs	r0, #15
    17a8:	4001      	ands	r1, r0
    17aa:	0049      	lsls	r1, r1, #1
    17ac:	201e      	movs	r0, #30
    17ae:	4383      	bics	r3, r0
    17b0:	430b      	orrs	r3, r1
    17b2:	6053      	str	r3, [r2, #4]
}
    17b4:	46c0      	nop			; (mov r8, r8)
    17b6:	46bd      	mov	sp, r7
    17b8:	b002      	add	sp, #8
    17ba:	bd80      	pop	{r7, pc}
    17bc:	41004000 	.word	0x41004000

000017c0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    17c4:	46c0      	nop			; (mov r8, r8)
    17c6:	4b04      	ldr	r3, [pc, #16]	; (17d8 <_system_dfll_wait_for_sync+0x18>)
    17c8:	68db      	ldr	r3, [r3, #12]
    17ca:	2210      	movs	r2, #16
    17cc:	4013      	ands	r3, r2
    17ce:	d0fa      	beq.n	17c6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    17d0:	46c0      	nop			; (mov r8, r8)
    17d2:	46bd      	mov	sp, r7
    17d4:	bd80      	pop	{r7, pc}
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	40000800 	.word	0x40000800

000017dc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    17dc:	b580      	push	{r7, lr}
    17de:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    17e0:	4b0c      	ldr	r3, [pc, #48]	; (1814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    17e2:	2202      	movs	r2, #2
    17e4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    17e6:	4b0c      	ldr	r3, [pc, #48]	; (1818 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    17e8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    17ea:	4a0a      	ldr	r2, [pc, #40]	; (1814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    17ec:	4b0b      	ldr	r3, [pc, #44]	; (181c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    17ee:	689b      	ldr	r3, [r3, #8]
    17f0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    17f2:	4a08      	ldr	r2, [pc, #32]	; (1814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    17f4:	4b09      	ldr	r3, [pc, #36]	; (181c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    17f6:	685b      	ldr	r3, [r3, #4]
    17f8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    17fc:	2200      	movs	r2, #0
    17fe:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1800:	4b05      	ldr	r3, [pc, #20]	; (1818 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1802:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1804:	4a03      	ldr	r2, [pc, #12]	; (1814 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	b29b      	uxth	r3, r3
    180c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	46bd      	mov	sp, r7
    1812:	bd80      	pop	{r7, pc}
    1814:	40000800 	.word	0x40000800
    1818:	000017c1 	.word	0x000017c1
    181c:	2000005c 	.word	0x2000005c

00001820 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1820:	b580      	push	{r7, lr}
    1822:	b084      	sub	sp, #16
    1824:	af00      	add	r7, sp, #0
    1826:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1828:	4b1a      	ldr	r3, [pc, #104]	; (1894 <system_clock_source_osc8m_set_config+0x74>)
    182a:	6a1b      	ldr	r3, [r3, #32]
    182c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    182e:	687b      	ldr	r3, [r7, #4]
    1830:	781b      	ldrb	r3, [r3, #0]
    1832:	1c1a      	adds	r2, r3, #0
    1834:	2303      	movs	r3, #3
    1836:	4013      	ands	r3, r2
    1838:	b2da      	uxtb	r2, r3
    183a:	230d      	movs	r3, #13
    183c:	18fb      	adds	r3, r7, r3
    183e:	2103      	movs	r1, #3
    1840:	400a      	ands	r2, r1
    1842:	0010      	movs	r0, r2
    1844:	781a      	ldrb	r2, [r3, #0]
    1846:	2103      	movs	r1, #3
    1848:	438a      	bics	r2, r1
    184a:	1c11      	adds	r1, r2, #0
    184c:	1c02      	adds	r2, r0, #0
    184e:	430a      	orrs	r2, r1
    1850:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1852:	687b      	ldr	r3, [r7, #4]
    1854:	789a      	ldrb	r2, [r3, #2]
    1856:	230c      	movs	r3, #12
    1858:	18fb      	adds	r3, r7, r3
    185a:	01d0      	lsls	r0, r2, #7
    185c:	781a      	ldrb	r2, [r3, #0]
    185e:	217f      	movs	r1, #127	; 0x7f
    1860:	400a      	ands	r2, r1
    1862:	1c11      	adds	r1, r2, #0
    1864:	1c02      	adds	r2, r0, #0
    1866:	430a      	orrs	r2, r1
    1868:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    186a:	687b      	ldr	r3, [r7, #4]
    186c:	785a      	ldrb	r2, [r3, #1]
    186e:	230c      	movs	r3, #12
    1870:	18fb      	adds	r3, r7, r3
    1872:	2101      	movs	r1, #1
    1874:	400a      	ands	r2, r1
    1876:	0190      	lsls	r0, r2, #6
    1878:	781a      	ldrb	r2, [r3, #0]
    187a:	2140      	movs	r1, #64	; 0x40
    187c:	438a      	bics	r2, r1
    187e:	1c11      	adds	r1, r2, #0
    1880:	1c02      	adds	r2, r0, #0
    1882:	430a      	orrs	r2, r1
    1884:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1886:	4b03      	ldr	r3, [pc, #12]	; (1894 <system_clock_source_osc8m_set_config+0x74>)
    1888:	68fa      	ldr	r2, [r7, #12]
    188a:	621a      	str	r2, [r3, #32]
}
    188c:	46c0      	nop			; (mov r8, r8)
    188e:	46bd      	mov	sp, r7
    1890:	b004      	add	sp, #16
    1892:	bd80      	pop	{r7, pc}
    1894:	40000800 	.word	0x40000800

00001898 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1898:	b580      	push	{r7, lr}
    189a:	b082      	sub	sp, #8
    189c:	af00      	add	r7, sp, #0
    189e:	0002      	movs	r2, r0
    18a0:	1dfb      	adds	r3, r7, #7
    18a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    18a4:	1dfb      	adds	r3, r7, #7
    18a6:	781b      	ldrb	r3, [r3, #0]
    18a8:	2b08      	cmp	r3, #8
    18aa:	d83b      	bhi.n	1924 <system_clock_source_enable+0x8c>
    18ac:	009a      	lsls	r2, r3, #2
    18ae:	4b21      	ldr	r3, [pc, #132]	; (1934 <system_clock_source_enable+0x9c>)
    18b0:	18d3      	adds	r3, r2, r3
    18b2:	681b      	ldr	r3, [r3, #0]
    18b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    18b6:	4b20      	ldr	r3, [pc, #128]	; (1938 <system_clock_source_enable+0xa0>)
    18b8:	4a1f      	ldr	r2, [pc, #124]	; (1938 <system_clock_source_enable+0xa0>)
    18ba:	6a12      	ldr	r2, [r2, #32]
    18bc:	2102      	movs	r1, #2
    18be:	430a      	orrs	r2, r1
    18c0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    18c2:	2300      	movs	r3, #0
    18c4:	e031      	b.n	192a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18c6:	4b1c      	ldr	r3, [pc, #112]	; (1938 <system_clock_source_enable+0xa0>)
    18c8:	4a1b      	ldr	r2, [pc, #108]	; (1938 <system_clock_source_enable+0xa0>)
    18ca:	6992      	ldr	r2, [r2, #24]
    18cc:	2102      	movs	r1, #2
    18ce:	430a      	orrs	r2, r1
    18d0:	619a      	str	r2, [r3, #24]
		break;
    18d2:	e029      	b.n	1928 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    18d4:	4a18      	ldr	r2, [pc, #96]	; (1938 <system_clock_source_enable+0xa0>)
    18d6:	4b18      	ldr	r3, [pc, #96]	; (1938 <system_clock_source_enable+0xa0>)
    18d8:	8a1b      	ldrh	r3, [r3, #16]
    18da:	b29b      	uxth	r3, r3
    18dc:	2102      	movs	r1, #2
    18de:	430b      	orrs	r3, r1
    18e0:	b29b      	uxth	r3, r3
    18e2:	8213      	strh	r3, [r2, #16]
		break;
    18e4:	e020      	b.n	1928 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    18e6:	4a14      	ldr	r2, [pc, #80]	; (1938 <system_clock_source_enable+0xa0>)
    18e8:	4b13      	ldr	r3, [pc, #76]	; (1938 <system_clock_source_enable+0xa0>)
    18ea:	8a9b      	ldrh	r3, [r3, #20]
    18ec:	b29b      	uxth	r3, r3
    18ee:	2102      	movs	r1, #2
    18f0:	430b      	orrs	r3, r1
    18f2:	b29b      	uxth	r3, r3
    18f4:	8293      	strh	r3, [r2, #20]
		break;
    18f6:	e017      	b.n	1928 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    18f8:	4b10      	ldr	r3, [pc, #64]	; (193c <system_clock_source_enable+0xa4>)
    18fa:	681b      	ldr	r3, [r3, #0]
    18fc:	2202      	movs	r2, #2
    18fe:	431a      	orrs	r2, r3
    1900:	4b0e      	ldr	r3, [pc, #56]	; (193c <system_clock_source_enable+0xa4>)
    1902:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1904:	4b0e      	ldr	r3, [pc, #56]	; (1940 <system_clock_source_enable+0xa8>)
    1906:	4798      	blx	r3
		break;
    1908:	e00e      	b.n	1928 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    190a:	4a0b      	ldr	r2, [pc, #44]	; (1938 <system_clock_source_enable+0xa0>)
    190c:	490a      	ldr	r1, [pc, #40]	; (1938 <system_clock_source_enable+0xa0>)
    190e:	2344      	movs	r3, #68	; 0x44
    1910:	5ccb      	ldrb	r3, [r1, r3]
    1912:	b2db      	uxtb	r3, r3
    1914:	2102      	movs	r1, #2
    1916:	430b      	orrs	r3, r1
    1918:	b2d9      	uxtb	r1, r3
    191a:	2344      	movs	r3, #68	; 0x44
    191c:	54d1      	strb	r1, [r2, r3]
		break;
    191e:	e003      	b.n	1928 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1920:	2300      	movs	r3, #0
    1922:	e002      	b.n	192a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1924:	2317      	movs	r3, #23
    1926:	e000      	b.n	192a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1928:	2300      	movs	r3, #0
}
    192a:	0018      	movs	r0, r3
    192c:	46bd      	mov	sp, r7
    192e:	b002      	add	sp, #8
    1930:	bd80      	pop	{r7, pc}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	000028c4 	.word	0x000028c4
    1938:	40000800 	.word	0x40000800
    193c:	2000005c 	.word	0x2000005c
    1940:	000017dd 	.word	0x000017dd

00001944 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    194a:	003b      	movs	r3, r7
    194c:	2202      	movs	r2, #2
    194e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1950:	2300      	movs	r3, #0
    1952:	607b      	str	r3, [r7, #4]
    1954:	e009      	b.n	196a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	b2db      	uxtb	r3, r3
    195a:	003a      	movs	r2, r7
    195c:	0011      	movs	r1, r2
    195e:	0018      	movs	r0, r3
    1960:	4b05      	ldr	r3, [pc, #20]	; (1978 <_switch_peripheral_gclk+0x34>)
    1962:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	3301      	adds	r3, #1
    1968:	607b      	str	r3, [r7, #4]
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	2b24      	cmp	r3, #36	; 0x24
    196e:	d9f2      	bls.n	1956 <_switch_peripheral_gclk+0x12>
	}
}
    1970:	46c0      	nop			; (mov r8, r8)
    1972:	46bd      	mov	sp, r7
    1974:	b002      	add	sp, #8
    1976:	bd80      	pop	{r7, pc}
    1978:	00001ce1 	.word	0x00001ce1

0000197c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    197c:	b580      	push	{r7, lr}
    197e:	b0a0      	sub	sp, #128	; 0x80
    1980:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1982:	4b36      	ldr	r3, [pc, #216]	; (1a5c <system_clock_init+0xe0>)
    1984:	22c2      	movs	r2, #194	; 0xc2
    1986:	00d2      	lsls	r2, r2, #3
    1988:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    198a:	2000      	movs	r0, #0
    198c:	4b34      	ldr	r3, [pc, #208]	; (1a60 <system_clock_init+0xe4>)
    198e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1990:	4b34      	ldr	r3, [pc, #208]	; (1a64 <system_clock_init+0xe8>)
    1992:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1994:	237c      	movs	r3, #124	; 0x7c
    1996:	18fb      	adds	r3, r7, r3
    1998:	0018      	movs	r0, r3
    199a:	4b33      	ldr	r3, [pc, #204]	; (1a68 <system_clock_init+0xec>)
    199c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    199e:	237c      	movs	r3, #124	; 0x7c
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	2200      	movs	r2, #0
    19a4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    19a6:	237c      	movs	r3, #124	; 0x7c
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	2201      	movs	r2, #1
    19ac:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    19ae:	237c      	movs	r3, #124	; 0x7c
    19b0:	18fb      	adds	r3, r7, r3
    19b2:	2200      	movs	r2, #0
    19b4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    19b6:	237c      	movs	r3, #124	; 0x7c
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	0018      	movs	r0, r3
    19bc:	4b2b      	ldr	r3, [pc, #172]	; (1a6c <system_clock_init+0xf0>)
    19be:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19c0:	2006      	movs	r0, #6
    19c2:	4b2b      	ldr	r3, [pc, #172]	; (1a70 <system_clock_init+0xf4>)
    19c4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    19c6:	4b2b      	ldr	r3, [pc, #172]	; (1a74 <system_clock_init+0xf8>)
    19c8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    19ca:	2364      	movs	r3, #100	; 0x64
    19cc:	18fb      	adds	r3, r7, r3
    19ce:	0018      	movs	r0, r3
    19d0:	4b29      	ldr	r3, [pc, #164]	; (1a78 <system_clock_init+0xfc>)
    19d2:	4798      	blx	r3
    19d4:	2364      	movs	r3, #100	; 0x64
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	2206      	movs	r2, #6
    19da:	701a      	strb	r2, [r3, #0]
    19dc:	2364      	movs	r3, #100	; 0x64
    19de:	18fb      	adds	r3, r7, r3
    19e0:	2201      	movs	r2, #1
    19e2:	605a      	str	r2, [r3, #4]
    19e4:	2364      	movs	r3, #100	; 0x64
    19e6:	18fb      	adds	r3, r7, r3
    19e8:	2200      	movs	r2, #0
    19ea:	721a      	strb	r2, [r3, #8]
    19ec:	2364      	movs	r3, #100	; 0x64
    19ee:	18fb      	adds	r3, r7, r3
    19f0:	2200      	movs	r2, #0
    19f2:	725a      	strb	r2, [r3, #9]
    19f4:	2364      	movs	r3, #100	; 0x64
    19f6:	18fb      	adds	r3, r7, r3
    19f8:	0019      	movs	r1, r3
    19fa:	2001      	movs	r0, #1
    19fc:	4b1f      	ldr	r3, [pc, #124]	; (1a7c <system_clock_init+0x100>)
    19fe:	4798      	blx	r3
    1a00:	2001      	movs	r0, #1
    1a02:	4b1f      	ldr	r3, [pc, #124]	; (1a80 <system_clock_init+0x104>)
    1a04:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1a06:	2000      	movs	r0, #0
    1a08:	4b1e      	ldr	r3, [pc, #120]	; (1a84 <system_clock_init+0x108>)
    1a0a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1a0c:	2100      	movs	r1, #0
    1a0e:	2000      	movs	r0, #0
    1a10:	4b1d      	ldr	r3, [pc, #116]	; (1a88 <system_clock_init+0x10c>)
    1a12:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1a14:	2100      	movs	r1, #0
    1a16:	2001      	movs	r0, #1
    1a18:	4b1b      	ldr	r3, [pc, #108]	; (1a88 <system_clock_init+0x10c>)
    1a1a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    1a1c:	2100      	movs	r1, #0
    1a1e:	2002      	movs	r0, #2
    1a20:	4b19      	ldr	r3, [pc, #100]	; (1a88 <system_clock_init+0x10c>)
    1a22:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a24:	1d3b      	adds	r3, r7, #4
    1a26:	0018      	movs	r0, r3
    1a28:	4b13      	ldr	r3, [pc, #76]	; (1a78 <system_clock_init+0xfc>)
    1a2a:	4798      	blx	r3
    1a2c:	1d3b      	adds	r3, r7, #4
    1a2e:	2206      	movs	r2, #6
    1a30:	701a      	strb	r2, [r3, #0]
    1a32:	1d3b      	adds	r3, r7, #4
    1a34:	2201      	movs	r2, #1
    1a36:	605a      	str	r2, [r3, #4]
    1a38:	1d3b      	adds	r3, r7, #4
    1a3a:	2200      	movs	r2, #0
    1a3c:	721a      	strb	r2, [r3, #8]
    1a3e:	1d3b      	adds	r3, r7, #4
    1a40:	2200      	movs	r2, #0
    1a42:	725a      	strb	r2, [r3, #9]
    1a44:	1d3b      	adds	r3, r7, #4
    1a46:	0019      	movs	r1, r3
    1a48:	2000      	movs	r0, #0
    1a4a:	4b0c      	ldr	r3, [pc, #48]	; (1a7c <system_clock_init+0x100>)
    1a4c:	4798      	blx	r3
    1a4e:	2000      	movs	r0, #0
    1a50:	4b0b      	ldr	r3, [pc, #44]	; (1a80 <system_clock_init+0x104>)
    1a52:	4798      	blx	r3
#endif
}
    1a54:	46c0      	nop			; (mov r8, r8)
    1a56:	46bd      	mov	sp, r7
    1a58:	b020      	add	sp, #128	; 0x80
    1a5a:	bd80      	pop	{r7, pc}
    1a5c:	40000800 	.word	0x40000800
    1a60:	0000178d 	.word	0x0000178d
    1a64:	00001945 	.word	0x00001945
    1a68:	000016f7 	.word	0x000016f7
    1a6c:	00001821 	.word	0x00001821
    1a70:	00001899 	.word	0x00001899
    1a74:	00001b31 	.word	0x00001b31
    1a78:	000016c9 	.word	0x000016c9
    1a7c:	00001b61 	.word	0x00001b61
    1a80:	00001c85 	.word	0x00001c85
    1a84:	00001719 	.word	0x00001719
    1a88:	00001739 	.word	0x00001739

00001a8c <system_apb_clock_set_mask>:
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
    1a92:	0002      	movs	r2, r0
    1a94:	6039      	str	r1, [r7, #0]
    1a96:	1dfb      	adds	r3, r7, #7
    1a98:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1a9a:	1dfb      	adds	r3, r7, #7
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	2b01      	cmp	r3, #1
    1aa0:	d00a      	beq.n	1ab8 <system_apb_clock_set_mask+0x2c>
    1aa2:	2b02      	cmp	r3, #2
    1aa4:	d00f      	beq.n	1ac6 <system_apb_clock_set_mask+0x3a>
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	d114      	bne.n	1ad4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1aaa:	4b0e      	ldr	r3, [pc, #56]	; (1ae4 <system_apb_clock_set_mask+0x58>)
    1aac:	4a0d      	ldr	r2, [pc, #52]	; (1ae4 <system_apb_clock_set_mask+0x58>)
    1aae:	6991      	ldr	r1, [r2, #24]
    1ab0:	683a      	ldr	r2, [r7, #0]
    1ab2:	430a      	orrs	r2, r1
    1ab4:	619a      	str	r2, [r3, #24]
			break;
    1ab6:	e00f      	b.n	1ad8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1ab8:	4b0a      	ldr	r3, [pc, #40]	; (1ae4 <system_apb_clock_set_mask+0x58>)
    1aba:	4a0a      	ldr	r2, [pc, #40]	; (1ae4 <system_apb_clock_set_mask+0x58>)
    1abc:	69d1      	ldr	r1, [r2, #28]
    1abe:	683a      	ldr	r2, [r7, #0]
    1ac0:	430a      	orrs	r2, r1
    1ac2:	61da      	str	r2, [r3, #28]
			break;
    1ac4:	e008      	b.n	1ad8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1ac6:	4b07      	ldr	r3, [pc, #28]	; (1ae4 <system_apb_clock_set_mask+0x58>)
    1ac8:	4a06      	ldr	r2, [pc, #24]	; (1ae4 <system_apb_clock_set_mask+0x58>)
    1aca:	6a11      	ldr	r1, [r2, #32]
    1acc:	683a      	ldr	r2, [r7, #0]
    1ace:	430a      	orrs	r2, r1
    1ad0:	621a      	str	r2, [r3, #32]
			break;
    1ad2:	e001      	b.n	1ad8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1ad4:	2317      	movs	r3, #23
    1ad6:	e000      	b.n	1ada <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1ad8:	2300      	movs	r3, #0
}
    1ada:	0018      	movs	r0, r3
    1adc:	46bd      	mov	sp, r7
    1ade:	b002      	add	sp, #8
    1ae0:	bd80      	pop	{r7, pc}
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	40000400 	.word	0x40000400

00001ae8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1aec:	4b02      	ldr	r3, [pc, #8]	; (1af8 <system_interrupt_enter_critical_section+0x10>)
    1aee:	4798      	blx	r3
}
    1af0:	46c0      	nop			; (mov r8, r8)
    1af2:	46bd      	mov	sp, r7
    1af4:	bd80      	pop	{r7, pc}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	000008f9 	.word	0x000008f9

00001afc <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1b00:	4b02      	ldr	r3, [pc, #8]	; (1b0c <system_interrupt_leave_critical_section+0x10>)
    1b02:	4798      	blx	r3
}
    1b04:	46c0      	nop			; (mov r8, r8)
    1b06:	46bd      	mov	sp, r7
    1b08:	bd80      	pop	{r7, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	0000094d 	.word	0x0000094d

00001b10 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    1b10:	b580      	push	{r7, lr}
    1b12:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b14:	4b05      	ldr	r3, [pc, #20]	; (1b2c <system_gclk_is_syncing+0x1c>)
    1b16:	785b      	ldrb	r3, [r3, #1]
    1b18:	b2db      	uxtb	r3, r3
    1b1a:	b25b      	sxtb	r3, r3
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	da01      	bge.n	1b24 <system_gclk_is_syncing+0x14>
		return true;
    1b20:	2301      	movs	r3, #1
    1b22:	e000      	b.n	1b26 <system_gclk_is_syncing+0x16>
	}

	return false;
    1b24:	2300      	movs	r3, #0
}
    1b26:	0018      	movs	r0, r3
    1b28:	46bd      	mov	sp, r7
    1b2a:	bd80      	pop	{r7, pc}
    1b2c:	40000c00 	.word	0x40000c00

00001b30 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1b30:	b580      	push	{r7, lr}
    1b32:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1b34:	2108      	movs	r1, #8
    1b36:	2000      	movs	r0, #0
    1b38:	4b07      	ldr	r3, [pc, #28]	; (1b58 <system_gclk_init+0x28>)
    1b3a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1b3c:	4b07      	ldr	r3, [pc, #28]	; (1b5c <system_gclk_init+0x2c>)
    1b3e:	2201      	movs	r2, #1
    1b40:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	4b05      	ldr	r3, [pc, #20]	; (1b5c <system_gclk_init+0x2c>)
    1b46:	781b      	ldrb	r3, [r3, #0]
    1b48:	b2db      	uxtb	r3, r3
    1b4a:	001a      	movs	r2, r3
    1b4c:	2301      	movs	r3, #1
    1b4e:	4013      	ands	r3, r2
    1b50:	d1f8      	bne.n	1b44 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	46bd      	mov	sp, r7
    1b56:	bd80      	pop	{r7, pc}
    1b58:	00001a8d 	.word	0x00001a8d
    1b5c:	40000c00 	.word	0x40000c00

00001b60 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	b086      	sub	sp, #24
    1b64:	af00      	add	r7, sp, #0
    1b66:	0002      	movs	r2, r0
    1b68:	6039      	str	r1, [r7, #0]
    1b6a:	1dfb      	adds	r3, r7, #7
    1b6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1b6e:	1dfb      	adds	r3, r7, #7
    1b70:	781b      	ldrb	r3, [r3, #0]
    1b72:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1b74:	1dfb      	adds	r3, r7, #7
    1b76:	781b      	ldrb	r3, [r3, #0]
    1b78:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1b7a:	683b      	ldr	r3, [r7, #0]
    1b7c:	781b      	ldrb	r3, [r3, #0]
    1b7e:	021b      	lsls	r3, r3, #8
    1b80:	001a      	movs	r2, r3
    1b82:	697b      	ldr	r3, [r7, #20]
    1b84:	4313      	orrs	r3, r2
    1b86:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1b88:	683b      	ldr	r3, [r7, #0]
    1b8a:	785b      	ldrb	r3, [r3, #1]
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d004      	beq.n	1b9a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1b90:	697b      	ldr	r3, [r7, #20]
    1b92:	2280      	movs	r2, #128	; 0x80
    1b94:	02d2      	lsls	r2, r2, #11
    1b96:	4313      	orrs	r3, r2
    1b98:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1b9a:	683b      	ldr	r3, [r7, #0]
    1b9c:	7a5b      	ldrb	r3, [r3, #9]
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d004      	beq.n	1bac <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1ba2:	697b      	ldr	r3, [r7, #20]
    1ba4:	2280      	movs	r2, #128	; 0x80
    1ba6:	0312      	lsls	r2, r2, #12
    1ba8:	4313      	orrs	r3, r2
    1baa:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1bac:	683b      	ldr	r3, [r7, #0]
    1bae:	685b      	ldr	r3, [r3, #4]
    1bb0:	2b01      	cmp	r3, #1
    1bb2:	d92c      	bls.n	1c0e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1bb4:	683b      	ldr	r3, [r7, #0]
    1bb6:	685a      	ldr	r2, [r3, #4]
    1bb8:	683b      	ldr	r3, [r7, #0]
    1bba:	685b      	ldr	r3, [r3, #4]
    1bbc:	3b01      	subs	r3, #1
    1bbe:	4013      	ands	r3, r2
    1bc0:	d11a      	bne.n	1bf8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1bc2:	2300      	movs	r3, #0
    1bc4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1bc6:	2302      	movs	r3, #2
    1bc8:	60bb      	str	r3, [r7, #8]
    1bca:	e005      	b.n	1bd8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1bcc:	68fb      	ldr	r3, [r7, #12]
    1bce:	3301      	adds	r3, #1
    1bd0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    1bd2:	68bb      	ldr	r3, [r7, #8]
    1bd4:	005b      	lsls	r3, r3, #1
    1bd6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    1bd8:	683b      	ldr	r3, [r7, #0]
    1bda:	685a      	ldr	r2, [r3, #4]
    1bdc:	68bb      	ldr	r3, [r7, #8]
    1bde:	429a      	cmp	r2, r3
    1be0:	d8f4      	bhi.n	1bcc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1be2:	68fb      	ldr	r3, [r7, #12]
    1be4:	021b      	lsls	r3, r3, #8
    1be6:	693a      	ldr	r2, [r7, #16]
    1be8:	4313      	orrs	r3, r2
    1bea:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1bec:	697b      	ldr	r3, [r7, #20]
    1bee:	2280      	movs	r2, #128	; 0x80
    1bf0:	0352      	lsls	r2, r2, #13
    1bf2:	4313      	orrs	r3, r2
    1bf4:	617b      	str	r3, [r7, #20]
    1bf6:	e00a      	b.n	1c0e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1bf8:	683b      	ldr	r3, [r7, #0]
    1bfa:	685b      	ldr	r3, [r3, #4]
    1bfc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    1bfe:	693a      	ldr	r2, [r7, #16]
    1c00:	4313      	orrs	r3, r2
    1c02:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c04:	697b      	ldr	r3, [r7, #20]
    1c06:	2280      	movs	r2, #128	; 0x80
    1c08:	0292      	lsls	r2, r2, #10
    1c0a:	4313      	orrs	r3, r2
    1c0c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1c0e:	683b      	ldr	r3, [r7, #0]
    1c10:	7a1b      	ldrb	r3, [r3, #8]
    1c12:	2b00      	cmp	r3, #0
    1c14:	d004      	beq.n	1c20 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1c16:	697b      	ldr	r3, [r7, #20]
    1c18:	2280      	movs	r2, #128	; 0x80
    1c1a:	0392      	lsls	r2, r2, #14
    1c1c:	4313      	orrs	r3, r2
    1c1e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1c20:	46c0      	nop			; (mov r8, r8)
    1c22:	4b13      	ldr	r3, [pc, #76]	; (1c70 <system_gclk_gen_set_config+0x110>)
    1c24:	4798      	blx	r3
    1c26:	1e03      	subs	r3, r0, #0
    1c28:	d1fb      	bne.n	1c22 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1c2a:	4b12      	ldr	r3, [pc, #72]	; (1c74 <system_gclk_gen_set_config+0x114>)
    1c2c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c2e:	4a12      	ldr	r2, [pc, #72]	; (1c78 <system_gclk_gen_set_config+0x118>)
    1c30:	1dfb      	adds	r3, r7, #7
    1c32:	781b      	ldrb	r3, [r3, #0]
    1c34:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	4b0d      	ldr	r3, [pc, #52]	; (1c70 <system_gclk_gen_set_config+0x110>)
    1c3a:	4798      	blx	r3
    1c3c:	1e03      	subs	r3, r0, #0
    1c3e:	d1fb      	bne.n	1c38 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1c40:	4b0e      	ldr	r3, [pc, #56]	; (1c7c <system_gclk_gen_set_config+0x11c>)
    1c42:	693a      	ldr	r2, [r7, #16]
    1c44:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	4b09      	ldr	r3, [pc, #36]	; (1c70 <system_gclk_gen_set_config+0x110>)
    1c4a:	4798      	blx	r3
    1c4c:	1e03      	subs	r3, r0, #0
    1c4e:	d1fb      	bne.n	1c48 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1c50:	4b0a      	ldr	r3, [pc, #40]	; (1c7c <system_gclk_gen_set_config+0x11c>)
    1c52:	4a0a      	ldr	r2, [pc, #40]	; (1c7c <system_gclk_gen_set_config+0x11c>)
    1c54:	6851      	ldr	r1, [r2, #4]
    1c56:	2280      	movs	r2, #128	; 0x80
    1c58:	0252      	lsls	r2, r2, #9
    1c5a:	4011      	ands	r1, r2
    1c5c:	697a      	ldr	r2, [r7, #20]
    1c5e:	430a      	orrs	r2, r1
    1c60:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1c62:	4b07      	ldr	r3, [pc, #28]	; (1c80 <system_gclk_gen_set_config+0x120>)
    1c64:	4798      	blx	r3
}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	46bd      	mov	sp, r7
    1c6a:	b006      	add	sp, #24
    1c6c:	bd80      	pop	{r7, pc}
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	00001b11 	.word	0x00001b11
    1c74:	00001ae9 	.word	0x00001ae9
    1c78:	40000c08 	.word	0x40000c08
    1c7c:	40000c00 	.word	0x40000c00
    1c80:	00001afd 	.word	0x00001afd

00001c84 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1c84:	b580      	push	{r7, lr}
    1c86:	b082      	sub	sp, #8
    1c88:	af00      	add	r7, sp, #0
    1c8a:	0002      	movs	r2, r0
    1c8c:	1dfb      	adds	r3, r7, #7
    1c8e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1c90:	46c0      	nop			; (mov r8, r8)
    1c92:	4b0e      	ldr	r3, [pc, #56]	; (1ccc <system_gclk_gen_enable+0x48>)
    1c94:	4798      	blx	r3
    1c96:	1e03      	subs	r3, r0, #0
    1c98:	d1fb      	bne.n	1c92 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1c9a:	4b0d      	ldr	r3, [pc, #52]	; (1cd0 <system_gclk_gen_enable+0x4c>)
    1c9c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c9e:	4a0d      	ldr	r2, [pc, #52]	; (1cd4 <system_gclk_gen_enable+0x50>)
    1ca0:	1dfb      	adds	r3, r7, #7
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	4b08      	ldr	r3, [pc, #32]	; (1ccc <system_gclk_gen_enable+0x48>)
    1caa:	4798      	blx	r3
    1cac:	1e03      	subs	r3, r0, #0
    1cae:	d1fb      	bne.n	1ca8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1cb0:	4b09      	ldr	r3, [pc, #36]	; (1cd8 <system_gclk_gen_enable+0x54>)
    1cb2:	4a09      	ldr	r2, [pc, #36]	; (1cd8 <system_gclk_gen_enable+0x54>)
    1cb4:	6852      	ldr	r2, [r2, #4]
    1cb6:	2180      	movs	r1, #128	; 0x80
    1cb8:	0249      	lsls	r1, r1, #9
    1cba:	430a      	orrs	r2, r1
    1cbc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1cbe:	4b07      	ldr	r3, [pc, #28]	; (1cdc <system_gclk_gen_enable+0x58>)
    1cc0:	4798      	blx	r3
}
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	46bd      	mov	sp, r7
    1cc6:	b002      	add	sp, #8
    1cc8:	bd80      	pop	{r7, pc}
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	00001b11 	.word	0x00001b11
    1cd0:	00001ae9 	.word	0x00001ae9
    1cd4:	40000c04 	.word	0x40000c04
    1cd8:	40000c00 	.word	0x40000c00
    1cdc:	00001afd 	.word	0x00001afd

00001ce0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b084      	sub	sp, #16
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	0002      	movs	r2, r0
    1ce8:	6039      	str	r1, [r7, #0]
    1cea:	1dfb      	adds	r3, r7, #7
    1cec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1cee:	1dfb      	adds	r3, r7, #7
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1cf4:	683b      	ldr	r3, [r7, #0]
    1cf6:	781b      	ldrb	r3, [r3, #0]
    1cf8:	021b      	lsls	r3, r3, #8
    1cfa:	001a      	movs	r2, r3
    1cfc:	68fb      	ldr	r3, [r7, #12]
    1cfe:	4313      	orrs	r3, r2
    1d00:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1d02:	1dfb      	adds	r3, r7, #7
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	0018      	movs	r0, r3
    1d08:	4b04      	ldr	r3, [pc, #16]	; (1d1c <system_gclk_chan_set_config+0x3c>)
    1d0a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1d0c:	4b04      	ldr	r3, [pc, #16]	; (1d20 <system_gclk_chan_set_config+0x40>)
    1d0e:	68fa      	ldr	r2, [r7, #12]
    1d10:	b292      	uxth	r2, r2
    1d12:	805a      	strh	r2, [r3, #2]
}
    1d14:	46c0      	nop			; (mov r8, r8)
    1d16:	46bd      	mov	sp, r7
    1d18:	b004      	add	sp, #16
    1d1a:	bd80      	pop	{r7, pc}
    1d1c:	00001d6d 	.word	0x00001d6d
    1d20:	40000c00 	.word	0x40000c00

00001d24 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1d24:	b580      	push	{r7, lr}
    1d26:	b082      	sub	sp, #8
    1d28:	af00      	add	r7, sp, #0
    1d2a:	0002      	movs	r2, r0
    1d2c:	1dfb      	adds	r3, r7, #7
    1d2e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1d30:	4b0a      	ldr	r3, [pc, #40]	; (1d5c <system_gclk_chan_enable+0x38>)
    1d32:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d34:	4a0a      	ldr	r2, [pc, #40]	; (1d60 <system_gclk_chan_enable+0x3c>)
    1d36:	1dfb      	adds	r3, r7, #7
    1d38:	781b      	ldrb	r3, [r3, #0]
    1d3a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1d3c:	4909      	ldr	r1, [pc, #36]	; (1d64 <system_gclk_chan_enable+0x40>)
    1d3e:	4b09      	ldr	r3, [pc, #36]	; (1d64 <system_gclk_chan_enable+0x40>)
    1d40:	885b      	ldrh	r3, [r3, #2]
    1d42:	b29b      	uxth	r3, r3
    1d44:	2280      	movs	r2, #128	; 0x80
    1d46:	01d2      	lsls	r2, r2, #7
    1d48:	4313      	orrs	r3, r2
    1d4a:	b29b      	uxth	r3, r3
    1d4c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1d4e:	4b06      	ldr	r3, [pc, #24]	; (1d68 <system_gclk_chan_enable+0x44>)
    1d50:	4798      	blx	r3
}
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	46bd      	mov	sp, r7
    1d56:	b002      	add	sp, #8
    1d58:	bd80      	pop	{r7, pc}
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	00001ae9 	.word	0x00001ae9
    1d60:	40000c02 	.word	0x40000c02
    1d64:	40000c00 	.word	0x40000c00
    1d68:	00001afd 	.word	0x00001afd

00001d6c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1d6c:	b580      	push	{r7, lr}
    1d6e:	b084      	sub	sp, #16
    1d70:	af00      	add	r7, sp, #0
    1d72:	0002      	movs	r2, r0
    1d74:	1dfb      	adds	r3, r7, #7
    1d76:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1d78:	4b1c      	ldr	r3, [pc, #112]	; (1dec <system_gclk_chan_disable+0x80>)
    1d7a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d7c:	4a1c      	ldr	r2, [pc, #112]	; (1df0 <system_gclk_chan_disable+0x84>)
    1d7e:	1dfb      	adds	r3, r7, #7
    1d80:	781b      	ldrb	r3, [r3, #0]
    1d82:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1d84:	4b1b      	ldr	r3, [pc, #108]	; (1df4 <system_gclk_chan_disable+0x88>)
    1d86:	885b      	ldrh	r3, [r3, #2]
    1d88:	051b      	lsls	r3, r3, #20
    1d8a:	0f1b      	lsrs	r3, r3, #28
    1d8c:	b2db      	uxtb	r3, r3
    1d8e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1d90:	4a18      	ldr	r2, [pc, #96]	; (1df4 <system_gclk_chan_disable+0x88>)
    1d92:	8853      	ldrh	r3, [r2, #2]
    1d94:	4918      	ldr	r1, [pc, #96]	; (1df8 <system_gclk_chan_disable+0x8c>)
    1d96:	400b      	ands	r3, r1
    1d98:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1d9a:	4a16      	ldr	r2, [pc, #88]	; (1df4 <system_gclk_chan_disable+0x88>)
    1d9c:	4b15      	ldr	r3, [pc, #84]	; (1df4 <system_gclk_chan_disable+0x88>)
    1d9e:	885b      	ldrh	r3, [r3, #2]
    1da0:	b29b      	uxth	r3, r3
    1da2:	4916      	ldr	r1, [pc, #88]	; (1dfc <system_gclk_chan_disable+0x90>)
    1da4:	400b      	ands	r3, r1
    1da6:	b29b      	uxth	r3, r3
    1da8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	4b11      	ldr	r3, [pc, #68]	; (1df4 <system_gclk_chan_disable+0x88>)
    1dae:	885b      	ldrh	r3, [r3, #2]
    1db0:	b29b      	uxth	r3, r3
    1db2:	001a      	movs	r2, r3
    1db4:	2380      	movs	r3, #128	; 0x80
    1db6:	01db      	lsls	r3, r3, #7
    1db8:	4013      	ands	r3, r2
    1dba:	d1f7      	bne.n	1dac <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1dbc:	4a0d      	ldr	r2, [pc, #52]	; (1df4 <system_gclk_chan_disable+0x88>)
    1dbe:	68fb      	ldr	r3, [r7, #12]
    1dc0:	b2db      	uxtb	r3, r3
    1dc2:	1c19      	adds	r1, r3, #0
    1dc4:	230f      	movs	r3, #15
    1dc6:	400b      	ands	r3, r1
    1dc8:	b2d9      	uxtb	r1, r3
    1dca:	8853      	ldrh	r3, [r2, #2]
    1dcc:	1c08      	adds	r0, r1, #0
    1dce:	210f      	movs	r1, #15
    1dd0:	4001      	ands	r1, r0
    1dd2:	0208      	lsls	r0, r1, #8
    1dd4:	4908      	ldr	r1, [pc, #32]	; (1df8 <system_gclk_chan_disable+0x8c>)
    1dd6:	400b      	ands	r3, r1
    1dd8:	1c19      	adds	r1, r3, #0
    1dda:	1c03      	adds	r3, r0, #0
    1ddc:	430b      	orrs	r3, r1
    1dde:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    1de0:	4b07      	ldr	r3, [pc, #28]	; (1e00 <system_gclk_chan_disable+0x94>)
    1de2:	4798      	blx	r3
}
    1de4:	46c0      	nop			; (mov r8, r8)
    1de6:	46bd      	mov	sp, r7
    1de8:	b004      	add	sp, #16
    1dea:	bd80      	pop	{r7, pc}
    1dec:	00001ae9 	.word	0x00001ae9
    1df0:	40000c02 	.word	0x40000c02
    1df4:	40000c00 	.word	0x40000c00
    1df8:	fffff0ff 	.word	0xfffff0ff
    1dfc:	ffffbfff 	.word	0xffffbfff
    1e00:	00001afd 	.word	0x00001afd

00001e04 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    1e04:	b590      	push	{r4, r7, lr}
    1e06:	b085      	sub	sp, #20
    1e08:	af00      	add	r7, sp, #0
    1e0a:	0002      	movs	r2, r0
    1e0c:	1dfb      	adds	r3, r7, #7
    1e0e:	701a      	strb	r2, [r3, #0]
    1e10:	1dbb      	adds	r3, r7, #6
    1e12:	1c0a      	adds	r2, r1, #0
    1e14:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
    1e16:	230f      	movs	r3, #15
    1e18:	18fb      	adds	r3, r7, r3
    1e1a:	2200      	movs	r2, #0
    1e1c:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    1e1e:	1dfb      	adds	r3, r7, #7
    1e20:	781b      	ldrb	r3, [r3, #0]
    1e22:	2b7f      	cmp	r3, #127	; 0x7f
    1e24:	d83c      	bhi.n	1ea0 <system_interrupt_set_priority+0x9c>
		uint8_t register_num = vector / 4;
    1e26:	1dfb      	adds	r3, r7, #7
    1e28:	781b      	ldrb	r3, [r3, #0]
    1e2a:	b25b      	sxtb	r3, r3
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	da00      	bge.n	1e32 <system_interrupt_set_priority+0x2e>
    1e30:	3303      	adds	r3, #3
    1e32:	109b      	asrs	r3, r3, #2
    1e34:	b25a      	sxtb	r2, r3
    1e36:	230e      	movs	r3, #14
    1e38:	18fb      	adds	r3, r7, r3
    1e3a:	701a      	strb	r2, [r3, #0]
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    1e3c:	1dfb      	adds	r3, r7, #7
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	b25b      	sxtb	r3, r3
    1e42:	4a22      	ldr	r2, [pc, #136]	; (1ecc <system_interrupt_set_priority+0xc8>)
    1e44:	4013      	ands	r3, r2
    1e46:	d504      	bpl.n	1e52 <system_interrupt_set_priority+0x4e>
    1e48:	3b01      	subs	r3, #1
    1e4a:	2204      	movs	r2, #4
    1e4c:	4252      	negs	r2, r2
    1e4e:	4313      	orrs	r3, r2
    1e50:	3301      	adds	r3, #1
    1e52:	b25b      	sxtb	r3, r3
    1e54:	b2db      	uxtb	r3, r3
    1e56:	00db      	lsls	r3, r3, #3
    1e58:	b2da      	uxtb	r2, r3
    1e5a:	230d      	movs	r3, #13
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	3206      	adds	r2, #6
    1e60:	701a      	strb	r2, [r3, #0]

		NVIC->IP[register_num] =
    1e62:	4c1b      	ldr	r4, [pc, #108]	; (1ed0 <system_interrupt_set_priority+0xcc>)
    1e64:	230e      	movs	r3, #14
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	781b      	ldrb	r3, [r3, #0]
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    1e6a:	4919      	ldr	r1, [pc, #100]	; (1ed0 <system_interrupt_set_priority+0xcc>)
    1e6c:	220e      	movs	r2, #14
    1e6e:	18ba      	adds	r2, r7, r2
    1e70:	7812      	ldrb	r2, [r2, #0]
    1e72:	32c0      	adds	r2, #192	; 0xc0
    1e74:	0092      	lsls	r2, r2, #2
    1e76:	5852      	ldr	r2, [r2, r1]
    1e78:	210d      	movs	r1, #13
    1e7a:	1879      	adds	r1, r7, r1
    1e7c:	7809      	ldrb	r1, [r1, #0]
    1e7e:	2003      	movs	r0, #3
    1e80:	4088      	lsls	r0, r1
    1e82:	0001      	movs	r1, r0
    1e84:	43c9      	mvns	r1, r1
    1e86:	400a      	ands	r2, r1
				(priority_level << priority_pos);
    1e88:	1db9      	adds	r1, r7, #6
    1e8a:	7808      	ldrb	r0, [r1, #0]
    1e8c:	210d      	movs	r1, #13
    1e8e:	1879      	adds	r1, r7, r1
    1e90:	7809      	ldrb	r1, [r1, #0]
    1e92:	4088      	lsls	r0, r1
    1e94:	0001      	movs	r1, r0
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    1e96:	430a      	orrs	r2, r1
		NVIC->IP[register_num] =
    1e98:	33c0      	adds	r3, #192	; 0xc0
    1e9a:	009b      	lsls	r3, r3, #2
    1e9c:	511a      	str	r2, [r3, r4]
    1e9e:	e00e      	b.n	1ebe <system_interrupt_set_priority+0xba>

	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    1ea0:	1dfb      	adds	r3, r7, #7
    1ea2:	781b      	ldrb	r3, [r3, #0]
    1ea4:	b25b      	sxtb	r3, r3
    1ea6:	3301      	adds	r3, #1
    1ea8:	d105      	bne.n	1eb6 <system_interrupt_set_priority+0xb2>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    1eaa:	4b0a      	ldr	r3, [pc, #40]	; (1ed4 <system_interrupt_set_priority+0xd0>)
    1eac:	1dba      	adds	r2, r7, #6
    1eae:	7812      	ldrb	r2, [r2, #0]
    1eb0:	0792      	lsls	r2, r2, #30
    1eb2:	621a      	str	r2, [r3, #32]
    1eb4:	e003      	b.n	1ebe <system_interrupt_set_priority+0xba>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
    1eb6:	230f      	movs	r3, #15
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	2217      	movs	r2, #23
    1ebc:	701a      	strb	r2, [r3, #0]
	}

	return status;
    1ebe:	230f      	movs	r3, #15
    1ec0:	18fb      	adds	r3, r7, r3
    1ec2:	781b      	ldrb	r3, [r3, #0]
}
    1ec4:	0018      	movs	r0, r3
    1ec6:	46bd      	mov	sp, r7
    1ec8:	b005      	add	sp, #20
    1eca:	bd90      	pop	{r4, r7, pc}
    1ecc:	80000003 	.word	0x80000003
    1ed0:	e000e100 	.word	0xe000e100
    1ed4:	e000ed00 	.word	0xe000ed00

00001ed8 <system_pinmux_get_group_from_gpio_pin>:
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	b084      	sub	sp, #16
    1edc:	af00      	add	r7, sp, #0
    1ede:	0002      	movs	r2, r0
    1ee0:	1dfb      	adds	r3, r7, #7
    1ee2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1ee4:	230f      	movs	r3, #15
    1ee6:	18fb      	adds	r3, r7, r3
    1ee8:	1dfa      	adds	r2, r7, #7
    1eea:	7812      	ldrb	r2, [r2, #0]
    1eec:	09d2      	lsrs	r2, r2, #7
    1eee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1ef0:	230e      	movs	r3, #14
    1ef2:	18fb      	adds	r3, r7, r3
    1ef4:	1dfa      	adds	r2, r7, #7
    1ef6:	7812      	ldrb	r2, [r2, #0]
    1ef8:	0952      	lsrs	r2, r2, #5
    1efa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1efc:	4b0d      	ldr	r3, [pc, #52]	; (1f34 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1efe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1f00:	230f      	movs	r3, #15
    1f02:	18fb      	adds	r3, r7, r3
    1f04:	781b      	ldrb	r3, [r3, #0]
    1f06:	2b00      	cmp	r3, #0
    1f08:	d10f      	bne.n	1f2a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1f0a:	230f      	movs	r3, #15
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	781b      	ldrb	r3, [r3, #0]
    1f10:	009b      	lsls	r3, r3, #2
    1f12:	2210      	movs	r2, #16
    1f14:	4694      	mov	ip, r2
    1f16:	44bc      	add	ip, r7
    1f18:	4463      	add	r3, ip
    1f1a:	3b08      	subs	r3, #8
    1f1c:	681a      	ldr	r2, [r3, #0]
    1f1e:	230e      	movs	r3, #14
    1f20:	18fb      	adds	r3, r7, r3
    1f22:	781b      	ldrb	r3, [r3, #0]
    1f24:	01db      	lsls	r3, r3, #7
    1f26:	18d3      	adds	r3, r2, r3
    1f28:	e000      	b.n	1f2c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1f2a:	2300      	movs	r3, #0
}
    1f2c:	0018      	movs	r0, r3
    1f2e:	46bd      	mov	sp, r7
    1f30:	b004      	add	sp, #16
    1f32:	bd80      	pop	{r7, pc}
    1f34:	41004400 	.word	0x41004400

00001f38 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	b088      	sub	sp, #32
    1f3c:	af00      	add	r7, sp, #0
    1f3e:	60f8      	str	r0, [r7, #12]
    1f40:	60b9      	str	r1, [r7, #8]
    1f42:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1f44:	2300      	movs	r3, #0
    1f46:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	78db      	ldrb	r3, [r3, #3]
    1f4c:	2201      	movs	r2, #1
    1f4e:	4053      	eors	r3, r2
    1f50:	b2db      	uxtb	r3, r3
    1f52:	2b00      	cmp	r3, #0
    1f54:	d035      	beq.n	1fc2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1f56:	687b      	ldr	r3, [r7, #4]
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	2b80      	cmp	r3, #128	; 0x80
    1f5c:	d00b      	beq.n	1f76 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1f5e:	69fb      	ldr	r3, [r7, #28]
    1f60:	2280      	movs	r2, #128	; 0x80
    1f62:	0252      	lsls	r2, r2, #9
    1f64:	4313      	orrs	r3, r2
    1f66:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1f68:	687b      	ldr	r3, [r7, #4]
    1f6a:	781b      	ldrb	r3, [r3, #0]
    1f6c:	061b      	lsls	r3, r3, #24
    1f6e:	001a      	movs	r2, r3
    1f70:	69fb      	ldr	r3, [r7, #28]
    1f72:	4313      	orrs	r3, r2
    1f74:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1f76:	687b      	ldr	r3, [r7, #4]
    1f78:	785b      	ldrb	r3, [r3, #1]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d003      	beq.n	1f86 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1f82:	2b02      	cmp	r3, #2
    1f84:	d110      	bne.n	1fa8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1f86:	69fb      	ldr	r3, [r7, #28]
    1f88:	2280      	movs	r2, #128	; 0x80
    1f8a:	0292      	lsls	r2, r2, #10
    1f8c:	4313      	orrs	r3, r2
    1f8e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1f90:	687b      	ldr	r3, [r7, #4]
    1f92:	789b      	ldrb	r3, [r3, #2]
    1f94:	2b00      	cmp	r3, #0
    1f96:	d004      	beq.n	1fa2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f98:	69fb      	ldr	r3, [r7, #28]
    1f9a:	2280      	movs	r2, #128	; 0x80
    1f9c:	02d2      	lsls	r2, r2, #11
    1f9e:	4313      	orrs	r3, r2
    1fa0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1fa2:	68fb      	ldr	r3, [r7, #12]
    1fa4:	68ba      	ldr	r2, [r7, #8]
    1fa6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	785b      	ldrb	r3, [r3, #1]
    1fac:	2b01      	cmp	r3, #1
    1fae:	d003      	beq.n	1fb8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1fb4:	2b02      	cmp	r3, #2
    1fb6:	d107      	bne.n	1fc8 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1fb8:	69fb      	ldr	r3, [r7, #28]
    1fba:	4a22      	ldr	r2, [pc, #136]	; (2044 <STACK_SIZE+0x44>)
    1fbc:	4013      	ands	r3, r2
    1fbe:	61fb      	str	r3, [r7, #28]
    1fc0:	e002      	b.n	1fc8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1fc2:	68fb      	ldr	r3, [r7, #12]
    1fc4:	68ba      	ldr	r2, [r7, #8]
    1fc6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1fc8:	68bb      	ldr	r3, [r7, #8]
    1fca:	041b      	lsls	r3, r3, #16
    1fcc:	0c1b      	lsrs	r3, r3, #16
    1fce:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1fd0:	68bb      	ldr	r3, [r7, #8]
    1fd2:	0c1b      	lsrs	r3, r3, #16
    1fd4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fd6:	69ba      	ldr	r2, [r7, #24]
    1fd8:	69fb      	ldr	r3, [r7, #28]
    1fda:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1fdc:	22a0      	movs	r2, #160	; 0xa0
    1fde:	05d2      	lsls	r2, r2, #23
    1fe0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fe2:	68fb      	ldr	r3, [r7, #12]
    1fe4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fe6:	697a      	ldr	r2, [r7, #20]
    1fe8:	69fb      	ldr	r3, [r7, #28]
    1fea:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1fec:	22d0      	movs	r2, #208	; 0xd0
    1fee:	0612      	lsls	r2, r2, #24
    1ff0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1ff6:	687b      	ldr	r3, [r7, #4]
    1ff8:	78db      	ldrb	r3, [r3, #3]
    1ffa:	2201      	movs	r2, #1
    1ffc:	4053      	eors	r3, r2
    1ffe:	b2db      	uxtb	r3, r3
    2000:	2b00      	cmp	r3, #0
    2002:	d01a      	beq.n	203a <STACK_SIZE+0x3a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2004:	69fa      	ldr	r2, [r7, #28]
    2006:	2380      	movs	r3, #128	; 0x80
    2008:	02db      	lsls	r3, r3, #11
    200a:	4013      	ands	r3, r2
    200c:	d00a      	beq.n	2024 <STACK_SIZE+0x24>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    200e:	687b      	ldr	r3, [r7, #4]
    2010:	789b      	ldrb	r3, [r3, #2]
    2012:	2b01      	cmp	r3, #1
    2014:	d103      	bne.n	201e <STACK_SIZE+0x1e>
				port->OUTSET.reg = pin_mask;
    2016:	68fb      	ldr	r3, [r7, #12]
    2018:	68ba      	ldr	r2, [r7, #8]
    201a:	619a      	str	r2, [r3, #24]
    201c:	e002      	b.n	2024 <STACK_SIZE+0x24>
			} else {
				port->OUTCLR.reg = pin_mask;
    201e:	68fb      	ldr	r3, [r7, #12]
    2020:	68ba      	ldr	r2, [r7, #8]
    2022:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2024:	687b      	ldr	r3, [r7, #4]
    2026:	785b      	ldrb	r3, [r3, #1]
    2028:	2b01      	cmp	r3, #1
    202a:	d003      	beq.n	2034 <STACK_SIZE+0x34>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2030:	2b02      	cmp	r3, #2
    2032:	d102      	bne.n	203a <STACK_SIZE+0x3a>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2034:	68fb      	ldr	r3, [r7, #12]
    2036:	68ba      	ldr	r2, [r7, #8]
    2038:	609a      	str	r2, [r3, #8]
		}
	}
}
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	46bd      	mov	sp, r7
    203e:	b008      	add	sp, #32
    2040:	bd80      	pop	{r7, pc}
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	fffbffff 	.word	0xfffbffff

00002048 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2048:	b580      	push	{r7, lr}
    204a:	b084      	sub	sp, #16
    204c:	af00      	add	r7, sp, #0
    204e:	0002      	movs	r2, r0
    2050:	6039      	str	r1, [r7, #0]
    2052:	1dfb      	adds	r3, r7, #7
    2054:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2056:	1dfb      	adds	r3, r7, #7
    2058:	781b      	ldrb	r3, [r3, #0]
    205a:	0018      	movs	r0, r3
    205c:	4b0a      	ldr	r3, [pc, #40]	; (2088 <system_pinmux_pin_set_config+0x40>)
    205e:	4798      	blx	r3
    2060:	0003      	movs	r3, r0
    2062:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2064:	1dfb      	adds	r3, r7, #7
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	221f      	movs	r2, #31
    206a:	4013      	ands	r3, r2
    206c:	2201      	movs	r2, #1
    206e:	409a      	lsls	r2, r3
    2070:	0013      	movs	r3, r2
    2072:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2074:	683a      	ldr	r2, [r7, #0]
    2076:	68b9      	ldr	r1, [r7, #8]
    2078:	68fb      	ldr	r3, [r7, #12]
    207a:	0018      	movs	r0, r3
    207c:	4b03      	ldr	r3, [pc, #12]	; (208c <system_pinmux_pin_set_config+0x44>)
    207e:	4798      	blx	r3
}
    2080:	46c0      	nop			; (mov r8, r8)
    2082:	46bd      	mov	sp, r7
    2084:	b004      	add	sp, #16
    2086:	bd80      	pop	{r7, pc}
    2088:	00001ed9 	.word	0x00001ed9
    208c:	00001f39 	.word	0x00001f39

00002090 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2090:	b580      	push	{r7, lr}
    2092:	af00      	add	r7, sp, #0
	return;
    2094:	46c0      	nop			; (mov r8, r8)
}
    2096:	46bd      	mov	sp, r7
    2098:	bd80      	pop	{r7, pc}
	...

0000209c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    209c:	b580      	push	{r7, lr}
    209e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    20a0:	4b06      	ldr	r3, [pc, #24]	; (20bc <system_init+0x20>)
    20a2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    20a4:	4b06      	ldr	r3, [pc, #24]	; (20c0 <system_init+0x24>)
    20a6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    20a8:	4b06      	ldr	r3, [pc, #24]	; (20c4 <system_init+0x28>)
    20aa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    20ac:	4b06      	ldr	r3, [pc, #24]	; (20c8 <system_init+0x2c>)
    20ae:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    20b0:	4b06      	ldr	r3, [pc, #24]	; (20cc <system_init+0x30>)
    20b2:	4798      	blx	r3
}
    20b4:	46c0      	nop			; (mov r8, r8)
    20b6:	46bd      	mov	sp, r7
    20b8:	bd80      	pop	{r7, pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	0000197d 	.word	0x0000197d
    20c0:	00000a89 	.word	0x00000a89
    20c4:	000008c9 	.word	0x000008c9
    20c8:	00002091 	.word	0x00002091
    20cc:	00002091 	.word	0x00002091

000020d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    20d6:	4b2f      	ldr	r3, [pc, #188]	; (2194 <Reset_Handler+0xc4>)
    20d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    20da:	4b2f      	ldr	r3, [pc, #188]	; (2198 <Reset_Handler+0xc8>)
    20dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    20de:	687a      	ldr	r2, [r7, #4]
    20e0:	683b      	ldr	r3, [r7, #0]
    20e2:	429a      	cmp	r2, r3
    20e4:	d00c      	beq.n	2100 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    20e6:	e007      	b.n	20f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    20e8:	683b      	ldr	r3, [r7, #0]
    20ea:	1d1a      	adds	r2, r3, #4
    20ec:	603a      	str	r2, [r7, #0]
    20ee:	687a      	ldr	r2, [r7, #4]
    20f0:	1d11      	adds	r1, r2, #4
    20f2:	6079      	str	r1, [r7, #4]
    20f4:	6812      	ldr	r2, [r2, #0]
    20f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    20f8:	683a      	ldr	r2, [r7, #0]
    20fa:	4b28      	ldr	r3, [pc, #160]	; (219c <Reset_Handler+0xcc>)
    20fc:	429a      	cmp	r2, r3
    20fe:	d3f3      	bcc.n	20e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2100:	4b27      	ldr	r3, [pc, #156]	; (21a0 <Reset_Handler+0xd0>)
    2102:	603b      	str	r3, [r7, #0]
    2104:	e004      	b.n	2110 <Reset_Handler+0x40>
                *pDest++ = 0;
    2106:	683b      	ldr	r3, [r7, #0]
    2108:	1d1a      	adds	r2, r3, #4
    210a:	603a      	str	r2, [r7, #0]
    210c:	2200      	movs	r2, #0
    210e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    2110:	683a      	ldr	r2, [r7, #0]
    2112:	4b24      	ldr	r3, [pc, #144]	; (21a4 <Reset_Handler+0xd4>)
    2114:	429a      	cmp	r2, r3
    2116:	d3f6      	bcc.n	2106 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2118:	4b23      	ldr	r3, [pc, #140]	; (21a8 <Reset_Handler+0xd8>)
    211a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    211c:	4b23      	ldr	r3, [pc, #140]	; (21ac <Reset_Handler+0xdc>)
    211e:	687a      	ldr	r2, [r7, #4]
    2120:	21ff      	movs	r1, #255	; 0xff
    2122:	438a      	bics	r2, r1
    2124:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2126:	4a22      	ldr	r2, [pc, #136]	; (21b0 <Reset_Handler+0xe0>)
    2128:	2390      	movs	r3, #144	; 0x90
    212a:	005b      	lsls	r3, r3, #1
    212c:	2102      	movs	r1, #2
    212e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2130:	4a20      	ldr	r2, [pc, #128]	; (21b4 <Reset_Handler+0xe4>)
    2132:	78d3      	ldrb	r3, [r2, #3]
    2134:	2103      	movs	r1, #3
    2136:	438b      	bics	r3, r1
    2138:	1c19      	adds	r1, r3, #0
    213a:	2302      	movs	r3, #2
    213c:	430b      	orrs	r3, r1
    213e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2140:	4a1c      	ldr	r2, [pc, #112]	; (21b4 <Reset_Handler+0xe4>)
    2142:	78d3      	ldrb	r3, [r2, #3]
    2144:	210c      	movs	r1, #12
    2146:	438b      	bics	r3, r1
    2148:	1c19      	adds	r1, r3, #0
    214a:	2308      	movs	r3, #8
    214c:	430b      	orrs	r3, r1
    214e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2150:	4a19      	ldr	r2, [pc, #100]	; (21b8 <Reset_Handler+0xe8>)
    2152:	7b93      	ldrb	r3, [r2, #14]
    2154:	2130      	movs	r1, #48	; 0x30
    2156:	438b      	bics	r3, r1
    2158:	1c19      	adds	r1, r3, #0
    215a:	2320      	movs	r3, #32
    215c:	430b      	orrs	r3, r1
    215e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2160:	4a15      	ldr	r2, [pc, #84]	; (21b8 <Reset_Handler+0xe8>)
    2162:	7b93      	ldrb	r3, [r2, #14]
    2164:	210c      	movs	r1, #12
    2166:	438b      	bics	r3, r1
    2168:	1c19      	adds	r1, r3, #0
    216a:	2308      	movs	r3, #8
    216c:	430b      	orrs	r3, r1
    216e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2170:	4a11      	ldr	r2, [pc, #68]	; (21b8 <Reset_Handler+0xe8>)
    2172:	7b93      	ldrb	r3, [r2, #14]
    2174:	2103      	movs	r1, #3
    2176:	438b      	bics	r3, r1
    2178:	1c19      	adds	r1, r3, #0
    217a:	2302      	movs	r3, #2
    217c:	430b      	orrs	r3, r1
    217e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2180:	4a0e      	ldr	r2, [pc, #56]	; (21bc <Reset_Handler+0xec>)
    2182:	6853      	ldr	r3, [r2, #4]
    2184:	2180      	movs	r1, #128	; 0x80
    2186:	430b      	orrs	r3, r1
    2188:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    218a:	4b0d      	ldr	r3, [pc, #52]	; (21c0 <Reset_Handler+0xf0>)
    218c:	4798      	blx	r3

        /* Branch to main function */
        main();
    218e:	4b0d      	ldr	r3, [pc, #52]	; (21c4 <Reset_Handler+0xf4>)
    2190:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2192:	e7fe      	b.n	2192 <Reset_Handler+0xc2>
    2194:	00002908 	.word	0x00002908
    2198:	20000000 	.word	0x20000000
    219c:	20000020 	.word	0x20000020
    21a0:	20000020 	.word	0x20000020
    21a4:	2000012c 	.word	0x2000012c
    21a8:	00000000 	.word	0x00000000
    21ac:	e000ed00 	.word	0xe000ed00
    21b0:	41007000 	.word	0x41007000
    21b4:	41005000 	.word	0x41005000
    21b8:	41004800 	.word	0x41004800
    21bc:	41004000 	.word	0x41004000
    21c0:	0000271d 	.word	0x0000271d
    21c4:	000026b9 	.word	0x000026b9

000021c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    21c8:	b580      	push	{r7, lr}
    21ca:	af00      	add	r7, sp, #0
        while (1) {
    21cc:	e7fe      	b.n	21cc <Dummy_Handler+0x4>
	...

000021d0 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    21d4:	4b04      	ldr	r3, [pc, #16]	; (21e8 <system_interrupt_enable_global+0x18>)
    21d6:	2201      	movs	r2, #1
    21d8:	701a      	strb	r2, [r3, #0]
    21da:	f3bf 8f5f 	dmb	sy
    21de:	b662      	cpsie	i
}
    21e0:	46c0      	nop			; (mov r8, r8)
    21e2:	46bd      	mov	sp, r7
    21e4:	bd80      	pop	{r7, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	20000014 	.word	0x20000014

000021ec <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	b082      	sub	sp, #8
    21f0:	af00      	add	r7, sp, #0
    21f2:	0002      	movs	r2, r0
    21f4:	1dfb      	adds	r3, r7, #7
    21f6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    21f8:	4b06      	ldr	r3, [pc, #24]	; (2214 <system_interrupt_enable+0x28>)
    21fa:	1dfa      	adds	r2, r7, #7
    21fc:	7812      	ldrb	r2, [r2, #0]
    21fe:	0011      	movs	r1, r2
    2200:	221f      	movs	r2, #31
    2202:	400a      	ands	r2, r1
    2204:	2101      	movs	r1, #1
    2206:	4091      	lsls	r1, r2
    2208:	000a      	movs	r2, r1
    220a:	601a      	str	r2, [r3, #0]
}
    220c:	46c0      	nop			; (mov r8, r8)
    220e:	46bd      	mov	sp, r7
    2210:	b002      	add	sp, #8
    2212:	bd80      	pop	{r7, pc}
    2214:	e000e100 	.word	0xe000e100

00002218 <adc_is_syncing>:
{
    2218:	b580      	push	{r7, lr}
    221a:	b084      	sub	sp, #16
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	681b      	ldr	r3, [r3, #0]
    2224:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2226:	68fb      	ldr	r3, [r7, #12]
    2228:	7e5b      	ldrb	r3, [r3, #25]
    222a:	b2db      	uxtb	r3, r3
    222c:	b25b      	sxtb	r3, r3
    222e:	2b00      	cmp	r3, #0
    2230:	da01      	bge.n	2236 <adc_is_syncing+0x1e>
		return true;
    2232:	2301      	movs	r3, #1
    2234:	e000      	b.n	2238 <adc_is_syncing+0x20>
	return false;
    2236:	2300      	movs	r3, #0
}
    2238:	0018      	movs	r0, r3
    223a:	46bd      	mov	sp, r7
    223c:	b004      	add	sp, #16
    223e:	bd80      	pop	{r7, pc}

00002240 <adc_enable>:
{
    2240:	b580      	push	{r7, lr}
    2242:	b084      	sub	sp, #16
    2244:	af00      	add	r7, sp, #0
    2246:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	681b      	ldr	r3, [r3, #0]
    224c:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	0018      	movs	r0, r3
    2254:	4b10      	ldr	r3, [pc, #64]	; (2298 <adc_enable+0x58>)
    2256:	4798      	blx	r3
    2258:	1e03      	subs	r3, r0, #0
    225a:	d1f9      	bne.n	2250 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    225c:	2017      	movs	r0, #23
    225e:	4b0f      	ldr	r3, [pc, #60]	; (229c <adc_enable+0x5c>)
    2260:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2262:	68fb      	ldr	r3, [r7, #12]
    2264:	220f      	movs	r2, #15
    2266:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2268:	68fb      	ldr	r3, [r7, #12]
    226a:	220f      	movs	r2, #15
    226c:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    226e:	68fb      	ldr	r3, [r7, #12]
    2270:	781b      	ldrb	r3, [r3, #0]
    2272:	b2db      	uxtb	r3, r3
    2274:	2202      	movs	r2, #2
    2276:	4313      	orrs	r3, r2
    2278:	b2da      	uxtb	r2, r3
    227a:	68fb      	ldr	r3, [r7, #12]
    227c:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	0018      	movs	r0, r3
    2284:	4b04      	ldr	r3, [pc, #16]	; (2298 <adc_enable+0x58>)
    2286:	4798      	blx	r3
    2288:	1e03      	subs	r3, r0, #0
    228a:	d1f9      	bne.n	2280 <adc_enable+0x40>
	return STATUS_OK;
    228c:	2300      	movs	r3, #0
}
    228e:	0018      	movs	r0, r3
    2290:	46bd      	mov	sp, r7
    2292:	b004      	add	sp, #16
    2294:	bd80      	pop	{r7, pc}
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	00002219 	.word	0x00002219
    229c:	000021ed 	.word	0x000021ed

000022a0 <adc_start_conversion>:
{
    22a0:	b580      	push	{r7, lr}
    22a2:	b084      	sub	sp, #16
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	681b      	ldr	r3, [r3, #0]
    22ac:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	0018      	movs	r0, r3
    22b4:	4b0b      	ldr	r3, [pc, #44]	; (22e4 <adc_start_conversion+0x44>)
    22b6:	4798      	blx	r3
    22b8:	1e03      	subs	r3, r0, #0
    22ba:	d1f9      	bne.n	22b0 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    22bc:	68fb      	ldr	r3, [r7, #12]
    22be:	7b1b      	ldrb	r3, [r3, #12]
    22c0:	b2db      	uxtb	r3, r3
    22c2:	2202      	movs	r2, #2
    22c4:	4313      	orrs	r3, r2
    22c6:	b2da      	uxtb	r2, r3
    22c8:	68fb      	ldr	r3, [r7, #12]
    22ca:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
    22cc:	46c0      	nop			; (mov r8, r8)
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	0018      	movs	r0, r3
    22d2:	4b04      	ldr	r3, [pc, #16]	; (22e4 <adc_start_conversion+0x44>)
    22d4:	4798      	blx	r3
    22d6:	1e03      	subs	r3, r0, #0
    22d8:	d1f9      	bne.n	22ce <adc_start_conversion+0x2e>
}
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	46bd      	mov	sp, r7
    22de:	b004      	add	sp, #16
    22e0:	bd80      	pop	{r7, pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	00002219 	.word	0x00002219

000022e8 <adc_enable_interrupt>:
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b084      	sub	sp, #16
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
    22f0:	000a      	movs	r2, r1
    22f2:	1cfb      	adds	r3, r7, #3
    22f4:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	681b      	ldr	r3, [r3, #0]
    22fa:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
    22fc:	68fb      	ldr	r3, [r7, #12]
    22fe:	1cfa      	adds	r2, r7, #3
    2300:	7812      	ldrb	r2, [r2, #0]
    2302:	75da      	strb	r2, [r3, #23]
}
    2304:	46c0      	nop			; (mov r8, r8)
    2306:	46bd      	mov	sp, r7
    2308:	b004      	add	sp, #16
    230a:	bd80      	pop	{r7, pc}

0000230c <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
    230c:	b580      	push	{r7, lr}
    230e:	b082      	sub	sp, #8
    2310:	af00      	add	r7, sp, #0
    2312:	6078      	str	r0, [r7, #4]
    2314:	000a      	movs	r2, r1
    2316:	1cfb      	adds	r3, r7, #3
    2318:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    231a:	687b      	ldr	r3, [r7, #4]
    231c:	7edb      	ldrb	r3, [r3, #27]
    231e:	b25a      	sxtb	r2, r3
    2320:	1cfb      	adds	r3, r7, #3
    2322:	781b      	ldrb	r3, [r3, #0]
    2324:	2101      	movs	r1, #1
    2326:	4099      	lsls	r1, r3
    2328:	000b      	movs	r3, r1
    232a:	b25b      	sxtb	r3, r3
    232c:	4313      	orrs	r3, r2
    232e:	b25b      	sxtb	r3, r3
    2330:	b2da      	uxtb	r2, r3
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
    2336:	1cfb      	adds	r3, r7, #3
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	2b01      	cmp	r3, #1
    233c:	d104      	bne.n	2348 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	2104      	movs	r1, #4
    2342:	0018      	movs	r0, r3
    2344:	4b07      	ldr	r3, [pc, #28]	; (2364 <adc_enable_callback+0x58>)
    2346:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
    2348:	1cfb      	adds	r3, r7, #3
    234a:	781b      	ldrb	r3, [r3, #0]
    234c:	2b02      	cmp	r3, #2
    234e:	d104      	bne.n	235a <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
    2350:	687b      	ldr	r3, [r7, #4]
    2352:	2102      	movs	r1, #2
    2354:	0018      	movs	r0, r3
    2356:	4b03      	ldr	r3, [pc, #12]	; (2364 <adc_enable_callback+0x58>)
    2358:	4798      	blx	r3
	}
}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	46bd      	mov	sp, r7
    235e:	b002      	add	sp, #8
    2360:	bd80      	pop	{r7, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	000022e9 	.word	0x000022e9

00002368 <tc_is_syncing>:
{
    2368:	b580      	push	{r7, lr}
    236a:	b084      	sub	sp, #16
    236c:	af00      	add	r7, sp, #0
    236e:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	681b      	ldr	r3, [r3, #0]
    2374:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2376:	68fb      	ldr	r3, [r7, #12]
    2378:	7bdb      	ldrb	r3, [r3, #15]
    237a:	b2db      	uxtb	r3, r3
    237c:	001a      	movs	r2, r3
    237e:	2380      	movs	r3, #128	; 0x80
    2380:	4013      	ands	r3, r2
    2382:	1e5a      	subs	r2, r3, #1
    2384:	4193      	sbcs	r3, r2
    2386:	b2db      	uxtb	r3, r3
}
    2388:	0018      	movs	r0, r3
    238a:	46bd      	mov	sp, r7
    238c:	b004      	add	sp, #16
    238e:	bd80      	pop	{r7, pc}

00002390 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    2390:	b580      	push	{r7, lr}
    2392:	b082      	sub	sp, #8
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	2200      	movs	r2, #0
    239c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	2200      	movs	r2, #0
    23a2:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	2200      	movs	r2, #0
    23a8:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	2200      	movs	r2, #0
    23ae:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	2200      	movs	r2, #0
    23b4:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    23b6:	687b      	ldr	r3, [r7, #4]
    23b8:	2200      	movs	r2, #0
    23ba:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	2200      	movs	r2, #0
    23c0:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	2200      	movs	r2, #0
    23c6:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	2200      	movs	r2, #0
    23cc:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    23ce:	687b      	ldr	r3, [r7, #4]
    23d0:	2200      	movs	r2, #0
    23d2:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	2200      	movs	r2, #0
    23d8:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	2200      	movs	r2, #0
    23de:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	2200      	movs	r2, #0
    23e4:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	2200      	movs	r2, #0
    23ea:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    23ec:	687b      	ldr	r3, [r7, #4]
    23ee:	2200      	movs	r2, #0
    23f0:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	2200      	movs	r2, #0
    23f6:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    23f8:	687b      	ldr	r3, [r7, #4]
    23fa:	2200      	movs	r2, #0
    23fc:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	2200      	movs	r2, #0
    2402:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	2200      	movs	r2, #0
    2408:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    240a:	687b      	ldr	r3, [r7, #4]
    240c:	2200      	movs	r2, #0
    240e:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    2410:	46c0      	nop			; (mov r8, r8)
    2412:	46bd      	mov	sp, r7
    2414:	b002      	add	sp, #8
    2416:	bd80      	pop	{r7, pc}

00002418 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    2418:	b580      	push	{r7, lr}
    241a:	b084      	sub	sp, #16
    241c:	af00      	add	r7, sp, #0
    241e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	681b      	ldr	r3, [r3, #0]
    2424:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	0018      	movs	r0, r3
    242c:	4b07      	ldr	r3, [pc, #28]	; (244c <tc_enable+0x34>)
    242e:	4798      	blx	r3
    2430:	1e03      	subs	r3, r0, #0
    2432:	d1f9      	bne.n	2428 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2434:	68fb      	ldr	r3, [r7, #12]
    2436:	881b      	ldrh	r3, [r3, #0]
    2438:	b29b      	uxth	r3, r3
    243a:	2202      	movs	r2, #2
    243c:	4313      	orrs	r3, r2
    243e:	b29a      	uxth	r2, r3
    2440:	68fb      	ldr	r3, [r7, #12]
    2442:	801a      	strh	r2, [r3, #0]
}
    2444:	46c0      	nop			; (mov r8, r8)
    2446:	46bd      	mov	sp, r7
    2448:	b004      	add	sp, #16
    244a:	bd80      	pop	{r7, pc}
    244c:	00002369 	.word	0x00002369

00002450 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    2450:	b580      	push	{r7, lr}
    2452:	b082      	sub	sp, #8
    2454:	af00      	add	r7, sp, #0
    2456:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2458:	4a04      	ldr	r2, [pc, #16]	; (246c <_tc_interrupt_get_interrupt_vector+0x1c>)
    245a:	687b      	ldr	r3, [r7, #4]
    245c:	18d3      	adds	r3, r2, r3
    245e:	781b      	ldrb	r3, [r3, #0]
    2460:	b25b      	sxtb	r3, r3
}
    2462:	0018      	movs	r0, r3
    2464:	46bd      	mov	sp, r7
    2466:	b002      	add	sp, #8
    2468:	bd80      	pop	{r7, pc}
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	20000018 	.word	0x20000018

00002470 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    2470:	b580      	push	{r7, lr}
    2472:	b082      	sub	sp, #8
    2474:	af00      	add	r7, sp, #0
    2476:	6078      	str	r0, [r7, #4]
    2478:	000a      	movs	r2, r1
    247a:	1cfb      	adds	r3, r7, #3
    247c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	681b      	ldr	r3, [r3, #0]
    2482:	0018      	movs	r0, r3
    2484:	4b22      	ldr	r3, [pc, #136]	; (2510 <tc_enable_callback+0xa0>)
    2486:	4798      	blx	r3
    2488:	0003      	movs	r3, r0
    248a:	0018      	movs	r0, r3
    248c:	4b21      	ldr	r3, [pc, #132]	; (2514 <tc_enable_callback+0xa4>)
    248e:	4798      	blx	r3
    2490:	0003      	movs	r3, r0
    2492:	0018      	movs	r0, r3
    2494:	4b20      	ldr	r3, [pc, #128]	; (2518 <tc_enable_callback+0xa8>)
    2496:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2498:	1cfb      	adds	r3, r7, #3
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	2b02      	cmp	r3, #2
    249e:	d10b      	bne.n	24b8 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    24a0:	687b      	ldr	r3, [r7, #4]
    24a2:	7e5b      	ldrb	r3, [r3, #25]
    24a4:	2210      	movs	r2, #16
    24a6:	4313      	orrs	r3, r2
    24a8:	b2da      	uxtb	r2, r3
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	681b      	ldr	r3, [r3, #0]
    24b2:	2210      	movs	r2, #16
    24b4:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    24b6:	e026      	b.n	2506 <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    24b8:	1cfb      	adds	r3, r7, #3
    24ba:	781b      	ldrb	r3, [r3, #0]
    24bc:	2b03      	cmp	r3, #3
    24be:	d10b      	bne.n	24d8 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	7e5b      	ldrb	r3, [r3, #25]
    24c4:	2220      	movs	r2, #32
    24c6:	4313      	orrs	r3, r2
    24c8:	b2da      	uxtb	r2, r3
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	681b      	ldr	r3, [r3, #0]
    24d2:	2220      	movs	r2, #32
    24d4:	735a      	strb	r2, [r3, #13]
}
    24d6:	e016      	b.n	2506 <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	7e5b      	ldrb	r3, [r3, #25]
    24dc:	b25a      	sxtb	r2, r3
    24de:	1cfb      	adds	r3, r7, #3
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	2101      	movs	r1, #1
    24e4:	4099      	lsls	r1, r3
    24e6:	000b      	movs	r3, r1
    24e8:	b25b      	sxtb	r3, r3
    24ea:	4313      	orrs	r3, r2
    24ec:	b25b      	sxtb	r3, r3
    24ee:	b2da      	uxtb	r2, r3
    24f0:	687b      	ldr	r3, [r7, #4]
    24f2:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	681b      	ldr	r3, [r3, #0]
    24f8:	1cfa      	adds	r2, r7, #3
    24fa:	7812      	ldrb	r2, [r2, #0]
    24fc:	2101      	movs	r1, #1
    24fe:	4091      	lsls	r1, r2
    2500:	000a      	movs	r2, r1
    2502:	b2d2      	uxtb	r2, r2
    2504:	735a      	strb	r2, [r3, #13]
}
    2506:	46c0      	nop			; (mov r8, r8)
    2508:	46bd      	mov	sp, r7
    250a:	b002      	add	sp, #8
    250c:	bd80      	pop	{r7, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	00000369 	.word	0x00000369
    2514:	00002451 	.word	0x00002451
    2518:	000021ed 	.word	0x000021ed

0000251c <configure_tc>:
	events_attach_user(resource, EVSYS_ID_USER_ADC_START);
	//! [setup_5]
}

static void configure_tc(void)
{
    251c:	b580      	push	{r7, lr}
    251e:	b08e      	sub	sp, #56	; 0x38
    2520:	af00      	add	r7, sp, #0
	
	struct tc_config s_configTc;

	tc_get_config_defaults(&s_configTc);
    2522:	1d3b      	adds	r3, r7, #4
    2524:	0018      	movs	r0, r3
    2526:	4b0e      	ldr	r3, [pc, #56]	; (2560 <configure_tc+0x44>)
    2528:	4798      	blx	r3

	s_configTc.counter_size = TC_COUNTER_SIZE_16BIT;
    252a:	1d3b      	adds	r3, r7, #4
    252c:	2200      	movs	r2, #0
    252e:	709a      	strb	r2, [r3, #2]
	s_configTc.clock_source = GCLK_GENERATOR_0;
    2530:	1d3b      	adds	r3, r7, #4
    2532:	2200      	movs	r2, #0
    2534:	701a      	strb	r2, [r3, #0]
	s_configTc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
    2536:	1d3b      	adds	r3, r7, #4
    2538:	2280      	movs	r2, #128	; 0x80
    253a:	00d2      	lsls	r2, r2, #3
    253c:	809a      	strh	r2, [r3, #4]
	s_configTc.reload_action = TC_CTRLA_PRESCSYNC_GCLK;
    253e:	1d3b      	adds	r3, r7, #4
    2540:	2200      	movs	r2, #0
    2542:	811a      	strh	r2, [r3, #8]

	tc_init(&tc_instance, TC4, &s_configTc);
    2544:	1d3a      	adds	r2, r7, #4
    2546:	4907      	ldr	r1, [pc, #28]	; (2564 <configure_tc+0x48>)
    2548:	4b07      	ldr	r3, [pc, #28]	; (2568 <configure_tc+0x4c>)
    254a:	0018      	movs	r0, r3
    254c:	4b07      	ldr	r3, [pc, #28]	; (256c <configure_tc+0x50>)
    254e:	4798      	blx	r3

	tc_enable(&tc_instance);
    2550:	4b05      	ldr	r3, [pc, #20]	; (2568 <configure_tc+0x4c>)
    2552:	0018      	movs	r0, r3
    2554:	4b06      	ldr	r3, [pc, #24]	; (2570 <configure_tc+0x54>)
    2556:	4798      	blx	r3
}
    2558:	46c0      	nop			; (mov r8, r8)
    255a:	46bd      	mov	sp, r7
    255c:	b00e      	add	sp, #56	; 0x38
    255e:	bd80      	pop	{r7, pc}
    2560:	00002391 	.word	0x00002391
    2564:	42003000 	.word	0x42003000
    2568:	200000ec 	.word	0x200000ec
    256c:	000003b5 	.word	0x000003b5
    2570:	00002419 	.word	0x00002419

00002574 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    2574:	b580      	push	{r7, lr}
    2576:	af00      	add	r7, sp, #0
	tc_register_callback(&tc_instance, tc_callback,TC_CALLBACK_OVERFLOW);
    2578:	4906      	ldr	r1, [pc, #24]	; (2594 <configure_tc_callbacks+0x20>)
    257a:	4b07      	ldr	r3, [pc, #28]	; (2598 <configure_tc_callbacks+0x24>)
    257c:	2200      	movs	r2, #0
    257e:	0018      	movs	r0, r3
    2580:	4b06      	ldr	r3, [pc, #24]	; (259c <configure_tc_callbacks+0x28>)
    2582:	4798      	blx	r3
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
    2584:	4b04      	ldr	r3, [pc, #16]	; (2598 <configure_tc_callbacks+0x24>)
    2586:	2100      	movs	r1, #0
    2588:	0018      	movs	r0, r3
    258a:	4b05      	ldr	r3, [pc, #20]	; (25a0 <configure_tc_callbacks+0x2c>)
    258c:	4798      	blx	r3
}
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	46bd      	mov	sp, r7
    2592:	bd80      	pop	{r7, pc}
    2594:	0000268d 	.word	0x0000268d
    2598:	200000ec 	.word	0x200000ec
    259c:	00000115 	.word	0x00000115
    25a0:	00002471 	.word	0x00002471

000025a4 <configure_adc>:
		events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
	}
}

void configure_adc(void)
{
    25a4:	b580      	push	{r7, lr}
    25a6:	b08c      	sub	sp, #48	; 0x30
    25a8:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    25aa:	003b      	movs	r3, r7
    25ac:	0018      	movs	r0, r3
    25ae:	4b13      	ldr	r3, [pc, #76]	; (25fc <configure_adc+0x58>)
    25b0:	4798      	blx	r3

	config_adc.gain_factor     = ADC_GAIN_FACTOR_1X;
    25b2:	003b      	movs	r3, r7
    25b4:	2200      	movs	r2, #0
    25b6:	609a      	str	r2, [r3, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    25b8:	003b      	movs	r3, r7
    25ba:	2200      	movs	r2, #0
    25bc:	805a      	strh	r2, [r3, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
    25be:	003b      	movs	r3, r7
    25c0:	2202      	movs	r2, #2
    25c2:	705a      	strb	r2, [r3, #1]
	config_adc.differential_mode = true;
    25c4:	003b      	movs	r3, r7
    25c6:	2201      	movs	r2, #1
    25c8:	74da      	strb	r2, [r3, #19]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    25ca:	003b      	movs	r3, r7
    25cc:	2200      	movs	r2, #0
    25ce:	731a      	strb	r2, [r3, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_PIN4;
    25d0:	003b      	movs	r3, r7
    25d2:	2280      	movs	r2, #128	; 0x80
    25d4:	00d2      	lsls	r2, r2, #3
    25d6:	81da      	strh	r2, [r3, #14]
	//config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN6;
	config_adc.resolution      = ADC_RESOLUTION_14BIT;
    25d8:	003b      	movs	r3, r7
    25da:	2232      	movs	r2, #50	; 0x32
    25dc:	711a      	strb	r2, [r3, #4]

	adc_init(&adc_instance, ADC, &config_adc);
    25de:	003a      	movs	r2, r7
    25e0:	4907      	ldr	r1, [pc, #28]	; (2600 <configure_adc+0x5c>)
    25e2:	4b08      	ldr	r3, [pc, #32]	; (2604 <configure_adc+0x60>)
    25e4:	0018      	movs	r0, r3
    25e6:	4b08      	ldr	r3, [pc, #32]	; (2608 <configure_adc+0x64>)
    25e8:	4798      	blx	r3
	adc_enable(&adc_instance);
    25ea:	4b06      	ldr	r3, [pc, #24]	; (2604 <configure_adc+0x60>)
    25ec:	0018      	movs	r0, r3
    25ee:	4b07      	ldr	r3, [pc, #28]	; (260c <configure_adc+0x68>)
    25f0:	4798      	blx	r3
	//conf_adc.gain_factor = ADC_GAIN_FACTOR_1X;
//
	//adc_init(&adc_instance, ADC, &conf_adc);
//
	//adc_enable(&adc_instance);
}
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	46bd      	mov	sp, r7
    25f6:	b00c      	add	sp, #48	; 0x30
    25f8:	bd80      	pop	{r7, pc}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	00000bdd 	.word	0x00000bdd
    2600:	42004000 	.word	0x42004000
    2604:	20000108 	.word	0x20000108
    2608:	0000122d 	.word	0x0000122d
    260c:	00002241 	.word	0x00002241

00002610 <configure_adc_callbacks>:

void configure_adc_callbacks(void)
{
    2610:	b580      	push	{r7, lr}
    2612:	af00      	add	r7, sp, #0
	adc_register_callback(&adc_instance, adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
    2614:	4906      	ldr	r1, [pc, #24]	; (2630 <configure_adc_callbacks+0x20>)
    2616:	4b07      	ldr	r3, [pc, #28]	; (2634 <configure_adc_callbacks+0x24>)
    2618:	2200      	movs	r2, #0
    261a:	0018      	movs	r0, r3
    261c:	4b06      	ldr	r3, [pc, #24]	; (2638 <configure_adc_callbacks+0x28>)
    261e:	4798      	blx	r3
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
    2620:	4b04      	ldr	r3, [pc, #16]	; (2634 <configure_adc_callbacks+0x24>)
    2622:	2100      	movs	r1, #0
    2624:	0018      	movs	r0, r3
    2626:	4b05      	ldr	r3, [pc, #20]	; (263c <configure_adc_callbacks+0x2c>)
    2628:	4798      	blx	r3
}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	46bd      	mov	sp, r7
    262e:	bd80      	pop	{r7, pc}
    2630:	00002641 	.word	0x00002641
    2634:	20000108 	.word	0x20000108
    2638:	00001509 	.word	0x00001509
    263c:	0000230d 	.word	0x0000230d

00002640 <adc_complete_callback>:

uint32_t counter;

void adc_complete_callback(struct adc_module *const module)
{
    2640:	b580      	push	{r7, lr}
    2642:	b082      	sub	sp, #8
    2644:	af00      	add	r7, sp, #0
    2646:	6078      	str	r0, [r7, #4]
	//adc_read_done = true;
	adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    2648:	490b      	ldr	r1, [pc, #44]	; (2678 <adc_complete_callback+0x38>)
    264a:	4b0c      	ldr	r3, [pc, #48]	; (267c <adc_complete_callback+0x3c>)
    264c:	2210      	movs	r2, #16
    264e:	0018      	movs	r0, r3
    2650:	4b0b      	ldr	r3, [pc, #44]	; (2680 <adc_complete_callback+0x40>)
    2652:	4798      	blx	r3
	counter += 16;
    2654:	4b0b      	ldr	r3, [pc, #44]	; (2684 <adc_complete_callback+0x44>)
    2656:	681b      	ldr	r3, [r3, #0]
    2658:	3310      	adds	r3, #16
    265a:	001a      	movs	r2, r3
    265c:	4b09      	ldr	r3, [pc, #36]	; (2684 <adc_complete_callback+0x44>)
    265e:	601a      	str	r2, [r3, #0]
	if(counter >= 8192)
    2660:	4b08      	ldr	r3, [pc, #32]	; (2684 <adc_complete_callback+0x44>)
    2662:	681b      	ldr	r3, [r3, #0]
    2664:	4a08      	ldr	r2, [pc, #32]	; (2688 <adc_complete_callback+0x48>)
    2666:	4293      	cmp	r3, r2
    2668:	d902      	bls.n	2670 <adc_complete_callback+0x30>
	{
		counter = 0;
    266a:	4b06      	ldr	r3, [pc, #24]	; (2684 <adc_complete_callback+0x44>)
    266c:	2200      	movs	r2, #0
    266e:	601a      	str	r2, [r3, #0]
	}
}
    2670:	46c0      	nop			; (mov r8, r8)
    2672:	46bd      	mov	sp, r7
    2674:	b002      	add	sp, #8
    2676:	bd80      	pop	{r7, pc}
    2678:	20000090 	.word	0x20000090
    267c:	20000108 	.word	0x20000108
    2680:	00001549 	.word	0x00001549
    2684:	200000b0 	.word	0x200000b0
    2688:	00001fff 	.word	0x00001fff

0000268c <tc_callback>:

void tc_callback(struct tc_module *const module_inst)
{	
    268c:	b580      	push	{r7, lr}
    268e:	b082      	sub	sp, #8
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
	module_inst->hw->COUNT16.COUNT.reg = 65535 - (500000 / 8192 - 1);		//EXECUTION_TIMER_PERIOD sec period
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	223d      	movs	r2, #61	; 0x3d
    269a:	4252      	negs	r2, r2
    269c:	821a      	strh	r2, [r3, #16]
	
	adc_start_conversion(&adc_instance);
    269e:	4b04      	ldr	r3, [pc, #16]	; (26b0 <tc_callback+0x24>)
    26a0:	0018      	movs	r0, r3
    26a2:	4b04      	ldr	r3, [pc, #16]	; (26b4 <tc_callback+0x28>)
    26a4:	4798      	blx	r3
}
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	46bd      	mov	sp, r7
    26aa:	b002      	add	sp, #8
    26ac:	bd80      	pop	{r7, pc}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	20000108 	.word	0x20000108
    26b4:	000022a1 	.word	0x000022a1

000026b8 <main>:

int main(void)
{
    26b8:	b580      	push	{r7, lr}
    26ba:	b08c      	sub	sp, #48	; 0x30
    26bc:	af00      	add	r7, sp, #0
	struct tc_module       tc_instance;
	struct events_resource example_event;
	struct events_hook     hook;
	uint16_t adc_result;
	/* Configuration of clock and board */
	system_init();
    26be:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <main+0x3c>)
    26c0:	4798      	blx	r3
	
	configure_adc();
    26c2:	4b0d      	ldr	r3, [pc, #52]	; (26f8 <main+0x40>)
    26c4:	4798      	blx	r3
	configure_adc_callbacks();
    26c6:	4b0d      	ldr	r3, [pc, #52]	; (26fc <main+0x44>)
    26c8:	4798      	blx	r3
	
	configure_tc();
    26ca:	4b0d      	ldr	r3, [pc, #52]	; (2700 <main+0x48>)
    26cc:	4798      	blx	r3
	configure_tc_callbacks();
    26ce:	4b0d      	ldr	r3, [pc, #52]	; (2704 <main+0x4c>)
    26d0:	4798      	blx	r3
	
	system_interrupt_set_priority(ADC_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_1);
    26d2:	2101      	movs	r1, #1
    26d4:	2017      	movs	r0, #23
    26d6:	4b0c      	ldr	r3, [pc, #48]	; (2708 <main+0x50>)
    26d8:	4798      	blx	r3
	system_interrupt_set_priority(TC4_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    26da:	2100      	movs	r1, #0
    26dc:	2013      	movs	r0, #19
    26de:	4b0a      	ldr	r3, [pc, #40]	; (2708 <main+0x50>)
    26e0:	4798      	blx	r3
	
	system_interrupt_enable_global();
    26e2:	4b0a      	ldr	r3, [pc, #40]	; (270c <main+0x54>)
    26e4:	4798      	blx	r3
	
	//while (events_is_busy(&example_event)) {
		/* Wait for channel */
	//};
	
	adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    26e6:	490a      	ldr	r1, [pc, #40]	; (2710 <main+0x58>)
    26e8:	4b0a      	ldr	r3, [pc, #40]	; (2714 <main+0x5c>)
    26ea:	2210      	movs	r2, #16
    26ec:	0018      	movs	r0, r3
    26ee:	4b0a      	ldr	r3, [pc, #40]	; (2718 <main+0x60>)
    26f0:	4798      	blx	r3
	
	//tc_start_counter(&tc_instance);
	
	//while (adc_read_done == false) {}
	
	while (true)
    26f2:	e7fe      	b.n	26f2 <main+0x3a>
    26f4:	0000209d 	.word	0x0000209d
    26f8:	000025a5 	.word	0x000025a5
    26fc:	00002611 	.word	0x00002611
    2700:	0000251d 	.word	0x0000251d
    2704:	00002575 	.word	0x00002575
    2708:	00001e05 	.word	0x00001e05
    270c:	000021d1 	.word	0x000021d1
    2710:	20000090 	.word	0x20000090
    2714:	20000108 	.word	0x20000108
    2718:	00001549 	.word	0x00001549

0000271c <__libc_init_array>:
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	2600      	movs	r6, #0
    2720:	4d0c      	ldr	r5, [pc, #48]	; (2754 <__libc_init_array+0x38>)
    2722:	4c0d      	ldr	r4, [pc, #52]	; (2758 <__libc_init_array+0x3c>)
    2724:	1b64      	subs	r4, r4, r5
    2726:	10a4      	asrs	r4, r4, #2
    2728:	42a6      	cmp	r6, r4
    272a:	d109      	bne.n	2740 <__libc_init_array+0x24>
    272c:	2600      	movs	r6, #0
    272e:	f000 f8db 	bl	28e8 <_init>
    2732:	4d0a      	ldr	r5, [pc, #40]	; (275c <__libc_init_array+0x40>)
    2734:	4c0a      	ldr	r4, [pc, #40]	; (2760 <__libc_init_array+0x44>)
    2736:	1b64      	subs	r4, r4, r5
    2738:	10a4      	asrs	r4, r4, #2
    273a:	42a6      	cmp	r6, r4
    273c:	d105      	bne.n	274a <__libc_init_array+0x2e>
    273e:	bd70      	pop	{r4, r5, r6, pc}
    2740:	00b3      	lsls	r3, r6, #2
    2742:	58eb      	ldr	r3, [r5, r3]
    2744:	4798      	blx	r3
    2746:	3601      	adds	r6, #1
    2748:	e7ee      	b.n	2728 <__libc_init_array+0xc>
    274a:	00b3      	lsls	r3, r6, #2
    274c:	58eb      	ldr	r3, [r5, r3]
    274e:	4798      	blx	r3
    2750:	3601      	adds	r6, #1
    2752:	e7f2      	b.n	273a <__libc_init_array+0x1e>
    2754:	000028f4 	.word	0x000028f4
    2758:	000028f4 	.word	0x000028f4
    275c:	000028f4 	.word	0x000028f4
    2760:	000028f8 	.word	0x000028f8

00002764 <memcpy>:
    2764:	2300      	movs	r3, #0
    2766:	b510      	push	{r4, lr}
    2768:	429a      	cmp	r2, r3
    276a:	d100      	bne.n	276e <memcpy+0xa>
    276c:	bd10      	pop	{r4, pc}
    276e:	5ccc      	ldrb	r4, [r1, r3]
    2770:	54c4      	strb	r4, [r0, r3]
    2772:	3301      	adds	r3, #1
    2774:	e7f8      	b.n	2768 <memcpy+0x4>
    2776:	0000      	movs	r0, r0
    2778:	42002c00 	.word	0x42002c00
    277c:	42003000 	.word	0x42003000
    2780:	42003400 	.word	0x42003400
    2784:	42003800 	.word	0x42003800
    2788:	42003c00 	.word	0x42003c00
    278c:	1d1c1c1b 	.word	0x1d1c1c1b
    2790:	0000001d 	.word	0x0000001d
    2794:	10000800 	.word	0x10000800
    2798:	40002000 	.word	0x40002000
    279c:	00008000 	.word	0x00008000
    27a0:	00000002 	.word	0x00000002
    27a4:	00000003 	.word	0x00000003
    27a8:	00000028 	.word	0x00000028
    27ac:	00000029 	.word	0x00000029
    27b0:	00000004 	.word	0x00000004
    27b4:	00000005 	.word	0x00000005
    27b8:	00000006 	.word	0x00000006
    27bc:	00000007 	.word	0x00000007
    27c0:	00000020 	.word	0x00000020
    27c4:	00000021 	.word	0x00000021
    27c8:	00000022 	.word	0x00000022
    27cc:	00000023 	.word	0x00000023
    27d0:	00000024 	.word	0x00000024
    27d4:	00000025 	.word	0x00000025
    27d8:	00000026 	.word	0x00000026
    27dc:	00000027 	.word	0x00000027
    27e0:	00000008 	.word	0x00000008
    27e4:	00000009 	.word	0x00000009
    27e8:	0000000a 	.word	0x0000000a
    27ec:	0000000b 	.word	0x0000000b
    27f0:	00000e9e 	.word	0x00000e9e
    27f4:	00000ea4 	.word	0x00000ea4
    27f8:	00000ea4 	.word	0x00000ea4
    27fc:	00000ea4 	.word	0x00000ea4
    2800:	00000ea4 	.word	0x00000ea4
    2804:	00000ea4 	.word	0x00000ea4
    2808:	00000ea4 	.word	0x00000ea4
    280c:	00000ea4 	.word	0x00000ea4
    2810:	00000ea4 	.word	0x00000ea4
    2814:	00000ea4 	.word	0x00000ea4
    2818:	00000ea4 	.word	0x00000ea4
    281c:	00000ea4 	.word	0x00000ea4
    2820:	00000ea4 	.word	0x00000ea4
    2824:	00000ea4 	.word	0x00000ea4
    2828:	00000ea4 	.word	0x00000ea4
    282c:	00000ea4 	.word	0x00000ea4
    2830:	00000e7c 	.word	0x00000e7c
    2834:	00000ea4 	.word	0x00000ea4
    2838:	00000ea4 	.word	0x00000ea4
    283c:	00000ea4 	.word	0x00000ea4
    2840:	00000ea4 	.word	0x00000ea4
    2844:	00000ea4 	.word	0x00000ea4
    2848:	00000ea4 	.word	0x00000ea4
    284c:	00000ea4 	.word	0x00000ea4
    2850:	00000ea4 	.word	0x00000ea4
    2854:	00000ea4 	.word	0x00000ea4
    2858:	00000ea4 	.word	0x00000ea4
    285c:	00000ea4 	.word	0x00000ea4
    2860:	00000ea4 	.word	0x00000ea4
    2864:	00000ea4 	.word	0x00000ea4
    2868:	00000ea4 	.word	0x00000ea4
    286c:	00000ea4 	.word	0x00000ea4
    2870:	00000e98 	.word	0x00000e98
    2874:	00000ea4 	.word	0x00000ea4
    2878:	00000ea4 	.word	0x00000ea4
    287c:	00000ea4 	.word	0x00000ea4
    2880:	00000ea4 	.word	0x00000ea4
    2884:	00000ea4 	.word	0x00000ea4
    2888:	00000ea4 	.word	0x00000ea4
    288c:	00000ea4 	.word	0x00000ea4
    2890:	00000ea4 	.word	0x00000ea4
    2894:	00000ea4 	.word	0x00000ea4
    2898:	00000ea4 	.word	0x00000ea4
    289c:	00000ea4 	.word	0x00000ea4
    28a0:	00000ea4 	.word	0x00000ea4
    28a4:	00000ea4 	.word	0x00000ea4
    28a8:	00000ea4 	.word	0x00000ea4
    28ac:	00000ea4 	.word	0x00000ea4
    28b0:	00000e92 	.word	0x00000e92
    28b4:	00000e3a 	.word	0x00000e3a
    28b8:	00000e50 	.word	0x00000e50
    28bc:	00000e66 	.word	0x00000e66
    28c0:	00000e20 	.word	0x00000e20
    28c4:	000018d4 	.word	0x000018d4
    28c8:	00001924 	.word	0x00001924
    28cc:	00001924 	.word	0x00001924
    28d0:	00001920 	.word	0x00001920
    28d4:	000018c6 	.word	0x000018c6
    28d8:	000018e6 	.word	0x000018e6
    28dc:	000018b6 	.word	0x000018b6
    28e0:	000018f8 	.word	0x000018f8
    28e4:	0000190a 	.word	0x0000190a

000028e8 <_init>:
    28e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28ee:	bc08      	pop	{r3}
    28f0:	469e      	mov	lr, r3
    28f2:	4770      	bx	lr

000028f4 <__init_array_start>:
    28f4:	000000dd 	.word	0x000000dd

000028f8 <_fini>:
    28f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28fe:	bc08      	pop	{r3}
    2900:	469e      	mov	lr, r3
    2902:	4770      	bx	lr

00002904 <__fini_array_start>:
    2904:	000000b5 	.word	0x000000b5
