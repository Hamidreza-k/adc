
DEVICE_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006388  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ec  20000000  00006388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002748  200000ec  00006474  000200ec  2**2
                  ALLOC
  3 .stack        00002004  20002834  00008bbc  000200ec  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  6 .debug_info   00050169  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000685f  00000000  00000000  000702d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d870  00000000  00000000  00076b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ad8  00000000  00000000  000843a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002c18  00000000  00000000  00084e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a4f4  00000000  00000000  00087a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000177e2  00000000  00000000  00091f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096566  00000000  00000000  000a976b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e04  00000000  00000000  0013fcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 48 00 20 49 56 00 00 45 56 00 00 45 56 00 00     8H. IV..EV..EV..
	...
      2c:	45 56 00 00 00 00 00 00 00 00 00 00 45 56 00 00     EV..........EV..
      3c:	45 56 00 00 45 56 00 00 45 56 00 00 45 56 00 00     EV..EV..EV..EV..
      4c:	45 56 00 00 21 1e 00 00 45 56 00 00 45 56 00 00     EV..!...EV..EV..
      5c:	15 4e 00 00 45 56 00 00 9d 24 00 00 ad 24 00 00     .N..EV...$...$..
      6c:	bd 24 00 00 cd 24 00 00 dd 24 00 00 ed 24 00 00     .$...$...$...$..
      7c:	45 56 00 00 45 56 00 00 45 56 00 00 99 30 00 00     EV..EV..EV...0..
      8c:	f9 30 00 00 59 31 00 00 b9 31 00 00 19 32 00 00     .0..Y1...1...2..
      9c:	b9 1c 00 00 45 56 00 00 45 56 00 00 45 56 00 00     ....EV..EV..EV..
      ac:	45 56 00 00 00 00 00 00                             EV......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000ec 	.word	0x200000ec
      d4:	00000000 	.word	0x00000000
      d8:	00006388 	.word	0x00006388

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000f0 	.word	0x200000f0
     108:	00006388 	.word	0x00006388
     10c:	00006388 	.word	0x00006388
     110:	00000000 	.word	0x00000000

00000114 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
     114:	b510      	push	{r4, lr}
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <ui_wakeup_handler+0x10>)
     118:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     11a:	2280      	movs	r2, #128	; 0x80
     11c:	4b02      	ldr	r3, [pc, #8]	; (128 <ui_wakeup_handler+0x14>)
     11e:	05d2      	lsls	r2, r2, #23
     120:	615a      	str	r2, [r3, #20]
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
	LED_On(LED_0_PIN);
}
     122:	bd10      	pop	{r4, pc}
     124:	0000448d 	.word	0x0000448d
     128:	41004480 	.word	0x41004480

0000012c <ui_init>:
#endif

void ui_init(void)
{
     12c:	b510      	push	{r4, lr}
     12e:	b084      	sub	sp, #16
#ifdef USB_DEVICE_LPM_SUPPORT
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
     130:	ac01      	add	r4, sp, #4
     132:	0020      	movs	r0, r4
     134:	4b0e      	ldr	r3, [pc, #56]	; (170 <ui_init+0x44>)
     136:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
     138:	230f      	movs	r3, #15
     13a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
     13c:	2300      	movs	r3, #0
     13e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
     140:	3301      	adds	r3, #1
     142:	7223      	strb	r3, [r4, #8]
	config_extint_chan.filter_input_signal = true;
     144:	72a3      	strb	r3, [r4, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
     146:	3301      	adds	r3, #1
     148:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     14a:	0021      	movs	r1, r4
     14c:	200f      	movs	r0, #15
     14e:	4b09      	ldr	r3, [pc, #36]	; (174 <ui_init+0x48>)
     150:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
     152:	2200      	movs	r2, #0
     154:	210f      	movs	r1, #15
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <ui_init+0x4c>)
     158:	4808      	ldr	r0, [pc, #32]	; (17c <ui_init+0x50>)
     15a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     15c:	2100      	movs	r1, #0
     15e:	4b08      	ldr	r3, [pc, #32]	; (180 <ui_init+0x54>)
     160:	200f      	movs	r0, #15
     162:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     164:	2280      	movs	r2, #128	; 0x80
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <ui_init+0x58>)
     168:	05d2      	lsls	r2, r2, #23
     16a:	619a      	str	r2, [r3, #24]
#endif

	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
}
     16c:	b004      	add	sp, #16
     16e:	bd10      	pop	{r4, pc}
     170:	00001ed5 	.word	0x00001ed5
     174:	00001ee9 	.word	0x00001ee9
     178:	00001db1 	.word	0x00001db1
     17c:	00000115 	.word	0x00000115
     180:	00001dd9 	.word	0x00001dd9
     184:	41004480 	.word	0x41004480

00000188 <ui_powerdown>:
     188:	2280      	movs	r2, #128	; 0x80
     18a:	4b02      	ldr	r3, [pc, #8]	; (194 <ui_powerdown+0xc>)
     18c:	05d2      	lsls	r2, r2, #23
     18e:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
     190:	4770      	bx	lr
     192:	46c0      	nop			; (mov r8, r8)
     194:	41004480 	.word	0x41004480

00000198 <ui_wakeup_enable>:

#ifdef USB_DEVICE_LPM_SUPPORT
void ui_wakeup_enable(void)
{
     198:	b510      	push	{r4, lr}
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     19a:	2100      	movs	r1, #0
     19c:	200f      	movs	r0, #15
     19e:	4b01      	ldr	r3, [pc, #4]	; (1a4 <ui_wakeup_enable+0xc>)
     1a0:	4798      	blx	r3
}
     1a2:	bd10      	pop	{r4, pc}
     1a4:	00001dd9 	.word	0x00001dd9

000001a8 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
     1a8:	b510      	push	{r4, lr}
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     1aa:	2100      	movs	r1, #0
     1ac:	200f      	movs	r0, #15
     1ae:	4b01      	ldr	r3, [pc, #4]	; (1b4 <ui_wakeup_disable+0xc>)
     1b0:	4798      	blx	r3
}
     1b2:	bd10      	pop	{r4, pc}
     1b4:	00001dfd 	.word	0x00001dfd

000001b8 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
     1b8:	2280      	movs	r2, #128	; 0x80
     1ba:	4b02      	ldr	r3, [pc, #8]	; (1c4 <ui_wakeup+0xc>)
     1bc:	05d2      	lsls	r2, r2, #23
     1be:	615a      	str	r2, [r3, #20]
#endif // #ifdef USB_DEVICE_LPM_SUPPORT

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
     1c0:	4770      	bx	lr
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	41004480 	.word	0x41004480

000001c8 <ui_com_open>:
     1c8:	4770      	bx	lr
     1ca:	46c0      	nop			; (mov r8, r8)

000001cc <ui_com_close>:


void ui_com_close(uint8_t port)
{
	UNUSED(port);
}
     1cc:	4770      	bx	lr
     1ce:	46c0      	nop			; (mov r8, r8)

000001d0 <ui_com_rx_start>:
     1d0:	4770      	bx	lr
     1d2:	46c0      	nop			; (mov r8, r8)

000001d4 <ui_com_rx_stop>:
     1d4:	4770      	bx	lr
     1d6:	46c0      	nop			; (mov r8, r8)

000001d8 <ui_com_tx_start>:
     1d8:	4770      	bx	lr
     1da:	46c0      	nop			; (mov r8, r8)

000001dc <ui_com_tx_stop>:
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)

000001e0 <ui_com_overflow>:


void ui_com_overflow(void)
{

}
     1e0:	4770      	bx	lr
     1e2:	46c0      	nop			; (mov r8, r8)

000001e4 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if ((framenumber % 1000) == 0) {
     1e4:	21fa      	movs	r1, #250	; 0xfa
{
     1e6:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
     1e8:	0089      	lsls	r1, r1, #2
     1ea:	4b09      	ldr	r3, [pc, #36]	; (210 <ui_process+0x2c>)
     1ec:	4798      	blx	r3
     1ee:	b289      	uxth	r1, r1
     1f0:	2900      	cmp	r1, #0
     1f2:	d104      	bne.n	1fe <ui_process+0x1a>
     1f4:	2280      	movs	r2, #128	; 0x80
     1f6:	4b07      	ldr	r3, [pc, #28]	; (214 <ui_process+0x30>)
     1f8:	05d2      	lsls	r2, r2, #23
     1fa:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
}
     1fc:	bd10      	pop	{r4, pc}
	if ((framenumber % 1000) == 500) {
     1fe:	23fa      	movs	r3, #250	; 0xfa
     200:	005b      	lsls	r3, r3, #1
     202:	4299      	cmp	r1, r3
     204:	d1fa      	bne.n	1fc <ui_process+0x18>
		port_base->OUTSET.reg = pin_mask;
     206:	2280      	movs	r2, #128	; 0x80
     208:	4b02      	ldr	r3, [pc, #8]	; (214 <ui_process+0x30>)
     20a:	05d2      	lsls	r2, r2, #23
     20c:	619a      	str	r2, [r3, #24]
}
     20e:	e7f5      	b.n	1fc <ui_process+0x18>
     210:	00005ed9 	.word	0x00005ed9
     214:	41004480 	.word	0x41004480

00000218 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     218:	4a02      	ldr	r2, [pc, #8]	; (224 <udi_cdc_comm_disable+0xc>)
     21a:	7813      	ldrb	r3, [r2, #0]
     21c:	3b01      	subs	r3, #1
     21e:	b2db      	uxtb	r3, r3
     220:	7013      	strb	r3, [r2, #0]
}
     222:	4770      	bx	lr
     224:	20000113 	.word	0x20000113

00000228 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     228:	2000      	movs	r0, #0
     22a:	4770      	bx	lr

0000022c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     22c:	2000      	movs	r0, #0
     22e:	4770      	bx	lr

00000230 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
     230:	b510      	push	{r4, lr}
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
     232:	4902      	ldr	r1, [pc, #8]	; (23c <udi_cdc_line_coding_received+0xc>)
     234:	2000      	movs	r0, #0
     236:	4b02      	ldr	r3, [pc, #8]	; (240 <udi_cdc_line_coding_received+0x10>)
     238:	4798      	blx	r3
}
     23a:	bd10      	pop	{r4, pc}
     23c:	2000010c 	.word	0x2000010c
     240:	00005bf5 	.word	0x00005bf5

00000244 <udi_cdc_data_disable>:
{
     244:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
     246:	4a06      	ldr	r2, [pc, #24]	; (260 <udi_cdc_data_disable+0x1c>)
     248:	7813      	ldrb	r3, [r2, #0]
     24a:	3b01      	subs	r3, #1
     24c:	b2db      	uxtb	r3, r3
     24e:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     250:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
     252:	4b04      	ldr	r3, [pc, #16]	; (264 <udi_cdc_data_disable+0x20>)
	port = udi_cdc_nb_data_enabled;
     254:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     256:	4798      	blx	r3
	udi_cdc_data_running = false;
     258:	2200      	movs	r2, #0
     25a:	4b03      	ldr	r3, [pc, #12]	; (268 <udi_cdc_data_disable+0x24>)
     25c:	701a      	strb	r2, [r3, #0]
}
     25e:	bd10      	pop	{r4, pc}
     260:	20000114 	.word	0x20000114
     264:	00005ac9 	.word	0x00005ac9
     268:	2000010a 	.word	0x2000010a

0000026c <udi_cdc_comm_enable>:
	udi_cdc_nb_comm_enabled = 0;
     26c:	2200      	movs	r2, #0
	uid_cdc_state_msg[port].header.bmRequestType =
     26e:	21a1      	movs	r1, #161	; 0xa1
{
     270:	b510      	push	{r4, lr}
	udi_cdc_state[port] = CPU_TO_LE16(0);
     272:	4b11      	ldr	r3, [pc, #68]	; (2b8 <udi_cdc_comm_enable+0x4c>)
	udi_cdc_nb_comm_enabled = 0;
     274:	4c11      	ldr	r4, [pc, #68]	; (2bc <udi_cdc_comm_enable+0x50>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
     276:	2000      	movs	r0, #0
	udi_cdc_nb_comm_enabled = 0;
     278:	7022      	strb	r2, [r4, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
     27a:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
     27c:	4b10      	ldr	r3, [pc, #64]	; (2c0 <udi_cdc_comm_enable+0x54>)
     27e:	7019      	strb	r1, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     280:	3981      	subs	r1, #129	; 0x81
     282:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     284:	391e      	subs	r1, #30
     286:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     288:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     28a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     28c:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     28e:	23e1      	movs	r3, #225	; 0xe1
     290:	490c      	ldr	r1, [pc, #48]	; (2c4 <udi_cdc_comm_enable+0x58>)
     292:	025b      	lsls	r3, r3, #9
     294:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     296:	2308      	movs	r3, #8
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     298:	7108      	strb	r0, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     29a:	7148      	strb	r0, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     29c:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
     29e:	2000      	movs	r0, #0
     2a0:	4b09      	ldr	r3, [pc, #36]	; (2c8 <udi_cdc_comm_enable+0x5c>)
     2a2:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
     2a4:	2000      	movs	r0, #0
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <udi_cdc_comm_enable+0x60>)
     2a8:	4798      	blx	r3
     2aa:	2800      	cmp	r0, #0
     2ac:	d003      	beq.n	2b6 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
     2ae:	7823      	ldrb	r3, [r4, #0]
     2b0:	3301      	adds	r3, #1
     2b2:	b2db      	uxtb	r3, r3
     2b4:	7023      	strb	r3, [r4, #0]
}
     2b6:	bd10      	pop	{r4, pc}
     2b8:	200001ac 	.word	0x200001ac
     2bc:	20000113 	.word	0x20000113
     2c0:	20000244 	.word	0x20000244
     2c4:	2000010c 	.word	0x2000010c
     2c8:	00005bf5 	.word	0x00005bf5
     2cc:	00005ab1 	.word	0x00005ab1

000002d0 <udi_cdc_comm_setup>:
{
     2d0:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     2d2:	4919      	ldr	r1, [pc, #100]	; (338 <udi_cdc_comm_setup+0x68>)
     2d4:	780a      	ldrb	r2, [r1, #0]
     2d6:	b253      	sxtb	r3, r2
     2d8:	2b00      	cmp	r3, #0
     2da:	db12      	blt.n	302 <udi_cdc_comm_setup+0x32>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     2dc:	2360      	movs	r3, #96	; 0x60
	return false;  // request Not supported
     2de:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     2e0:	4013      	ands	r3, r2
     2e2:	2b20      	cmp	r3, #32
     2e4:	d000      	beq.n	2e8 <udi_cdc_comm_setup+0x18>
}
     2e6:	bd10      	pop	{r4, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
     2e8:	784b      	ldrb	r3, [r1, #1]
     2ea:	2b20      	cmp	r3, #32
     2ec:	d019      	beq.n	322 <udi_cdc_comm_setup+0x52>
     2ee:	2b22      	cmp	r3, #34	; 0x22
     2f0:	d1f9      	bne.n	2e6 <udi_cdc_comm_setup+0x16>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     2f2:	884b      	ldrh	r3, [r1, #2]
     2f4:	2101      	movs	r1, #1
     2f6:	2000      	movs	r0, #0
     2f8:	4019      	ands	r1, r3
     2fa:	4b10      	ldr	r3, [pc, #64]	; (33c <udi_cdc_comm_setup+0x6c>)
     2fc:	4798      	blx	r3
				return true;
     2fe:	2001      	movs	r0, #1
     300:	e7f1      	b.n	2e6 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     302:	2360      	movs	r3, #96	; 0x60
	return false;  // request Not supported
     304:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     306:	4013      	ands	r3, r2
     308:	2b20      	cmp	r3, #32
     30a:	d1ec      	bne.n	2e6 <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     30c:	784b      	ldrb	r3, [r1, #1]
     30e:	2b21      	cmp	r3, #33	; 0x21
     310:	d1e9      	bne.n	2e6 <udi_cdc_comm_setup+0x16>
				if (sizeof(usb_cdc_line_coding_t) !=
     312:	88cb      	ldrh	r3, [r1, #6]
     314:	2b07      	cmp	r3, #7
     316:	d1e6      	bne.n	2e6 <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.payload =
     318:	4a09      	ldr	r2, [pc, #36]	; (340 <udi_cdc_comm_setup+0x70>)
				udd_g_ctrlreq.payload_size =
     31a:	818b      	strh	r3, [r1, #12]
				udd_g_ctrlreq.payload =
     31c:	608a      	str	r2, [r1, #8]
				return true;
     31e:	3001      	adds	r0, #1
     320:	e7e1      	b.n	2e6 <udi_cdc_comm_setup+0x16>
				if (sizeof(usb_cdc_line_coding_t) !=
     322:	88cb      	ldrh	r3, [r1, #6]
     324:	2b07      	cmp	r3, #7
     326:	d1de      	bne.n	2e6 <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.callback =
     328:	4a06      	ldr	r2, [pc, #24]	; (344 <udi_cdc_comm_setup+0x74>)
				udd_g_ctrlreq.payload_size =
     32a:	818b      	strh	r3, [r1, #12]
				udd_g_ctrlreq.callback =
     32c:	610a      	str	r2, [r1, #16]
				udd_g_ctrlreq.payload =
     32e:	4a04      	ldr	r2, [pc, #16]	; (340 <udi_cdc_comm_setup+0x70>)
				return true;
     330:	2001      	movs	r0, #1
				udd_g_ctrlreq.payload =
     332:	608a      	str	r2, [r1, #8]
				return true;
     334:	e7d7      	b.n	2e6 <udi_cdc_comm_setup+0x16>
     336:	46c0      	nop			; (mov r8, r8)
     338:	200005e8 	.word	0x200005e8
     33c:	00005ae1 	.word	0x00005ae1
     340:	2000010c 	.word	0x2000010c
     344:	00000231 	.word	0x00000231

00000348 <udi_cdc_serial_state_msg_sent>:
	default:
		port = 0;
		break;
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
     348:	2300      	movs	r3, #0
{
     34a:	b530      	push	{r4, r5, lr}

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
     34c:	247c      	movs	r4, #124	; 0x7c
     34e:	490d      	ldr	r1, [pc, #52]	; (384 <udi_cdc_serial_state_msg_sent+0x3c>)
	udi_cdc_serial_state_msg_ongoing[port] = false;
     350:	4d0d      	ldr	r5, [pc, #52]	; (388 <udi_cdc_serial_state_msg_sent+0x40>)
{
     352:	0010      	movs	r0, r2
	udi_cdc_serial_state_msg_ongoing[port] = false;
     354:	702b      	strb	r3, [r5, #0]
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
     356:	880b      	ldrh	r3, [r1, #0]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
     358:	4a0c      	ldr	r2, [pc, #48]	; (38c <udi_cdc_serial_state_msg_sent+0x44>)
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
     35a:	43a3      	bics	r3, r4
     35c:	800b      	strh	r3, [r1, #0]
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
     35e:	8913      	ldrh	r3, [r2, #8]
{
     360:	b083      	sub	sp, #12
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
     362:	43a3      	bics	r3, r4
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
     364:	880c      	ldrh	r4, [r1, #0]
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
     366:	8113      	strh	r3, [r2, #8]
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
     368:	42a3      	cmp	r3, r4
     36a:	d008      	beq.n	37e <udi_cdc_serial_state_msg_sent+0x36>
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
     36c:	880b      	ldrh	r3, [r1, #0]
				udd_ep_run(ep,
     36e:	4c08      	ldr	r4, [pc, #32]	; (390 <udi_cdc_serial_state_msg_sent+0x48>)
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
     370:	8113      	strh	r3, [r2, #8]
				udd_ep_run(ep,
     372:	4b08      	ldr	r3, [pc, #32]	; (394 <udi_cdc_serial_state_msg_sent+0x4c>)
     374:	2100      	movs	r1, #0
     376:	9300      	str	r3, [sp, #0]
     378:	230a      	movs	r3, #10
     37a:	47a0      	blx	r4
		udi_cdc_serial_state_msg_ongoing[port] =
     37c:	7028      	strb	r0, [r5, #0]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
}
     37e:	b003      	add	sp, #12
     380:	bd30      	pop	{r4, r5, pc}
     382:	46c0      	nop			; (mov r8, r8)
     384:	200001ac 	.word	0x200001ac
     388:	200001a8 	.word	0x200001a8
     38c:	20000244 	.word	0x20000244
     390:	00004241 	.word	0x00004241
     394:	00000349 	.word	0x00000349

00000398 <udi_cdc_tx_send.isra.2.part.3>:
	}
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
     398:	b5f0      	push	{r4, r5, r6, r7, lr}
     39a:	46de      	mov	lr, fp
     39c:	4657      	mov	r7, sl
     39e:	464e      	mov	r6, r9
     3a0:	4645      	mov	r5, r8
     3a2:	b5e0      	push	{r5, r6, r7, lr}
     3a4:	b085      	sub	sp, #20
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     3a6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     3aa:	425a      	negs	r2, r3
     3ac:	4153      	adcs	r3, r2
     3ae:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     3b0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     3b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     3b6:	4b3c      	ldr	r3, [pc, #240]	; (4a8 <udi_cdc_tx_send.isra.2.part.3+0x110>)
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     3b8:	4e3c      	ldr	r6, [pc, #240]	; (4ac <udi_cdc_tx_send.isra.2.part.3+0x114>)
     3ba:	4699      	mov	r9, r3
     3bc:	2300      	movs	r3, #0
     3be:	464a      	mov	r2, r9
     3c0:	7013      	strb	r3, [r2, #0]
	return flags;
     3c2:	9b03      	ldr	r3, [sp, #12]
		sof_zlp_counter++;
     3c4:	4f3a      	ldr	r7, [pc, #232]	; (4b0 <udi_cdc_tx_send.isra.2.part.3+0x118>)
     3c6:	469a      	mov	sl, r3
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     3c8:	4b3a      	ldr	r3, [pc, #232]	; (4b4 <udi_cdc_tx_send.isra.2.part.3+0x11c>)
     3ca:	781c      	ldrb	r4, [r3, #0]
     3cc:	4698      	mov	r8, r3
     3ce:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     3d0:	0063      	lsls	r3, r4, #1
     3d2:	5af3      	ldrh	r3, [r6, r3]
     3d4:	0025      	movs	r5, r4
     3d6:	2b00      	cmp	r3, #0
     3d8:	d044      	beq.n	464 <udi_cdc_tx_send.isra.2.part.3+0xcc>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
     3da:	2300      	movs	r3, #0
     3dc:	803b      	strh	r3, [r7, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
     3de:	4b36      	ldr	r3, [pc, #216]	; (4b8 <udi_cdc_tx_send.isra.2.part.3+0x120>)
     3e0:	781b      	ldrb	r3, [r3, #0]
     3e2:	2b00      	cmp	r3, #0
     3e4:	d029      	beq.n	43a <udi_cdc_tx_send.isra.2.part.3+0xa2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
     3e6:	2301      	movs	r3, #1
     3e8:	4a34      	ldr	r2, [pc, #208]	; (4bc <udi_cdc_tx_send.isra.2.part.3+0x124>)
     3ea:	4265      	negs	r5, r4
     3ec:	4165      	adcs	r5, r4
     3ee:	7013      	strb	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     3f0:	4652      	mov	r2, sl
     3f2:	2a00      	cmp	r2, #0
     3f4:	d12c      	bne.n	450 <udi_cdc_tx_send.isra.2.part.3+0xb8>
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     3f6:	006f      	lsls	r7, r5, #1
     3f8:	5bf3      	ldrh	r3, [r6, r7]
     3fa:	001c      	movs	r4, r3
     3fc:	3c40      	subs	r4, #64	; 0x40
     3fe:	1e62      	subs	r2, r4, #1
     400:	4194      	sbcs	r4, r2
     402:	b2e4      	uxtb	r4, r4
	if (b_short_packet) {
     404:	2b40      	cmp	r3, #64	; 0x40
     406:	d029      	beq.n	45c <udi_cdc_tx_send.isra.2.part.3+0xc4>
		if (udd_is_high_speed()) {
     408:	4b2d      	ldr	r3, [pc, #180]	; (4c0 <udi_cdc_tx_send.isra.2.part.3+0x128>)
     40a:	4798      	blx	r3
     40c:	2800      	cmp	r0, #0
     40e:	d045      	beq.n	49c <udi_cdc_tx_send.isra.2.part.3+0x104>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     410:	4b2c      	ldr	r3, [pc, #176]	; (4c4 <udi_cdc_tx_send.isra.2.part.3+0x12c>)
     412:	4798      	blx	r3
     414:	4b2c      	ldr	r3, [pc, #176]	; (4c8 <udi_cdc_tx_send.isra.2.part.3+0x130>)
     416:	8018      	strh	r0, [r3, #0]
     418:	5bf3      	ldrh	r3, [r6, r7]
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
     41a:	492c      	ldr	r1, [pc, #176]	; (4cc <udi_cdc_tx_send.isra.2.part.3+0x134>)
     41c:	01aa      	lsls	r2, r5, #6
     41e:	188a      	adds	r2, r1, r2
	udd_ep_run( ep,
     420:	492b      	ldr	r1, [pc, #172]	; (4d0 <udi_cdc_tx_send.isra.2.part.3+0x138>)
     422:	2081      	movs	r0, #129	; 0x81
     424:	9100      	str	r1, [sp, #0]
     426:	0021      	movs	r1, r4
     428:	4c2a      	ldr	r4, [pc, #168]	; (4d4 <udi_cdc_tx_send.isra.2.part.3+0x13c>)
     42a:	47a0      	blx	r4
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     42c:	b005      	add	sp, #20
     42e:	bc3c      	pop	{r2, r3, r4, r5}
     430:	4690      	mov	r8, r2
     432:	4699      	mov	r9, r3
     434:	46a2      	mov	sl, r4
     436:	46ab      	mov	fp, r5
     438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     43a:	4263      	negs	r3, r4
     43c:	415c      	adcs	r4, r3
     43e:	4643      	mov	r3, r8
     440:	b2e4      	uxtb	r4, r4
     442:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     444:	2301      	movs	r3, #1
     446:	4a1d      	ldr	r2, [pc, #116]	; (4bc <udi_cdc_tx_send.isra.2.part.3+0x124>)
     448:	7013      	strb	r3, [r2, #0]
     44a:	4652      	mov	r2, sl
     44c:	2a00      	cmp	r2, #0
     44e:	d0d2      	beq.n	3f6 <udi_cdc_tx_send.isra.2.part.3+0x5e>
		cpu_irq_enable();
     450:	464a      	mov	r2, r9
     452:	7013      	strb	r3, [r2, #0]
     454:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     458:	b662      	cpsie	i
     45a:	e7cc      	b.n	3f6 <udi_cdc_tx_send.isra.2.part.3+0x5e>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     45c:	2100      	movs	r1, #0
     45e:	4a1a      	ldr	r2, [pc, #104]	; (4c8 <udi_cdc_tx_send.isra.2.part.3+0x130>)
     460:	8011      	strh	r1, [r2, #0]
     462:	e7da      	b.n	41a <udi_cdc_tx_send.isra.2.part.3+0x82>
		sof_zlp_counter++;
     464:	883b      	ldrh	r3, [r7, #0]
     466:	3301      	adds	r3, #1
     468:	803b      	strh	r3, [r7, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     46a:	4b15      	ldr	r3, [pc, #84]	; (4c0 <udi_cdc_tx_send.isra.2.part.3+0x128>)
     46c:	469b      	mov	fp, r3
     46e:	4798      	blx	r3
     470:	2800      	cmp	r0, #0
     472:	d102      	bne.n	47a <udi_cdc_tx_send.isra.2.part.3+0xe2>
     474:	883b      	ldrh	r3, [r7, #0]
     476:	2b63      	cmp	r3, #99	; 0x63
     478:	d906      	bls.n	488 <udi_cdc_tx_send.isra.2.part.3+0xf0>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     47a:	47d8      	blx	fp
     47c:	2800      	cmp	r0, #0
     47e:	d0ac      	beq.n	3da <udi_cdc_tx_send.isra.2.part.3+0x42>
     480:	4b15      	ldr	r3, [pc, #84]	; (4d8 <udi_cdc_tx_send.isra.2.part.3+0x140>)
     482:	883a      	ldrh	r2, [r7, #0]
     484:	429a      	cmp	r2, r3
     486:	d8a8      	bhi.n	3da <udi_cdc_tx_send.isra.2.part.3+0x42>
	if (cpu_irq_is_enabled_flags(flags))
     488:	4653      	mov	r3, sl
     48a:	2b00      	cmp	r3, #0
     48c:	d0ce      	beq.n	42c <udi_cdc_tx_send.isra.2.part.3+0x94>
		cpu_irq_enable();
     48e:	2301      	movs	r3, #1
     490:	464a      	mov	r2, r9
     492:	7013      	strb	r3, [r2, #0]
     494:	f3bf 8f5f 	dmb	sy
     498:	b662      	cpsie	i
     49a:	e7c7      	b.n	42c <udi_cdc_tx_send.isra.2.part.3+0x94>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     49c:	4b0f      	ldr	r3, [pc, #60]	; (4dc <udi_cdc_tx_send.isra.2.part.3+0x144>)
     49e:	4798      	blx	r3
     4a0:	4b09      	ldr	r3, [pc, #36]	; (4c8 <udi_cdc_tx_send.isra.2.part.3+0x130>)
     4a2:	8018      	strh	r0, [r3, #0]
     4a4:	5bf3      	ldrh	r3, [r6, r7]
     4a6:	e7b8      	b.n	41a <udi_cdc_tx_send.isra.2.part.3+0x82>
     4a8:	200000e8 	.word	0x200000e8
     4ac:	20000234 	.word	0x20000234
     4b0:	20000108 	.word	0x20000108
     4b4:	20000238 	.word	0x20000238
     4b8:	200001b0 	.word	0x200001b0
     4bc:	20000240 	.word	0x20000240
     4c0:	00003f7d 	.word	0x00003f7d
     4c4:	00003f91 	.word	0x00003f91
     4c8:	2000023c 	.word	0x2000023c
     4cc:	200001b4 	.word	0x200001b4
     4d0:	000004e1 	.word	0x000004e1
     4d4:	00004241 	.word	0x00004241
     4d8:	0000031f 	.word	0x0000031f
     4dc:	00003f81 	.word	0x00003f81

000004e0 <udi_cdc_data_sent>:
{
     4e0:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     4e2:	2800      	cmp	r0, #0
     4e4:	d000      	beq.n	4e8 <udi_cdc_data_sent+0x8>
}
     4e6:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     4e8:	4b10      	ldr	r3, [pc, #64]	; (52c <udi_cdc_data_sent+0x4c>)
     4ea:	4911      	ldr	r1, [pc, #68]	; (530 <udi_cdc_data_sent+0x50>)
     4ec:	781b      	ldrb	r3, [r3, #0]
     4ee:	425a      	negs	r2, r3
     4f0:	4153      	adcs	r3, r2
     4f2:	2200      	movs	r2, #0
     4f4:	005b      	lsls	r3, r3, #1
     4f6:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     4f8:	4b0e      	ldr	r3, [pc, #56]	; (534 <udi_cdc_data_sent+0x54>)
     4fa:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     4fc:	4b0e      	ldr	r3, [pc, #56]	; (538 <udi_cdc_data_sent+0x58>)
     4fe:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_trans_ongoing[port]) {
     500:	781b      	ldrb	r3, [r3, #0]
     502:	2b00      	cmp	r3, #0
     504:	d1ef      	bne.n	4e6 <udi_cdc_data_sent+0x6>
	if (udd_is_high_speed()) {
     506:	4b0d      	ldr	r3, [pc, #52]	; (53c <udi_cdc_data_sent+0x5c>)
     508:	4798      	blx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     50a:	4b0d      	ldr	r3, [pc, #52]	; (540 <udi_cdc_data_sent+0x60>)
     50c:	881c      	ldrh	r4, [r3, #0]
	if (udd_is_high_speed()) {
     50e:	2800      	cmp	r0, #0
     510:	d006      	beq.n	520 <udi_cdc_data_sent+0x40>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <udi_cdc_data_sent+0x64>)
     514:	4798      	blx	r3
     516:	4284      	cmp	r4, r0
     518:	d0e5      	beq.n	4e6 <udi_cdc_data_sent+0x6>
     51a:	4b0b      	ldr	r3, [pc, #44]	; (548 <udi_cdc_data_sent+0x68>)
     51c:	4798      	blx	r3
     51e:	e7e2      	b.n	4e6 <udi_cdc_data_sent+0x6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     520:	4b0a      	ldr	r3, [pc, #40]	; (54c <udi_cdc_data_sent+0x6c>)
     522:	4798      	blx	r3
     524:	4284      	cmp	r4, r0
     526:	d1f8      	bne.n	51a <udi_cdc_data_sent+0x3a>
     528:	e7dd      	b.n	4e6 <udi_cdc_data_sent+0x6>
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	20000238 	.word	0x20000238
     530:	20000234 	.word	0x20000234
     534:	200001b0 	.word	0x200001b0
     538:	20000240 	.word	0x20000240
     53c:	00003f7d 	.word	0x00003f7d
     540:	2000023c 	.word	0x2000023c
     544:	00003f91 	.word	0x00003f91
     548:	00000399 	.word	0x00000399
     54c:	00003f81 	.word	0x00003f81

00000550 <udi_cdc_data_sof_notify>:
{
     550:	b5f0      	push	{r4, r5, r6, r7, lr}
     552:	4645      	mov	r5, r8
     554:	46de      	mov	lr, fp
     556:	4657      	mov	r7, sl
     558:	464e      	mov	r6, r9
     55a:	b5e0      	push	{r5, r6, r7, lr}
	if (udi_cdc_tx_trans_ongoing[port]) {
     55c:	4d4a      	ldr	r5, [pc, #296]	; (688 <udi_cdc_data_sof_notify+0x138>)
{
     55e:	b087      	sub	sp, #28
	if (udi_cdc_tx_trans_ongoing[port]) {
     560:	782b      	ldrb	r3, [r5, #0]
     562:	2b00      	cmp	r3, #0
     564:	d006      	beq.n	574 <udi_cdc_data_sof_notify+0x24>
}
     566:	b007      	add	sp, #28
     568:	bc3c      	pop	{r2, r3, r4, r5}
     56a:	4690      	mov	r8, r2
     56c:	4699      	mov	r9, r3
     56e:	46a2      	mov	sl, r4
     570:	46ab      	mov	fp, r5
     572:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (udd_is_high_speed()) {
     574:	4f45      	ldr	r7, [pc, #276]	; (68c <udi_cdc_data_sof_notify+0x13c>)
     576:	47b8      	blx	r7
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     578:	4b45      	ldr	r3, [pc, #276]	; (690 <udi_cdc_data_sof_notify+0x140>)
     57a:	4698      	mov	r8, r3
     57c:	881c      	ldrh	r4, [r3, #0]
	if (udd_is_high_speed()) {
     57e:	2800      	cmp	r0, #0
     580:	d14d      	bne.n	61e <udi_cdc_data_sof_notify+0xce>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     582:	4b44      	ldr	r3, [pc, #272]	; (694 <udi_cdc_data_sof_notify+0x144>)
     584:	4798      	blx	r3
     586:	4284      	cmp	r4, r0
     588:	d0ed      	beq.n	566 <udi_cdc_data_sof_notify+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     58a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     58e:	425a      	negs	r2, r3
     590:	4153      	adcs	r3, r2
     592:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
     594:	b672      	cpsid	i
     596:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     59a:	2300      	movs	r3, #0
     59c:	4a3e      	ldr	r2, [pc, #248]	; (698 <udi_cdc_data_sof_notify+0x148>)
     59e:	7013      	strb	r3, [r2, #0]
	return flags;
     5a0:	9b05      	ldr	r3, [sp, #20]
     5a2:	9303      	str	r3, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     5a4:	4b3d      	ldr	r3, [pc, #244]	; (69c <udi_cdc_data_sof_notify+0x14c>)
     5a6:	781c      	ldrb	r4, [r3, #0]
     5a8:	469b      	mov	fp, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     5aa:	4b3d      	ldr	r3, [pc, #244]	; (6a0 <udi_cdc_data_sof_notify+0x150>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     5ac:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     5ae:	4699      	mov	r9, r3
     5b0:	464a      	mov	r2, r9
     5b2:	0063      	lsls	r3, r4, #1
     5b4:	5ad3      	ldrh	r3, [r2, r3]
     5b6:	0026      	movs	r6, r4
     5b8:	2b00      	cmp	r3, #0
     5ba:	d03c      	beq.n	636 <udi_cdc_data_sof_notify+0xe6>
     5bc:	4b39      	ldr	r3, [pc, #228]	; (6a4 <udi_cdc_data_sof_notify+0x154>)
     5be:	469a      	mov	sl, r3
	sof_zlp_counter = 0;
     5c0:	2300      	movs	r3, #0
     5c2:	4652      	mov	r2, sl
     5c4:	8013      	strh	r3, [r2, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
     5c6:	4b38      	ldr	r3, [pc, #224]	; (6a8 <udi_cdc_data_sof_notify+0x158>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d12c      	bne.n	628 <udi_cdc_data_sof_notify+0xd8>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     5ce:	4263      	negs	r3, r4
     5d0:	415c      	adcs	r4, r3
     5d2:	465b      	mov	r3, fp
     5d4:	b2e4      	uxtb	r4, r4
     5d6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     5d8:	2301      	movs	r3, #1
	if (cpu_irq_is_enabled_flags(flags))
     5da:	9a03      	ldr	r2, [sp, #12]
     5dc:	702b      	strb	r3, [r5, #0]
     5de:	2a00      	cmp	r2, #0
     5e0:	d14a      	bne.n	678 <udi_cdc_data_sof_notify+0x128>
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     5e2:	464b      	mov	r3, r9
     5e4:	0075      	lsls	r5, r6, #1
     5e6:	5b5b      	ldrh	r3, [r3, r5]
     5e8:	001c      	movs	r4, r3
     5ea:	3c40      	subs	r4, #64	; 0x40
     5ec:	1e62      	subs	r2, r4, #1
     5ee:	4194      	sbcs	r4, r2
     5f0:	b2e4      	uxtb	r4, r4
	if (b_short_packet) {
     5f2:	2b40      	cmp	r3, #64	; 0x40
     5f4:	d01b      	beq.n	62e <udi_cdc_data_sof_notify+0xde>
		if (udd_is_high_speed()) {
     5f6:	47b8      	blx	r7
     5f8:	2800      	cmp	r0, #0
     5fa:	d043      	beq.n	684 <udi_cdc_data_sof_notify+0x134>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     5fc:	4b2b      	ldr	r3, [pc, #172]	; (6ac <udi_cdc_data_sof_notify+0x15c>)
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     5fe:	4798      	blx	r3
     600:	4643      	mov	r3, r8
     602:	8018      	strh	r0, [r3, #0]
     604:	464b      	mov	r3, r9
     606:	5b5b      	ldrh	r3, [r3, r5]
			udi_cdc_tx_buf[port][buf_sel_trans],
     608:	4a29      	ldr	r2, [pc, #164]	; (6b0 <udi_cdc_data_sof_notify+0x160>)
     60a:	01b6      	lsls	r6, r6, #6
     60c:	1996      	adds	r6, r2, r6
	udd_ep_run( ep,
     60e:	4a29      	ldr	r2, [pc, #164]	; (6b4 <udi_cdc_data_sof_notify+0x164>)
     610:	0021      	movs	r1, r4
     612:	9200      	str	r2, [sp, #0]
     614:	4c28      	ldr	r4, [pc, #160]	; (6b8 <udi_cdc_data_sof_notify+0x168>)
     616:	0032      	movs	r2, r6
     618:	2081      	movs	r0, #129	; 0x81
     61a:	47a0      	blx	r4
}
     61c:	e7a3      	b.n	566 <udi_cdc_data_sof_notify+0x16>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     61e:	4b23      	ldr	r3, [pc, #140]	; (6ac <udi_cdc_data_sof_notify+0x15c>)
     620:	4798      	blx	r3
     622:	4284      	cmp	r4, r0
     624:	d1b1      	bne.n	58a <udi_cdc_data_sof_notify+0x3a>
     626:	e79e      	b.n	566 <udi_cdc_data_sof_notify+0x16>
     628:	4266      	negs	r6, r4
     62a:	4166      	adcs	r6, r4
     62c:	e7d4      	b.n	5d8 <udi_cdc_data_sof_notify+0x88>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     62e:	2200      	movs	r2, #0
     630:	4641      	mov	r1, r8
     632:	800a      	strh	r2, [r1, #0]
     634:	e7e8      	b.n	608 <udi_cdc_data_sof_notify+0xb8>
		sof_zlp_counter++;
     636:	4b1b      	ldr	r3, [pc, #108]	; (6a4 <udi_cdc_data_sof_notify+0x154>)
     638:	469a      	mov	sl, r3
     63a:	4652      	mov	r2, sl
     63c:	881b      	ldrh	r3, [r3, #0]
     63e:	3301      	adds	r3, #1
     640:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     642:	47b8      	blx	r7
     644:	2800      	cmp	r0, #0
     646:	d10e      	bne.n	666 <udi_cdc_data_sof_notify+0x116>
     648:	4653      	mov	r3, sl
     64a:	881b      	ldrh	r3, [r3, #0]
     64c:	2b63      	cmp	r3, #99	; 0x63
     64e:	d80a      	bhi.n	666 <udi_cdc_data_sof_notify+0x116>
     650:	9b03      	ldr	r3, [sp, #12]
     652:	2b00      	cmp	r3, #0
     654:	d100      	bne.n	658 <udi_cdc_data_sof_notify+0x108>
     656:	e786      	b.n	566 <udi_cdc_data_sof_notify+0x16>
		cpu_irq_enable();
     658:	2301      	movs	r3, #1
     65a:	4a0f      	ldr	r2, [pc, #60]	; (698 <udi_cdc_data_sof_notify+0x148>)
     65c:	7013      	strb	r3, [r2, #0]
     65e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     662:	b662      	cpsie	i
     664:	e77f      	b.n	566 <udi_cdc_data_sof_notify+0x16>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     666:	47b8      	blx	r7
     668:	2800      	cmp	r0, #0
     66a:	d0a9      	beq.n	5c0 <udi_cdc_data_sof_notify+0x70>
     66c:	4652      	mov	r2, sl
     66e:	4b13      	ldr	r3, [pc, #76]	; (6bc <udi_cdc_data_sof_notify+0x16c>)
     670:	8812      	ldrh	r2, [r2, #0]
     672:	429a      	cmp	r2, r3
     674:	d9ec      	bls.n	650 <udi_cdc_data_sof_notify+0x100>
     676:	e7a3      	b.n	5c0 <udi_cdc_data_sof_notify+0x70>
     678:	4a07      	ldr	r2, [pc, #28]	; (698 <udi_cdc_data_sof_notify+0x148>)
     67a:	7013      	strb	r3, [r2, #0]
     67c:	f3bf 8f5f 	dmb	sy
     680:	b662      	cpsie	i
     682:	e7ae      	b.n	5e2 <udi_cdc_data_sof_notify+0x92>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     684:	4b03      	ldr	r3, [pc, #12]	; (694 <udi_cdc_data_sof_notify+0x144>)
     686:	e7ba      	b.n	5fe <udi_cdc_data_sof_notify+0xae>
     688:	20000240 	.word	0x20000240
     68c:	00003f7d 	.word	0x00003f7d
     690:	2000023c 	.word	0x2000023c
     694:	00003f81 	.word	0x00003f81
     698:	200000e8 	.word	0x200000e8
     69c:	20000238 	.word	0x20000238
     6a0:	20000234 	.word	0x20000234
     6a4:	20000108 	.word	0x20000108
     6a8:	200001b0 	.word	0x200001b0
     6ac:	00003f91 	.word	0x00003f91
     6b0:	200001b4 	.word	0x200001b4
     6b4:	000004e1 	.word	0x000004e1
     6b8:	00004241 	.word	0x00004241
     6bc:	0000031f 	.word	0x0000031f

000006c0 <udi_cdc_data_enable>:
{
     6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c2:	46d6      	mov	lr, sl
     6c4:	464f      	mov	r7, r9
     6c6:	4646      	mov	r6, r8
	udi_cdc_nb_data_enabled = 0;
     6c8:	2300      	movs	r3, #0
	udi_cdc_tx_trans_ongoing[port] = false;
     6ca:	4a52      	ldr	r2, [pc, #328]	; (814 <udi_cdc_data_enable+0x154>)
	udi_cdc_tx_both_buf_to_send[port] = false;
     6cc:	4952      	ldr	r1, [pc, #328]	; (818 <udi_cdc_data_enable+0x158>)
	udi_cdc_nb_data_enabled = 0;
     6ce:	4d53      	ldr	r5, [pc, #332]	; (81c <udi_cdc_data_enable+0x15c>)
{
     6d0:	b5c0      	push	{r6, r7, lr}
	udi_cdc_nb_data_enabled = 0;
     6d2:	702b      	strb	r3, [r5, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     6d4:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     6d6:	700b      	strb	r3, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     6d8:	4951      	ldr	r1, [pc, #324]	; (820 <udi_cdc_data_enable+0x160>)
	udi_cdc_tx_sof_num[port] = 0;
     6da:	4c52      	ldr	r4, [pc, #328]	; (824 <udi_cdc_data_enable+0x164>)
	udi_cdc_tx_buf_sel[port] = 0;
     6dc:	700b      	strb	r3, [r1, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     6de:	4952      	ldr	r1, [pc, #328]	; (828 <udi_cdc_data_enable+0x168>)
	udi_cdc_tx_sof_num[port] = 0;
     6e0:	8023      	strh	r3, [r4, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     6e2:	800b      	strh	r3, [r1, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     6e4:	804b      	strh	r3, [r1, #2]
	if (udi_cdc_tx_trans_ongoing[port]) {
     6e6:	7813      	ldrb	r3, [r2, #0]
{
     6e8:	b084      	sub	sp, #16
	if (udi_cdc_tx_trans_ongoing[port]) {
     6ea:	2b00      	cmp	r3, #0
     6ec:	d100      	bne.n	6f0 <udi_cdc_data_enable+0x30>
     6ee:	e06e      	b.n	7ce <udi_cdc_data_enable+0x10e>
	udi_cdc_rx_trans_ongoing[port] = false;
     6f0:	2300      	movs	r3, #0
	udi_cdc_rx_buf_nb[port][0] = 0;
     6f2:	494e      	ldr	r1, [pc, #312]	; (82c <udi_cdc_data_enable+0x16c>)
	udi_cdc_rx_trans_ongoing[port] = false;
     6f4:	4e4e      	ldr	r6, [pc, #312]	; (830 <udi_cdc_data_enable+0x170>)
	udi_cdc_rx_buf_sel[port] = 0;
     6f6:	484f      	ldr	r0, [pc, #316]	; (834 <udi_cdc_data_enable+0x174>)
	udi_cdc_rx_pos[port] = 0;
     6f8:	4f4f      	ldr	r7, [pc, #316]	; (838 <udi_cdc_data_enable+0x178>)
	udi_cdc_rx_trans_ongoing[port] = false;
     6fa:	7033      	strb	r3, [r6, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     6fc:	7003      	strb	r3, [r0, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     6fe:	800b      	strh	r3, [r1, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     700:	804b      	strh	r3, [r1, #2]
	udi_cdc_rx_pos[port] = 0;
     702:	803b      	strh	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     704:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     708:	425a      	negs	r2, r3
     70a:	4153      	adcs	r3, r2
     70c:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
     70e:	b672      	cpsid	i
     710:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     714:	4b49      	ldr	r3, [pc, #292]	; (83c <udi_cdc_data_enable+0x17c>)
     716:	469a      	mov	sl, r3
     718:	2300      	movs	r3, #0
     71a:	4652      	mov	r2, sl
     71c:	7013      	strb	r3, [r2, #0]
	return flags;
     71e:	9b02      	ldr	r3, [sp, #8]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     720:	7804      	ldrb	r4, [r0, #0]
     722:	469c      	mov	ip, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
     724:	7833      	ldrb	r3, [r6, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     726:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     728:	b2db      	uxtb	r3, r3
     72a:	2b00      	cmp	r3, #0
     72c:	d105      	bne.n	73a <udi_cdc_data_enable+0x7a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     72e:	883a      	ldrh	r2, [r7, #0]
     730:	4691      	mov	r9, r2
     732:	0062      	lsls	r2, r4, #1
     734:	5a8a      	ldrh	r2, [r1, r2]
	if (udi_cdc_rx_trans_ongoing[port] ||
     736:	4591      	cmp	r9, r2
     738:	d209      	bcs.n	74e <udi_cdc_data_enable+0x8e>
	if (cpu_irq_is_enabled_flags(flags))
     73a:	4663      	mov	r3, ip
     73c:	2b00      	cmp	r3, #0
     73e:	d13f      	bne.n	7c0 <udi_cdc_data_enable+0x100>
		return false;
     740:	2000      	movs	r0, #0
}
     742:	b004      	add	sp, #16
     744:	bc1c      	pop	{r2, r3, r4}
     746:	4690      	mov	r8, r2
     748:	4699      	mov	r9, r3
     74a:	46a2      	mov	sl, r4
     74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_cdc_rx_pos[port] = 0;
     74e:	803b      	strh	r3, [r7, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     750:	4263      	negs	r3, r4
     752:	4163      	adcs	r3, r4
     754:	b2db      	uxtb	r3, r3
     756:	7003      	strb	r3, [r0, #0]
     758:	4662      	mov	r2, ip
	udi_cdc_rx_trans_ongoing[port] = true;
     75a:	2301      	movs	r3, #1
     75c:	7033      	strb	r3, [r6, #0]
     75e:	2a00      	cmp	r2, #0
     760:	d152      	bne.n	808 <udi_cdc_data_enable+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     762:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     766:	425e      	negs	r6, r3
     768:	4173      	adcs	r3, r6
     76a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     76c:	b672      	cpsid	i
     76e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     772:	2300      	movs	r3, #0
     774:	4652      	mov	r2, sl
     776:	7013      	strb	r3, [r2, #0]
	return flags;
     778:	9b03      	ldr	r3, [sp, #12]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     77a:	883e      	ldrh	r6, [r7, #0]
     77c:	469c      	mov	ip, r3
	if (cpu_irq_is_enabled_flags(flags))
     77e:	4662      	mov	r2, ip
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     780:	7803      	ldrb	r3, [r0, #0]
	pos = udi_cdc_rx_pos[port];
     782:	b2b6      	uxth	r6, r6
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     784:	005b      	lsls	r3, r3, #1
     786:	5acb      	ldrh	r3, [r1, r3]
     788:	b29b      	uxth	r3, r3
     78a:	2a00      	cmp	r2, #0
     78c:	d131      	bne.n	7f2 <udi_cdc_data_enable+0x132>
	if (udi_cdc_multi_is_rx_ready(port)) {
     78e:	429e      	cmp	r6, r3
     790:	d136      	bne.n	800 <udi_cdc_data_enable+0x140>
	return udd_ep_run(ep,
     792:	4b2b      	ldr	r3, [pc, #172]	; (840 <udi_cdc_data_enable+0x180>)
			udi_cdc_rx_buf[port][buf_sel_trans],
     794:	4a2b      	ldr	r2, [pc, #172]	; (844 <udi_cdc_data_enable+0x184>)
     796:	01a4      	lsls	r4, r4, #6
     798:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
     79a:	9300      	str	r3, [sp, #0]
     79c:	2101      	movs	r1, #1
     79e:	2340      	movs	r3, #64	; 0x40
     7a0:	2002      	movs	r0, #2
     7a2:	4c29      	ldr	r4, [pc, #164]	; (848 <udi_cdc_data_enable+0x188>)
     7a4:	47a0      	blx	r4
	if (!udi_cdc_rx_start(port)) {
     7a6:	2800      	cmp	r0, #0
     7a8:	d0ca      	beq.n	740 <udi_cdc_data_enable+0x80>
	udi_cdc_nb_data_enabled++;
     7aa:	782b      	ldrb	r3, [r5, #0]
     7ac:	3301      	adds	r3, #1
     7ae:	b2db      	uxtb	r3, r3
     7b0:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     7b2:	782b      	ldrb	r3, [r5, #0]
     7b4:	b2db      	uxtb	r3, r3
     7b6:	2b01      	cmp	r3, #1
     7b8:	d1c3      	bne.n	742 <udi_cdc_data_enable+0x82>
		udi_cdc_data_running = true;
     7ba:	4a24      	ldr	r2, [pc, #144]	; (84c <udi_cdc_data_enable+0x18c>)
     7bc:	7013      	strb	r3, [r2, #0]
     7be:	e7c0      	b.n	742 <udi_cdc_data_enable+0x82>
		cpu_irq_enable();
     7c0:	2301      	movs	r3, #1
     7c2:	4652      	mov	r2, sl
     7c4:	7013      	strb	r3, [r2, #0]
     7c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     7ca:	b662      	cpsie	i
     7cc:	e7b8      	b.n	740 <udi_cdc_data_enable+0x80>
	if (udd_is_high_speed()) {
     7ce:	4b20      	ldr	r3, [pc, #128]	; (850 <udi_cdc_data_enable+0x190>)
     7d0:	4798      	blx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     7d2:	8824      	ldrh	r4, [r4, #0]
	if (udd_is_high_speed()) {
     7d4:	2800      	cmp	r0, #0
     7d6:	d107      	bne.n	7e8 <udi_cdc_data_enable+0x128>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     7d8:	4b1e      	ldr	r3, [pc, #120]	; (854 <udi_cdc_data_enable+0x194>)
     7da:	4798      	blx	r3
     7dc:	4284      	cmp	r4, r0
     7de:	d100      	bne.n	7e2 <udi_cdc_data_enable+0x122>
     7e0:	e786      	b.n	6f0 <udi_cdc_data_enable+0x30>
     7e2:	4b1d      	ldr	r3, [pc, #116]	; (858 <udi_cdc_data_enable+0x198>)
     7e4:	4798      	blx	r3
     7e6:	e783      	b.n	6f0 <udi_cdc_data_enable+0x30>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     7e8:	4b1c      	ldr	r3, [pc, #112]	; (85c <udi_cdc_data_enable+0x19c>)
     7ea:	4798      	blx	r3
     7ec:	4284      	cmp	r4, r0
     7ee:	d1f8      	bne.n	7e2 <udi_cdc_data_enable+0x122>
     7f0:	e77e      	b.n	6f0 <udi_cdc_data_enable+0x30>
     7f2:	2101      	movs	r1, #1
     7f4:	4652      	mov	r2, sl
     7f6:	7011      	strb	r1, [r2, #0]
     7f8:	f3bf 8f5f 	dmb	sy
     7fc:	b662      	cpsie	i
     7fe:	e7c6      	b.n	78e <udi_cdc_data_enable+0xce>
		UDI_CDC_RX_NOTIFY(port);
     800:	2000      	movs	r0, #0
     802:	4b17      	ldr	r3, [pc, #92]	; (860 <udi_cdc_data_enable+0x1a0>)
     804:	4798      	blx	r3
     806:	e7c4      	b.n	792 <udi_cdc_data_enable+0xd2>
     808:	4652      	mov	r2, sl
     80a:	7013      	strb	r3, [r2, #0]
     80c:	f3bf 8f5f 	dmb	sy
     810:	b662      	cpsie	i
     812:	e7a6      	b.n	762 <udi_cdc_data_enable+0xa2>
     814:	20000240 	.word	0x20000240
     818:	200001b0 	.word	0x200001b0
     81c:	20000114 	.word	0x20000114
     820:	20000238 	.word	0x20000238
     824:	2000023c 	.word	0x2000023c
     828:	20000234 	.word	0x20000234
     82c:	20000198 	.word	0x20000198
     830:	200001a4 	.word	0x200001a4
     834:	2000019c 	.word	0x2000019c
     838:	200001a0 	.word	0x200001a0
     83c:	200000e8 	.word	0x200000e8
     840:	00000865 	.word	0x00000865
     844:	20000118 	.word	0x20000118
     848:	00004241 	.word	0x00004241
     84c:	2000010a 	.word	0x2000010a
     850:	00003f7d 	.word	0x00003f7d
     854:	00003f81 	.word	0x00003f81
     858:	00000399 	.word	0x00000399
     85c:	00003f91 	.word	0x00003f91
     860:	00005bb1 	.word	0x00005bb1

00000864 <udi_cdc_data_received>:
{
     864:	b5f0      	push	{r4, r5, r6, r7, lr}
     866:	46ce      	mov	lr, r9
     868:	4647      	mov	r7, r8
     86a:	b580      	push	{r7, lr}
     86c:	0014      	movs	r4, r2
     86e:	b085      	sub	sp, #20
	if (UDD_EP_TRANSFER_OK != status) {
     870:	2800      	cmp	r0, #0
     872:	d154      	bne.n	91e <udi_cdc_data_received+0xba>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     874:	4b3b      	ldr	r3, [pc, #236]	; (964 <udi_cdc_data_received+0x100>)
     876:	781a      	ldrb	r2, [r3, #0]
     878:	4255      	negs	r5, r2
     87a:	416a      	adcs	r2, r5
     87c:	b2d2      	uxtb	r2, r2
	if (!n) {
     87e:	2900      	cmp	r1, #0
     880:	d052      	beq.n	928 <udi_cdc_data_received+0xc4>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     882:	4e39      	ldr	r6, [pc, #228]	; (968 <udi_cdc_data_received+0x104>)
     884:	b289      	uxth	r1, r1
     886:	0052      	lsls	r2, r2, #1
     888:	52b1      	strh	r1, [r6, r2]
	udi_cdc_rx_trans_ongoing[port] = false;
     88a:	4938      	ldr	r1, [pc, #224]	; (96c <udi_cdc_data_received+0x108>)
     88c:	7008      	strb	r0, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     88e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     892:	4254      	negs	r4, r2
     894:	4162      	adcs	r2, r4
     896:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
     898:	b672      	cpsid	i
     89a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     89e:	4a34      	ldr	r2, [pc, #208]	; (970 <udi_cdc_data_received+0x10c>)
     8a0:	7010      	strb	r0, [r2, #0]
	return flags;
     8a2:	9802      	ldr	r0, [sp, #8]
	cpu_irq_disable();
     8a4:	4691      	mov	r9, r2
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     8a6:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
     8a8:	780a      	ldrb	r2, [r1, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     8aa:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     8ac:	b2d2      	uxtb	r2, r2
     8ae:	2a00      	cmp	r2, #0
     8b0:	d145      	bne.n	93e <udi_cdc_data_received+0xda>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     8b2:	4f30      	ldr	r7, [pc, #192]	; (974 <udi_cdc_data_received+0x110>)
     8b4:	883d      	ldrh	r5, [r7, #0]
     8b6:	46a8      	mov	r8, r5
     8b8:	0065      	lsls	r5, r4, #1
     8ba:	5b75      	ldrh	r5, [r6, r5]
	if (udi_cdc_rx_trans_ongoing[port] ||
     8bc:	45a8      	cmp	r8, r5
     8be:	d33e      	bcc.n	93e <udi_cdc_data_received+0xda>
	udi_cdc_rx_pos[port] = 0;
     8c0:	803a      	strh	r2, [r7, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     8c2:	4262      	negs	r2, r4
     8c4:	4162      	adcs	r2, r4
     8c6:	b2d2      	uxtb	r2, r2
     8c8:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
     8ca:	2201      	movs	r2, #1
     8cc:	700a      	strb	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
     8ce:	2800      	cmp	r0, #0
     8d0:	d13e      	bne.n	950 <udi_cdc_data_received+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8d2:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     8d6:	4251      	negs	r1, r2
     8d8:	414a      	adcs	r2, r1
     8da:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     8dc:	b672      	cpsid	i
     8de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     8e2:	2200      	movs	r2, #0
     8e4:	4649      	mov	r1, r9
     8e6:	700a      	strb	r2, [r1, #0]
	return flags;
     8e8:	9903      	ldr	r1, [sp, #12]
	pos = udi_cdc_rx_pos[port];
     8ea:	883a      	ldrh	r2, [r7, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     8ec:	781b      	ldrb	r3, [r3, #0]
	pos = udi_cdc_rx_pos[port];
     8ee:	b292      	uxth	r2, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     8f0:	005b      	lsls	r3, r3, #1
     8f2:	5af3      	ldrh	r3, [r6, r3]
     8f4:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
     8f6:	2900      	cmp	r1, #0
     8f8:	d005      	beq.n	906 <udi_cdc_data_received+0xa2>
		cpu_irq_enable();
     8fa:	2101      	movs	r1, #1
     8fc:	4648      	mov	r0, r9
     8fe:	7001      	strb	r1, [r0, #0]
     900:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     904:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     906:	429a      	cmp	r2, r3
     908:	d128      	bne.n	95c <udi_cdc_data_received+0xf8>
	return udd_ep_run(ep,
     90a:	4b1b      	ldr	r3, [pc, #108]	; (978 <udi_cdc_data_received+0x114>)
			udi_cdc_rx_buf[port][buf_sel_trans],
     90c:	4a1b      	ldr	r2, [pc, #108]	; (97c <udi_cdc_data_received+0x118>)
     90e:	01a4      	lsls	r4, r4, #6
     910:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
     912:	9300      	str	r3, [sp, #0]
     914:	2101      	movs	r1, #1
     916:	2340      	movs	r3, #64	; 0x40
     918:	2002      	movs	r0, #2
     91a:	4c19      	ldr	r4, [pc, #100]	; (980 <udi_cdc_data_received+0x11c>)
     91c:	47a0      	blx	r4
}
     91e:	b005      	add	sp, #20
     920:	bc0c      	pop	{r2, r3}
     922:	4690      	mov	r8, r2
     924:	4699      	mov	r9, r3
     926:	bdf0      	pop	{r4, r5, r6, r7, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
     928:	4b14      	ldr	r3, [pc, #80]	; (97c <udi_cdc_data_received+0x118>)
     92a:	0192      	lsls	r2, r2, #6
     92c:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
     92e:	4b12      	ldr	r3, [pc, #72]	; (978 <udi_cdc_data_received+0x114>)
     930:	3101      	adds	r1, #1
     932:	9300      	str	r3, [sp, #0]
     934:	0020      	movs	r0, r4
     936:	2340      	movs	r3, #64	; 0x40
     938:	4c11      	ldr	r4, [pc, #68]	; (980 <udi_cdc_data_received+0x11c>)
     93a:	47a0      	blx	r4
     93c:	e7ef      	b.n	91e <udi_cdc_data_received+0xba>
	if (cpu_irq_is_enabled_flags(flags))
     93e:	2800      	cmp	r0, #0
     940:	d0ed      	beq.n	91e <udi_cdc_data_received+0xba>
		cpu_irq_enable();
     942:	2301      	movs	r3, #1
     944:	464a      	mov	r2, r9
     946:	7013      	strb	r3, [r2, #0]
     948:	f3bf 8f5f 	dmb	sy
     94c:	b662      	cpsie	i
     94e:	e7e6      	b.n	91e <udi_cdc_data_received+0xba>
     950:	4649      	mov	r1, r9
     952:	700a      	strb	r2, [r1, #0]
     954:	f3bf 8f5f 	dmb	sy
     958:	b662      	cpsie	i
     95a:	e7ba      	b.n	8d2 <udi_cdc_data_received+0x6e>
		UDI_CDC_RX_NOTIFY(port);
     95c:	2000      	movs	r0, #0
     95e:	4b09      	ldr	r3, [pc, #36]	; (984 <udi_cdc_data_received+0x120>)
     960:	4798      	blx	r3
     962:	e7d2      	b.n	90a <udi_cdc_data_received+0xa6>
     964:	2000019c 	.word	0x2000019c
     968:	20000198 	.word	0x20000198
     96c:	200001a4 	.word	0x200001a4
     970:	200000e8 	.word	0x200000e8
     974:	200001a0 	.word	0x200001a0
     978:	00000865 	.word	0x00000865
     97c:	20000118 	.word	0x20000118
     980:	00004241 	.word	0x00004241
     984:	00005bb1 	.word	0x00005bb1

00000988 <udi_cdc_signal_overrun>:
{
     988:	b530      	push	{r4, r5, lr}
     98a:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     98c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     990:	425a      	negs	r2, r3
     992:	4153      	adcs	r3, r2
     994:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     996:	b672      	cpsid	i
     998:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     99c:	2300      	movs	r3, #0
		udi_cdc_state[port] |= bit_mask;
     99e:	2440      	movs	r4, #64	; 0x40
     9a0:	4a11      	ldr	r2, [pc, #68]	; (9e8 <udi_cdc_signal_overrun+0x60>)
     9a2:	4912      	ldr	r1, [pc, #72]	; (9ec <udi_cdc_signal_overrun+0x64>)
     9a4:	7013      	strb	r3, [r2, #0]
	return flags;
     9a6:	9803      	ldr	r0, [sp, #12]
     9a8:	880b      	ldrh	r3, [r1, #0]
     9aa:	4323      	orrs	r3, r4
     9ac:	800b      	strh	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
     9ae:	2800      	cmp	r0, #0
     9b0:	d114      	bne.n	9dc <udi_cdc_signal_overrun+0x54>
	if ((!udi_cdc_serial_state_msg_ongoing[port])
     9b2:	4c0f      	ldr	r4, [pc, #60]	; (9f0 <udi_cdc_signal_overrun+0x68>)
     9b4:	7823      	ldrb	r3, [r4, #0]
     9b6:	2b00      	cmp	r3, #0
     9b8:	d10e      	bne.n	9d8 <udi_cdc_signal_overrun+0x50>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
     9ba:	4a0e      	ldr	r2, [pc, #56]	; (9f4 <udi_cdc_signal_overrun+0x6c>)
     9bc:	880b      	ldrh	r3, [r1, #0]
     9be:	8910      	ldrh	r0, [r2, #8]
     9c0:	4298      	cmp	r0, r3
     9c2:	d009      	beq.n	9d8 <udi_cdc_signal_overrun+0x50>
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
     9c4:	880b      	ldrh	r3, [r1, #0]
				udd_ep_run(ep,
     9c6:	2083      	movs	r0, #131	; 0x83
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
     9c8:	8113      	strh	r3, [r2, #8]
				udd_ep_run(ep,
     9ca:	4b0b      	ldr	r3, [pc, #44]	; (9f8 <udi_cdc_signal_overrun+0x70>)
     9cc:	2100      	movs	r1, #0
     9ce:	9300      	str	r3, [sp, #0]
     9d0:	4d0a      	ldr	r5, [pc, #40]	; (9fc <udi_cdc_signal_overrun+0x74>)
     9d2:	230a      	movs	r3, #10
     9d4:	47a8      	blx	r5
		udi_cdc_serial_state_msg_ongoing[port] =
     9d6:	7020      	strb	r0, [r4, #0]
}
     9d8:	b005      	add	sp, #20
     9da:	bd30      	pop	{r4, r5, pc}
		cpu_irq_enable();
     9dc:	2301      	movs	r3, #1
     9de:	7013      	strb	r3, [r2, #0]
     9e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9e4:	b662      	cpsie	i
     9e6:	e7e4      	b.n	9b2 <udi_cdc_signal_overrun+0x2a>
     9e8:	200000e8 	.word	0x200000e8
     9ec:	200001ac 	.word	0x200001ac
     9f0:	200001a8 	.word	0x200001a8
     9f4:	20000244 	.word	0x20000244
     9f8:	00000349 	.word	0x00000349
     9fc:	00004241 	.word	0x00004241

00000a00 <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
     a00:	b510      	push	{r4, lr}
     a02:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     a04:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a08:	425a      	negs	r2, r3
     a0a:	4153      	adcs	r3, r2
     a0c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     a0e:	b672      	cpsid	i
     a10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a14:	2300      	movs	r3, #0
     a16:	4a0c      	ldr	r2, [pc, #48]	; (a48 <udi_cdc_is_rx_ready+0x48>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     a18:	4c0c      	ldr	r4, [pc, #48]	; (a4c <udi_cdc_is_rx_ready+0x4c>)
     a1a:	7013      	strb	r3, [r2, #0]
	pos = udi_cdc_rx_pos[port];
     a1c:	4b0c      	ldr	r3, [pc, #48]	; (a50 <udi_cdc_is_rx_ready+0x50>)
	return flags;
     a1e:	9901      	ldr	r1, [sp, #4]
     a20:	8818      	ldrh	r0, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     a22:	4b0c      	ldr	r3, [pc, #48]	; (a54 <udi_cdc_is_rx_ready+0x54>)
	pos = udi_cdc_rx_pos[port];
     a24:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     a26:	781b      	ldrb	r3, [r3, #0]
     a28:	005b      	lsls	r3, r3, #1
     a2a:	5b1b      	ldrh	r3, [r3, r4]
     a2c:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
     a2e:	2900      	cmp	r1, #0
     a30:	d004      	beq.n	a3c <udi_cdc_is_rx_ready+0x3c>
		cpu_irq_enable();
     a32:	2101      	movs	r1, #1
     a34:	7011      	strb	r1, [r2, #0]
     a36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a3a:	b662      	cpsie	i
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     a3c:	1ac0      	subs	r0, r0, r3
     a3e:	1e43      	subs	r3, r0, #1
     a40:	4198      	sbcs	r0, r3
	return udi_cdc_multi_is_rx_ready(0);
     a42:	b2c0      	uxtb	r0, r0
}
     a44:	b002      	add	sp, #8
     a46:	bd10      	pop	{r4, pc}
     a48:	200000e8 	.word	0x200000e8
     a4c:	20000198 	.word	0x20000198
     a50:	200001a0 	.word	0x200001a0
     a54:	2000019c 	.word	0x2000019c

00000a58 <udi_cdc_getc>:
	}
	return rx_data;
}

int udi_cdc_getc(void)
{
     a58:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5a:	4657      	mov	r7, sl
     a5c:	464e      	mov	r6, r9
     a5e:	46de      	mov	lr, fp
     a60:	4645      	mov	r5, r8
     a62:	b5e0      	push	{r5, r6, r7, lr}
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     a64:	4b56      	ldr	r3, [pc, #344]	; (bc0 <udi_cdc_getc+0x168>)
	int rx_data = 0;
     a66:	2400      	movs	r4, #0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     a68:	799b      	ldrb	r3, [r3, #6]
	return udd_ep_run(ep,
     a6a:	46a4      	mov	ip, r4
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     a6c:	3b09      	subs	r3, #9
     a6e:	425a      	negs	r2, r3
     a70:	4153      	adcs	r3, r2
     a72:	b2db      	uxtb	r3, r3
     a74:	469a      	mov	sl, r3
     a76:	4b53      	ldr	r3, [pc, #332]	; (bc4 <udi_cdc_getc+0x16c>)
     a78:	4d53      	ldr	r5, [pc, #332]	; (bc8 <udi_cdc_getc+0x170>)
     a7a:	4699      	mov	r9, r3
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     a7c:	4b53      	ldr	r3, [pc, #332]	; (bcc <udi_cdc_getc+0x174>)
     a7e:	4e54      	ldr	r6, [pc, #336]	; (bd0 <udi_cdc_getc+0x178>)
     a80:	469b      	mov	fp, r3
     a82:	4f54      	ldr	r7, [pc, #336]	; (bd4 <udi_cdc_getc+0x17c>)
{
     a84:	b089      	sub	sp, #36	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     a86:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a8a:	425a      	negs	r2, r3
     a8c:	4153      	adcs	r3, r2
     a8e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
     a90:	b672      	cpsid	i
     a92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a96:	2300      	movs	r3, #0
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     a98:	464c      	mov	r4, r9
     a9a:	702b      	strb	r3, [r5, #0]
	return flags;
     a9c:	9805      	ldr	r0, [sp, #20]
	pos = udi_cdc_rx_pos[port];
     a9e:	8833      	ldrh	r3, [r6, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
     aa0:	783a      	ldrb	r2, [r7, #0]
	pos = udi_cdc_rx_pos[port];
     aa2:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     aa4:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     aa6:	0051      	lsls	r1, r2, #1
     aa8:	5a61      	ldrh	r1, [r4, r1]
     aaa:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
     aac:	2800      	cmp	r0, #0
     aae:	d000      	beq.n	ab2 <udi_cdc_getc+0x5a>
     ab0:	e06a      	b.n	b88 <udi_cdc_getc+0x130>
	while (again) {
     ab2:	428b      	cmp	r3, r1
     ab4:	d30c      	bcc.n	ad0 <udi_cdc_getc+0x78>
		if (!udi_cdc_data_running) {
     ab6:	4b48      	ldr	r3, [pc, #288]	; (bd8 <udi_cdc_getc+0x180>)
     ab8:	781b      	ldrb	r3, [r3, #0]
     aba:	2b00      	cmp	r3, #0
     abc:	d1e3      	bne.n	a86 <udi_cdc_getc+0x2e>
			return 0;
     abe:	2400      	movs	r4, #0
	return udi_cdc_multi_getc(0);
}
     ac0:	0020      	movs	r0, r4
     ac2:	b009      	add	sp, #36	; 0x24
     ac4:	bc3c      	pop	{r2, r3, r4, r5}
     ac6:	4690      	mov	r8, r2
     ac8:	4699      	mov	r9, r3
     aca:	46a2      	mov	sl, r4
     acc:	46ab      	mov	fp, r5
     ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     ad0:	4661      	mov	r1, ip
     ad2:	0192      	lsls	r2, r2, #6
     ad4:	445a      	add	r2, fp
     ad6:	5cd2      	ldrb	r2, [r2, r3]
	udi_cdc_rx_pos[port] = pos+1;
     ad8:	3301      	adds	r3, #1
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     ada:	4311      	orrs	r1, r2
	udi_cdc_rx_pos[port] = pos+1;
     adc:	b29b      	uxth	r3, r3
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     ade:	9103      	str	r1, [sp, #12]
	udi_cdc_rx_pos[port] = pos+1;
     ae0:	8033      	strh	r3, [r6, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ae2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     ae6:	425a      	negs	r2, r3
     ae8:	4153      	adcs	r3, r2
     aea:	9306      	str	r3, [sp, #24]
  __ASM volatile ("cpsid i" : : : "memory");
     aec:	b672      	cpsid	i
     aee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     af2:	2300      	movs	r3, #0
     af4:	702b      	strb	r3, [r5, #0]
	return flags;
     af6:	9906      	ldr	r1, [sp, #24]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     af8:	783a      	ldrb	r2, [r7, #0]
     afa:	b2d3      	uxtb	r3, r2
     afc:	4698      	mov	r8, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
     afe:	4b37      	ldr	r3, [pc, #220]	; (bdc <udi_cdc_getc+0x184>)
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	b2db      	uxtb	r3, r3
     b04:	2b00      	cmp	r3, #0
     b06:	d145      	bne.n	b94 <udi_cdc_getc+0x13c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     b08:	4642      	mov	r2, r8
     b0a:	4648      	mov	r0, r9
     b0c:	0052      	lsls	r2, r2, #1
     b0e:	8834      	ldrh	r4, [r6, #0]
     b10:	5a82      	ldrh	r2, [r0, r2]
	if (udi_cdc_rx_trans_ongoing[port] ||
     b12:	4294      	cmp	r4, r2
     b14:	d33e      	bcc.n	b94 <udi_cdc_getc+0x13c>
	udi_cdc_rx_pos[port] = 0;
     b16:	8033      	strh	r3, [r6, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     b18:	4643      	mov	r3, r8
     b1a:	425a      	negs	r2, r3
     b1c:	4153      	adcs	r3, r2
     b1e:	b2db      	uxtb	r3, r3
     b20:	703b      	strb	r3, [r7, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
     b22:	2301      	movs	r3, #1
     b24:	4a2d      	ldr	r2, [pc, #180]	; (bdc <udi_cdc_getc+0x184>)
     b26:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     b28:	2900      	cmp	r1, #0
     b2a:	d13f      	bne.n	bac <udi_cdc_getc+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     b2c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     b30:	425a      	negs	r2, r3
     b32:	4153      	adcs	r3, r2
     b34:	9307      	str	r3, [sp, #28]
  __ASM volatile ("cpsid i" : : : "memory");
     b36:	b672      	cpsid	i
     b38:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     b3c:	2300      	movs	r3, #0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     b3e:	4648      	mov	r0, r9
     b40:	702b      	strb	r3, [r5, #0]
	return flags;
     b42:	9907      	ldr	r1, [sp, #28]
	pos = udi_cdc_rx_pos[port];
     b44:	8832      	ldrh	r2, [r6, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     b46:	783b      	ldrb	r3, [r7, #0]
	pos = udi_cdc_rx_pos[port];
     b48:	b292      	uxth	r2, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     b4a:	005b      	lsls	r3, r3, #1
     b4c:	5ac3      	ldrh	r3, [r0, r3]
     b4e:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
     b50:	2900      	cmp	r1, #0
     b52:	d004      	beq.n	b5e <udi_cdc_getc+0x106>
		cpu_irq_enable();
     b54:	2101      	movs	r1, #1
     b56:	7029      	strb	r1, [r5, #0]
     b58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     b5c:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     b5e:	429a      	cmp	r2, r3
     b60:	d129      	bne.n	bb6 <udi_cdc_getc+0x15e>
			udi_cdc_rx_buf[port][buf_sel_trans],
     b62:	4643      	mov	r3, r8
     b64:	019a      	lsls	r2, r3, #6
	return udd_ep_run(ep,
     b66:	4b1e      	ldr	r3, [pc, #120]	; (be0 <udi_cdc_getc+0x188>)
			udi_cdc_rx_buf[port][buf_sel_trans],
     b68:	445a      	add	r2, fp
	return udd_ep_run(ep,
     b6a:	9300      	str	r3, [sp, #0]
     b6c:	2101      	movs	r1, #1
     b6e:	2340      	movs	r3, #64	; 0x40
     b70:	2002      	movs	r0, #2
     b72:	4c1c      	ldr	r4, [pc, #112]	; (be4 <udi_cdc_getc+0x18c>)
     b74:	47a0      	blx	r4
	if (b_databit_9) {
     b76:	4653      	mov	r3, sl
     b78:	2b00      	cmp	r3, #0
     b7a:	d015      	beq.n	ba8 <udi_cdc_getc+0x150>
		rx_data = rx_data << 8;
     b7c:	9b03      	ldr	r3, [sp, #12]
     b7e:	021b      	lsls	r3, r3, #8
     b80:	469c      	mov	ip, r3
		b_databit_9 = false;
     b82:	2300      	movs	r3, #0
     b84:	469a      	mov	sl, r3
     b86:	e77e      	b.n	a86 <udi_cdc_getc+0x2e>
     b88:	2001      	movs	r0, #1
     b8a:	7028      	strb	r0, [r5, #0]
     b8c:	f3bf 8f5f 	dmb	sy
     b90:	b662      	cpsie	i
     b92:	e78e      	b.n	ab2 <udi_cdc_getc+0x5a>
	if (cpu_irq_is_enabled_flags(flags))
     b94:	2900      	cmp	r1, #0
     b96:	d0ee      	beq.n	b76 <udi_cdc_getc+0x11e>
		cpu_irq_enable();
     b98:	2301      	movs	r3, #1
     b9a:	702b      	strb	r3, [r5, #0]
     b9c:	f3bf 8f5f 	dmb	sy
     ba0:	b662      	cpsie	i
	if (b_databit_9) {
     ba2:	4653      	mov	r3, sl
     ba4:	2b00      	cmp	r3, #0
     ba6:	d1e9      	bne.n	b7c <udi_cdc_getc+0x124>
     ba8:	9c03      	ldr	r4, [sp, #12]
     baa:	e789      	b.n	ac0 <udi_cdc_getc+0x68>
     bac:	702b      	strb	r3, [r5, #0]
     bae:	f3bf 8f5f 	dmb	sy
     bb2:	b662      	cpsie	i
     bb4:	e7ba      	b.n	b2c <udi_cdc_getc+0xd4>
		UDI_CDC_RX_NOTIFY(port);
     bb6:	2000      	movs	r0, #0
     bb8:	4b0b      	ldr	r3, [pc, #44]	; (be8 <udi_cdc_getc+0x190>)
     bba:	4798      	blx	r3
     bbc:	e7d1      	b.n	b62 <udi_cdc_getc+0x10a>
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	2000010c 	.word	0x2000010c
     bc4:	20000198 	.word	0x20000198
     bc8:	200000e8 	.word	0x200000e8
     bcc:	20000118 	.word	0x20000118
     bd0:	200001a0 	.word	0x200001a0
     bd4:	2000019c 	.word	0x2000019c
     bd8:	2000010a 	.word	0x2000010a
     bdc:	200001a4 	.word	0x200001a4
     be0:	00000865 	.word	0x00000865
     be4:	00004241 	.word	0x00004241
     be8:	00005bb1 	.word	0x00005bb1

00000bec <udi_cdc_is_tx_ready>:
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
}

bool udi_cdc_is_tx_ready(void)
{
     bec:	b570      	push	{r4, r5, r6, lr}
     bee:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bf0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     bf4:	425a      	negs	r2, r3
     bf6:	4153      	adcs	r3, r2
     bf8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     bfa:	b672      	cpsid	i
     bfc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     c00:	2300      	movs	r3, #0
     c02:	4a14      	ldr	r2, [pc, #80]	; (c54 <udi_cdc_is_tx_ready+0x68>)
	buf_sel = udi_cdc_tx_buf_sel[port];
     c04:	4914      	ldr	r1, [pc, #80]	; (c58 <udi_cdc_is_tx_ready+0x6c>)
     c06:	7013      	strb	r3, [r2, #0]
	return flags;
     c08:	9c01      	ldr	r4, [sp, #4]
     c0a:	780b      	ldrb	r3, [r1, #0]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     c0c:	4813      	ldr	r0, [pc, #76]	; (c5c <udi_cdc_is_tx_ready+0x70>)
	buf_sel = udi_cdc_tx_buf_sel[port];
     c0e:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     c10:	005d      	lsls	r5, r3, #1
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     c12:	5a2d      	ldrh	r5, [r5, r0]
     c14:	2001      	movs	r0, #1
     c16:	2d40      	cmp	r5, #64	; 0x40
     c18:	d008      	beq.n	c2c <udi_cdc_is_tx_ready+0x40>
	if (cpu_irq_is_enabled_flags(flags))
     c1a:	2c00      	cmp	r4, #0
     c1c:	d004      	beq.n	c28 <udi_cdc_is_tx_ready+0x3c>
		cpu_irq_enable();
     c1e:	2301      	movs	r3, #1
     c20:	7013      	strb	r3, [r2, #0]
     c22:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c26:	b662      	cpsie	i
	return udi_cdc_multi_is_tx_ready(0);
}
     c28:	b002      	add	sp, #8
     c2a:	bd70      	pop	{r4, r5, r6, pc}
		if ((!udi_cdc_tx_trans_ongoing[port])
     c2c:	480c      	ldr	r0, [pc, #48]	; (c60 <udi_cdc_is_tx_ready+0x74>)
     c2e:	7800      	ldrb	r0, [r0, #0]
     c30:	b2c0      	uxtb	r0, r0
     c32:	2800      	cmp	r0, #0
     c34:	d10b      	bne.n	c4e <udi_cdc_is_tx_ready+0x62>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     c36:	4d0b      	ldr	r5, [pc, #44]	; (c64 <udi_cdc_is_tx_ready+0x78>)
     c38:	782e      	ldrb	r6, [r5, #0]
     c3a:	2e00      	cmp	r6, #0
     c3c:	d1ed      	bne.n	c1a <udi_cdc_is_tx_ready+0x2e>
			udi_cdc_tx_both_buf_to_send[port] = true;
     c3e:	3001      	adds	r0, #1
     c40:	7028      	strb	r0, [r5, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     c42:	4258      	negs	r0, r3
     c44:	4143      	adcs	r3, r0
     c46:	b2db      	uxtb	r3, r3
     c48:	700b      	strb	r3, [r1, #0]
     c4a:	2001      	movs	r0, #1
     c4c:	e7e5      	b.n	c1a <udi_cdc_is_tx_ready+0x2e>
		if ((!udi_cdc_tx_trans_ongoing[port])
     c4e:	2000      	movs	r0, #0
     c50:	e7e3      	b.n	c1a <udi_cdc_is_tx_ready+0x2e>
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	200000e8 	.word	0x200000e8
     c58:	20000238 	.word	0x20000238
     c5c:	20000234 	.word	0x20000234
     c60:	20000240 	.word	0x20000240
     c64:	200001b0 	.word	0x200001b0

00000c68 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     c68:	b5f0      	push	{r4, r5, r6, r7, lr}
     c6a:	46de      	mov	lr, fp
     c6c:	4657      	mov	r7, sl
     c6e:	4645      	mov	r5, r8
     c70:	464e      	mov	r6, r9
     c72:	b5e0      	push	{r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     c74:	4b3d      	ldr	r3, [pc, #244]	; (d6c <udi_cdc_multi_putc+0x104>)
	cpu_irq_disable();
     c76:	2500      	movs	r5, #0
     c78:	799b      	ldrb	r3, [r3, #6]
{
     c7a:	b085      	sub	sp, #20
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     c7c:	3b09      	subs	r3, #9
     c7e:	425a      	negs	r2, r3
     c80:	4153      	adcs	r3, r2
     c82:	b2db      	uxtb	r3, r3
     c84:	469c      	mov	ip, r3
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     c86:	4b3a      	ldr	r3, [pc, #232]	; (d70 <udi_cdc_multi_putc+0x108>)
     c88:	4a3a      	ldr	r2, [pc, #232]	; (d74 <udi_cdc_multi_putc+0x10c>)
     c8a:	469b      	mov	fp, r3
		cpu_irq_enable();
     c8c:	2301      	movs	r3, #1
     c8e:	469a      	mov	sl, r3
     c90:	4c39      	ldr	r4, [pc, #228]	; (d78 <udi_cdc_multi_putc+0x110>)
     c92:	483a      	ldr	r0, [pc, #232]	; (d7c <udi_cdc_multi_putc+0x114>)
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     c94:	9100      	str	r1, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c96:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     c9a:	425e      	negs	r6, r3
     c9c:	4173      	adcs	r3, r6
     c9e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     ca0:	b672      	cpsid	i
     ca2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     ca6:	7015      	strb	r5, [r2, #0]
	return flags;
     ca8:	9e03      	ldr	r6, [sp, #12]
	buf_sel = udi_cdc_tx_buf_sel[port];
     caa:	7823      	ldrb	r3, [r4, #0]
     cac:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     cae:	005f      	lsls	r7, r3, #1
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     cb0:	5bc7      	ldrh	r7, [r0, r7]
     cb2:	2f40      	cmp	r7, #64	; 0x40
     cb4:	d027      	beq.n	d06 <udi_cdc_multi_putc+0x9e>
	if (cpu_irq_is_enabled_flags(flags))
     cb6:	2e00      	cmp	r6, #0
     cb8:	d135      	bne.n	d26 <udi_cdc_multi_putc+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     cba:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     cbe:	425e      	negs	r6, r3
     cc0:	4173      	adcs	r3, r6
     cc2:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
     cc4:	b672      	cpsid	i
     cc6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     cca:	7015      	strb	r5, [r2, #0]
	return flags;
     ccc:	9b02      	ldr	r3, [sp, #8]
     cce:	9301      	str	r3, [sp, #4]
	buf_sel = udi_cdc_tx_buf_sel[port];
     cd0:	7823      	ldrb	r3, [r4, #0]
     cd2:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     cd4:	005f      	lsls	r7, r3, #1
     cd6:	46b8      	mov	r8, r7
     cd8:	5bc7      	ldrh	r7, [r0, r7]
     cda:	019b      	lsls	r3, r3, #6
     cdc:	1c7e      	adds	r6, r7, #1
     cde:	46b1      	mov	r9, r6
     ce0:	4646      	mov	r6, r8
     ce2:	4649      	mov	r1, r9
     ce4:	5381      	strh	r1, [r0, r6]
     ce6:	4669      	mov	r1, sp
     ce8:	7809      	ldrb	r1, [r1, #0]
     cea:	445b      	add	r3, fp
     cec:	55d9      	strb	r1, [r3, r7]
	if (cpu_irq_is_enabled_flags(flags))
     cee:	9b01      	ldr	r3, [sp, #4]
     cf0:	2b00      	cmp	r3, #0
     cf2:	d131      	bne.n	d58 <udi_cdc_multi_putc+0xf0>
	cpu_irq_restore(flags);

	if (b_databit_9) {
     cf4:	4663      	mov	r3, ip
     cf6:	2b00      	cmp	r3, #0
     cf8:	d036      	beq.n	d68 <udi_cdc_multi_putc+0x100>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     cfa:	9b00      	ldr	r3, [sp, #0]
     cfc:	121b      	asrs	r3, r3, #8
     cfe:	9300      	str	r3, [sp, #0]
		b_databit_9 = false;
     d00:	2300      	movs	r3, #0
     d02:	469c      	mov	ip, r3
		goto udi_cdc_putc_process_one_byte;
     d04:	e7c7      	b.n	c96 <udi_cdc_multi_putc+0x2e>
		if ((!udi_cdc_tx_trans_ongoing[port])
     d06:	491e      	ldr	r1, [pc, #120]	; (d80 <udi_cdc_multi_putc+0x118>)
     d08:	780f      	ldrb	r7, [r1, #0]
     d0a:	2f00      	cmp	r7, #0
     d0c:	d111      	bne.n	d32 <udi_cdc_multi_putc+0xca>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     d0e:	491d      	ldr	r1, [pc, #116]	; (d84 <udi_cdc_multi_putc+0x11c>)
     d10:	780f      	ldrb	r7, [r1, #0]
     d12:	2f00      	cmp	r7, #0
     d14:	d10d      	bne.n	d32 <udi_cdc_multi_putc+0xca>
			udi_cdc_tx_both_buf_to_send[port] = true;
     d16:	4657      	mov	r7, sl
     d18:	700f      	strb	r7, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     d1a:	425f      	negs	r7, r3
     d1c:	417b      	adcs	r3, r7
     d1e:	b2db      	uxtb	r3, r3
     d20:	7023      	strb	r3, [r4, #0]
     d22:	2e00      	cmp	r6, #0
     d24:	d0c9      	beq.n	cba <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
     d26:	4653      	mov	r3, sl
     d28:	7013      	strb	r3, [r2, #0]
     d2a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d2e:	b662      	cpsie	i
     d30:	e7c3      	b.n	cba <udi_cdc_multi_putc+0x52>
	if (cpu_irq_is_enabled_flags(flags))
     d32:	2e00      	cmp	r6, #0
     d34:	d004      	beq.n	d40 <udi_cdc_multi_putc+0xd8>
		cpu_irq_enable();
     d36:	4653      	mov	r3, sl
     d38:	7013      	strb	r3, [r2, #0]
     d3a:	f3bf 8f5f 	dmb	sy
     d3e:	b662      	cpsie	i
		if (!udi_cdc_data_running) {
     d40:	4b11      	ldr	r3, [pc, #68]	; (d88 <udi_cdc_multi_putc+0x120>)
     d42:	781b      	ldrb	r3, [r3, #0]
     d44:	2b00      	cmp	r3, #0
     d46:	d1a6      	bne.n	c96 <udi_cdc_multi_putc+0x2e>
			return false;
     d48:	2000      	movs	r0, #0
	}
	return true;
}
     d4a:	b005      	add	sp, #20
     d4c:	bc3c      	pop	{r2, r3, r4, r5}
     d4e:	4690      	mov	r8, r2
     d50:	4699      	mov	r9, r3
     d52:	46a2      	mov	sl, r4
     d54:	46ab      	mov	fp, r5
     d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d58:	4653      	mov	r3, sl
     d5a:	7013      	strb	r3, [r2, #0]
     d5c:	f3bf 8f5f 	dmb	sy
     d60:	b662      	cpsie	i
	if (b_databit_9) {
     d62:	4663      	mov	r3, ip
     d64:	2b00      	cmp	r3, #0
     d66:	d1c8      	bne.n	cfa <udi_cdc_multi_putc+0x92>
	return true;
     d68:	2001      	movs	r0, #1
     d6a:	e7ee      	b.n	d4a <udi_cdc_multi_putc+0xe2>
     d6c:	2000010c 	.word	0x2000010c
     d70:	200001b4 	.word	0x200001b4
     d74:	200000e8 	.word	0x200000e8
     d78:	20000238 	.word	0x20000238
     d7c:	20000234 	.word	0x20000234
     d80:	20000240 	.word	0x20000240
     d84:	200001b0 	.word	0x200001b0
     d88:	2000010a 	.word	0x2000010a

00000d8c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     d8c:	b510      	push	{r4, lr}
     d8e:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     d90:	4b01      	ldr	r3, [pc, #4]	; (d98 <udi_cdc_putc+0xc>)
     d92:	2000      	movs	r0, #0
     d94:	4798      	blx	r3
}
     d96:	bd10      	pop	{r4, pc}
     d98:	00000c69 	.word	0x00000c69

00000d9c <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
     d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9e:	464e      	mov	r6, r9
     da0:	46de      	mov	lr, fp
     da2:	4657      	mov	r7, sl
     da4:	4645      	mov	r5, r8
     da6:	b5e0      	push	{r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
     da8:	4b43      	ldr	r3, [pc, #268]	; (eb8 <udi_cdc_multi_write_buf+0x11c>)
{
     daa:	b085      	sub	sp, #20
	if (9 == udi_cdc_line_coding[port].bDataBits) {
     dac:	799b      	ldrb	r3, [r3, #6]
{
     dae:	0016      	movs	r6, r2
	if (9 == udi_cdc_line_coding[port].bDataBits) {
     db0:	2b09      	cmp	r3, #9
     db2:	d100      	bne.n	db6 <udi_cdc_multi_write_buf+0x1a>
     db4:	e07d      	b.n	eb2 <udi_cdc_multi_write_buf+0x116>
     db6:	4b41      	ldr	r3, [pc, #260]	; (ebc <udi_cdc_multi_write_buf+0x120>)
{
     db8:	468b      	mov	fp, r1
     dba:	4699      	mov	r9, r3
     dbc:	4b40      	ldr	r3, [pc, #256]	; (ec0 <udi_cdc_multi_write_buf+0x124>)
     dbe:	4f41      	ldr	r7, [pc, #260]	; (ec4 <udi_cdc_multi_write_buf+0x128>)
     dc0:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     dc2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     dc6:	425a      	negs	r2, r3
     dc8:	4153      	adcs	r3, r2
     dca:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     dcc:	b672      	cpsid	i
     dce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     dd2:	2300      	movs	r3, #0
     dd4:	703b      	strb	r3, [r7, #0]
	buf_sel = udi_cdc_tx_buf_sel[port];
     dd6:	464b      	mov	r3, r9
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     dd8:	4640      	mov	r0, r8
	return flags;
     dda:	9a03      	ldr	r2, [sp, #12]
	buf_sel = udi_cdc_tx_buf_sel[port];
     ddc:	781b      	ldrb	r3, [r3, #0]
     dde:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     de0:	0059      	lsls	r1, r3, #1
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     de2:	5a41      	ldrh	r1, [r0, r1]
     de4:	2940      	cmp	r1, #64	; 0x40
     de6:	d03b      	beq.n	e60 <udi_cdc_multi_write_buf+0xc4>
	if (cpu_irq_is_enabled_flags(flags))
     de8:	2a00      	cmp	r2, #0
     dea:	d004      	beq.n	df6 <udi_cdc_multi_write_buf+0x5a>
		cpu_irq_enable();
     dec:	2301      	movs	r3, #1
     dee:	703b      	strb	r3, [r7, #0]
     df0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     df4:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     df6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     dfa:	425a      	negs	r2, r3
     dfc:	4153      	adcs	r3, r2
     dfe:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
     e00:	b672      	cpsid	i
     e02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     e06:	2300      	movs	r3, #0
     e08:	703b      	strb	r3, [r7, #0]
	return flags;
     e0a:	9b02      	ldr	r3, [sp, #8]
     e0c:	0035      	movs	r5, r6
     e0e:	9301      	str	r3, [sp, #4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     e10:	464b      	mov	r3, r9
     e12:	7818      	ldrb	r0, [r3, #0]
     e14:	b2c0      	uxtb	r0, r0
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     e16:	0043      	lsls	r3, r0, #1
     e18:	469a      	mov	sl, r3
     e1a:	4643      	mov	r3, r8
     e1c:	4652      	mov	r2, sl
     e1e:	5a9c      	ldrh	r4, [r3, r2]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     e20:	2340      	movs	r3, #64	; 0x40
     e22:	1b1b      	subs	r3, r3, r4
     e24:	429e      	cmp	r6, r3
     e26:	d900      	bls.n	e2a <udi_cdc_multi_write_buf+0x8e>
     e28:	001d      	movs	r5, r3
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
     e2a:	4b27      	ldr	r3, [pc, #156]	; (ec8 <udi_cdc_multi_write_buf+0x12c>)
     e2c:	0180      	lsls	r0, r0, #6
     e2e:	469c      	mov	ip, r3
     e30:	1900      	adds	r0, r0, r4
     e32:	002a      	movs	r2, r5
     e34:	4b25      	ldr	r3, [pc, #148]	; (ecc <udi_cdc_multi_write_buf+0x130>)
     e36:	4460      	add	r0, ip
     e38:	4659      	mov	r1, fp
     e3a:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
     e3c:	4643      	mov	r3, r8
     e3e:	4652      	mov	r2, sl
     e40:	1964      	adds	r4, r4, r5
     e42:	529c      	strh	r4, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
     e44:	9b01      	ldr	r3, [sp, #4]
     e46:	2b00      	cmp	r3, #0
     e48:	d12d      	bne.n	ea6 <udi_cdc_multi_write_buf+0x10a>
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
     e4a:	44ab      	add	fp, r5
	size -= copy_nb;
     e4c:	1b76      	subs	r6, r6, r5

	if (size) {
     e4e:	d1b8      	bne.n	dc2 <udi_cdc_multi_write_buf+0x26>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
     e50:	0030      	movs	r0, r6
     e52:	b005      	add	sp, #20
     e54:	bc3c      	pop	{r2, r3, r4, r5}
     e56:	4690      	mov	r8, r2
     e58:	4699      	mov	r9, r3
     e5a:	46a2      	mov	sl, r4
     e5c:	46ab      	mov	fp, r5
     e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((!udi_cdc_tx_trans_ongoing[port])
     e60:	491b      	ldr	r1, [pc, #108]	; (ed0 <udi_cdc_multi_write_buf+0x134>)
     e62:	7809      	ldrb	r1, [r1, #0]
     e64:	2900      	cmp	r1, #0
     e66:	d111      	bne.n	e8c <udi_cdc_multi_write_buf+0xf0>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     e68:	491a      	ldr	r1, [pc, #104]	; (ed4 <udi_cdc_multi_write_buf+0x138>)
     e6a:	7808      	ldrb	r0, [r1, #0]
     e6c:	2800      	cmp	r0, #0
     e6e:	d10d      	bne.n	e8c <udi_cdc_multi_write_buf+0xf0>
			udi_cdc_tx_both_buf_to_send[port] = true;
     e70:	3001      	adds	r0, #1
     e72:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     e74:	4259      	negs	r1, r3
     e76:	414b      	adcs	r3, r1
     e78:	4649      	mov	r1, r9
     e7a:	b2db      	uxtb	r3, r3
     e7c:	700b      	strb	r3, [r1, #0]
     e7e:	2a00      	cmp	r2, #0
     e80:	d0b9      	beq.n	df6 <udi_cdc_multi_write_buf+0x5a>
		cpu_irq_enable();
     e82:	7038      	strb	r0, [r7, #0]
     e84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     e88:	b662      	cpsie	i
     e8a:	e7b4      	b.n	df6 <udi_cdc_multi_write_buf+0x5a>
	if (cpu_irq_is_enabled_flags(flags))
     e8c:	2a00      	cmp	r2, #0
     e8e:	d004      	beq.n	e9a <udi_cdc_multi_write_buf+0xfe>
		cpu_irq_enable();
     e90:	2301      	movs	r3, #1
     e92:	703b      	strb	r3, [r7, #0]
     e94:	f3bf 8f5f 	dmb	sy
     e98:	b662      	cpsie	i
		if (!udi_cdc_data_running) {
     e9a:	4b0f      	ldr	r3, [pc, #60]	; (ed8 <udi_cdc_multi_write_buf+0x13c>)
     e9c:	781b      	ldrb	r3, [r3, #0]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d000      	beq.n	ea4 <udi_cdc_multi_write_buf+0x108>
     ea2:	e78e      	b.n	dc2 <udi_cdc_multi_write_buf+0x26>
     ea4:	e7d4      	b.n	e50 <udi_cdc_multi_write_buf+0xb4>
     ea6:	2301      	movs	r3, #1
     ea8:	703b      	strb	r3, [r7, #0]
     eaa:	f3bf 8f5f 	dmb	sy
     eae:	b662      	cpsie	i
     eb0:	e7cb      	b.n	e4a <udi_cdc_multi_write_buf+0xae>
		size *=2;
     eb2:	0056      	lsls	r6, r2, #1
     eb4:	e77f      	b.n	db6 <udi_cdc_multi_write_buf+0x1a>
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	2000010c 	.word	0x2000010c
     ebc:	20000238 	.word	0x20000238
     ec0:	20000234 	.word	0x20000234
     ec4:	200000e8 	.word	0x200000e8
     ec8:	200001b4 	.word	0x200001b4
     ecc:	00006195 	.word	0x00006195
     ed0:	20000240 	.word	0x20000240
     ed4:	200001b0 	.word	0x200001b0
     ed8:	2000010a 	.word	0x2000010a

00000edc <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
     edc:	b510      	push	{r4, lr}
     ede:	000a      	movs	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
     ee0:	4b02      	ldr	r3, [pc, #8]	; (eec <udi_cdc_write_buf+0x10>)
     ee2:	0001      	movs	r1, r0
     ee4:	2000      	movs	r0, #0
     ee6:	4798      	blx	r3
}
     ee8:	bd10      	pop	{r4, pc}
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	00000d9d 	.word	0x00000d9d

00000ef0 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     ef0:	207f      	movs	r0, #127	; 0x7f
{
     ef2:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     ef4:	4b02      	ldr	r3, [pc, #8]	; (f00 <udc_valid_address+0x10>)
     ef6:	885b      	ldrh	r3, [r3, #2]
     ef8:	4018      	ands	r0, r3
     efa:	4b02      	ldr	r3, [pc, #8]	; (f04 <udc_valid_address+0x14>)
     efc:	4798      	blx	r3
}
     efe:	bd10      	pop	{r4, pc}
     f00:	200005e8 	.word	0x200005e8
     f04:	0000446d 	.word	0x0000446d

00000f08 <udc_update_iface_desc.part.0>:
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
     f08:	b570      	push	{r4, r5, r6, lr}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f0a:	4b14      	ldr	r3, [pc, #80]	; (f5c <udc_update_iface_desc.part.0+0x54>)
     f0c:	681b      	ldr	r3, [r3, #0]
     f0e:	681b      	ldr	r3, [r3, #0]
     f10:	791a      	ldrb	r2, [r3, #4]
     f12:	4282      	cmp	r2, r0
     f14:	d91d      	bls.n	f52 <udc_update_iface_desc.part.0+0x4a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     f16:	4e12      	ldr	r6, [pc, #72]	; (f60 <udc_update_iface_desc.part.0+0x58>)
     f18:	6033      	str	r3, [r6, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     f1a:	78dc      	ldrb	r4, [r3, #3]
     f1c:	789a      	ldrb	r2, [r3, #2]
     f1e:	0224      	lsls	r4, r4, #8
     f20:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     f22:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     f24:	42a3      	cmp	r3, r4
     f26:	d214      	bcs.n	f52 <udc_update_iface_desc.part.0+0x4a>
     f28:	2500      	movs	r5, #0
     f2a:	e004      	b.n	f36 <udc_update_iface_desc.part.0+0x2e>
				udc_ptr_iface->bLength);
     f2c:	781a      	ldrb	r2, [r3, #0]
     f2e:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     f30:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
     f32:	429c      	cmp	r4, r3
     f34:	d90c      	bls.n	f50 <udc_update_iface_desc.part.0+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     f36:	785a      	ldrb	r2, [r3, #1]
     f38:	2a04      	cmp	r2, #4
     f3a:	d1f7      	bne.n	f2c <udc_update_iface_desc.part.0+0x24>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     f3c:	789a      	ldrb	r2, [r3, #2]
     f3e:	4282      	cmp	r2, r0
     f40:	d1f4      	bne.n	f2c <udc_update_iface_desc.part.0+0x24>
     f42:	78da      	ldrb	r2, [r3, #3]
     f44:	428a      	cmp	r2, r1
     f46:	d1f1      	bne.n	f2c <udc_update_iface_desc.part.0+0x24>
     f48:	2d00      	cmp	r5, #0
     f4a:	d104      	bne.n	f56 <udc_update_iface_desc.part.0+0x4e>
				return true; // Interface found
     f4c:	2001      	movs	r0, #1
     f4e:	e001      	b.n	f54 <udc_update_iface_desc.part.0+0x4c>
     f50:	6033      	str	r3, [r6, #0]
		return false;
     f52:	2000      	movs	r0, #0
}
     f54:	bd70      	pop	{r4, r5, r6, pc}
     f56:	6033      	str	r3, [r6, #0]
				return true; // Interface found
     f58:	2001      	movs	r0, #1
     f5a:	e7fb      	b.n	f54 <udc_update_iface_desc.part.0+0x4c>
     f5c:	2000025c 	.word	0x2000025c
     f60:	20000260 	.word	0x20000260

00000f64 <udc_iface_disable.part.1>:
static bool udc_iface_disable(uint8_t iface_num)
     f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f66:	4d27      	ldr	r5, [pc, #156]	; (1004 <udc_iface_disable.part.1+0xa0>)
     f68:	0082      	lsls	r2, r0, #2
     f6a:	682b      	ldr	r3, [r5, #0]
static bool udc_iface_disable(uint8_t iface_num)
     f6c:	0007      	movs	r7, r0
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f6e:	685b      	ldr	r3, [r3, #4]
     f70:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f72:	68f3      	ldr	r3, [r6, #12]
     f74:	4798      	blx	r3
	if (0 == udc_num_configuration) {
     f76:	4b24      	ldr	r3, [pc, #144]	; (1008 <udc_iface_disable.part.1+0xa4>)
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d101      	bne.n	f82 <udc_iface_disable.part.1+0x1e>
		return false;
     f7e:	2000      	movs	r0, #0
}
     f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f82:	682b      	ldr	r3, [r5, #0]
     f84:	681b      	ldr	r3, [r3, #0]
     f86:	791a      	ldrb	r2, [r3, #4]
     f88:	42ba      	cmp	r2, r7
     f8a:	d9f8      	bls.n	f7e <udc_iface_disable.part.1+0x1a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     f8c:	4a1f      	ldr	r2, [pc, #124]	; (100c <udc_iface_disable.part.1+0xa8>)
     f8e:	6013      	str	r3, [r2, #0]
     f90:	4694      	mov	ip, r2
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     f92:	78da      	ldrb	r2, [r3, #3]
     f94:	789c      	ldrb	r4, [r3, #2]
     f96:	0212      	lsls	r2, r2, #8
     f98:	4322      	orrs	r2, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     f9a:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
     f9c:	4293      	cmp	r3, r2
     f9e:	d2ee      	bcs.n	f7e <udc_iface_disable.part.1+0x1a>
     fa0:	001c      	movs	r4, r3
     fa2:	2100      	movs	r1, #0
     fa4:	e004      	b.n	fb0 <udc_iface_disable.part.1+0x4c>
				udc_ptr_iface->bLength);
     fa6:	7823      	ldrb	r3, [r4, #0]
     fa8:	2101      	movs	r1, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     faa:	18e4      	adds	r4, r4, r3
	while (ptr_end_desc >
     fac:	42a2      	cmp	r2, r4
     fae:	d919      	bls.n	fe4 <udc_iface_disable.part.1+0x80>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     fb0:	7863      	ldrb	r3, [r4, #1]
     fb2:	2b04      	cmp	r3, #4
     fb4:	d1f7      	bne.n	fa6 <udc_iface_disable.part.1+0x42>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     fb6:	78a3      	ldrb	r3, [r4, #2]
     fb8:	42bb      	cmp	r3, r7
     fba:	d1f4      	bne.n	fa6 <udc_iface_disable.part.1+0x42>
     fbc:	78e3      	ldrb	r3, [r4, #3]
     fbe:	4283      	cmp	r3, r0
     fc0:	d1f1      	bne.n	fa6 <udc_iface_disable.part.1+0x42>
     fc2:	2900      	cmp	r1, #0
     fc4:	d11b      	bne.n	ffe <udc_iface_disable.part.1+0x9a>
			udd_ep_free(ep_desc->bEndpointAddress);
     fc6:	4f12      	ldr	r7, [pc, #72]	; (1010 <udc_iface_disable.part.1+0xac>)
     fc8:	e004      	b.n	fd4 <udc_iface_disable.part.1+0x70>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     fca:	7863      	ldrb	r3, [r4, #1]
     fcc:	2b04      	cmp	r3, #4
     fce:	d005      	beq.n	fdc <udc_iface_disable.part.1+0x78>
		if (desc_id == desc->bDescriptorType) {
     fd0:	2b05      	cmp	r3, #5
     fd2:	d00a      	beq.n	fea <udc_iface_disable.part.1+0x86>
			desc->bLength);
     fd4:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     fd6:	18e4      	adds	r4, r4, r3
	while (ptr_eof_desc > desc) {
     fd8:	42a2      	cmp	r2, r4
     fda:	d8f6      	bhi.n	fca <udc_iface_disable.part.1+0x66>
	udi_api->disable();
     fdc:	6873      	ldr	r3, [r6, #4]
     fde:	4798      	blx	r3
	return true;
     fe0:	2001      	movs	r0, #1
     fe2:	e7cd      	b.n	f80 <udc_iface_disable.part.1+0x1c>
     fe4:	4663      	mov	r3, ip
     fe6:	601c      	str	r4, [r3, #0]
     fe8:	e7c9      	b.n	f7e <udc_iface_disable.part.1+0x1a>
			udd_ep_free(ep_desc->bEndpointAddress);
     fea:	78a0      	ldrb	r0, [r4, #2]
     fec:	47b8      	blx	r7
     fee:	682b      	ldr	r3, [r5, #0]
     ff0:	681b      	ldr	r3, [r3, #0]
     ff2:	78da      	ldrb	r2, [r3, #3]
     ff4:	7899      	ldrb	r1, [r3, #2]
     ff6:	0212      	lsls	r2, r2, #8
     ff8:	430a      	orrs	r2, r1
     ffa:	189a      	adds	r2, r3, r2
     ffc:	e7ea      	b.n	fd4 <udc_iface_disable.part.1+0x70>
     ffe:	4663      	mov	r3, ip
    1000:	601c      	str	r4, [r3, #0]
    1002:	e7e0      	b.n	fc6 <udc_iface_disable.part.1+0x62>
    1004:	2000025c 	.word	0x2000025c
    1008:	20000258 	.word	0x20000258
    100c:	20000260 	.word	0x20000260
    1010:	00003fa1 	.word	0x00003fa1

00001014 <udc_start>:
{
    1014:	b510      	push	{r4, lr}
	udd_enable();
    1016:	4b01      	ldr	r3, [pc, #4]	; (101c <udc_start+0x8>)
    1018:	4798      	blx	r3
}
    101a:	bd10      	pop	{r4, pc}
    101c:	00004709 	.word	0x00004709

00001020 <udc_reset>:
{
    1020:	b5f0      	push	{r4, r5, r6, r7, lr}
    1022:	46c6      	mov	lr, r8
    1024:	b500      	push	{lr}
	if (udc_num_configuration) {
    1026:	4d25      	ldr	r5, [pc, #148]	; (10bc <udc_reset+0x9c>)
    1028:	782a      	ldrb	r2, [r5, #0]
    102a:	2a00      	cmp	r2, #0
    102c:	d035      	beq.n	109a <udc_reset+0x7a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    102e:	4e24      	ldr	r6, [pc, #144]	; (10c0 <udc_reset+0xa0>)
    1030:	6833      	ldr	r3, [r6, #0]
    1032:	681b      	ldr	r3, [r3, #0]
    1034:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    1036:	2900      	cmp	r1, #0
    1038:	d02f      	beq.n	109a <udc_reset+0x7a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    103a:	4822      	ldr	r0, [pc, #136]	; (10c4 <udc_reset+0xa4>)
		for (iface_num = 0;
    103c:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    103e:	4680      	mov	r8, r0
    1040:	4f21      	ldr	r7, [pc, #132]	; (10c8 <udc_reset+0xa8>)
    1042:	e004      	b.n	104e <udc_reset+0x2e>
				iface_num++) {
    1044:	3401      	adds	r4, #1
    1046:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    1048:	428c      	cmp	r4, r1
    104a:	d226      	bcs.n	109a <udc_reset+0x7a>
    104c:	782a      	ldrb	r2, [r5, #0]
	if (0 == udc_num_configuration) {
    104e:	2a00      	cmp	r2, #0
    1050:	d0f8      	beq.n	1044 <udc_reset+0x24>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1052:	4642      	mov	r2, r8
    1054:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1056:	78d9      	ldrb	r1, [r3, #3]
    1058:	789a      	ldrb	r2, [r3, #2]
    105a:	0209      	lsls	r1, r1, #8
    105c:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    105e:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    1060:	2000      	movs	r0, #0
    1062:	4299      	cmp	r1, r3
    1064:	d805      	bhi.n	1072 <udc_reset+0x52>
    1066:	e022      	b.n	10ae <udc_reset+0x8e>
				udc_ptr_iface->bLength);
    1068:	781a      	ldrb	r2, [r3, #0]
    106a:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    106c:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    106e:	4299      	cmp	r1, r3
    1070:	d91b      	bls.n	10aa <udc_reset+0x8a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1072:	785a      	ldrb	r2, [r3, #1]
    1074:	2a04      	cmp	r2, #4
    1076:	d1f7      	bne.n	1068 <udc_reset+0x48>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1078:	789a      	ldrb	r2, [r3, #2]
    107a:	42a2      	cmp	r2, r4
    107c:	d1f4      	bne.n	1068 <udc_reset+0x48>
    107e:	78da      	ldrb	r2, [r3, #3]
    1080:	2a00      	cmp	r2, #0
    1082:	d1f1      	bne.n	1068 <udc_reset+0x48>
    1084:	2800      	cmp	r0, #0
    1086:	d116      	bne.n	10b6 <udc_reset+0x96>
    1088:	0020      	movs	r0, r4
    108a:	47b8      	blx	r7
    108c:	6833      	ldr	r3, [r6, #0]
				iface_num++) {
    108e:	3401      	adds	r4, #1
    1090:	681b      	ldr	r3, [r3, #0]
    1092:	b2e4      	uxtb	r4, r4
    1094:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    1096:	428c      	cmp	r4, r1
    1098:	d3d8      	bcc.n	104c <udc_reset+0x2c>
	udc_num_configuration = 0;
    109a:	2300      	movs	r3, #0
	udc_device_status =
    109c:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    109e:	702b      	strb	r3, [r5, #0]
	udc_device_status =
    10a0:	4b0a      	ldr	r3, [pc, #40]	; (10cc <udc_reset+0xac>)
    10a2:	801a      	strh	r2, [r3, #0]
}
    10a4:	bc04      	pop	{r2}
    10a6:	4690      	mov	r8, r2
    10a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10aa:	4642      	mov	r2, r8
    10ac:	6013      	str	r3, [r2, #0]
    10ae:	6833      	ldr	r3, [r6, #0]
    10b0:	681b      	ldr	r3, [r3, #0]
    10b2:	7919      	ldrb	r1, [r3, #4]
    10b4:	e7c6      	b.n	1044 <udc_reset+0x24>
    10b6:	4642      	mov	r2, r8
    10b8:	6013      	str	r3, [r2, #0]
    10ba:	e7e5      	b.n	1088 <udc_reset+0x68>
    10bc:	20000258 	.word	0x20000258
    10c0:	2000025c 	.word	0x2000025c
    10c4:	20000260 	.word	0x20000260
    10c8:	00000f65 	.word	0x00000f65
    10cc:	2000024e 	.word	0x2000024e

000010d0 <udc_sof_notify>:
{
    10d0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    10d2:	4b0d      	ldr	r3, [pc, #52]	; (1108 <udc_sof_notify+0x38>)
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d014      	beq.n	1104 <udc_sof_notify+0x34>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10da:	4d0c      	ldr	r5, [pc, #48]	; (110c <udc_sof_notify+0x3c>)
    10dc:	682a      	ldr	r2, [r5, #0]
    10de:	6813      	ldr	r3, [r2, #0]
    10e0:	7919      	ldrb	r1, [r3, #4]
		for (iface_num = 0;
    10e2:	2900      	cmp	r1, #0
    10e4:	d00e      	beq.n	1104 <udc_sof_notify+0x34>
    10e6:	2400      	movs	r4, #0
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    10e8:	6850      	ldr	r0, [r2, #4]
    10ea:	00a3      	lsls	r3, r4, #2
    10ec:	581b      	ldr	r3, [r3, r0]
    10ee:	691b      	ldr	r3, [r3, #16]
    10f0:	2b00      	cmp	r3, #0
    10f2:	d003      	beq.n	10fc <udc_sof_notify+0x2c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    10f4:	4798      	blx	r3
    10f6:	682a      	ldr	r2, [r5, #0]
    10f8:	6813      	ldr	r3, [r2, #0]
    10fa:	7919      	ldrb	r1, [r3, #4]
				iface_num++) {
    10fc:	3401      	adds	r4, #1
    10fe:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    1100:	428c      	cmp	r4, r1
    1102:	d3f1      	bcc.n	10e8 <udc_sof_notify+0x18>
}
    1104:	bd70      	pop	{r4, r5, r6, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	20000258 	.word	0x20000258
    110c:	2000025c 	.word	0x2000025c

00001110 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1110:	b5f0      	push	{r4, r5, r6, r7, lr}
    1112:	46de      	mov	lr, fp
    1114:	4657      	mov	r7, sl
    1116:	464e      	mov	r6, r9
    1118:	4645      	mov	r5, r8
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    111a:	2300      	movs	r3, #0
{
    111c:	b5e0      	push	{r5, r6, r7, lr}
	udd_g_ctrlreq.payload_size = 0;
    111e:	4cba      	ldr	r4, [pc, #744]	; (1408 <udc_process_setup+0x2f8>)
{
    1120:	b083      	sub	sp, #12
	udd_g_ctrlreq.payload_size = 0;
    1122:	81a3      	strh	r3, [r4, #12]
	udd_g_ctrlreq.callback = NULL;
    1124:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1126:	6163      	str	r3, [r4, #20]

	if (Udd_setup_is_in()) {
    1128:	7823      	ldrb	r3, [r4, #0]
    112a:	b25a      	sxtb	r2, r3
    112c:	2a00      	cmp	r2, #0
    112e:	db13      	blt.n	1158 <udc_process_setup+0x48>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1130:	2260      	movs	r2, #96	; 0x60
    1132:	421a      	tst	r2, r3
    1134:	d100      	bne.n	1138 <udc_process_setup+0x28>
    1136:	e071      	b.n	121c <udc_process_setup+0x10c>
    1138:	221f      	movs	r2, #31
    113a:	4013      	ands	r3, r2
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    113c:	2b01      	cmp	r3, #1
    113e:	d100      	bne.n	1142 <udc_process_setup+0x32>
    1140:	e08d      	b.n	125e <udc_process_setup+0x14e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1142:	2b02      	cmp	r3, #2
    1144:	d023      	beq.n	118e <udc_process_setup+0x7e>
			return false; // Error from USB host
    1146:	2500      	movs	r5, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1148:	0028      	movs	r0, r5
    114a:	b003      	add	sp, #12
    114c:	bc3c      	pop	{r2, r3, r4, r5}
    114e:	4690      	mov	r8, r2
    1150:	4699      	mov	r9, r3
    1152:	46a2      	mov	sl, r4
    1154:	46ab      	mov	fp, r5
    1156:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1158:	88e2      	ldrh	r2, [r4, #6]
    115a:	2a00      	cmp	r2, #0
    115c:	d0f3      	beq.n	1146 <udc_process_setup+0x36>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    115e:	2160      	movs	r1, #96	; 0x60
    1160:	4219      	tst	r1, r3
    1162:	d1e9      	bne.n	1138 <udc_process_setup+0x28>
    1164:	211f      	movs	r1, #31
    1166:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1168:	d000      	beq.n	116c <udc_process_setup+0x5c>
    116a:	e0e3      	b.n	1334 <udc_process_setup+0x224>
			switch (udd_g_ctrlreq.req.bRequest) {
    116c:	7863      	ldrb	r3, [r4, #1]
    116e:	2b06      	cmp	r3, #6
    1170:	d100      	bne.n	1174 <udc_process_setup+0x64>
    1172:	e1a9      	b.n	14c8 <udc_process_setup+0x3b8>
    1174:	2b08      	cmp	r3, #8
    1176:	d100      	bne.n	117a <udc_process_setup+0x6a>
    1178:	e19d      	b.n	14b6 <udc_process_setup+0x3a6>
    117a:	2b00      	cmp	r3, #0
    117c:	d1e3      	bne.n	1146 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    117e:	2a02      	cmp	r2, #2
    1180:	d1e1      	bne.n	1146 <udc_process_setup+0x36>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1182:	391d      	subs	r1, #29
    1184:	48a1      	ldr	r0, [pc, #644]	; (140c <udc_process_setup+0x2fc>)
    1186:	4ba2      	ldr	r3, [pc, #648]	; (1410 <udc_process_setup+0x300>)
    1188:	4798      	blx	r3
			return true;
    118a:	2501      	movs	r5, #1
    118c:	e7dc      	b.n	1148 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
    118e:	4fa1      	ldr	r7, [pc, #644]	; (1414 <udc_process_setup+0x304>)
    1190:	783b      	ldrb	r3, [r7, #0]
    1192:	2b00      	cmp	r3, #0
    1194:	d0d7      	beq.n	1146 <udc_process_setup+0x36>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1196:	4ea0      	ldr	r6, [pc, #640]	; (1418 <udc_process_setup+0x308>)
    1198:	6833      	ldr	r3, [r6, #0]
    119a:	681a      	ldr	r2, [r3, #0]
    119c:	7912      	ldrb	r2, [r2, #4]
    119e:	2a00      	cmp	r2, #0
    11a0:	d0d1      	beq.n	1146 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    11a2:	4a9e      	ldr	r2, [pc, #632]	; (141c <udc_process_setup+0x30c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11a4:	2400      	movs	r4, #0
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    11a6:	4690      	mov	r8, r2
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    11a8:	685b      	ldr	r3, [r3, #4]
    11aa:	00a2      	lsls	r2, r4, #2
    11ac:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    11ae:	68eb      	ldr	r3, [r5, #12]
    11b0:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    11b2:	783b      	ldrb	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    11b4:	4684      	mov	ip, r0
	if (0 == udc_num_configuration) {
    11b6:	2b00      	cmp	r3, #0
    11b8:	d0c5      	beq.n	1146 <udc_process_setup+0x36>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    11ba:	6833      	ldr	r3, [r6, #0]
    11bc:	681b      	ldr	r3, [r3, #0]
    11be:	791a      	ldrb	r2, [r3, #4]
    11c0:	42a2      	cmp	r2, r4
    11c2:	d9c0      	bls.n	1146 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    11c4:	4642      	mov	r2, r8
    11c6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    11c8:	78d9      	ldrb	r1, [r3, #3]
    11ca:	789a      	ldrb	r2, [r3, #2]
    11cc:	0209      	lsls	r1, r1, #8
    11ce:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    11d0:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    11d2:	428b      	cmp	r3, r1
    11d4:	d2b7      	bcs.n	1146 <udc_process_setup+0x36>
    11d6:	2000      	movs	r0, #0
    11d8:	e004      	b.n	11e4 <udc_process_setup+0xd4>
				udc_ptr_iface->bLength);
    11da:	781a      	ldrb	r2, [r3, #0]
    11dc:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    11de:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    11e0:	4299      	cmp	r1, r3
    11e2:	d918      	bls.n	1216 <udc_process_setup+0x106>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    11e4:	785a      	ldrb	r2, [r3, #1]
    11e6:	2a04      	cmp	r2, #4
    11e8:	d1f7      	bne.n	11da <udc_process_setup+0xca>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    11ea:	789a      	ldrb	r2, [r3, #2]
    11ec:	42a2      	cmp	r2, r4
    11ee:	d1f4      	bne.n	11da <udc_process_setup+0xca>
    11f0:	78da      	ldrb	r2, [r3, #3]
    11f2:	4562      	cmp	r2, ip
    11f4:	d1f1      	bne.n	11da <udc_process_setup+0xca>
    11f6:	2800      	cmp	r0, #0
    11f8:	d000      	beq.n	11fc <udc_process_setup+0xec>
    11fa:	e2a6      	b.n	174a <udc_process_setup+0x63a>
		if (udi_api->setup()) {
    11fc:	68ab      	ldr	r3, [r5, #8]
    11fe:	4798      	blx	r3
    1200:	2800      	cmp	r0, #0
    1202:	d000      	beq.n	1206 <udc_process_setup+0xf6>
    1204:	e082      	b.n	130c <udc_process_setup+0x1fc>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1206:	6833      	ldr	r3, [r6, #0]
			iface_num++) {
    1208:	3401      	adds	r4, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    120a:	681a      	ldr	r2, [r3, #0]
			iface_num++) {
    120c:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    120e:	7912      	ldrb	r2, [r2, #4]
    1210:	42a2      	cmp	r2, r4
    1212:	d8c9      	bhi.n	11a8 <udc_process_setup+0x98>
    1214:	e797      	b.n	1146 <udc_process_setup+0x36>
    1216:	4642      	mov	r2, r8
    1218:	6013      	str	r3, [r2, #0]
    121a:	e794      	b.n	1146 <udc_process_setup+0x36>
    121c:	251f      	movs	r5, #31
    121e:	402b      	ands	r3, r5
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1220:	d158      	bne.n	12d4 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
    1222:	7863      	ldrb	r3, [r4, #1]
    1224:	2b03      	cmp	r3, #3
    1226:	d100      	bne.n	122a <udc_process_setup+0x11a>
    1228:	e78d      	b.n	1146 <udc_process_setup+0x36>
    122a:	d971      	bls.n	1310 <udc_process_setup+0x200>
    122c:	2b05      	cmp	r3, #5
    122e:	d100      	bne.n	1232 <udc_process_setup+0x122>
    1230:	e0de      	b.n	13f0 <udc_process_setup+0x2e0>
    1232:	2b09      	cmp	r3, #9
    1234:	d000      	beq.n	1238 <udc_process_setup+0x128>
    1236:	e786      	b.n	1146 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength) {
    1238:	88e3      	ldrh	r3, [r4, #6]
    123a:	2b00      	cmp	r3, #0
    123c:	d000      	beq.n	1240 <udc_process_setup+0x130>
    123e:	e782      	b.n	1146 <udc_process_setup+0x36>
	if (!udd_getaddress()) {
    1240:	4b77      	ldr	r3, [pc, #476]	; (1420 <udc_process_setup+0x310>)
    1242:	4798      	blx	r3
    1244:	2800      	cmp	r0, #0
    1246:	d006      	beq.n	1256 <udc_process_setup+0x146>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1248:	4d76      	ldr	r5, [pc, #472]	; (1424 <udc_process_setup+0x314>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    124a:	78a2      	ldrb	r2, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    124c:	682b      	ldr	r3, [r5, #0]
    124e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1250:	429a      	cmp	r2, r3
    1252:	dc00      	bgt.n	1256 <udc_process_setup+0x146>
    1254:	e18f      	b.n	1576 <udc_process_setup+0x466>
    1256:	231f      	movs	r3, #31
    1258:	7822      	ldrb	r2, [r4, #0]
    125a:	4013      	ands	r3, r2
    125c:	e76e      	b.n	113c <udc_process_setup+0x2c>
    125e:	4f6d      	ldr	r7, [pc, #436]	; (1414 <udc_process_setup+0x304>)
    1260:	783b      	ldrb	r3, [r7, #0]
	if (0 == udc_num_configuration) {
    1262:	2b00      	cmp	r3, #0
    1264:	d100      	bne.n	1268 <udc_process_setup+0x158>
    1266:	e76e      	b.n	1146 <udc_process_setup+0x36>
    1268:	4e6b      	ldr	r6, [pc, #428]	; (1418 <udc_process_setup+0x308>)
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    126a:	6833      	ldr	r3, [r6, #0]
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    126c:	7925      	ldrb	r5, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    126e:	469c      	mov	ip, r3
    1270:	681b      	ldr	r3, [r3, #0]
    1272:	791a      	ldrb	r2, [r3, #4]
    1274:	42aa      	cmp	r2, r5
    1276:	d800      	bhi.n	127a <udc_process_setup+0x16a>
    1278:	e765      	b.n	1146 <udc_process_setup+0x36>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    127a:	4a68      	ldr	r2, [pc, #416]	; (141c <udc_process_setup+0x30c>)
    127c:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    127e:	78d9      	ldrb	r1, [r3, #3]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1280:	4690      	mov	r8, r2
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1282:	789a      	ldrb	r2, [r3, #2]
    1284:	0209      	lsls	r1, r1, #8
    1286:	4311      	orrs	r1, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1288:	1859      	adds	r1, r3, r1
	while (ptr_end_desc >
    128a:	428b      	cmp	r3, r1
    128c:	d21e      	bcs.n	12cc <udc_process_setup+0x1bc>
    128e:	2000      	movs	r0, #0
    1290:	e005      	b.n	129e <udc_process_setup+0x18e>
				udc_ptr_iface->bLength);
    1292:	781a      	ldrb	r2, [r3, #0]
    1294:	2001      	movs	r0, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1296:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    1298:	4299      	cmp	r1, r3
    129a:	d800      	bhi.n	129e <udc_process_setup+0x18e>
    129c:	e0b0      	b.n	1400 <udc_process_setup+0x2f0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    129e:	785a      	ldrb	r2, [r3, #1]
    12a0:	2a04      	cmp	r2, #4
    12a2:	d1f6      	bne.n	1292 <udc_process_setup+0x182>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    12a4:	789a      	ldrb	r2, [r3, #2]
    12a6:	42aa      	cmp	r2, r5
    12a8:	d1f3      	bne.n	1292 <udc_process_setup+0x182>
    12aa:	78da      	ldrb	r2, [r3, #3]
    12ac:	2a00      	cmp	r2, #0
    12ae:	d1f0      	bne.n	1292 <udc_process_setup+0x182>
    12b0:	2800      	cmp	r0, #0
    12b2:	d000      	beq.n	12b6 <udc_process_setup+0x1a6>
    12b4:	e23e      	b.n	1734 <udc_process_setup+0x624>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    12b6:	4663      	mov	r3, ip
    12b8:	685b      	ldr	r3, [r3, #4]
    12ba:	00aa      	lsls	r2, r5, #2
    12bc:	58d3      	ldr	r3, [r2, r3]
    12be:	4699      	mov	r9, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    12c0:	68db      	ldr	r3, [r3, #12]
    12c2:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    12c4:	783b      	ldrb	r3, [r7, #0]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d000      	beq.n	12cc <udc_process_setup+0x1bc>
    12ca:	e128      	b.n	151e <udc_process_setup+0x40e>
    12cc:	231f      	movs	r3, #31
    12ce:	7822      	ldrb	r2, [r4, #0]
    12d0:	4013      	ands	r3, r2
    12d2:	e736      	b.n	1142 <udc_process_setup+0x32>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    12d4:	2b01      	cmp	r3, #1
    12d6:	d045      	beq.n	1364 <udc_process_setup+0x254>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    12d8:	2b02      	cmp	r3, #2
    12da:	d000      	beq.n	12de <udc_process_setup+0x1ce>
    12dc:	e733      	b.n	1146 <udc_process_setup+0x36>
			switch (udd_g_ctrlreq.req.bRequest) {
    12de:	7863      	ldrb	r3, [r4, #1]
    12e0:	2b01      	cmp	r3, #1
    12e2:	d100      	bne.n	12e6 <udc_process_setup+0x1d6>
    12e4:	e0b0      	b.n	1448 <udc_process_setup+0x338>
    12e6:	2b03      	cmp	r3, #3
    12e8:	d000      	beq.n	12ec <udc_process_setup+0x1dc>
    12ea:	e750      	b.n	118e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wLength) {
    12ec:	88e3      	ldrh	r3, [r4, #6]
    12ee:	2b00      	cmp	r3, #0
    12f0:	d000      	beq.n	12f4 <udc_process_setup+0x1e4>
    12f2:	e74c      	b.n	118e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    12f4:	8863      	ldrh	r3, [r4, #2]
    12f6:	2b00      	cmp	r3, #0
    12f8:	d000      	beq.n	12fc <udc_process_setup+0x1ec>
    12fa:	e748      	b.n	118e <udc_process_setup+0x7e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    12fc:	7920      	ldrb	r0, [r4, #4]
    12fe:	4b4a      	ldr	r3, [pc, #296]	; (1428 <udc_process_setup+0x318>)
    1300:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1302:	7920      	ldrb	r0, [r4, #4]
    1304:	4b49      	ldr	r3, [pc, #292]	; (142c <udc_process_setup+0x31c>)
    1306:	4798      	blx	r3
		if (udc_reqstd()) {
    1308:	2800      	cmp	r0, #0
    130a:	d0a4      	beq.n	1256 <udc_process_setup+0x146>
			return true;
    130c:	2501      	movs	r5, #1
    130e:	e71b      	b.n	1148 <udc_process_setup+0x38>
			switch (udd_g_ctrlreq.req.bRequest) {
    1310:	2b01      	cmp	r3, #1
    1312:	d000      	beq.n	1316 <udc_process_setup+0x206>
    1314:	e717      	b.n	1146 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wLength) {
    1316:	88e3      	ldrh	r3, [r4, #6]
    1318:	2b00      	cmp	r3, #0
    131a:	d000      	beq.n	131e <udc_process_setup+0x20e>
    131c:	e713      	b.n	1146 <udc_process_setup+0x36>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    131e:	8863      	ldrh	r3, [r4, #2]
    1320:	2b01      	cmp	r3, #1
    1322:	d000      	beq.n	1326 <udc_process_setup+0x216>
    1324:	e70f      	b.n	1146 <udc_process_setup+0x36>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1326:	2102      	movs	r1, #2
    1328:	4a38      	ldr	r2, [pc, #224]	; (140c <udc_process_setup+0x2fc>)
			return true;
    132a:	2501      	movs	r5, #1
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    132c:	8813      	ldrh	r3, [r2, #0]
    132e:	438b      	bics	r3, r1
    1330:	8013      	strh	r3, [r2, #0]
    1332:	e709      	b.n	1148 <udc_process_setup+0x38>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1334:	2b01      	cmp	r3, #1
    1336:	d100      	bne.n	133a <udc_process_setup+0x22a>
    1338:	e092      	b.n	1460 <udc_process_setup+0x350>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    133a:	2b02      	cmp	r3, #2
    133c:	d000      	beq.n	1340 <udc_process_setup+0x230>
    133e:	e702      	b.n	1146 <udc_process_setup+0x36>
			switch (udd_g_ctrlreq.req.bRequest) {
    1340:	7863      	ldrb	r3, [r4, #1]
    1342:	2b00      	cmp	r3, #0
    1344:	d000      	beq.n	1348 <udc_process_setup+0x238>
    1346:	e722      	b.n	118e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1348:	2a02      	cmp	r2, #2
    134a:	d000      	beq.n	134e <udc_process_setup+0x23e>
    134c:	e71f      	b.n	118e <udc_process_setup+0x7e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    134e:	4b38      	ldr	r3, [pc, #224]	; (1430 <udc_process_setup+0x320>)
    1350:	7920      	ldrb	r0, [r4, #4]
    1352:	4798      	blx	r3
    1354:	4b37      	ldr	r3, [pc, #220]	; (1434 <udc_process_setup+0x324>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1356:	2102      	movs	r1, #2
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1358:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    135a:	0018      	movs	r0, r3
    135c:	4b2c      	ldr	r3, [pc, #176]	; (1410 <udc_process_setup+0x300>)
    135e:	4798      	blx	r3
			return true;
    1360:	2501      	movs	r5, #1
    1362:	e6f1      	b.n	1148 <udc_process_setup+0x38>
			switch (udd_g_ctrlreq.req.bRequest) {
    1364:	7863      	ldrb	r3, [r4, #1]
    1366:	2b0b      	cmp	r3, #11
    1368:	d000      	beq.n	136c <udc_process_setup+0x25c>
    136a:	e774      	b.n	1256 <udc_process_setup+0x146>
	if (udd_g_ctrlreq.req.wLength) {
    136c:	88e3      	ldrh	r3, [r4, #6]
    136e:	2b00      	cmp	r3, #0
    1370:	d000      	beq.n	1374 <udc_process_setup+0x264>
    1372:	e774      	b.n	125e <udc_process_setup+0x14e>
	if (!udc_num_configuration) {
    1374:	4b27      	ldr	r3, [pc, #156]	; (1414 <udc_process_setup+0x304>)
    1376:	4699      	mov	r9, r3
    1378:	781b      	ldrb	r3, [r3, #0]
    137a:	2b00      	cmp	r3, #0
    137c:	d100      	bne.n	1380 <udc_process_setup+0x270>
    137e:	e6e2      	b.n	1146 <udc_process_setup+0x36>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1380:	7927      	ldrb	r7, [r4, #4]
    1382:	4b2d      	ldr	r3, [pc, #180]	; (1438 <udc_process_setup+0x328>)
    1384:	2100      	movs	r1, #0
    1386:	0038      	movs	r0, r7
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1388:	8866      	ldrh	r6, [r4, #2]
    138a:	4698      	mov	r8, r3
    138c:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
    138e:	2800      	cmp	r0, #0
    1390:	d100      	bne.n	1394 <udc_process_setup+0x284>
    1392:	e760      	b.n	1256 <udc_process_setup+0x146>
    1394:	0038      	movs	r0, r7
    1396:	4b29      	ldr	r3, [pc, #164]	; (143c <udc_process_setup+0x32c>)
    1398:	4798      	blx	r3
	if (!udc_iface_disable(iface_num)) {
    139a:	2800      	cmp	r0, #0
    139c:	d100      	bne.n	13a0 <udc_process_setup+0x290>
    139e:	e1d1      	b.n	1744 <udc_process_setup+0x634>
	if (0 == udc_num_configuration) {
    13a0:	464b      	mov	r3, r9
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d100      	bne.n	13aa <udc_process_setup+0x29a>
    13a8:	e755      	b.n	1256 <udc_process_setup+0x146>
    13aa:	b2f1      	uxtb	r1, r6
    13ac:	0038      	movs	r0, r7
    13ae:	47c0      	blx	r8
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    13b0:	2800      	cmp	r0, #0
    13b2:	d100      	bne.n	13b6 <udc_process_setup+0x2a6>
    13b4:	e74f      	b.n	1256 <udc_process_setup+0x146>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    13b6:	4b19      	ldr	r3, [pc, #100]	; (141c <udc_process_setup+0x30c>)
    13b8:	4e17      	ldr	r6, [pc, #92]	; (1418 <udc_process_setup+0x308>)
    13ba:	681d      	ldr	r5, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    13bc:	4b20      	ldr	r3, [pc, #128]	; (1440 <udc_process_setup+0x330>)
    13be:	4698      	mov	r8, r3
			udc_ptr_conf->desc +
    13c0:	6830      	ldr	r0, [r6, #0]
    13c2:	6803      	ldr	r3, [r0, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    13c4:	78da      	ldrb	r2, [r3, #3]
    13c6:	7899      	ldrb	r1, [r3, #2]
    13c8:	0212      	lsls	r2, r2, #8
    13ca:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    13cc:	189b      	adds	r3, r3, r2
    13ce:	e005      	b.n	13dc <udc_process_setup+0x2cc>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    13d0:	786a      	ldrb	r2, [r5, #1]
    13d2:	2a04      	cmp	r2, #4
    13d4:	d006      	beq.n	13e4 <udc_process_setup+0x2d4>
		if (desc_id == desc->bDescriptorType) {
    13d6:	2a05      	cmp	r2, #5
    13d8:	d100      	bne.n	13dc <udc_process_setup+0x2cc>
    13da:	e095      	b.n	1508 <udc_process_setup+0x3f8>
			desc->bLength);
    13dc:	782a      	ldrb	r2, [r5, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    13de:	18ad      	adds	r5, r5, r2
	while (ptr_eof_desc > desc) {
    13e0:	42ab      	cmp	r3, r5
    13e2:	d8f5      	bhi.n	13d0 <udc_process_setup+0x2c0>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    13e4:	6843      	ldr	r3, [r0, #4]
    13e6:	00bf      	lsls	r7, r7, #2
    13e8:	58fb      	ldr	r3, [r7, r3]
    13ea:	681b      	ldr	r3, [r3, #0]
    13ec:	4798      	blx	r3
    13ee:	e78b      	b.n	1308 <udc_process_setup+0x1f8>
	if (udd_g_ctrlreq.req.wLength) {
    13f0:	88e3      	ldrh	r3, [r4, #6]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d000      	beq.n	13f8 <udc_process_setup+0x2e8>
    13f6:	e6a6      	b.n	1146 <udc_process_setup+0x36>
	udd_g_ctrlreq.callback = udc_valid_address;
    13f8:	4b12      	ldr	r3, [pc, #72]	; (1444 <udc_process_setup+0x334>)
			return true;
    13fa:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
    13fc:	6123      	str	r3, [r4, #16]
    13fe:	e6a3      	b.n	1148 <udc_process_setup+0x38>
    1400:	4642      	mov	r2, r8
    1402:	6013      	str	r3, [r2, #0]
    1404:	e762      	b.n	12cc <udc_process_setup+0x1bc>
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	200005e8 	.word	0x200005e8
    140c:	2000024e 	.word	0x2000024e
    1410:	00004599 	.word	0x00004599
    1414:	20000258 	.word	0x20000258
    1418:	2000025c 	.word	0x2000025c
    141c:	20000260 	.word	0x20000260
    1420:	0000447d 	.word	0x0000447d
    1424:	20000028 	.word	0x20000028
    1428:	00003df5 	.word	0x00003df5
    142c:	00004175 	.word	0x00004175
    1430:	00004161 	.word	0x00004161
    1434:	20000250 	.word	0x20000250
    1438:	00000f09 	.word	0x00000f09
    143c:	00000f65 	.word	0x00000f65
    1440:	00004055 	.word	0x00004055
    1444:	00000ef1 	.word	0x00000ef1
	if (udd_g_ctrlreq.req.wLength) {
    1448:	88e3      	ldrh	r3, [r4, #6]
    144a:	2b00      	cmp	r3, #0
    144c:	d000      	beq.n	1450 <udc_process_setup+0x340>
    144e:	e69e      	b.n	118e <udc_process_setup+0x7e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1450:	8863      	ldrh	r3, [r4, #2]
    1452:	2b00      	cmp	r3, #0
    1454:	d000      	beq.n	1458 <udc_process_setup+0x348>
    1456:	e69a      	b.n	118e <udc_process_setup+0x7e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1458:	7920      	ldrb	r0, [r4, #4]
    145a:	4bbf      	ldr	r3, [pc, #764]	; (1758 <udc_process_setup+0x648>)
    145c:	4798      	blx	r3
    145e:	e753      	b.n	1308 <udc_process_setup+0x1f8>
			switch (udd_g_ctrlreq.req.bRequest) {
    1460:	7863      	ldrb	r3, [r4, #1]
    1462:	2b0a      	cmp	r3, #10
    1464:	d000      	beq.n	1468 <udc_process_setup+0x358>
    1466:	e6f6      	b.n	1256 <udc_process_setup+0x146>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1468:	2a01      	cmp	r2, #1
    146a:	d000      	beq.n	146e <udc_process_setup+0x35e>
    146c:	e6f7      	b.n	125e <udc_process_setup+0x14e>
	if (!udc_num_configuration) {
    146e:	4fbb      	ldr	r7, [pc, #748]	; (175c <udc_process_setup+0x64c>)
    1470:	783b      	ldrb	r3, [r7, #0]
    1472:	2b00      	cmp	r3, #0
    1474:	d100      	bne.n	1478 <udc_process_setup+0x368>
    1476:	e666      	b.n	1146 <udc_process_setup+0x36>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1478:	7923      	ldrb	r3, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    147a:	4eb9      	ldr	r6, [pc, #740]	; (1760 <udc_process_setup+0x650>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    147c:	4698      	mov	r8, r3
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    147e:	6833      	ldr	r3, [r6, #0]
    1480:	4699      	mov	r9, r3
    1482:	681b      	ldr	r3, [r3, #0]
    1484:	791b      	ldrb	r3, [r3, #4]
    1486:	4543      	cmp	r3, r8
    1488:	d800      	bhi.n	148c <udc_process_setup+0x37c>
    148a:	e6ee      	b.n	126a <udc_process_setup+0x15a>
    148c:	2100      	movs	r1, #0
    148e:	4640      	mov	r0, r8
    1490:	4bb4      	ldr	r3, [pc, #720]	; (1764 <udc_process_setup+0x654>)
    1492:	4798      	blx	r3
    1494:	1e05      	subs	r5, r0, #0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1496:	d100      	bne.n	149a <udc_process_setup+0x38a>
    1498:	e6dd      	b.n	1256 <udc_process_setup+0x146>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    149a:	464b      	mov	r3, r9
    149c:	685a      	ldr	r2, [r3, #4]
    149e:	4643      	mov	r3, r8
    14a0:	009b      	lsls	r3, r3, #2
	udc_iface_setting = udi_api->getsetting();
    14a2:	589b      	ldr	r3, [r3, r2]
    14a4:	68db      	ldr	r3, [r3, #12]
    14a6:	4798      	blx	r3
    14a8:	4baf      	ldr	r3, [pc, #700]	; (1768 <udc_process_setup+0x658>)
	udd_set_setup_payload(&udc_iface_setting,1);
    14aa:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
    14ac:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    14ae:	0018      	movs	r0, r3
    14b0:	4bae      	ldr	r3, [pc, #696]	; (176c <udc_process_setup+0x65c>)
    14b2:	4798      	blx	r3
    14b4:	e648      	b.n	1148 <udc_process_setup+0x38>
	if (udd_g_ctrlreq.req.wLength != 1) {
    14b6:	2a01      	cmp	r2, #1
    14b8:	d000      	beq.n	14bc <udc_process_setup+0x3ac>
    14ba:	e644      	b.n	1146 <udc_process_setup+0x36>
	udd_set_setup_payload(&udc_num_configuration,1);
    14bc:	2101      	movs	r1, #1
    14be:	48a7      	ldr	r0, [pc, #668]	; (175c <udc_process_setup+0x64c>)
    14c0:	4baa      	ldr	r3, [pc, #680]	; (176c <udc_process_setup+0x65c>)
    14c2:	4798      	blx	r3
			return true;
    14c4:	2501      	movs	r5, #1
    14c6:	e63f      	b.n	1148 <udc_process_setup+0x38>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    14c8:	8863      	ldrh	r3, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    14ca:	0a1d      	lsrs	r5, r3, #8
    14cc:	2d02      	cmp	r5, #2
    14ce:	d100      	bne.n	14d2 <udc_process_setup+0x3c2>
    14d0:	e11d      	b.n	170e <udc_process_setup+0x5fe>
    14d2:	d800      	bhi.n	14d6 <udc_process_setup+0x3c6>
    14d4:	e0cb      	b.n	166e <udc_process_setup+0x55e>
    14d6:	2d03      	cmp	r5, #3
    14d8:	d100      	bne.n	14dc <udc_process_setup+0x3cc>
    14da:	e0d4      	b.n	1686 <udc_process_setup+0x576>
    14dc:	2d0f      	cmp	r5, #15
    14de:	d000      	beq.n	14e2 <udc_process_setup+0x3d2>
    14e0:	e631      	b.n	1146 <udc_process_setup+0x36>
		if (udc_config.conf_bos == NULL) {
    14e2:	4ba3      	ldr	r3, [pc, #652]	; (1770 <udc_process_setup+0x660>)
    14e4:	6898      	ldr	r0, [r3, #8]
    14e6:	2800      	cmp	r0, #0
    14e8:	d100      	bne.n	14ec <udc_process_setup+0x3dc>
    14ea:	e62c      	b.n	1146 <udc_process_setup+0x36>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    14ec:	78c1      	ldrb	r1, [r0, #3]
    14ee:	7883      	ldrb	r3, [r0, #2]
    14f0:	0209      	lsls	r1, r1, #8
    14f2:	4319      	orrs	r1, r3
    14f4:	4b9d      	ldr	r3, [pc, #628]	; (176c <udc_process_setup+0x65c>)
    14f6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    14f8:	88e3      	ldrh	r3, [r4, #6]
    14fa:	89a2      	ldrh	r2, [r4, #12]
    14fc:	429a      	cmp	r2, r3
    14fe:	d800      	bhi.n	1502 <udc_process_setup+0x3f2>
    1500:	e704      	b.n	130c <udc_process_setup+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1502:	81a3      	strh	r3, [r4, #12]
			return true;
    1504:	2501      	movs	r5, #1
    1506:	e61f      	b.n	1148 <udc_process_setup+0x38>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1508:	796a      	ldrb	r2, [r5, #5]
    150a:	792b      	ldrb	r3, [r5, #4]
    150c:	0212      	lsls	r2, r2, #8
    150e:	431a      	orrs	r2, r3
    1510:	78e9      	ldrb	r1, [r5, #3]
    1512:	78a8      	ldrb	r0, [r5, #2]
    1514:	47c0      	blx	r8
    1516:	2800      	cmp	r0, #0
    1518:	d000      	beq.n	151c <udc_process_setup+0x40c>
    151a:	e751      	b.n	13c0 <udc_process_setup+0x2b0>
    151c:	e69b      	b.n	1256 <udc_process_setup+0x146>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    151e:	6833      	ldr	r3, [r6, #0]
    1520:	681b      	ldr	r3, [r3, #0]
    1522:	791a      	ldrb	r2, [r3, #4]
    1524:	42aa      	cmp	r2, r5
    1526:	d800      	bhi.n	152a <udc_process_setup+0x41a>
    1528:	e6d0      	b.n	12cc <udc_process_setup+0x1bc>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    152a:	4642      	mov	r2, r8
    152c:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    152e:	78da      	ldrb	r2, [r3, #3]
    1530:	7899      	ldrb	r1, [r3, #2]
    1532:	0212      	lsls	r2, r2, #8
    1534:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1536:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    1538:	4293      	cmp	r3, r2
    153a:	d300      	bcc.n	153e <udc_process_setup+0x42e>
    153c:	e6c6      	b.n	12cc <udc_process_setup+0x1bc>
    153e:	2600      	movs	r6, #0
    1540:	e005      	b.n	154e <udc_process_setup+0x43e>
				udc_ptr_iface->bLength);
    1542:	7819      	ldrb	r1, [r3, #0]
    1544:	2601      	movs	r6, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1546:	185b      	adds	r3, r3, r1
	while (ptr_end_desc >
    1548:	429a      	cmp	r2, r3
    154a:	d800      	bhi.n	154e <udc_process_setup+0x43e>
    154c:	e758      	b.n	1400 <udc_process_setup+0x2f0>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    154e:	7859      	ldrb	r1, [r3, #1]
    1550:	2904      	cmp	r1, #4
    1552:	d1f6      	bne.n	1542 <udc_process_setup+0x432>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1554:	7899      	ldrb	r1, [r3, #2]
    1556:	42a9      	cmp	r1, r5
    1558:	d1f3      	bne.n	1542 <udc_process_setup+0x432>
    155a:	78d9      	ldrb	r1, [r3, #3]
    155c:	4281      	cmp	r1, r0
    155e:	d1f0      	bne.n	1542 <udc_process_setup+0x432>
    1560:	2e00      	cmp	r6, #0
    1562:	d000      	beq.n	1566 <udc_process_setup+0x456>
    1564:	e0f4      	b.n	1750 <udc_process_setup+0x640>
	return udi_api->setup();
    1566:	464b      	mov	r3, r9
    1568:	689b      	ldr	r3, [r3, #8]
    156a:	4798      	blx	r3
		if (udc_req_iface()) {
    156c:	2800      	cmp	r0, #0
    156e:	d100      	bne.n	1572 <udc_process_setup+0x462>
    1570:	e6ac      	b.n	12cc <udc_process_setup+0x1bc>
			return true;
    1572:	2501      	movs	r5, #1
    1574:	e5e8      	b.n	1148 <udc_process_setup+0x38>
	udc_reset();
    1576:	4b7f      	ldr	r3, [pc, #508]	; (1774 <udc_process_setup+0x664>)
    1578:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    157a:	78a3      	ldrb	r3, [r4, #2]
    157c:	4f77      	ldr	r7, [pc, #476]	; (175c <udc_process_setup+0x64c>)
    157e:	703b      	strb	r3, [r7, #0]
	if (udc_num_configuration == 0) {
    1580:	2b00      	cmp	r3, #0
    1582:	d100      	bne.n	1586 <udc_process_setup+0x476>
    1584:	e6c2      	b.n	130c <udc_process_setup+0x1fc>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1586:	4a7c      	ldr	r2, [pc, #496]	; (1778 <udc_process_setup+0x668>)
    1588:	6868      	ldr	r0, [r5, #4]
    158a:	4694      	mov	ip, r2
    158c:	4463      	add	r3, ip
    158e:	00db      	lsls	r3, r3, #3
    1590:	18c0      	adds	r0, r0, r3
    1592:	4e73      	ldr	r6, [pc, #460]	; (1760 <udc_process_setup+0x650>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1594:	6803      	ldr	r3, [r0, #0]
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1596:	6030      	str	r0, [r6, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1598:	791a      	ldrb	r2, [r3, #4]
    159a:	2a00      	cmp	r2, #0
    159c:	d100      	bne.n	15a0 <udc_process_setup+0x490>
    159e:	e6b5      	b.n	130c <udc_process_setup+0x1fc>
    15a0:	2200      	movs	r2, #0
    15a2:	4691      	mov	r9, r2
    15a4:	4a75      	ldr	r2, [pc, #468]	; (177c <udc_process_setup+0x66c>)
    15a6:	4690      	mov	r8, r2
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    15a8:	4a75      	ldr	r2, [pc, #468]	; (1780 <udc_process_setup+0x670>)
    15aa:	4693      	mov	fp, r2
    15ac:	0032      	movs	r2, r6
    15ae:	464e      	mov	r6, r9
    15b0:	46b9      	mov	r9, r7
    15b2:	0017      	movs	r7, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    15b4:	4642      	mov	r2, r8
    15b6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    15b8:	78d9      	ldrb	r1, [r3, #3]
    15ba:	789a      	ldrb	r2, [r3, #2]
    15bc:	020d      	lsls	r5, r1, #8
    15be:	4315      	orrs	r5, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    15c0:	46ac      	mov	ip, r5
    15c2:	449c      	add	ip, r3
	while (ptr_end_desc >
    15c4:	459c      	cmp	ip, r3
    15c6:	d800      	bhi.n	15ca <udc_process_setup+0x4ba>
    15c8:	e645      	b.n	1256 <udc_process_setup+0x146>
    15ca:	2500      	movs	r5, #0
    15cc:	9301      	str	r3, [sp, #4]
    15ce:	9500      	str	r5, [sp, #0]
    15d0:	469a      	mov	sl, r3
    15d2:	001d      	movs	r5, r3
    15d4:	e005      	b.n	15e2 <udc_process_setup+0x4d2>
				udc_ptr_iface->bLength);
    15d6:	782b      	ldrb	r3, [r5, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    15d8:	18ed      	adds	r5, r5, r3
    15da:	2301      	movs	r3, #1
    15dc:	9300      	str	r3, [sp, #0]
	while (ptr_end_desc >
    15de:	45ac      	cmp	ip, r5
    15e0:	d94e      	bls.n	1680 <udc_process_setup+0x570>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    15e2:	786b      	ldrb	r3, [r5, #1]
    15e4:	2b04      	cmp	r3, #4
    15e6:	d1f6      	bne.n	15d6 <udc_process_setup+0x4c6>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    15e8:	78ab      	ldrb	r3, [r5, #2]
    15ea:	42b3      	cmp	r3, r6
    15ec:	d1f3      	bne.n	15d6 <udc_process_setup+0x4c6>
    15ee:	78eb      	ldrb	r3, [r5, #3]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d1f0      	bne.n	15d6 <udc_process_setup+0x4c6>
    15f4:	9501      	str	r5, [sp, #4]
    15f6:	9d00      	ldr	r5, [sp, #0]
    15f8:	4653      	mov	r3, sl
    15fa:	2d00      	cmp	r5, #0
    15fc:	d004      	beq.n	1608 <udc_process_setup+0x4f8>
    15fe:	4642      	mov	r2, r8
    1600:	9901      	ldr	r1, [sp, #4]
    1602:	6011      	str	r1, [r2, #0]
    1604:	789a      	ldrb	r2, [r3, #2]
    1606:	78d9      	ldrb	r1, [r3, #3]
	while (ptr_end_desc >
    1608:	9d01      	ldr	r5, [sp, #4]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    160a:	0209      	lsls	r1, r1, #8
    160c:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    160e:	189a      	adds	r2, r3, r2
    1610:	e004      	b.n	161c <udc_process_setup+0x50c>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1612:	786b      	ldrb	r3, [r5, #1]
    1614:	2b04      	cmp	r3, #4
    1616:	d005      	beq.n	1624 <udc_process_setup+0x514>
		if (desc_id == desc->bDescriptorType) {
    1618:	2b05      	cmp	r3, #5
    161a:	d019      	beq.n	1650 <udc_process_setup+0x540>
			desc->bLength);
    161c:	782b      	ldrb	r3, [r5, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    161e:	18ed      	adds	r5, r5, r3
	while (ptr_eof_desc > desc) {
    1620:	42aa      	cmp	r2, r5
    1622:	d8f6      	bhi.n	1612 <udc_process_setup+0x502>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1624:	6843      	ldr	r3, [r0, #4]
    1626:	00b2      	lsls	r2, r6, #2
    1628:	58d3      	ldr	r3, [r2, r3]
    162a:	681b      	ldr	r3, [r3, #0]
    162c:	4798      	blx	r3
		if (!udc_iface_enable(iface_num, 0)) {
    162e:	2800      	cmp	r0, #0
    1630:	d100      	bne.n	1634 <udc_process_setup+0x524>
    1632:	e610      	b.n	1256 <udc_process_setup+0x146>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1634:	6838      	ldr	r0, [r7, #0]
			iface_num++) {
    1636:	3601      	adds	r6, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1638:	6803      	ldr	r3, [r0, #0]
			iface_num++) {
    163a:	b2f6      	uxtb	r6, r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    163c:	791a      	ldrb	r2, [r3, #4]
    163e:	42b2      	cmp	r2, r6
    1640:	d800      	bhi.n	1644 <udc_process_setup+0x534>
    1642:	e663      	b.n	130c <udc_process_setup+0x1fc>
	if (0 == udc_num_configuration) {
    1644:	464a      	mov	r2, r9
    1646:	7812      	ldrb	r2, [r2, #0]
    1648:	2a00      	cmp	r2, #0
    164a:	d100      	bne.n	164e <udc_process_setup+0x53e>
    164c:	e603      	b.n	1256 <udc_process_setup+0x146>
    164e:	e7b1      	b.n	15b4 <udc_process_setup+0x4a4>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1650:	796a      	ldrb	r2, [r5, #5]
    1652:	792b      	ldrb	r3, [r5, #4]
    1654:	0212      	lsls	r2, r2, #8
    1656:	431a      	orrs	r2, r3
    1658:	78e9      	ldrb	r1, [r5, #3]
    165a:	78a8      	ldrb	r0, [r5, #2]
    165c:	47d8      	blx	fp
    165e:	2800      	cmp	r0, #0
    1660:	d100      	bne.n	1664 <udc_process_setup+0x554>
    1662:	e5f8      	b.n	1256 <udc_process_setup+0x146>
    1664:	6838      	ldr	r0, [r7, #0]
    1666:	6803      	ldr	r3, [r0, #0]
    1668:	789a      	ldrb	r2, [r3, #2]
    166a:	78d9      	ldrb	r1, [r3, #3]
    166c:	e7cd      	b.n	160a <udc_process_setup+0x4fa>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    166e:	2d01      	cmp	r5, #1
    1670:	d000      	beq.n	1674 <udc_process_setup+0x564>
    1672:	e568      	b.n	1146 <udc_process_setup+0x36>
				(uint8_t *) udc_config.confdev_lsfs,
    1674:	4b3e      	ldr	r3, [pc, #248]	; (1770 <udc_process_setup+0x660>)
    1676:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1678:	4b3c      	ldr	r3, [pc, #240]	; (176c <udc_process_setup+0x65c>)
    167a:	7801      	ldrb	r1, [r0, #0]
    167c:	4798      	blx	r3
    167e:	e73b      	b.n	14f8 <udc_process_setup+0x3e8>
    1680:	4643      	mov	r3, r8
    1682:	601d      	str	r5, [r3, #0]
    1684:	e5e7      	b.n	1256 <udc_process_setup+0x146>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1686:	22ff      	movs	r2, #255	; 0xff
    1688:	4013      	ands	r3, r2
    168a:	2b01      	cmp	r3, #1
    168c:	d037      	beq.n	16fe <udc_process_setup+0x5ee>
    168e:	2b00      	cmp	r3, #0
    1690:	d053      	beq.n	173a <udc_process_setup+0x62a>
    1692:	2b02      	cmp	r3, #2
    1694:	d000      	beq.n	1698 <udc_process_setup+0x588>
    1696:	e5de      	b.n	1256 <udc_process_setup+0x146>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1698:	4b3a      	ldr	r3, [pc, #232]	; (1784 <udc_process_setup+0x674>)
    169a:	483b      	ldr	r0, [pc, #236]	; (1788 <udc_process_setup+0x678>)
    169c:	781a      	ldrb	r2, [r3, #0]
    169e:	2120      	movs	r1, #32
    16a0:	8042      	strh	r2, [r0, #2]
    16a2:	2520      	movs	r5, #32
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    16a4:	220f      	movs	r2, #15
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16a6:	785e      	ldrb	r6, [r3, #1]
    16a8:	8086      	strh	r6, [r0, #4]
    16aa:	789e      	ldrb	r6, [r3, #2]
    16ac:	80c6      	strh	r6, [r0, #6]
    16ae:	78de      	ldrb	r6, [r3, #3]
    16b0:	8106      	strh	r6, [r0, #8]
    16b2:	791e      	ldrb	r6, [r3, #4]
    16b4:	8146      	strh	r6, [r0, #10]
    16b6:	795e      	ldrb	r6, [r3, #5]
    16b8:	8186      	strh	r6, [r0, #12]
    16ba:	799e      	ldrb	r6, [r3, #6]
    16bc:	81c6      	strh	r6, [r0, #14]
    16be:	79de      	ldrb	r6, [r3, #7]
    16c0:	8206      	strh	r6, [r0, #16]
    16c2:	7a1e      	ldrb	r6, [r3, #8]
    16c4:	8246      	strh	r6, [r0, #18]
		for(i = 0; i < str_length; i++) {
    16c6:	2a09      	cmp	r2, #9
    16c8:	d015      	beq.n	16f6 <udc_process_setup+0x5e6>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16ca:	7a5e      	ldrb	r6, [r3, #9]
    16cc:	8286      	strh	r6, [r0, #20]
		for(i = 0; i < str_length; i++) {
    16ce:	2a0a      	cmp	r2, #10
    16d0:	d011      	beq.n	16f6 <udc_process_setup+0x5e6>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16d2:	7a9e      	ldrb	r6, [r3, #10]
    16d4:	82c6      	strh	r6, [r0, #22]
		for(i = 0; i < str_length; i++) {
    16d6:	2a0b      	cmp	r2, #11
    16d8:	d00d      	beq.n	16f6 <udc_process_setup+0x5e6>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16da:	7ade      	ldrb	r6, [r3, #11]
    16dc:	8306      	strh	r6, [r0, #24]
		for(i = 0; i < str_length; i++) {
    16de:	2a0c      	cmp	r2, #12
    16e0:	d009      	beq.n	16f6 <udc_process_setup+0x5e6>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16e2:	7b1e      	ldrb	r6, [r3, #12]
    16e4:	8346      	strh	r6, [r0, #26]
		for(i = 0; i < str_length; i++) {
    16e6:	2a0d      	cmp	r2, #13
    16e8:	d005      	beq.n	16f6 <udc_process_setup+0x5e6>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16ea:	7b5e      	ldrb	r6, [r3, #13]
    16ec:	8386      	strh	r6, [r0, #28]
		for(i = 0; i < str_length; i++) {
    16ee:	2a0f      	cmp	r2, #15
    16f0:	d101      	bne.n	16f6 <udc_process_setup+0x5e6>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16f2:	7b9b      	ldrb	r3, [r3, #14]
    16f4:	83c3      	strh	r3, [r0, #30]
		udd_set_setup_payload(
    16f6:	4b1d      	ldr	r3, [pc, #116]	; (176c <udc_process_setup+0x65c>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    16f8:	7005      	strb	r5, [r0, #0]
		udd_set_setup_payload(
    16fa:	4798      	blx	r3
    16fc:	e6fc      	b.n	14f8 <udc_process_setup+0x3e8>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16fe:	4b23      	ldr	r3, [pc, #140]	; (178c <udc_process_setup+0x67c>)
    1700:	4821      	ldr	r0, [pc, #132]	; (1788 <udc_process_setup+0x678>)
    1702:	781a      	ldrb	r2, [r3, #0]
    1704:	2114      	movs	r1, #20
    1706:	8042      	strh	r2, [r0, #2]
    1708:	2514      	movs	r5, #20
    170a:	2209      	movs	r2, #9
    170c:	e7cb      	b.n	16a6 <udc_process_setup+0x596>
			if (conf_num >= udc_config.confdev_lsfs->
    170e:	4a18      	ldr	r2, [pc, #96]	; (1770 <udc_process_setup+0x660>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1710:	b2db      	uxtb	r3, r3
			if (conf_num >= udc_config.confdev_lsfs->
    1712:	6811      	ldr	r1, [r2, #0]
    1714:	7c49      	ldrb	r1, [r1, #17]
    1716:	4299      	cmp	r1, r3
    1718:	d800      	bhi.n	171c <udc_process_setup+0x60c>
    171a:	e514      	b.n	1146 <udc_process_setup+0x36>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    171c:	6852      	ldr	r2, [r2, #4]
    171e:	00db      	lsls	r3, r3, #3
    1720:	5898      	ldr	r0, [r3, r2]
			udd_set_setup_payload(
    1722:	78c1      	ldrb	r1, [r0, #3]
    1724:	7883      	ldrb	r3, [r0, #2]
    1726:	0209      	lsls	r1, r1, #8
    1728:	4319      	orrs	r1, r3
    172a:	4b10      	ldr	r3, [pc, #64]	; (176c <udc_process_setup+0x65c>)
    172c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    172e:	68a3      	ldr	r3, [r4, #8]
    1730:	705d      	strb	r5, [r3, #1]
    1732:	e6e1      	b.n	14f8 <udc_process_setup+0x3e8>
    1734:	4642      	mov	r2, r8
    1736:	6013      	str	r3, [r2, #0]
    1738:	e5bd      	b.n	12b6 <udc_process_setup+0x1a6>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    173a:	2104      	movs	r1, #4
    173c:	4814      	ldr	r0, [pc, #80]	; (1790 <udc_process_setup+0x680>)
    173e:	4b0b      	ldr	r3, [pc, #44]	; (176c <udc_process_setup+0x65c>)
    1740:	4798      	blx	r3
    1742:	e6d9      	b.n	14f8 <udc_process_setup+0x3e8>
    1744:	7823      	ldrb	r3, [r4, #0]
    1746:	402b      	ands	r3, r5
    1748:	e4f8      	b.n	113c <udc_process_setup+0x2c>
    174a:	4642      	mov	r2, r8
    174c:	6013      	str	r3, [r2, #0]
    174e:	e555      	b.n	11fc <udc_process_setup+0xec>
    1750:	4642      	mov	r2, r8
    1752:	6013      	str	r3, [r2, #0]
    1754:	e707      	b.n	1566 <udc_process_setup+0x456>
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	000041e5 	.word	0x000041e5
    175c:	20000258 	.word	0x20000258
    1760:	2000025c 	.word	0x2000025c
    1764:	00000f09 	.word	0x00000f09
    1768:	20000254 	.word	0x20000254
    176c:	00004599 	.word	0x00004599
    1770:	20000028 	.word	0x20000028
    1774:	00001021 	.word	0x00001021
    1778:	1fffffff 	.word	0x1fffffff
    177c:	20000260 	.word	0x20000260
    1780:	00004055 	.word	0x00004055
    1784:	200000d8 	.word	0x200000d8
    1788:	200000a8 	.word	0x200000a8
    178c:	200000cc 	.word	0x200000cc
    1790:	200000c8 	.word	0x200000c8

00001794 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1794:	4b0b      	ldr	r3, [pc, #44]	; (17c4 <cpu_irq_enter_critical+0x30>)
    1796:	681a      	ldr	r2, [r3, #0]
    1798:	2a00      	cmp	r2, #0
    179a:	d105      	bne.n	17a8 <cpu_irq_enter_critical+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    179c:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    17a0:	2900      	cmp	r1, #0
    17a2:	d005      	beq.n	17b0 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    17a4:	4908      	ldr	r1, [pc, #32]	; (17c8 <cpu_irq_enter_critical+0x34>)
    17a6:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17a8:	681a      	ldr	r2, [r3, #0]
    17aa:	3201      	adds	r2, #1
    17ac:	601a      	str	r2, [r3, #0]
}
    17ae:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17b0:	b672      	cpsid	i
    17b2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17b6:	4a05      	ldr	r2, [pc, #20]	; (17cc <cpu_irq_enter_critical+0x38>)
    17b8:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    17ba:	4a03      	ldr	r2, [pc, #12]	; (17c8 <cpu_irq_enter_critical+0x34>)
    17bc:	3101      	adds	r1, #1
    17be:	7011      	strb	r1, [r2, #0]
    17c0:	e7f2      	b.n	17a8 <cpu_irq_enter_critical+0x14>
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	20000264 	.word	0x20000264
    17c8:	20000268 	.word	0x20000268
    17cc:	200000e8 	.word	0x200000e8

000017d0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    17d0:	4b08      	ldr	r3, [pc, #32]	; (17f4 <cpu_irq_leave_critical+0x24>)
    17d2:	681a      	ldr	r2, [r3, #0]
    17d4:	3a01      	subs	r2, #1
    17d6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    17d8:	681b      	ldr	r3, [r3, #0]
    17da:	2b00      	cmp	r3, #0
    17dc:	d109      	bne.n	17f2 <cpu_irq_leave_critical+0x22>
    17de:	4b06      	ldr	r3, [pc, #24]	; (17f8 <cpu_irq_leave_critical+0x28>)
    17e0:	781b      	ldrb	r3, [r3, #0]
    17e2:	2b00      	cmp	r3, #0
    17e4:	d005      	beq.n	17f2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    17e6:	2201      	movs	r2, #1
    17e8:	4b04      	ldr	r3, [pc, #16]	; (17fc <cpu_irq_leave_critical+0x2c>)
    17ea:	701a      	strb	r2, [r3, #0]
    17ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    17f0:	b662      	cpsie	i
	}
}
    17f2:	4770      	bx	lr
    17f4:	20000264 	.word	0x20000264
    17f8:	20000268 	.word	0x20000268
    17fc:	200000e8 	.word	0x200000e8

00001800 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1800:	b5f0      	push	{r4, r5, r6, r7, lr}
	config->input_pull = PORT_PIN_PULL_UP;
    1802:	2501      	movs	r5, #1
	config->powersave  = false;
    1804:	2700      	movs	r7, #0
    1806:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1808:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
    180a:	0021      	movs	r1, r4
    180c:	4e08      	ldr	r6, [pc, #32]	; (1830 <system_board_init+0x30>)
    180e:	203e      	movs	r0, #62	; 0x3e
    1810:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1812:	70a7      	strb	r7, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1814:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1816:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1818:	2280      	movs	r2, #128	; 0x80
    181a:	4b06      	ldr	r3, [pc, #24]	; (1834 <system_board_init+0x34>)
    181c:	05d2      	lsls	r2, r2, #23
    181e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1820:	0021      	movs	r1, r4
    1822:	200f      	movs	r0, #15
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1824:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1826:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1828:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    182a:	b003      	add	sp, #12
    182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	00001f61 	.word	0x00001f61
    1834:	41004480 	.word	0x41004480

00001838 <adc_get_config_defaults>:
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1838:	21c0      	movs	r1, #192	; 0xc0
    183a:	0149      	lsls	r1, r1, #5
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    183c:	2300      	movs	r3, #0
	config->clock_source                  = GCLK_GENERATOR_0;
    183e:	2200      	movs	r2, #0
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1840:	81c1      	strh	r1, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
	config->left_adjust                   = false;
	config->differential_mode             = false;
	config->freerunning                   = false;
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1842:	212a      	movs	r1, #42	; 0x2a
	config->clock_source                  = GCLK_GENERATOR_0;
    1844:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1846:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1848:	8042      	strh	r2, [r0, #2]
	config->window.window_upper_value     = 0;
    184a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    184c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    184e:	6082      	str	r2, [r0, #8]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1850:	7103      	strb	r3, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1852:	7603      	strb	r3, [r0, #24]
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    1854:	7303      	strb	r3, [r0, #12]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1856:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1858:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    185a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    185c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    185e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1860:	5443      	strb	r3, [r0, r1]
	config->run_in_standby                = false;
	config->reference_compensation_enable = false;
	config->correction.correction_enable  = false;
    1862:	3906      	subs	r1, #6
	config->run_in_standby                = false;
    1864:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1866:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1868:	5443      	strb	r3, [r0, r1]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    186a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    186c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
	config->pin_scan.offset_start_scan    = 0;
    186e:	322b      	adds	r2, #43	; 0x2b
	config->sample_length                 = 0;
    1870:	75c3      	strb	r3, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1872:	5483      	strb	r3, [r0, r2]
	config->pin_scan.inputs_to_scan       = 0;
    1874:	3201      	adds	r2, #1
    1876:	5483      	strb	r3, [r0, r2]
}
    1878:	4770      	bx	lr
    187a:	46c0      	nop			; (mov r8, r8)

0000187c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    187c:	b5f0      	push	{r4, r5, r6, r7, lr}
    187e:	464e      	mov	r6, r9
    1880:	4645      	mov	r5, r8
    1882:	46de      	mov	lr, fp
    1884:	4657      	mov	r7, sl
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1886:	2380      	movs	r3, #128	; 0x80
    1888:	b5e0      	push	{r5, r6, r7, lr}
    188a:	4690      	mov	r8, r2
    188c:	4ac9      	ldr	r2, [pc, #804]	; (1bb4 <adc_init+0x338>)
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    188e:	6001      	str	r1, [r0, #0]
{
    1890:	0006      	movs	r6, r0
    1892:	6a10      	ldr	r0, [r2, #32]
    1894:	025b      	lsls	r3, r3, #9
    1896:	4303      	orrs	r3, r0
    1898:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    189a:	780b      	ldrb	r3, [r1, #0]
{
    189c:	b099      	sub	sp, #100	; 0x64
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    189e:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    18a0:	07db      	lsls	r3, r3, #31
    18a2:	d506      	bpl.n	18b2 <adc_init+0x36>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    18a4:	b019      	add	sp, #100	; 0x64
    18a6:	bc3c      	pop	{r2, r3, r4, r5}
    18a8:	4690      	mov	r8, r2
    18aa:	4699      	mov	r9, r3
    18ac:	46a2      	mov	sl, r4
    18ae:	46ab      	mov	fp, r5
    18b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    18b2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    18b4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    18b6:	079b      	lsls	r3, r3, #30
    18b8:	d4f4      	bmi.n	18a4 <adc_init+0x28>
	module_inst->reference = config->reference;
    18ba:	4643      	mov	r3, r8
    18bc:	785b      	ldrb	r3, [r3, #1]
    18be:	7133      	strb	r3, [r6, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    18c0:	2b00      	cmp	r3, #0
    18c2:	d104      	bne.n	18ce <adc_init+0x52>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    18c4:	2104      	movs	r1, #4
    18c6:	4abc      	ldr	r2, [pc, #752]	; (1bb8 <adc_init+0x33c>)
    18c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
    18ca:	430b      	orrs	r3, r1
    18cc:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    18ce:	2300      	movs	r3, #0
	module_inst->remaining_conversions = 0;
    18d0:	8333      	strh	r3, [r6, #24]
		module_inst->callback[i] = NULL;
    18d2:	60b3      	str	r3, [r6, #8]
    18d4:	60f3      	str	r3, [r6, #12]
    18d6:	6133      	str	r3, [r6, #16]
	module_inst->registered_callback_mask = 0;
    18d8:	76b3      	strb	r3, [r6, #26]
	module_inst->enabled_callback_mask = 0;
    18da:	76f3      	strb	r3, [r6, #27]
	module_inst->job_status = STATUS_OK;
    18dc:	7733      	strb	r3, [r6, #28]
	_adc_instances[0] = module_inst;
    18de:	4bb7      	ldr	r3, [pc, #732]	; (1bbc <adc_init+0x340>)
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    18e0:	4642      	mov	r2, r8
	_adc_instances[0] = module_inst;
    18e2:	601e      	str	r6, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    18e4:	232a      	movs	r3, #42	; 0x2a
    18e6:	5cd2      	ldrb	r2, [r2, r3]
		module_inst->software_trigger = false;
    18e8:	2300      	movs	r3, #0
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    18ea:	2a00      	cmp	r2, #0
    18ec:	d103      	bne.n	18f6 <adc_init+0x7a>
    18ee:	4643      	mov	r3, r8
    18f0:	7d1b      	ldrb	r3, [r3, #20]
    18f2:	3201      	adds	r2, #1
    18f4:	4053      	eors	r3, r2
    18f6:	7773      	strb	r3, [r6, #29]
	Adc *const adc_module = module_inst->hw;
    18f8:	6833      	ldr	r3, [r6, #0]
	gclk_chan_conf.source_generator = config->clock_source;
    18fa:	aa02      	add	r2, sp, #8
	Adc *const adc_module = module_inst->hw;
    18fc:	9301      	str	r3, [sp, #4]
	gclk_chan_conf.source_generator = config->clock_source;
    18fe:	4643      	mov	r3, r8
    1900:	781b      	ldrb	r3, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1902:	0011      	movs	r1, r2
	gclk_chan_conf.source_generator = config->clock_source;
    1904:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1906:	201e      	movs	r0, #30
    1908:	4bad      	ldr	r3, [pc, #692]	; (1bc0 <adc_init+0x344>)
    190a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    190c:	4bad      	ldr	r3, [pc, #692]	; (1bc4 <adc_init+0x348>)
    190e:	201e      	movs	r0, #30
    1910:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1912:	232c      	movs	r3, #44	; 0x2c
    1914:	4642      	mov	r2, r8
    1916:	5cd7      	ldrb	r7, [r2, r3]
    1918:	2f00      	cmp	r7, #0
    191a:	d100      	bne.n	191e <adc_init+0xa2>
    191c:	e128      	b.n	1b70 <adc_init+0x2f4>
		uint8_t offset = config->pin_scan.offset_start_scan;
    191e:	3b01      	subs	r3, #1
    1920:	5cd5      	ldrb	r5, [r2, r3]
				offset +(uint8_t)config->positive_input;
    1922:	7b13      	ldrb	r3, [r2, #12]
		uint8_t start_pin =
    1924:	18ea      	adds	r2, r5, r3
    1926:	b2d2      	uxtb	r2, r2
		uint8_t end_pin =
    1928:	18b9      	adds	r1, r7, r2
		while (start_pin < end_pin) {
    192a:	b2c9      	uxtb	r1, r1
    192c:	428a      	cmp	r2, r1
    192e:	d300      	bcc.n	1932 <adc_init+0xb6>
    1930:	e139      	b.n	1ba6 <adc_init+0x32a>
    1932:	197f      	adds	r7, r7, r5
    1934:	b2fa      	uxtb	r2, r7
    1936:	9200      	str	r2, [sp, #0]
    1938:	aa04      	add	r2, sp, #16
    193a:	4691      	mov	r9, r2
    193c:	001c      	movs	r4, r3
    193e:	464b      	mov	r3, r9
    1940:	4aa1      	ldr	r2, [pc, #644]	; (1bc8 <adc_init+0x34c>)
    1942:	46b1      	mov	r9, r6
    1944:	4693      	mov	fp, r2
    1946:	4aa1      	ldr	r2, [pc, #644]	; (1bcc <adc_init+0x350>)
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1948:	af03      	add	r7, sp, #12
    194a:	4692      	mov	sl, r2
    194c:	001e      	movs	r6, r3
    194e:	e001      	b.n	1954 <adc_init+0xd8>
    1950:	4643      	mov	r3, r8
    1952:	7b1c      	ldrb	r4, [r3, #12]
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1954:	230f      	movs	r3, #15
    1956:	402b      	ands	r3, r5
    1958:	191c      	adds	r4, r3, r4
	const uint32_t pinmapping[] = {
    195a:	2250      	movs	r2, #80	; 0x50
    195c:	4659      	mov	r1, fp
    195e:	0030      	movs	r0, r6
    1960:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1962:	2c13      	cmp	r4, #19
    1964:	dc0b      	bgt.n	197e <adc_init+0x102>
    1966:	2300      	movs	r3, #0
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1968:	00a4      	lsls	r4, r4, #2
    196a:	5930      	ldr	r0, [r6, r4]
    196c:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    196e:	70fb      	strb	r3, [r7, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1970:	70bb      	strb	r3, [r7, #2]
		config.mux_position = 1;
    1972:	3301      	adds	r3, #1
    1974:	703b      	strb	r3, [r7, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1976:	b2c0      	uxtb	r0, r0
    1978:	0039      	movs	r1, r7
    197a:	4b95      	ldr	r3, [pc, #596]	; (1bd0 <adc_init+0x354>)
    197c:	4798      	blx	r3
			offset++;
    197e:	3501      	adds	r5, #1
		while (start_pin < end_pin) {
    1980:	9b00      	ldr	r3, [sp, #0]
			offset++;
    1982:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1984:	429d      	cmp	r5, r3
    1986:	d1e3      	bne.n	1950 <adc_init+0xd4>
    1988:	0033      	movs	r3, r6
    198a:	464e      	mov	r6, r9
    198c:	4699      	mov	r9, r3
		_adc_configure_ain_pin(config->negative_input);
    198e:	4643      	mov	r3, r8
    1990:	89dc      	ldrh	r4, [r3, #14]
	const uint32_t pinmapping[] = {
    1992:	2250      	movs	r2, #80	; 0x50
    1994:	4659      	mov	r1, fp
    1996:	4648      	mov	r0, r9
    1998:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    199a:	2c13      	cmp	r4, #19
    199c:	d80c      	bhi.n	19b8 <adc_init+0x13c>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    199e:	464b      	mov	r3, r9
    19a0:	00a4      	lsls	r4, r4, #2
    19a2:	5918      	ldr	r0, [r3, r4]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19a4:	2300      	movs	r3, #0
    19a6:	a903      	add	r1, sp, #12
    19a8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    19aa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    19ac:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    19ae:	3301      	adds	r3, #1
    19b0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    19b2:	b2c0      	uxtb	r0, r0
    19b4:	4b86      	ldr	r3, [pc, #536]	; (1bd0 <adc_init+0x354>)
    19b6:	4798      	blx	r3
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    19b8:	4643      	mov	r3, r8
    19ba:	7d5b      	ldrb	r3, [r3, #21]
    19bc:	9901      	ldr	r1, [sp, #4]
    19be:	009b      	lsls	r3, r3, #2
    19c0:	b2db      	uxtb	r3, r3
    19c2:	700b      	strb	r3, [r1, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    19c4:	4643      	mov	r3, r8
    19c6:	4642      	mov	r2, r8
    19c8:	7d9b      	ldrb	r3, [r3, #22]
    19ca:	7852      	ldrb	r2, [r2, #1]
    19cc:	01db      	lsls	r3, r3, #7
    19ce:	4313      	orrs	r3, r2
    19d0:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    19d2:	704b      	strb	r3, [r1, #1]
	switch (config->resolution) {
    19d4:	4643      	mov	r3, r8
    19d6:	791b      	ldrb	r3, [r3, #4]
    19d8:	2b34      	cmp	r3, #52	; 0x34
    19da:	d807      	bhi.n	19ec <adc_init+0x170>
    19dc:	4a7d      	ldr	r2, [pc, #500]	; (1bd4 <adc_init+0x358>)
    19de:	009b      	lsls	r3, r3, #2
    19e0:	58d3      	ldr	r3, [r2, r3]
    19e2:	469f      	mov	pc, r3
		inputs_to_scan--;
    19e4:	3b01      	subs	r3, #1
    19e6:	b2db      	uxtb	r3, r3
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    19e8:	2b0f      	cmp	r3, #15
    19ea:	d959      	bls.n	1aa0 <adc_init+0x224>
		return STATUS_ERR_INVALID_ARG;
    19ec:	2017      	movs	r0, #23
	return _adc_set_config(module_inst, config);
    19ee:	e759      	b.n	18a4 <adc_init+0x28>
	switch (config->resolution) {
    19f0:	2210      	movs	r2, #16
    19f2:	2324      	movs	r3, #36	; 0x24
		resolution = ADC_RESOLUTION_16BIT;
    19f4:	2110      	movs	r1, #16
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    19f6:	9801      	ldr	r0, [sp, #4]
    19f8:	7083      	strb	r3, [r0, #2]
	if (config->sample_length > 63) {
    19fa:	4643      	mov	r3, r8
    19fc:	7ddb      	ldrb	r3, [r3, #23]
    19fe:	2b3f      	cmp	r3, #63	; 0x3f
    1a00:	d8f4      	bhi.n	19ec <adc_init+0x170>
		adc_module->SAMPCTRL.reg =
    1a02:	70c3      	strb	r3, [r0, #3]
    1a04:	6830      	ldr	r0, [r6, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1a06:	7e43      	ldrb	r3, [r0, #25]
    1a08:	b25b      	sxtb	r3, r3
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	dbfb      	blt.n	1a06 <adc_init+0x18a>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1a0e:	4643      	mov	r3, r8
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1a10:	4640      	mov	r0, r8
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1a12:	7cdb      	ldrb	r3, [r3, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1a14:	8840      	ldrh	r0, [r0, #2]
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1a16:	4644      	mov	r4, r8
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1a18:	4303      	orrs	r3, r0
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1a1a:	2024      	movs	r0, #36	; 0x24
    1a1c:	5c20      	ldrb	r0, [r4, r0]
    1a1e:	00c0      	lsls	r0, r0, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1a20:	4303      	orrs	r3, r0
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1a22:	7d20      	ldrb	r0, [r4, #20]
    1a24:	0080      	lsls	r0, r0, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1a26:	4303      	orrs	r3, r0
    1a28:	7ca0      	ldrb	r0, [r4, #18]
    1a2a:	0040      	lsls	r0, r0, #1
    1a2c:	4303      	orrs	r3, r0
    1a2e:	431a      	orrs	r2, r3
	adc_module->CTRLB.reg =
    1a30:	9b01      	ldr	r3, [sp, #4]
    1a32:	809a      	strh	r2, [r3, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1a34:	7e23      	ldrb	r3, [r4, #24]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d014      	beq.n	1a64 <adc_init+0x1e8>
		switch (resolution) {
    1a3a:	2910      	cmp	r1, #16
    1a3c:	d100      	bne.n	1a40 <adc_init+0x1c4>
    1a3e:	e0ec      	b.n	1c1a <adc_init+0x39e>
    1a40:	d800      	bhi.n	1a44 <adc_init+0x1c8>
    1a42:	e0cf      	b.n	1be4 <adc_init+0x368>
    1a44:	2920      	cmp	r1, #32
    1a46:	d100      	bne.n	1a4a <adc_init+0x1ce>
    1a48:	e0de      	b.n	1c08 <adc_init+0x38c>
    1a4a:	2930      	cmp	r1, #48	; 0x30
    1a4c:	d10a      	bne.n	1a64 <adc_init+0x1e8>
			if (config->differential_mode &&
    1a4e:	7ce2      	ldrb	r2, [r4, #19]
    1a50:	2a00      	cmp	r2, #0
    1a52:	d000      	beq.n	1a56 <adc_init+0x1da>
    1a54:	e0ea      	b.n	1c2c <adc_init+0x3b0>
    1a56:	69e2      	ldr	r2, [r4, #28]
			} else if (config->window.window_lower_value > 255 ||
    1a58:	2aff      	cmp	r2, #255	; 0xff
    1a5a:	dcc7      	bgt.n	19ec <adc_init+0x170>
    1a5c:	4642      	mov	r2, r8
    1a5e:	6a12      	ldr	r2, [r2, #32]
    1a60:	2aff      	cmp	r2, #255	; 0xff
    1a62:	dcc3      	bgt.n	19ec <adc_init+0x170>
    1a64:	6831      	ldr	r1, [r6, #0]
    1a66:	7e4a      	ldrb	r2, [r1, #25]
    1a68:	b252      	sxtb	r2, r2
    1a6a:	2a00      	cmp	r2, #0
    1a6c:	dbfb      	blt.n	1a66 <adc_init+0x1ea>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1a6e:	9a01      	ldr	r2, [sp, #4]
    1a70:	7213      	strb	r3, [r2, #8]
    1a72:	6832      	ldr	r2, [r6, #0]
    1a74:	7e53      	ldrb	r3, [r2, #25]
    1a76:	b25b      	sxtb	r3, r3
    1a78:	2b00      	cmp	r3, #0
    1a7a:	dbfb      	blt.n	1a74 <adc_init+0x1f8>
	adc_module->WINLT.reg =
    1a7c:	4643      	mov	r3, r8
    1a7e:	9a01      	ldr	r2, [sp, #4]
    1a80:	8b9b      	ldrh	r3, [r3, #28]
    1a82:	8393      	strh	r3, [r2, #28]
    1a84:	6832      	ldr	r2, [r6, #0]
    1a86:	7e53      	ldrb	r3, [r2, #25]
    1a88:	b25b      	sxtb	r3, r3
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	dbfb      	blt.n	1a86 <adc_init+0x20a>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1a8e:	4643      	mov	r3, r8
    1a90:	9a01      	ldr	r2, [sp, #4]
    1a92:	8c1b      	ldrh	r3, [r3, #32]
    1a94:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1a96:	232c      	movs	r3, #44	; 0x2c
    1a98:	4642      	mov	r2, r8
    1a9a:	5cd3      	ldrb	r3, [r2, r3]
	if (inputs_to_scan > 0) {
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d1a1      	bne.n	19e4 <adc_init+0x168>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1aa0:	222b      	movs	r2, #43	; 0x2b
    1aa2:	4641      	mov	r1, r8
    1aa4:	5c89      	ldrb	r1, [r1, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1aa6:	290f      	cmp	r1, #15
    1aa8:	d8a0      	bhi.n	19ec <adc_init+0x170>
	Adc *const adc_module = module_inst->hw;
    1aaa:	6830      	ldr	r0, [r6, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1aac:	7e42      	ldrb	r2, [r0, #25]
    1aae:	b252      	sxtb	r2, r2
    1ab0:	2a00      	cmp	r2, #0
    1ab2:	dbfb      	blt.n	1aac <adc_init+0x230>
			config->negative_input |
    1ab4:	4642      	mov	r2, r8
			config->positive_input;
    1ab6:	4640      	mov	r0, r8
			config->negative_input |
    1ab8:	89d2      	ldrh	r2, [r2, #14]
			config->positive_input;
    1aba:	7b00      	ldrb	r0, [r0, #12]
			(config->pin_scan.offset_start_scan <<
    1abc:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1abe:	4302      	orrs	r2, r0
    1ac0:	4640      	mov	r0, r8
    1ac2:	6880      	ldr	r0, [r0, #8]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1ac4:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1ac6:	4302      	orrs	r2, r0
    1ac8:	430a      	orrs	r2, r1
    1aca:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1acc:	9a01      	ldr	r2, [sp, #4]
	adc_module->EVCTRL.reg = config->event_action;
    1ace:	4641      	mov	r1, r8
	adc_module->INPUTCTRL.reg =
    1ad0:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1ad2:	232a      	movs	r3, #42	; 0x2a
    1ad4:	5ccb      	ldrb	r3, [r1, r3]
    1ad6:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1ad8:	230f      	movs	r3, #15
    1ada:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1adc:	3315      	adds	r3, #21
    1ade:	5ccb      	ldrb	r3, [r1, r3]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d011      	beq.n	1b08 <adc_init+0x28c>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1ae4:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
    1ae6:	493c      	ldr	r1, [pc, #240]	; (1bd8 <adc_init+0x35c>)
    1ae8:	428b      	cmp	r3, r1
    1aea:	d900      	bls.n	1aee <adc_init+0x272>
    1aec:	e77e      	b.n	19ec <adc_init+0x170>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1aee:	9a01      	ldr	r2, [sp, #4]
    1af0:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1af2:	4643      	mov	r3, r8
    1af4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1af6:	2380      	movs	r3, #128	; 0x80
    1af8:	011b      	lsls	r3, r3, #4
    1afa:	18d3      	adds	r3, r2, r3
    1afc:	b29b      	uxth	r3, r3
    1afe:	428b      	cmp	r3, r1
    1b00:	d900      	bls.n	1b04 <adc_init+0x288>
    1b02:	e773      	b.n	19ec <adc_init+0x170>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1b04:	9b01      	ldr	r3, [sp, #4]
    1b06:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1b08:	22e0      	movs	r2, #224	; 0xe0
    1b0a:	4b34      	ldr	r3, [pc, #208]	; (1bdc <adc_init+0x360>)
    1b0c:	00d2      	lsls	r2, r2, #3
    1b0e:	6819      	ldr	r1, [r3, #0]
	return STATUS_OK;
    1b10:	2000      	movs	r0, #0
			ADC_CALIB_BIAS_CAL(
    1b12:	014b      	lsls	r3, r1, #5
			ADC_CALIB_LINEARITY_CAL(
    1b14:	0019      	movs	r1, r3
			ADC_CALIB_BIAS_CAL(
    1b16:	401a      	ands	r2, r3
			ADC_CALIB_LINEARITY_CAL(
    1b18:	4b31      	ldr	r3, [pc, #196]	; (1be0 <adc_init+0x364>)
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	0edb      	lsrs	r3, r3, #27
    1b1e:	430b      	orrs	r3, r1
    1b20:	b2db      	uxtb	r3, r3
			) |
    1b22:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1b24:	9a01      	ldr	r2, [sp, #4]
    1b26:	8513      	strh	r3, [r2, #40]	; 0x28
    1b28:	e6bc      	b.n	18a4 <adc_init+0x28>
	switch (config->resolution) {
    1b2a:	2210      	movs	r2, #16
    1b2c:	2312      	movs	r3, #18
		resolution = ADC_RESOLUTION_16BIT;
    1b2e:	2110      	movs	r1, #16
    1b30:	e761      	b.n	19f6 <adc_init+0x17a>
    1b32:	2230      	movs	r2, #48	; 0x30
    1b34:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1b36:	2130      	movs	r1, #48	; 0x30
    1b38:	e75d      	b.n	19f6 <adc_init+0x17a>
    1b3a:	2220      	movs	r2, #32
    1b3c:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1b3e:	2120      	movs	r1, #32
    1b40:	e759      	b.n	19f6 <adc_init+0x17a>
    1b42:	2210      	movs	r2, #16
    1b44:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1b46:	2110      	movs	r1, #16
    1b48:	e755      	b.n	19f6 <adc_init+0x17a>
    1b4a:	2200      	movs	r2, #0
    1b4c:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1b4e:	2100      	movs	r1, #0
    1b50:	e751      	b.n	19f6 <adc_init+0x17a>
    1b52:	4643      	mov	r3, r8
    1b54:	7c5a      	ldrb	r2, [r3, #17]
    1b56:	2370      	movs	r3, #112	; 0x70
    1b58:	0112      	lsls	r2, r2, #4
    1b5a:	4013      	ands	r3, r2
    1b5c:	4642      	mov	r2, r8
    1b5e:	7c12      	ldrb	r2, [r2, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1b60:	2110      	movs	r1, #16
    1b62:	4313      	orrs	r3, r2
		accumulate = config->accumulate_samples;
    1b64:	2210      	movs	r2, #16
    1b66:	e746      	b.n	19f6 <adc_init+0x17a>
    1b68:	2210      	movs	r2, #16
    1b6a:	2316      	movs	r3, #22
		resolution = ADC_RESOLUTION_16BIT;
    1b6c:	2110      	movs	r1, #16
    1b6e:	e742      	b.n	19f6 <adc_init+0x17a>
	const uint32_t pinmapping[] = {
    1b70:	ab04      	add	r3, sp, #16
    1b72:	4699      	mov	r9, r3
    1b74:	4b14      	ldr	r3, [pc, #80]	; (1bc8 <adc_init+0x34c>)
		_adc_configure_ain_pin(config->positive_input);
    1b76:	7b14      	ldrb	r4, [r2, #12]
	const uint32_t pinmapping[] = {
    1b78:	469b      	mov	fp, r3
    1b7a:	0019      	movs	r1, r3
    1b7c:	4b13      	ldr	r3, [pc, #76]	; (1bcc <adc_init+0x350>)
    1b7e:	2250      	movs	r2, #80	; 0x50
    1b80:	4648      	mov	r0, r9
    1b82:	469a      	mov	sl, r3
    1b84:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1b86:	2c13      	cmp	r4, #19
    1b88:	d900      	bls.n	1b8c <adc_init+0x310>
    1b8a:	e700      	b.n	198e <adc_init+0x112>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1b8c:	464b      	mov	r3, r9
    1b8e:	00a4      	lsls	r4, r4, #2
    1b90:	5918      	ldr	r0, [r3, r4]
		config.mux_position = 1;
    1b92:	2301      	movs	r3, #1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b94:	a903      	add	r1, sp, #12
    1b96:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1b98:	b2c0      	uxtb	r0, r0
    1b9a:	4b0d      	ldr	r3, [pc, #52]	; (1bd0 <adc_init+0x354>)
    1b9c:	704f      	strb	r7, [r1, #1]
	config->powersave    = false;
    1b9e:	70cf      	strb	r7, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ba0:	708f      	strb	r7, [r1, #2]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1ba2:	4798      	blx	r3
    1ba4:	e6f3      	b.n	198e <adc_init+0x112>
    1ba6:	ab04      	add	r3, sp, #16
    1ba8:	4699      	mov	r9, r3
    1baa:	4b07      	ldr	r3, [pc, #28]	; (1bc8 <adc_init+0x34c>)
    1bac:	469b      	mov	fp, r3
    1bae:	4b07      	ldr	r3, [pc, #28]	; (1bcc <adc_init+0x350>)
    1bb0:	469a      	mov	sl, r3
    1bb2:	e6ec      	b.n	198e <adc_init+0x112>
    1bb4:	40000400 	.word	0x40000400
    1bb8:	40000800 	.word	0x40000800
    1bbc:	2000034c 	.word	0x2000034c
    1bc0:	00002df1 	.word	0x00002df1
    1bc4:	00002e55 	.word	0x00002e55
    1bc8:	0000628c 	.word	0x0000628c
    1bcc:	00006195 	.word	0x00006195
    1bd0:	00002f65 	.word	0x00002f65
    1bd4:	000061b8 	.word	0x000061b8
    1bd8:	00000fff 	.word	0x00000fff
    1bdc:	00806024 	.word	0x00806024
    1be0:	00806020 	.word	0x00806020
		switch (resolution) {
    1be4:	2900      	cmp	r1, #0
    1be6:	d000      	beq.n	1bea <adc_init+0x36e>
    1be8:	e73c      	b.n	1a64 <adc_init+0x1e8>
			if (config->differential_mode &&
    1bea:	7ce2      	ldrb	r2, [r4, #19]
    1bec:	2a00      	cmp	r2, #0
    1bee:	d13b      	bne.n	1c68 <adc_init+0x3ec>
    1bf0:	69e2      	ldr	r2, [r4, #28]
			} else if (config->window.window_lower_value > 4095 ||
    1bf2:	492e      	ldr	r1, [pc, #184]	; (1cac <adc_init+0x430>)
    1bf4:	428a      	cmp	r2, r1
    1bf6:	dd00      	ble.n	1bfa <adc_init+0x37e>
    1bf8:	e6f8      	b.n	19ec <adc_init+0x170>
			} else if (config->window.window_lower_value > 65535 ||
    1bfa:	4642      	mov	r2, r8
    1bfc:	6a12      	ldr	r2, [r2, #32]
    1bfe:	428a      	cmp	r2, r1
    1c00:	dc00      	bgt.n	1c04 <adc_init+0x388>
    1c02:	e72f      	b.n	1a64 <adc_init+0x1e8>
		return STATUS_ERR_INVALID_ARG;
    1c04:	2017      	movs	r0, #23
    1c06:	e64d      	b.n	18a4 <adc_init+0x28>
			if (config->differential_mode &&
    1c08:	7ce2      	ldrb	r2, [r4, #19]
    1c0a:	2a00      	cmp	r2, #0
    1c0c:	d11b      	bne.n	1c46 <adc_init+0x3ca>
    1c0e:	69e2      	ldr	r2, [r4, #28]
			} else if (config->window.window_lower_value > 1023 ||
    1c10:	4927      	ldr	r1, [pc, #156]	; (1cb0 <adc_init+0x434>)
    1c12:	428a      	cmp	r2, r1
    1c14:	ddf1      	ble.n	1bfa <adc_init+0x37e>
		return STATUS_ERR_INVALID_ARG;
    1c16:	2017      	movs	r0, #23
    1c18:	e644      	b.n	18a4 <adc_init+0x28>
			if (config->differential_mode &&
    1c1a:	7ce2      	ldrb	r2, [r4, #19]
    1c1c:	2a00      	cmp	r2, #0
    1c1e:	d134      	bne.n	1c8a <adc_init+0x40e>
    1c20:	69e2      	ldr	r2, [r4, #28]
			} else if (config->window.window_lower_value > 65535 ||
    1c22:	4924      	ldr	r1, [pc, #144]	; (1cb4 <adc_init+0x438>)
    1c24:	428a      	cmp	r2, r1
    1c26:	dde8      	ble.n	1bfa <adc_init+0x37e>
		return STATUS_ERR_INVALID_ARG;
    1c28:	2017      	movs	r0, #23
    1c2a:	e63b      	b.n	18a4 <adc_init+0x28>
					(config->window.window_lower_value > 127 ||
    1c2c:	69e2      	ldr	r2, [r4, #28]
    1c2e:	0011      	movs	r1, r2
    1c30:	3180      	adds	r1, #128	; 0x80
			if (config->differential_mode &&
    1c32:	29ff      	cmp	r1, #255	; 0xff
    1c34:	d900      	bls.n	1c38 <adc_init+0x3bc>
    1c36:	e6d9      	b.n	19ec <adc_init+0x170>
					config->window.window_lower_value < -128 ||
    1c38:	6a21      	ldr	r1, [r4, #32]
    1c3a:	3180      	adds	r1, #128	; 0x80
    1c3c:	29ff      	cmp	r1, #255	; 0xff
    1c3e:	d800      	bhi.n	1c42 <adc_init+0x3c6>
    1c40:	e70a      	b.n	1a58 <adc_init+0x1dc>
		return STATUS_ERR_INVALID_ARG;
    1c42:	2017      	movs	r0, #23
    1c44:	e62e      	b.n	18a4 <adc_init+0x28>
					(config->window.window_lower_value > 511 ||
    1c46:	2180      	movs	r1, #128	; 0x80
    1c48:	69e2      	ldr	r2, [r4, #28]
    1c4a:	0089      	lsls	r1, r1, #2
			if (config->differential_mode &&
    1c4c:	4818      	ldr	r0, [pc, #96]	; (1cb0 <adc_init+0x434>)
					(config->window.window_lower_value > 511 ||
    1c4e:	1851      	adds	r1, r2, r1
			if (config->differential_mode &&
    1c50:	4281      	cmp	r1, r0
    1c52:	d900      	bls.n	1c56 <adc_init+0x3da>
    1c54:	e6ca      	b.n	19ec <adc_init+0x170>
					config->window.window_lower_value < -512 ||
    1c56:	6a21      	ldr	r1, [r4, #32]
    1c58:	2480      	movs	r4, #128	; 0x80
    1c5a:	00a4      	lsls	r4, r4, #2
    1c5c:	46a4      	mov	ip, r4
    1c5e:	4461      	add	r1, ip
    1c60:	4281      	cmp	r1, r0
    1c62:	d9d5      	bls.n	1c10 <adc_init+0x394>
		return STATUS_ERR_INVALID_ARG;
    1c64:	2017      	movs	r0, #23
    1c66:	e61d      	b.n	18a4 <adc_init+0x28>
					(config->window.window_lower_value > 2047 ||
    1c68:	2180      	movs	r1, #128	; 0x80
    1c6a:	69e2      	ldr	r2, [r4, #28]
    1c6c:	0109      	lsls	r1, r1, #4
			if (config->differential_mode &&
    1c6e:	480f      	ldr	r0, [pc, #60]	; (1cac <adc_init+0x430>)
					(config->window.window_lower_value > 2047 ||
    1c70:	1851      	adds	r1, r2, r1
			if (config->differential_mode &&
    1c72:	4281      	cmp	r1, r0
    1c74:	d900      	bls.n	1c78 <adc_init+0x3fc>
    1c76:	e6b9      	b.n	19ec <adc_init+0x170>
					config->window.window_lower_value < -2048 ||
    1c78:	6a21      	ldr	r1, [r4, #32]
    1c7a:	2480      	movs	r4, #128	; 0x80
    1c7c:	0124      	lsls	r4, r4, #4
    1c7e:	46a4      	mov	ip, r4
    1c80:	4461      	add	r1, ip
    1c82:	4281      	cmp	r1, r0
    1c84:	d9b5      	bls.n	1bf2 <adc_init+0x376>
		return STATUS_ERR_INVALID_ARG;
    1c86:	2017      	movs	r0, #23
    1c88:	e60c      	b.n	18a4 <adc_init+0x28>
					(config->window.window_lower_value > 32767 ||
    1c8a:	2180      	movs	r1, #128	; 0x80
    1c8c:	69e2      	ldr	r2, [r4, #28]
    1c8e:	0209      	lsls	r1, r1, #8
			if (config->differential_mode &&
    1c90:	4808      	ldr	r0, [pc, #32]	; (1cb4 <adc_init+0x438>)
					(config->window.window_lower_value > 32767 ||
    1c92:	1851      	adds	r1, r2, r1
			if (config->differential_mode &&
    1c94:	4281      	cmp	r1, r0
    1c96:	d900      	bls.n	1c9a <adc_init+0x41e>
    1c98:	e6a8      	b.n	19ec <adc_init+0x170>
					config->window.window_lower_value < -32768 ||
    1c9a:	6a21      	ldr	r1, [r4, #32]
    1c9c:	2480      	movs	r4, #128	; 0x80
    1c9e:	0224      	lsls	r4, r4, #8
    1ca0:	46a4      	mov	ip, r4
    1ca2:	4461      	add	r1, ip
    1ca4:	4281      	cmp	r1, r0
    1ca6:	d9bc      	bls.n	1c22 <adc_init+0x3a6>
		return STATUS_ERR_INVALID_ARG;
    1ca8:	2017      	movs	r0, #23
    1caa:	e5fb      	b.n	18a4 <adc_init+0x28>
    1cac:	00000fff 	.word	0x00000fff
    1cb0:	000003ff 	.word	0x000003ff
    1cb4:	0000ffff 	.word	0x0000ffff

00001cb8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1cb8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1cba:	4b24      	ldr	r3, [pc, #144]	; (1d4c <ADC_Handler+0x94>)
    1cbc:	681c      	ldr	r4, [r3, #0]
	if (flags & ADC_INTFLAG_RESRDY) {
    1cbe:	2301      	movs	r3, #1
	uint32_t flags = module->hw->INTFLAG.reg;
    1cc0:	6822      	ldr	r2, [r4, #0]
    1cc2:	7e15      	ldrb	r5, [r2, #24]
    1cc4:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    1cc6:	422b      	tst	r3, r5
    1cc8:	d002      	beq.n	1cd0 <ADC_Handler+0x18>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1cca:	7ee1      	ldrb	r1, [r4, #27]
    1ccc:	420b      	tst	r3, r1
    1cce:	d11c      	bne.n	1d0a <ADC_Handler+0x52>
	if (flags & ADC_INTFLAG_WINMON) {
    1cd0:	2304      	movs	r3, #4
    1cd2:	422b      	tst	r3, r5
    1cd4:	d005      	beq.n	1ce2 <ADC_Handler+0x2a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1cd6:	6822      	ldr	r2, [r4, #0]
    1cd8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1cda:	7ee2      	ldrb	r2, [r4, #27]
    1cdc:	3b02      	subs	r3, #2
    1cde:	4213      	tst	r3, r2
    1ce0:	d10c      	bne.n	1cfc <ADC_Handler+0x44>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1ce2:	2302      	movs	r3, #2
    1ce4:	422b      	tst	r3, r5
    1ce6:	d008      	beq.n	1cfa <ADC_Handler+0x42>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1ce8:	6822      	ldr	r2, [r4, #0]
    1cea:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1cec:	7ee2      	ldrb	r2, [r4, #27]
    1cee:	3302      	adds	r3, #2
    1cf0:	4213      	tst	r3, r2
    1cf2:	d002      	beq.n	1cfa <ADC_Handler+0x42>
    1cf4:	7ea2      	ldrb	r2, [r4, #26]
    1cf6:	4213      	tst	r3, r2
    1cf8:	d124      	bne.n	1d44 <ADC_Handler+0x8c>
	_adc_interrupt_handler(0);
}
    1cfa:	bd70      	pop	{r4, r5, r6, pc}
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1cfc:	7ea2      	ldrb	r2, [r4, #26]
    1cfe:	4213      	tst	r3, r2
    1d00:	d0ef      	beq.n	1ce2 <ADC_Handler+0x2a>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1d02:	0020      	movs	r0, r4
    1d04:	68e3      	ldr	r3, [r4, #12]
    1d06:	4798      	blx	r3
    1d08:	e7eb      	b.n	1ce2 <ADC_Handler+0x2a>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1d0a:	7ea1      	ldrb	r1, [r4, #26]
    1d0c:	420b      	tst	r3, r1
    1d0e:	d0df      	beq.n	1cd0 <ADC_Handler+0x18>
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1d10:	7613      	strb	r3, [r2, #24]
    1d12:	6822      	ldr	r2, [r4, #0]
    1d14:	7e53      	ldrb	r3, [r2, #25]
    1d16:	b25b      	sxtb	r3, r3
    1d18:	2b00      	cmp	r3, #0
    1d1a:	dbfb      	blt.n	1d14 <ADC_Handler+0x5c>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1d1c:	6961      	ldr	r1, [r4, #20]
    1d1e:	1c8b      	adds	r3, r1, #2
    1d20:	6163      	str	r3, [r4, #20]
    1d22:	8b53      	ldrh	r3, [r2, #26]
    1d24:	b29b      	uxth	r3, r3
    1d26:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    1d28:	8b23      	ldrh	r3, [r4, #24]
    1d2a:	3b01      	subs	r3, #1
    1d2c:	b29b      	uxth	r3, r3
    1d2e:	8323      	strh	r3, [r4, #24]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d1cd      	bne.n	1cd0 <ADC_Handler+0x18>
				if (module->job_status == STATUS_BUSY) {
    1d34:	7f22      	ldrb	r2, [r4, #28]
    1d36:	2a05      	cmp	r2, #5
    1d38:	d1ca      	bne.n	1cd0 <ADC_Handler+0x18>
					module->job_status = STATUS_OK;
    1d3a:	7723      	strb	r3, [r4, #28]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1d3c:	0020      	movs	r0, r4
    1d3e:	68a3      	ldr	r3, [r4, #8]
    1d40:	4798      	blx	r3
    1d42:	e7c5      	b.n	1cd0 <ADC_Handler+0x18>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1d44:	6923      	ldr	r3, [r4, #16]
    1d46:	0020      	movs	r0, r4
    1d48:	4798      	blx	r3
}
    1d4a:	e7d6      	b.n	1cfa <ADC_Handler+0x42>
    1d4c:	2000034c 	.word	0x2000034c

00001d50 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1d50:	1c93      	adds	r3, r2, #2
    1d52:	009b      	lsls	r3, r3, #2
    1d54:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    1d56:	2301      	movs	r3, #1
    1d58:	4093      	lsls	r3, r2
    1d5a:	001a      	movs	r2, r3
    1d5c:	7e83      	ldrb	r3, [r0, #26]
    1d5e:	4313      	orrs	r3, r2
    1d60:	7683      	strb	r3, [r0, #26]
}
    1d62:	4770      	bx	lr

00001d64 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    1d64:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    1d66:	8b04      	ldrh	r4, [r0, #24]
{
    1d68:	0003      	movs	r3, r0
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    1d6a:	2005      	movs	r0, #5
	if(module_inst->remaining_conversions != 0 ||
    1d6c:	2c00      	cmp	r4, #0
    1d6e:	d000      	beq.n	1d72 <adc_read_buffer_job+0xe>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
    1d70:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
    1d72:	7f1c      	ldrb	r4, [r3, #28]
	if(module_inst->remaining_conversions != 0 ||
    1d74:	2c05      	cmp	r4, #5
    1d76:	d0fb      	beq.n	1d70 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
    1d78:	7718      	strb	r0, [r3, #28]
	module_inst->remaining_conversions = samples;
    1d7a:	831a      	strh	r2, [r3, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    1d7c:	2201      	movs	r2, #1
	module_inst->job_buffer = buffer;
    1d7e:	6159      	str	r1, [r3, #20]
    1d80:	6819      	ldr	r1, [r3, #0]
    1d82:	75ca      	strb	r2, [r1, #23]
	if(module_inst->software_trigger == true) {
    1d84:	7f5a      	ldrb	r2, [r3, #29]
    1d86:	2a00      	cmp	r2, #0
    1d88:	d101      	bne.n	1d8e <adc_read_buffer_job+0x2a>
	return STATUS_OK;
    1d8a:	2000      	movs	r0, #0
    1d8c:	e7f0      	b.n	1d70 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
    1d8e:	6819      	ldr	r1, [r3, #0]
    1d90:	7e4a      	ldrb	r2, [r1, #25]
    1d92:	b252      	sxtb	r2, r2
    1d94:	2a00      	cmp	r2, #0
    1d96:	dbfb      	blt.n	1d90 <adc_read_buffer_job+0x2c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1d98:	2002      	movs	r0, #2
    1d9a:	7b0a      	ldrb	r2, [r1, #12]
    1d9c:	4302      	orrs	r2, r0
    1d9e:	730a      	strb	r2, [r1, #12]
    1da0:	681a      	ldr	r2, [r3, #0]
    1da2:	7e53      	ldrb	r3, [r2, #25]
    1da4:	b25b      	sxtb	r3, r3
    1da6:	2b00      	cmp	r3, #0
    1da8:	dbfb      	blt.n	1da2 <adc_read_buffer_job+0x3e>
    1daa:	2000      	movs	r0, #0
    1dac:	e7e0      	b.n	1d70 <adc_read_buffer_job+0xc>
    1dae:	46c0      	nop			; (mov r8, r8)

00001db0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1db0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1db2:	2a00      	cmp	r2, #0
    1db4:	d001      	beq.n	1dba <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1db6:	0018      	movs	r0, r3
    1db8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    1dba:	4a06      	ldr	r2, [pc, #24]	; (1dd4 <extint_register_callback+0x24>)
    1dbc:	0089      	lsls	r1, r1, #2
    1dbe:	588b      	ldr	r3, [r1, r2]
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d003      	beq.n	1dcc <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1dc4:	4283      	cmp	r3, r0
    1dc6:	d003      	beq.n	1dd0 <extint_register_callback+0x20>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1dc8:	231d      	movs	r3, #29
    1dca:	e7f4      	b.n	1db6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1dcc:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1dce:	e7f2      	b.n	1db6 <extint_register_callback+0x6>
		return STATUS_OK;
    1dd0:	2300      	movs	r3, #0
    1dd2:	e7f0      	b.n	1db6 <extint_register_callback+0x6>
    1dd4:	20000354 	.word	0x20000354

00001dd8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1dd8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1dda:	2900      	cmp	r1, #0
    1ddc:	d001      	beq.n	1de2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1dde:	0018      	movs	r0, r3
    1de0:	4770      	bx	lr
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1de2:	281f      	cmp	r0, #31
    1de4:	d805      	bhi.n	1df2 <extint_chan_enable_callback+0x1a>
		eic->INTENSET.reg = (1UL << channel);
    1de6:	3b16      	subs	r3, #22
    1de8:	4083      	lsls	r3, r0
    1dea:	4a03      	ldr	r2, [pc, #12]	; (1df8 <extint_chan_enable_callback+0x20>)
    1dec:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1dee:	2300      	movs	r3, #0
    1df0:	e7f5      	b.n	1dde <extint_chan_enable_callback+0x6>
		eic->INTENSET.reg = (1UL << channel);
    1df2:	60c9      	str	r1, [r1, #12]
    1df4:	deff      	udf	#255	; 0xff
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	40001800 	.word	0x40001800

00001dfc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1dfc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1dfe:	2900      	cmp	r1, #0
    1e00:	d001      	beq.n	1e06 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    1e02:	0018      	movs	r0, r3
    1e04:	4770      	bx	lr
    1e06:	281f      	cmp	r0, #31
    1e08:	d805      	bhi.n	1e16 <extint_chan_disable_callback+0x1a>
		eic->INTENCLR.reg = (1UL << channel);
    1e0a:	3b16      	subs	r3, #22
    1e0c:	4083      	lsls	r3, r0
    1e0e:	4a03      	ldr	r2, [pc, #12]	; (1e1c <extint_chan_disable_callback+0x20>)
    1e10:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    1e12:	2300      	movs	r3, #0
    1e14:	e7f5      	b.n	1e02 <extint_chan_disable_callback+0x6>
		eic->INTENCLR.reg = (1UL << channel);
    1e16:	6089      	str	r1, [r1, #8]
    1e18:	deff      	udf	#255	; 0xff
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	40001800 	.word	0x40001800

00001e20 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1e22:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1e24:	2601      	movs	r6, #1
    1e26:	4c0b      	ldr	r4, [pc, #44]	; (1e54 <EIC_Handler+0x34>)

	return (eic_module->INTFLAG.reg & eic_mask);
    1e28:	4d0b      	ldr	r5, [pc, #44]	; (1e58 <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1e2a:	4f0c      	ldr	r7, [pc, #48]	; (1e5c <EIC_Handler+0x3c>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1e2c:	7023      	strb	r3, [r4, #0]
	uint32_t eic_mask   = (1UL << (channel % 32));
    1e2e:	0032      	movs	r2, r6
    1e30:	409a      	lsls	r2, r3
	return (eic_module->INTFLAG.reg & eic_mask);
    1e32:	6929      	ldr	r1, [r5, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1e34:	4211      	tst	r1, r2
    1e36:	d006      	beq.n	1e46 <EIC_Handler+0x26>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1e38:	612a      	str	r2, [r5, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1e3a:	009b      	lsls	r3, r3, #2
    1e3c:	59db      	ldr	r3, [r3, r7]
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d000      	beq.n	1e44 <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1e42:	4798      	blx	r3
    1e44:	7823      	ldrb	r3, [r4, #0]
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1e46:	3301      	adds	r3, #1
    1e48:	b2db      	uxtb	r3, r3
    1e4a:	7023      	strb	r3, [r4, #0]
    1e4c:	2b0f      	cmp	r3, #15
    1e4e:	d9ee      	bls.n	1e2e <EIC_Handler+0xe>
			}
		}
	}
}
    1e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	20000350 	.word	0x20000350
    1e58:	40001800 	.word	0x40001800
    1e5c:	20000354 	.word	0x20000354

00001e60 <_system_extint_init>:
			PM->APBAMASK.reg |= mask;
    1e60:	2140      	movs	r1, #64	; 0x40
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1e62:	b510      	push	{r4, lr}
    1e64:	4a14      	ldr	r2, [pc, #80]	; (1eb8 <_system_extint_init+0x58>)
    1e66:	b082      	sub	sp, #8
    1e68:	6993      	ldr	r3, [r2, #24]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1e6a:	2005      	movs	r0, #5
    1e6c:	430b      	orrs	r3, r1
    1e6e:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1e70:	2300      	movs	r3, #0
    1e72:	a901      	add	r1, sp, #4
    1e74:	700b      	strb	r3, [r1, #0]
    1e76:	4b11      	ldr	r3, [pc, #68]	; (1ebc <_system_extint_init+0x5c>)
    1e78:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    1e7a:	4b11      	ldr	r3, [pc, #68]	; (1ec0 <_system_extint_init+0x60>)
    1e7c:	2005      	movs	r0, #5
    1e7e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1e80:	2201      	movs	r2, #1
    1e82:	4c10      	ldr	r4, [pc, #64]	; (1ec4 <_system_extint_init+0x64>)
    1e84:	7823      	ldrb	r3, [r4, #0]
    1e86:	4313      	orrs	r3, r2
    1e88:	7023      	strb	r3, [r4, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1e8a:	7863      	ldrb	r3, [r4, #1]
    1e8c:	b25b      	sxtb	r3, r3
    1e8e:	2b00      	cmp	r3, #0
    1e90:	dbfb      	blt.n	1e8a <_system_extint_init+0x2a>
    1e92:	2240      	movs	r2, #64	; 0x40
    1e94:	4b0c      	ldr	r3, [pc, #48]	; (1ec8 <_system_extint_init+0x68>)
    1e96:	2100      	movs	r1, #0
    1e98:	480c      	ldr	r0, [pc, #48]	; (1ecc <_system_extint_init+0x6c>)
    1e9a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e9c:	2210      	movs	r2, #16
    1e9e:	4b0c      	ldr	r3, [pc, #48]	; (1ed0 <_system_extint_init+0x70>)
    1ea0:	601a      	str	r2, [r3, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1ea2:	7823      	ldrb	r3, [r4, #0]
    1ea4:	3a0e      	subs	r2, #14
    1ea6:	4313      	orrs	r3, r2
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1ea8:	4a06      	ldr	r2, [pc, #24]	; (1ec4 <_system_extint_init+0x64>)
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1eaa:	7023      	strb	r3, [r4, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1eac:	7853      	ldrb	r3, [r2, #1]
    1eae:	b25b      	sxtb	r3, r3
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	dbfb      	blt.n	1eac <_system_extint_init+0x4c>
}
    1eb4:	b002      	add	sp, #8
    1eb6:	bd10      	pop	{r4, pc}
    1eb8:	40000400 	.word	0x40000400
    1ebc:	00002df1 	.word	0x00002df1
    1ec0:	00002e55 	.word	0x00002e55
    1ec4:	40001800 	.word	0x40001800
    1ec8:	000061a7 	.word	0x000061a7
    1ecc:	20000354 	.word	0x20000354
    1ed0:	e000e100 	.word	0xe000e100

00001ed4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1ed4:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1ed6:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
    1ed8:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1eda:	6043      	str	r3, [r0, #4]
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
    1edc:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1ede:	3302      	adds	r3, #2
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1ee0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1ee2:	7242      	strb	r2, [r0, #9]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1ee4:	72c3      	strb	r3, [r0, #11]
}
    1ee6:	4770      	bx	lr

00001ee8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1eea:	2300      	movs	r3, #0
    1eec:	000c      	movs	r4, r1
    1eee:	b083      	sub	sp, #12
    1ef0:	a901      	add	r1, sp, #4
    1ef2:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1ef4:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1ef6:	7923      	ldrb	r3, [r4, #4]
{
    1ef8:	0005      	movs	r5, r0
	pinmux_config.mux_position = config->gpio_pin_mux;
    1efa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1efc:	7a23      	ldrb	r3, [r4, #8]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1efe:	7820      	ldrb	r0, [r4, #0]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1f00:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1f02:	4b15      	ldr	r3, [pc, #84]	; (1f58 <extint_chan_set_config+0x70>)
    1f04:	4798      	blx	r3
		return NULL;
    1f06:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1f08:	2d1f      	cmp	r5, #31
    1f0a:	d800      	bhi.n	1f0e <extint_chan_set_config+0x26>
		return eics[eic_index];
    1f0c:	4813      	ldr	r0, [pc, #76]	; (1f5c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1f0e:	2207      	movs	r2, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1f10:	7aa3      	ldrb	r3, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
    1f12:	402a      	ands	r2, r5
    1f14:	0092      	lsls	r2, r2, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1f16:	7ae7      	ldrb	r7, [r4, #11]
	if (config->filter_input_signal) {
    1f18:	2b00      	cmp	r3, #0
    1f1a:	d001      	beq.n	1f20 <extint_chan_set_config+0x38>
    1f1c:	2308      	movs	r3, #8
    1f1e:	431f      	orrs	r7, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1f20:	260f      	movs	r6, #15
			(new_config << config_pos);
    1f22:	4097      	lsls	r7, r2
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1f24:	4096      	lsls	r6, r2
			(new_config << config_pos);
    1f26:	003a      	movs	r2, r7
    1f28:	08eb      	lsrs	r3, r5, #3
    1f2a:	009b      	lsls	r3, r3, #2
    1f2c:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    1f2e:	6999      	ldr	r1, [r3, #24]
    1f30:	43b1      	bics	r1, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1f32:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1f34:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1f36:	7a63      	ldrb	r3, [r4, #9]
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d106      	bne.n	1f4a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1f3c:	2201      	movs	r2, #1
    1f3e:	40aa      	lsls	r2, r5
    1f40:	6943      	ldr	r3, [r0, #20]
    1f42:	4393      	bics	r3, r2
    1f44:	6143      	str	r3, [r0, #20]
	}
}
    1f46:	b003      	add	sp, #12
    1f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1f4a:	2301      	movs	r3, #1
    1f4c:	40ab      	lsls	r3, r5
    1f4e:	6942      	ldr	r2, [r0, #20]
    1f50:	4313      	orrs	r3, r2
    1f52:	6143      	str	r3, [r0, #20]
    1f54:	e7f7      	b.n	1f46 <extint_chan_set_config+0x5e>
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	00002f65 	.word	0x00002f65
    1f5c:	40001800 	.word	0x40001800

00001f60 <port_pin_set_config>:
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f60:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1f62:	b500      	push	{lr}
    1f64:	b083      	sub	sp, #12
    1f66:	ab01      	add	r3, sp, #4
    1f68:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1f6a:	780a      	ldrb	r2, [r1, #0]
    1f6c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1f6e:	784a      	ldrb	r2, [r1, #1]
    1f70:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1f72:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1f74:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    1f76:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1f78:	4b01      	ldr	r3, [pc, #4]	; (1f80 <port_pin_set_config+0x20>)
    1f7a:	4798      	blx	r3
}
    1f7c:	b003      	add	sp, #12
    1f7e:	bd00      	pop	{pc}
    1f80:	00002f65 	.word	0x00002f65

00001f84 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1f84:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1f86:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f88:	2340      	movs	r3, #64	; 0x40
    1f8a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1f8c:	4281      	cmp	r1, r0
    1f8e:	d202      	bcs.n	1f96 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1f90:	0018      	movs	r0, r3
    1f92:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1f94:	001c      	movs	r4, r3
    1f96:	1c63      	adds	r3, r4, #1
		clock_value = clock_value - baudrate;
    1f98:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1f9a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1f9c:	4288      	cmp	r0, r1
    1f9e:	d9f9      	bls.n	1f94 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fa0:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1fa2:	2cff      	cmp	r4, #255	; 0xff
    1fa4:	d8f4      	bhi.n	1f90 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1fa6:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1fa8:	2300      	movs	r3, #0
    1faa:	e7f1      	b.n	1f90 <_sercom_get_sync_baud_val+0xc>

00001fac <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fae:	46de      	mov	lr, fp
    1fb0:	4645      	mov	r5, r8
    1fb2:	4657      	mov	r7, sl
    1fb4:	464e      	mov	r6, r9
    1fb6:	b5e0      	push	{r5, r6, r7, lr}
    1fb8:	b087      	sub	sp, #28
    1fba:	4693      	mov	fp, r2
    1fbc:	aa10      	add	r2, sp, #64	; 0x40
    1fbe:	7814      	ldrb	r4, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1fc0:	0002      	movs	r2, r0
{
    1fc2:	4688      	mov	r8, r1
	if ((baudrate * sample_num) > peripheral_clock) {
    1fc4:	4362      	muls	r2, r4
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fc6:	2140      	movs	r1, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1fc8:	4542      	cmp	r2, r8
    1fca:	d907      	bls.n	1fdc <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1fcc:	0008      	movs	r0, r1
    1fce:	b007      	add	sp, #28
    1fd0:	bc3c      	pop	{r2, r3, r4, r5}
    1fd2:	4690      	mov	r8, r2
    1fd4:	4699      	mov	r9, r3
    1fd6:	46a2      	mov	sl, r4
    1fd8:	46ab      	mov	fp, r5
    1fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d15f      	bne.n	20a0 <STACK_SIZE+0xa0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1fe0:	0002      	movs	r2, r0
    1fe2:	2100      	movs	r1, #0
    1fe4:	0020      	movs	r0, r4
    1fe6:	4c8a      	ldr	r4, [pc, #552]	; (2210 <STACK_SIZE+0x210>)
    1fe8:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
    1fea:	4643      	mov	r3, r8
    1fec:	9300      	str	r3, [sp, #0]
    1fee:	2300      	movs	r3, #0
		bit_shift = (uint64_t)1 << i;
    1ff0:	2120      	movs	r1, #32
	uint64_t q = 0, r = 0, bit_shift;
    1ff2:	4698      	mov	r8, r3
		bit_shift = (uint64_t)1 << i;
    1ff4:	468a      	mov	sl, r1
    1ff6:	391f      	subs	r1, #31
	uint64_t q = 0, r = 0, bit_shift;
    1ff8:	2700      	movs	r7, #0
		bit_shift = (uint64_t)1 << i;
    1ffa:	468c      	mov	ip, r1
    1ffc:	4641      	mov	r1, r8
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1ffe:	4681      	mov	r9, r0
		ratio = long_division(temp1, peripheral_clock);
    2000:	9301      	str	r3, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    2002:	46d8      	mov	r8, fp
	uint64_t q = 0, r = 0, bit_shift;
    2004:	2200      	movs	r2, #0
    2006:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    2008:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    200a:	9102      	str	r1, [sp, #8]
    200c:	46bb      	mov	fp, r7
    200e:	e00f      	b.n	2030 <STACK_SIZE+0x30>
    2010:	42bd      	cmp	r5, r7
    2012:	d052      	beq.n	20ba <STACK_SIZE+0xba>
    2014:	46a3      	mov	fp, r4
    2016:	9c00      	ldr	r4, [sp, #0]
    2018:	9d01      	ldr	r5, [sp, #4]
    201a:	9102      	str	r1, [sp, #8]
    201c:	42bd      	cmp	r5, r7
    201e:	d834      	bhi.n	208a <STACK_SIZE+0x8a>
    2020:	42bd      	cmp	r5, r7
    2022:	d050      	beq.n	20c6 <STACK_SIZE+0xc6>
    2024:	0011      	movs	r1, r2
    2026:	001c      	movs	r4, r3
    2028:	000a      	movs	r2, r1
    202a:	0023      	movs	r3, r4
	for (i = 63; i >= 0; i--) {
    202c:	3801      	subs	r0, #1
    202e:	d332      	bcc.n	2096 <STACK_SIZE+0x96>
		bit_shift = (uint64_t)1 << i;
    2030:	2120      	movs	r1, #32
    2032:	4249      	negs	r1, r1
    2034:	1841      	adds	r1, r0, r1
    2036:	d43a      	bmi.n	20ae <STACK_SIZE+0xae>
    2038:	4664      	mov	r4, ip
    203a:	408c      	lsls	r4, r1
    203c:	0021      	movs	r1, r4
    203e:	4664      	mov	r4, ip
    2040:	4084      	lsls	r4, r0
		r = r << 1;
    2042:	1892      	adds	r2, r2, r2
    2044:	415b      	adcs	r3, r3
		bit_shift = (uint64_t)1 << i;
    2046:	9404      	str	r4, [sp, #16]
			r |= 0x01;
    2048:	4666      	mov	r6, ip
    204a:	464c      	mov	r4, r9
    204c:	4316      	orrs	r6, r2
    204e:	420c      	tst	r4, r1
    2050:	d000      	beq.n	2054 <STACK_SIZE+0x54>
    2052:	0032      	movs	r2, r6
			r = r - d;
    2054:	0014      	movs	r4, r2
    2056:	001d      	movs	r5, r3
    2058:	0016      	movs	r6, r2
    205a:	001f      	movs	r7, r3
    205c:	9a00      	ldr	r2, [sp, #0]
    205e:	9b01      	ldr	r3, [sp, #4]
    2060:	1aa4      	subs	r4, r4, r2
    2062:	419d      	sbcs	r5, r3
    2064:	0022      	movs	r2, r4
			q |= bit_shift;
    2066:	465c      	mov	r4, fp
			r = r - d;
    2068:	002b      	movs	r3, r5
			q |= bit_shift;
    206a:	9d04      	ldr	r5, [sp, #16]
    206c:	4325      	orrs	r5, r4
    206e:	002c      	movs	r4, r5
    2070:	9d02      	ldr	r5, [sp, #8]
    2072:	4329      	orrs	r1, r5
    2074:	9d01      	ldr	r5, [sp, #4]
    2076:	42bd      	cmp	r5, r7
    2078:	d9ca      	bls.n	2010 <STACK_SIZE+0x10>
    207a:	465c      	mov	r4, fp
    207c:	9902      	ldr	r1, [sp, #8]
    207e:	46a3      	mov	fp, r4
    2080:	9c00      	ldr	r4, [sp, #0]
    2082:	9d01      	ldr	r5, [sp, #4]
    2084:	9102      	str	r1, [sp, #8]
    2086:	42bd      	cmp	r5, r7
    2088:	d9ca      	bls.n	2020 <STACK_SIZE+0x20>
    208a:	0031      	movs	r1, r6
    208c:	003c      	movs	r4, r7
    208e:	000a      	movs	r2, r1
    2090:	0023      	movs	r3, r4
	for (i = 63; i >= 0; i--) {
    2092:	3801      	subs	r0, #1
    2094:	d2cc      	bcs.n	2030 <STACK_SIZE+0x30>
    2096:	465f      	mov	r7, fp
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2098:	427f      	negs	r7, r7
    209a:	46c3      	mov	fp, r8
    209c:	0c3f      	lsrs	r7, r7, #16
    209e:	e002      	b.n	20a6 <STACK_SIZE+0xa6>
    20a0:	2700      	movs	r7, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    20a2:	2b01      	cmp	r3, #1
    20a4:	d015      	beq.n	20d2 <STACK_SIZE+0xd2>
	*baudval = baud_calculated;
    20a6:	465b      	mov	r3, fp
	return STATUS_OK;
    20a8:	2100      	movs	r1, #0
	*baudval = baud_calculated;
    20aa:	801f      	strh	r7, [r3, #0]
	return STATUS_OK;
    20ac:	e78e      	b.n	1fcc <_sercom_get_async_baud_val+0x20>
		bit_shift = (uint64_t)1 << i;
    20ae:	4651      	mov	r1, sl
    20b0:	4664      	mov	r4, ip
    20b2:	1a09      	subs	r1, r1, r0
    20b4:	40cc      	lsrs	r4, r1
    20b6:	0021      	movs	r1, r4
    20b8:	e7c1      	b.n	203e <STACK_SIZE+0x3e>
    20ba:	9d00      	ldr	r5, [sp, #0]
    20bc:	42b5      	cmp	r5, r6
    20be:	d9a9      	bls.n	2014 <STACK_SIZE+0x14>
    20c0:	465c      	mov	r4, fp
    20c2:	9902      	ldr	r1, [sp, #8]
    20c4:	e7db      	b.n	207e <STACK_SIZE+0x7e>
    20c6:	9900      	ldr	r1, [sp, #0]
    20c8:	42b1      	cmp	r1, r6
    20ca:	d9ab      	bls.n	2024 <STACK_SIZE+0x24>
    20cc:	0031      	movs	r1, r6
    20ce:	003c      	movs	r4, r7
    20d0:	e7dd      	b.n	208e <STACK_SIZE+0x8e>
		temp1 = ((uint64_t)baudrate * sample_num);
    20d2:	0022      	movs	r2, r4
    20d4:	2300      	movs	r3, #0
    20d6:	4c4e      	ldr	r4, [pc, #312]	; (2210 <STACK_SIZE+0x210>)
    20d8:	2100      	movs	r1, #0
    20da:	47a0      	blx	r4
		bit_shift = (uint64_t)1 << i;
    20dc:	2401      	movs	r4, #1
		temp1 = ((uint64_t)baudrate * sample_num);
    20de:	000b      	movs	r3, r1
	uint64_t q = 0, r = 0, bit_shift;
    20e0:	2100      	movs	r1, #0
		temp1 = ((uint64_t)baudrate * sample_num);
    20e2:	0002      	movs	r2, r0
	uint64_t q = 0, r = 0, bit_shift;
    20e4:	468c      	mov	ip, r1
    20e6:	2000      	movs	r0, #0
    20e8:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    20ea:	263f      	movs	r6, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    20ec:	46a1      	mov	r9, r4
    20ee:	e018      	b.n	2122 <STACK_SIZE+0x122>
    20f0:	0004      	movs	r4, r0
    20f2:	000d      	movs	r5, r1
    20f4:	0020      	movs	r0, r4
    20f6:	0029      	movs	r1, r5
			r = r - d;
    20f8:	1aa4      	subs	r4, r4, r2
    20fa:	419d      	sbcs	r5, r3
    20fc:	9400      	str	r4, [sp, #0]
    20fe:	9501      	str	r5, [sp, #4]
			q |= bit_shift;
    2100:	4664      	mov	r4, ip
    2102:	4327      	orrs	r7, r4
    2104:	428b      	cmp	r3, r1
    2106:	d81e      	bhi.n	2146 <STACK_SIZE+0x146>
    2108:	d01b      	beq.n	2142 <STACK_SIZE+0x142>
    210a:	46bc      	mov	ip, r7
    210c:	428b      	cmp	r3, r1
    210e:	d815      	bhi.n	213c <STACK_SIZE+0x13c>
    2110:	d012      	beq.n	2138 <STACK_SIZE+0x138>
    2112:	9800      	ldr	r0, [sp, #0]
    2114:	9901      	ldr	r1, [sp, #4]
    2116:	4682      	mov	sl, r0
    2118:	000c      	movs	r4, r1
    211a:	4650      	mov	r0, sl
    211c:	0021      	movs	r1, r4
	for (i = 63; i >= 0; i--) {
    211e:	3e01      	subs	r6, #1
    2120:	d313      	bcc.n	214a <STACK_SIZE+0x14a>
		bit_shift = (uint64_t)1 << i;
    2122:	464f      	mov	r7, r9
		r = r << 1;
    2124:	1800      	adds	r0, r0, r0
    2126:	4149      	adcs	r1, r1
			r |= 0x01;
    2128:	464c      	mov	r4, r9
		bit_shift = (uint64_t)1 << i;
    212a:	40b7      	lsls	r7, r6
    212c:	4645      	mov	r5, r8
			r |= 0x01;
    212e:	4304      	orrs	r4, r0
    2130:	422f      	tst	r7, r5
    2132:	d0dd      	beq.n	20f0 <STACK_SIZE+0xf0>
    2134:	000d      	movs	r5, r1
    2136:	e7dd      	b.n	20f4 <STACK_SIZE+0xf4>
    2138:	4282      	cmp	r2, r0
    213a:	d9ea      	bls.n	2112 <STACK_SIZE+0x112>
    213c:	4682      	mov	sl, r0
    213e:	000c      	movs	r4, r1
    2140:	e7eb      	b.n	211a <STACK_SIZE+0x11a>
    2142:	4282      	cmp	r2, r0
    2144:	d9e1      	bls.n	210a <STACK_SIZE+0x10a>
    2146:	4667      	mov	r7, ip
    2148:	e7df      	b.n	210a <STACK_SIZE+0x10a>
		if(baud_int > BAUD_INT_MAX) {
    214a:	2080      	movs	r0, #128	; 0x80
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    214c:	2140      	movs	r1, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    214e:	0180      	lsls	r0, r0, #6
    2150:	4287      	cmp	r7, r0
    2152:	d900      	bls.n	2156 <STACK_SIZE+0x156>
    2154:	e73a      	b.n	1fcc <_sercom_get_async_baud_val+0x20>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2156:	4641      	mov	r1, r8
    2158:	0f49      	lsrs	r1, r1, #29
    215a:	000c      	movs	r4, r1
	for (i = 63; i >= 0; i--) {
    215c:	263f      	movs	r6, #63	; 0x3f
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    215e:	4641      	mov	r1, r8
	for (i = 63; i >= 0; i--) {
    2160:	46b4      	mov	ip, r6
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2162:	00c9      	lsls	r1, r1, #3
		bit_shift = (uint64_t)1 << i;
    2164:	3e3e      	subs	r6, #62	; 0x3e
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2166:	000d      	movs	r5, r1
		bit_shift = (uint64_t)1 << i;
    2168:	46b0      	mov	r8, r6
	uint64_t q = 0, r = 0, bit_shift;
    216a:	2100      	movs	r1, #0
		bit_shift = (uint64_t)1 << i;
    216c:	465e      	mov	r6, fp
	uint64_t q = 0, r = 0, bit_shift;
    216e:	4689      	mov	r9, r1
		bit_shift = (uint64_t)1 << i;
    2170:	9705      	str	r7, [sp, #20]
	uint64_t q = 0, r = 0, bit_shift;
    2172:	2000      	movs	r0, #0
		bit_shift = (uint64_t)1 << i;
    2174:	4667      	mov	r7, ip
	uint64_t q = 0, r = 0, bit_shift;
    2176:	2100      	movs	r1, #0
		bit_shift = (uint64_t)1 << i;
    2178:	9604      	str	r6, [sp, #16]
    217a:	46a2      	mov	sl, r4
    217c:	46ac      	mov	ip, r5
    217e:	e018      	b.n	21b2 <STACK_SIZE+0x1b2>
    2180:	0004      	movs	r4, r0
    2182:	000d      	movs	r5, r1
    2184:	0020      	movs	r0, r4
    2186:	0029      	movs	r1, r5
			r = r - d;
    2188:	1aa4      	subs	r4, r4, r2
    218a:	419d      	sbcs	r5, r3
			q |= bit_shift;
    218c:	464e      	mov	r6, r9
			r = r - d;
    218e:	9402      	str	r4, [sp, #8]
    2190:	9503      	str	r5, [sp, #12]
			q |= bit_shift;
    2192:	9c00      	ldr	r4, [sp, #0]
    2194:	4334      	orrs	r4, r6
    2196:	0026      	movs	r6, r4
    2198:	428b      	cmp	r3, r1
    219a:	d828      	bhi.n	21ee <STACK_SIZE+0x1ee>
    219c:	d025      	beq.n	21ea <STACK_SIZE+0x1ea>
    219e:	46b1      	mov	r9, r6
    21a0:	428b      	cmp	r3, r1
    21a2:	d81f      	bhi.n	21e4 <STACK_SIZE+0x1e4>
    21a4:	d01c      	beq.n	21e0 <STACK_SIZE+0x1e0>
    21a6:	9c02      	ldr	r4, [sp, #8]
    21a8:	9d03      	ldr	r5, [sp, #12]
    21aa:	0020      	movs	r0, r4
    21ac:	0029      	movs	r1, r5
	for (i = 63; i >= 0; i--) {
    21ae:	3f01      	subs	r7, #1
    21b0:	d324      	bcc.n	21fc <STACK_SIZE+0x1fc>
		bit_shift = (uint64_t)1 << i;
    21b2:	2420      	movs	r4, #32
    21b4:	4264      	negs	r4, r4
    21b6:	193c      	adds	r4, r7, r4
    21b8:	d41b      	bmi.n	21f2 <STACK_SIZE+0x1f2>
    21ba:	4645      	mov	r5, r8
    21bc:	40a5      	lsls	r5, r4
		r = r << 1;
    21be:	1800      	adds	r0, r0, r0
    21c0:	4149      	adcs	r1, r1
			r |= 0x01;
    21c2:	4644      	mov	r4, r8
		bit_shift = (uint64_t)1 << i;
    21c4:	4646      	mov	r6, r8
			r |= 0x01;
    21c6:	4304      	orrs	r4, r0
		bit_shift = (uint64_t)1 << i;
    21c8:	40be      	lsls	r6, r7
			r |= 0x01;
    21ca:	46a3      	mov	fp, r4
		if (n & bit_shift) {
    21cc:	4664      	mov	r4, ip
		bit_shift = (uint64_t)1 << i;
    21ce:	9600      	str	r6, [sp, #0]
		if (n & bit_shift) {
    21d0:	4034      	ands	r4, r6
    21d2:	4656      	mov	r6, sl
    21d4:	4035      	ands	r5, r6
    21d6:	4325      	orrs	r5, r4
    21d8:	d0d2      	beq.n	2180 <STACK_SIZE+0x180>
    21da:	465c      	mov	r4, fp
    21dc:	000d      	movs	r5, r1
    21de:	e7d1      	b.n	2184 <STACK_SIZE+0x184>
    21e0:	4282      	cmp	r2, r0
    21e2:	d9e0      	bls.n	21a6 <STACK_SIZE+0x1a6>
    21e4:	0004      	movs	r4, r0
    21e6:	000d      	movs	r5, r1
    21e8:	e7df      	b.n	21aa <STACK_SIZE+0x1aa>
    21ea:	4282      	cmp	r2, r0
    21ec:	d9d7      	bls.n	219e <STACK_SIZE+0x19e>
    21ee:	464e      	mov	r6, r9
    21f0:	e7d5      	b.n	219e <STACK_SIZE+0x19e>
		bit_shift = (uint64_t)1 << i;
    21f2:	2420      	movs	r4, #32
    21f4:	4645      	mov	r5, r8
    21f6:	1be4      	subs	r4, r4, r7
    21f8:	40e5      	lsrs	r5, r4
    21fa:	e7e0      	b.n	21be <STACK_SIZE+0x1be>
    21fc:	9b04      	ldr	r3, [sp, #16]
    21fe:	9f05      	ldr	r7, [sp, #20]
    2200:	469b      	mov	fp, r3
		baud_fp = temp1 - 8 * baud_int;
    2202:	00fb      	lsls	r3, r7, #3
    2204:	1af3      	subs	r3, r6, r3
		baud_calculated = baud_int | (baud_fp << 13);
    2206:	b2db      	uxtb	r3, r3
    2208:	035b      	lsls	r3, r3, #13
    220a:	431f      	orrs	r7, r3
    220c:	b2bf      	uxth	r7, r7
    220e:	e74a      	b.n	20a6 <STACK_SIZE+0xa6>
    2210:	000060f9 	.word	0x000060f9

00002214 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2214:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2216:	4c0e      	ldr	r4, [pc, #56]	; (2250 <sercom_set_gclk_generator+0x3c>)
{
    2218:	b083      	sub	sp, #12
	if (!_sercom_config.generator_is_set || force_change) {
    221a:	7823      	ldrb	r3, [r4, #0]
{
    221c:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    221e:	2b00      	cmp	r3, #0
    2220:	d006      	beq.n	2230 <sercom_set_gclk_generator+0x1c>
    2222:	2900      	cmp	r1, #0
    2224:	d104      	bne.n	2230 <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2226:	7863      	ldrb	r3, [r4, #1]
    2228:	4283      	cmp	r3, r0
    222a:	d00f      	beq.n	224c <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    222c:	201d      	movs	r0, #29
    222e:	e00b      	b.n	2248 <sercom_set_gclk_generator+0x34>
		gclk_chan_conf.source_generator = generator_source;
    2230:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2232:	2013      	movs	r0, #19
    2234:	4b07      	ldr	r3, [pc, #28]	; (2254 <sercom_set_gclk_generator+0x40>)
		gclk_chan_conf.source_generator = generator_source;
    2236:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2238:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    223a:	2013      	movs	r0, #19
    223c:	4b06      	ldr	r3, [pc, #24]	; (2258 <sercom_set_gclk_generator+0x44>)
    223e:	4798      	blx	r3
		_sercom_config.generator_is_set = true;
    2240:	2301      	movs	r3, #1
		return STATUS_OK;
    2242:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    2244:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    2246:	7023      	strb	r3, [r4, #0]
}
    2248:	b003      	add	sp, #12
    224a:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    224c:	2000      	movs	r0, #0
    224e:	e7fb      	b.n	2248 <sercom_set_gclk_generator+0x34>
    2250:	2000026c 	.word	0x2000026c
    2254:	00002df1 	.word	0x00002df1
    2258:	00002e55 	.word	0x00002e55

0000225c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    225c:	4b3a      	ldr	r3, [pc, #232]	; (2348 <_sercom_get_default_pad+0xec>)
    225e:	4298      	cmp	r0, r3
    2260:	d043      	beq.n	22ea <_sercom_get_default_pad+0x8e>
    2262:	d90a      	bls.n	227a <_sercom_get_default_pad+0x1e>
    2264:	4b39      	ldr	r3, [pc, #228]	; (234c <_sercom_get_default_pad+0xf0>)
    2266:	4298      	cmp	r0, r3
    2268:	d017      	beq.n	229a <_sercom_get_default_pad+0x3e>
    226a:	4b39      	ldr	r3, [pc, #228]	; (2350 <_sercom_get_default_pad+0xf4>)
    226c:	4298      	cmp	r0, r3
    226e:	d032      	beq.n	22d6 <_sercom_get_default_pad+0x7a>
    2270:	4b38      	ldr	r3, [pc, #224]	; (2354 <_sercom_get_default_pad+0xf8>)
    2272:	4298      	cmp	r0, r3
    2274:	d01b      	beq.n	22ae <_sercom_get_default_pad+0x52>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2276:	2000      	movs	r0, #0
}
    2278:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    227a:	4b37      	ldr	r3, [pc, #220]	; (2358 <_sercom_get_default_pad+0xfc>)
    227c:	4298      	cmp	r0, r3
    227e:	d020      	beq.n	22c2 <_sercom_get_default_pad+0x66>
    2280:	4b36      	ldr	r3, [pc, #216]	; (235c <_sercom_get_default_pad+0x100>)
    2282:	4298      	cmp	r0, r3
    2284:	d1f7      	bne.n	2276 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2286:	2901      	cmp	r1, #1
    2288:	d043      	beq.n	2312 <_sercom_get_default_pad+0xb6>
    228a:	2900      	cmp	r1, #0
    228c:	d03f      	beq.n	230e <_sercom_get_default_pad+0xb2>
    228e:	2902      	cmp	r1, #2
    2290:	d03b      	beq.n	230a <_sercom_get_default_pad+0xae>
    2292:	2903      	cmp	r1, #3
    2294:	d1ef      	bne.n	2276 <_sercom_get_default_pad+0x1a>
    2296:	4832      	ldr	r0, [pc, #200]	; (2360 <_sercom_get_default_pad+0x104>)
    2298:	e7ee      	b.n	2278 <_sercom_get_default_pad+0x1c>
    229a:	2901      	cmp	r1, #1
    229c:	d031      	beq.n	2302 <_sercom_get_default_pad+0xa6>
    229e:	2900      	cmp	r1, #0
    22a0:	d02d      	beq.n	22fe <_sercom_get_default_pad+0xa2>
    22a2:	2902      	cmp	r1, #2
    22a4:	d02f      	beq.n	2306 <_sercom_get_default_pad+0xaa>
    22a6:	2903      	cmp	r1, #3
    22a8:	d1e5      	bne.n	2276 <_sercom_get_default_pad+0x1a>
    22aa:	482e      	ldr	r0, [pc, #184]	; (2364 <_sercom_get_default_pad+0x108>)
    22ac:	e7e4      	b.n	2278 <_sercom_get_default_pad+0x1c>
    22ae:	2901      	cmp	r1, #1
    22b0:	d03f      	beq.n	2332 <_sercom_get_default_pad+0xd6>
    22b2:	2900      	cmp	r1, #0
    22b4:	d03b      	beq.n	232e <_sercom_get_default_pad+0xd2>
    22b6:	2902      	cmp	r1, #2
    22b8:	d037      	beq.n	232a <_sercom_get_default_pad+0xce>
    22ba:	2903      	cmp	r1, #3
    22bc:	d1db      	bne.n	2276 <_sercom_get_default_pad+0x1a>
    22be:	482a      	ldr	r0, [pc, #168]	; (2368 <_sercom_get_default_pad+0x10c>)
    22c0:	e7da      	b.n	2278 <_sercom_get_default_pad+0x1c>
    22c2:	2901      	cmp	r1, #1
    22c4:	d03d      	beq.n	2342 <_sercom_get_default_pad+0xe6>
    22c6:	2900      	cmp	r1, #0
    22c8:	d039      	beq.n	233e <_sercom_get_default_pad+0xe2>
    22ca:	2902      	cmp	r1, #2
    22cc:	d02b      	beq.n	2326 <_sercom_get_default_pad+0xca>
    22ce:	2903      	cmp	r1, #3
    22d0:	d1d1      	bne.n	2276 <_sercom_get_default_pad+0x1a>
    22d2:	4826      	ldr	r0, [pc, #152]	; (236c <_sercom_get_default_pad+0x110>)
    22d4:	e7d0      	b.n	2278 <_sercom_get_default_pad+0x1c>
    22d6:	2901      	cmp	r1, #1
    22d8:	d023      	beq.n	2322 <_sercom_get_default_pad+0xc6>
    22da:	2900      	cmp	r1, #0
    22dc:	d01f      	beq.n	231e <_sercom_get_default_pad+0xc2>
    22de:	2902      	cmp	r1, #2
    22e0:	d01b      	beq.n	231a <_sercom_get_default_pad+0xbe>
    22e2:	2903      	cmp	r1, #3
    22e4:	d1c7      	bne.n	2276 <_sercom_get_default_pad+0x1a>
    22e6:	4822      	ldr	r0, [pc, #136]	; (2370 <_sercom_get_default_pad+0x114>)
    22e8:	e7c6      	b.n	2278 <_sercom_get_default_pad+0x1c>
    22ea:	2901      	cmp	r1, #1
    22ec:	d025      	beq.n	233a <_sercom_get_default_pad+0xde>
    22ee:	2900      	cmp	r1, #0
    22f0:	d021      	beq.n	2336 <_sercom_get_default_pad+0xda>
    22f2:	2902      	cmp	r1, #2
    22f4:	d00f      	beq.n	2316 <_sercom_get_default_pad+0xba>
    22f6:	2903      	cmp	r1, #3
    22f8:	d1bd      	bne.n	2276 <_sercom_get_default_pad+0x1a>
    22fa:	481e      	ldr	r0, [pc, #120]	; (2374 <_sercom_get_default_pad+0x118>)
    22fc:	e7bc      	b.n	2278 <_sercom_get_default_pad+0x1c>
    22fe:	481e      	ldr	r0, [pc, #120]	; (2378 <_sercom_get_default_pad+0x11c>)
    2300:	e7ba      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2302:	481e      	ldr	r0, [pc, #120]	; (237c <_sercom_get_default_pad+0x120>)
    2304:	e7b8      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2306:	481e      	ldr	r0, [pc, #120]	; (2380 <_sercom_get_default_pad+0x124>)
    2308:	e7b6      	b.n	2278 <_sercom_get_default_pad+0x1c>
    230a:	481e      	ldr	r0, [pc, #120]	; (2384 <_sercom_get_default_pad+0x128>)
    230c:	e7b4      	b.n	2278 <_sercom_get_default_pad+0x1c>
    230e:	2003      	movs	r0, #3
    2310:	e7b2      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2312:	481d      	ldr	r0, [pc, #116]	; (2388 <_sercom_get_default_pad+0x12c>)
    2314:	e7b0      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2316:	481d      	ldr	r0, [pc, #116]	; (238c <_sercom_get_default_pad+0x130>)
    2318:	e7ae      	b.n	2278 <_sercom_get_default_pad+0x1c>
    231a:	481d      	ldr	r0, [pc, #116]	; (2390 <_sercom_get_default_pad+0x134>)
    231c:	e7ac      	b.n	2278 <_sercom_get_default_pad+0x1c>
    231e:	481d      	ldr	r0, [pc, #116]	; (2394 <_sercom_get_default_pad+0x138>)
    2320:	e7aa      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2322:	481d      	ldr	r0, [pc, #116]	; (2398 <_sercom_get_default_pad+0x13c>)
    2324:	e7a8      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2326:	481d      	ldr	r0, [pc, #116]	; (239c <_sercom_get_default_pad+0x140>)
    2328:	e7a6      	b.n	2278 <_sercom_get_default_pad+0x1c>
    232a:	481d      	ldr	r0, [pc, #116]	; (23a0 <_sercom_get_default_pad+0x144>)
    232c:	e7a4      	b.n	2278 <_sercom_get_default_pad+0x1c>
    232e:	481d      	ldr	r0, [pc, #116]	; (23a4 <_sercom_get_default_pad+0x148>)
    2330:	e7a2      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2332:	481d      	ldr	r0, [pc, #116]	; (23a8 <_sercom_get_default_pad+0x14c>)
    2334:	e7a0      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2336:	481d      	ldr	r0, [pc, #116]	; (23ac <_sercom_get_default_pad+0x150>)
    2338:	e79e      	b.n	2278 <_sercom_get_default_pad+0x1c>
    233a:	481d      	ldr	r0, [pc, #116]	; (23b0 <_sercom_get_default_pad+0x154>)
    233c:	e79c      	b.n	2278 <_sercom_get_default_pad+0x1c>
    233e:	481d      	ldr	r0, [pc, #116]	; (23b4 <_sercom_get_default_pad+0x158>)
    2340:	e79a      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2342:	481d      	ldr	r0, [pc, #116]	; (23b8 <_sercom_get_default_pad+0x15c>)
    2344:	e798      	b.n	2278 <_sercom_get_default_pad+0x1c>
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	42001000 	.word	0x42001000
    234c:	42001800 	.word	0x42001800
    2350:	42001c00 	.word	0x42001c00
    2354:	42001400 	.word	0x42001400
    2358:	42000800 	.word	0x42000800
    235c:	42000c00 	.word	0x42000c00
    2360:	001f0003 	.word	0x001f0003
    2364:	000f0003 	.word	0x000f0003
    2368:	00130003 	.word	0x00130003
    236c:	00070003 	.word	0x00070003
    2370:	00190003 	.word	0x00190003
    2374:	000b0003 	.word	0x000b0003
    2378:	000c0003 	.word	0x000c0003
    237c:	000d0003 	.word	0x000d0003
    2380:	000e0003 	.word	0x000e0003
    2384:	001e0003 	.word	0x001e0003
    2388:	00010003 	.word	0x00010003
    238c:	000a0003 	.word	0x000a0003
    2390:	00180003 	.word	0x00180003
    2394:	00160003 	.word	0x00160003
    2398:	00170003 	.word	0x00170003
    239c:	00060003 	.word	0x00060003
    23a0:	00120003 	.word	0x00120003
    23a4:	00100003 	.word	0x00100003
    23a8:	00110003 	.word	0x00110003
    23ac:	00080003 	.word	0x00080003
    23b0:	00090003 	.word	0x00090003
    23b4:	00040003 	.word	0x00040003
    23b8:	00050003 	.word	0x00050003

000023bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    23bc:	b570      	push	{r4, r5, r6, lr}
    23be:	b086      	sub	sp, #24
    23c0:	0001      	movs	r1, r0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    23c2:	4668      	mov	r0, sp
    23c4:	4b15      	ldr	r3, [pc, #84]	; (241c <_sercom_get_sercom_inst_index+0x60>)
    23c6:	cb70      	ldmia	r3!, {r4, r5, r6}
    23c8:	c070      	stmia	r0!, {r4, r5, r6}
    23ca:	cb70      	ldmia	r3!, {r4, r5, r6}
    23cc:	c070      	stmia	r0!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    23ce:	9b00      	ldr	r3, [sp, #0]
    23d0:	428b      	cmp	r3, r1
    23d2:	d011      	beq.n	23f8 <_sercom_get_sercom_inst_index+0x3c>
    23d4:	9b01      	ldr	r3, [sp, #4]
    23d6:	428b      	cmp	r3, r1
    23d8:	d011      	beq.n	23fe <_sercom_get_sercom_inst_index+0x42>
    23da:	9b02      	ldr	r3, [sp, #8]
    23dc:	428b      	cmp	r3, r1
    23de:	d011      	beq.n	2404 <_sercom_get_sercom_inst_index+0x48>
    23e0:	9b03      	ldr	r3, [sp, #12]
    23e2:	428b      	cmp	r3, r1
    23e4:	d011      	beq.n	240a <_sercom_get_sercom_inst_index+0x4e>
    23e6:	9b04      	ldr	r3, [sp, #16]
    23e8:	428b      	cmp	r3, r1
    23ea:	d011      	beq.n	2410 <_sercom_get_sercom_inst_index+0x54>
    23ec:	9b05      	ldr	r3, [sp, #20]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    23ee:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    23f0:	428b      	cmp	r3, r1
    23f2:	d010      	beq.n	2416 <_sercom_get_sercom_inst_index+0x5a>
}
    23f4:	b006      	add	sp, #24
    23f6:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23f8:	2000      	movs	r0, #0
			return i;
    23fa:	b2c0      	uxtb	r0, r0
    23fc:	e7fa      	b.n	23f4 <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23fe:	2001      	movs	r0, #1
			return i;
    2400:	b2c0      	uxtb	r0, r0
    2402:	e7f7      	b.n	23f4 <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2404:	2002      	movs	r0, #2
			return i;
    2406:	b2c0      	uxtb	r0, r0
    2408:	e7f4      	b.n	23f4 <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    240a:	2003      	movs	r0, #3
			return i;
    240c:	b2c0      	uxtb	r0, r0
    240e:	e7f1      	b.n	23f4 <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2410:	2004      	movs	r0, #4
			return i;
    2412:	b2c0      	uxtb	r0, r0
    2414:	e7ee      	b.n	23f4 <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2416:	3005      	adds	r0, #5
			return i;
    2418:	b2c0      	uxtb	r0, r0
    241a:	e7eb      	b.n	23f4 <_sercom_get_sercom_inst_index+0x38>
    241c:	000062dc 	.word	0x000062dc

00002420 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2420:	4770      	bx	lr
    2422:	46c0      	nop			; (mov r8, r8)

00002424 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2426:	4e0c      	ldr	r6, [pc, #48]	; (2458 <_sercom_set_handler+0x34>)
{
    2428:	0005      	movs	r5, r0
	if (_handler_table_initialized == false) {
    242a:	7833      	ldrb	r3, [r6, #0]
{
    242c:	000f      	movs	r7, r1
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    242e:	4c0b      	ldr	r4, [pc, #44]	; (245c <_sercom_set_handler+0x38>)
	if (_handler_table_initialized == false) {
    2430:	2b00      	cmp	r3, #0
    2432:	d10d      	bne.n	2450 <_sercom_set_handler+0x2c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2434:	4b0a      	ldr	r3, [pc, #40]	; (2460 <_sercom_set_handler+0x3c>)
    2436:	2218      	movs	r2, #24
    2438:	6023      	str	r3, [r4, #0]
    243a:	6063      	str	r3, [r4, #4]
    243c:	60a3      	str	r3, [r4, #8]
    243e:	60e3      	str	r3, [r4, #12]
    2440:	6123      	str	r3, [r4, #16]
    2442:	6163      	str	r3, [r4, #20]
    2444:	2100      	movs	r1, #0
    2446:	4b07      	ldr	r3, [pc, #28]	; (2464 <_sercom_set_handler+0x40>)
    2448:	4807      	ldr	r0, [pc, #28]	; (2468 <_sercom_set_handler+0x44>)
    244a:	4798      	blx	r3
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    244c:	2301      	movs	r3, #1
    244e:	7033      	strb	r3, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2450:	00ad      	lsls	r5, r5, #2
    2452:	5167      	str	r7, [r4, r5]
}
    2454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	2000026e 	.word	0x2000026e
    245c:	20000270 	.word	0x20000270
    2460:	00002421 	.word	0x00002421
    2464:	000061a7 	.word	0x000061a7
    2468:	20000394 	.word	0x20000394

0000246c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    246c:	b500      	push	{lr}
    246e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2470:	466a      	mov	r2, sp
    2472:	2309      	movs	r3, #9
    2474:	7013      	strb	r3, [r2, #0]
    2476:	3301      	adds	r3, #1
    2478:	7053      	strb	r3, [r2, #1]
    247a:	3301      	adds	r3, #1
    247c:	7093      	strb	r3, [r2, #2]
    247e:	3301      	adds	r3, #1
    2480:	70d3      	strb	r3, [r2, #3]
    2482:	3301      	adds	r3, #1
    2484:	7113      	strb	r3, [r2, #4]
    2486:	3301      	adds	r3, #1
    2488:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    248a:	4b03      	ldr	r3, [pc, #12]	; (2498 <_sercom_get_interrupt_vector+0x2c>)
    248c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    248e:	466b      	mov	r3, sp
    2490:	5618      	ldrsb	r0, [r3, r0]
}
    2492:	b003      	add	sp, #12
    2494:	bd00      	pop	{pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	000023bd 	.word	0x000023bd

0000249c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    249c:	b510      	push	{r4, lr}
    249e:	4b02      	ldr	r3, [pc, #8]	; (24a8 <SERCOM0_Handler+0xc>)
    24a0:	2000      	movs	r0, #0
    24a2:	681b      	ldr	r3, [r3, #0]
    24a4:	4798      	blx	r3
    24a6:	bd10      	pop	{r4, pc}
    24a8:	20000270 	.word	0x20000270

000024ac <SERCOM1_Handler>:
    24ac:	b510      	push	{r4, lr}
    24ae:	4b02      	ldr	r3, [pc, #8]	; (24b8 <SERCOM1_Handler+0xc>)
    24b0:	2001      	movs	r0, #1
    24b2:	685b      	ldr	r3, [r3, #4]
    24b4:	4798      	blx	r3
    24b6:	bd10      	pop	{r4, pc}
    24b8:	20000270 	.word	0x20000270

000024bc <SERCOM2_Handler>:
    24bc:	b510      	push	{r4, lr}
    24be:	4b02      	ldr	r3, [pc, #8]	; (24c8 <SERCOM2_Handler+0xc>)
    24c0:	2002      	movs	r0, #2
    24c2:	689b      	ldr	r3, [r3, #8]
    24c4:	4798      	blx	r3
    24c6:	bd10      	pop	{r4, pc}
    24c8:	20000270 	.word	0x20000270

000024cc <SERCOM3_Handler>:
    24cc:	b510      	push	{r4, lr}
    24ce:	4b02      	ldr	r3, [pc, #8]	; (24d8 <SERCOM3_Handler+0xc>)
    24d0:	2003      	movs	r0, #3
    24d2:	68db      	ldr	r3, [r3, #12]
    24d4:	4798      	blx	r3
    24d6:	bd10      	pop	{r4, pc}
    24d8:	20000270 	.word	0x20000270

000024dc <SERCOM4_Handler>:
    24dc:	b510      	push	{r4, lr}
    24de:	4b02      	ldr	r3, [pc, #8]	; (24e8 <SERCOM4_Handler+0xc>)
    24e0:	2004      	movs	r0, #4
    24e2:	691b      	ldr	r3, [r3, #16]
    24e4:	4798      	blx	r3
    24e6:	bd10      	pop	{r4, pc}
    24e8:	20000270 	.word	0x20000270

000024ec <SERCOM5_Handler>:
    24ec:	b510      	push	{r4, lr}
    24ee:	4b02      	ldr	r3, [pc, #8]	; (24f8 <SERCOM5_Handler+0xc>)
    24f0:	2005      	movs	r0, #5
    24f2:	695b      	ldr	r3, [r3, #20]
    24f4:	4798      	blx	r3
    24f6:	bd10      	pop	{r4, pc}
    24f8:	20000270 	.word	0x20000270

000024fc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    24fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24fe:	464e      	mov	r6, r9
    2500:	4645      	mov	r5, r8
    2502:	46de      	mov	lr, fp
    2504:	4657      	mov	r7, sl
    2506:	b5e0      	push	{r5, r6, r7, lr}
    2508:	0005      	movs	r5, r0
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    250a:	4bbc      	ldr	r3, [pc, #752]	; (27fc <usart_init+0x300>)
{
    250c:	000c      	movs	r4, r1
    250e:	b091      	sub	sp, #68	; 0x44
	module->hw = hw;
    2510:	6029      	str	r1, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2512:	0008      	movs	r0, r1
{
    2514:	4690      	mov	r8, r2
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2516:	4699      	mov	r9, r3
    2518:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    251a:	2301      	movs	r3, #1
    251c:	6822      	ldr	r2, [r4, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    251e:	0006      	movs	r6, r0
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2520:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2522:	4213      	tst	r3, r2
    2524:	d006      	beq.n	2534 <usart_init+0x38>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2526:	b011      	add	sp, #68	; 0x44
    2528:	bc3c      	pop	{r2, r3, r4, r5}
    252a:	4690      	mov	r8, r2
    252c:	4699      	mov	r9, r3
    252e:	46a2      	mov	sl, r4
    2530:	46ab      	mov	fp, r5
    2532:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2534:	2702      	movs	r7, #2
    2536:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    2538:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    253a:	4017      	ands	r7, r2
    253c:	d1f3      	bne.n	2526 <usart_init+0x2a>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    253e:	1cb0      	adds	r0, r6, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2540:	4083      	lsls	r3, r0
			PM->APBCMASK.reg |= mask;
    2542:	4aaf      	ldr	r2, [pc, #700]	; (2800 <usart_init+0x304>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2544:	3614      	adds	r6, #20
    2546:	6a11      	ldr	r1, [r2, #32]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2548:	b2f6      	uxtb	r6, r6
    254a:	430b      	orrs	r3, r1
    254c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    254e:	232d      	movs	r3, #45	; 0x2d
    2550:	469a      	mov	sl, r3
    2552:	4643      	mov	r3, r8
    2554:	4652      	mov	r2, sl
    2556:	5c9b      	ldrb	r3, [r3, r2]
    2558:	a90a      	add	r1, sp, #40	; 0x28
    255a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    255c:	0030      	movs	r0, r6
    255e:	4ba9      	ldr	r3, [pc, #676]	; (2804 <usart_init+0x308>)
    2560:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2562:	0030      	movs	r0, r6
    2564:	4ba8      	ldr	r3, [pc, #672]	; (2808 <usart_init+0x30c>)
    2566:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2568:	4652      	mov	r2, sl
    256a:	4643      	mov	r3, r8
    256c:	2100      	movs	r1, #0
    256e:	5c98      	ldrb	r0, [r3, r2]
    2570:	4ba6      	ldr	r3, [pc, #664]	; (280c <usart_init+0x310>)
    2572:	4798      	blx	r3
	module->character_size = config->character_size;
    2574:	4643      	mov	r3, r8
    2576:	7adb      	ldrb	r3, [r3, #11]
	module->receiver_enabled = config->receiver_enable;
    2578:	4642      	mov	r2, r8
	module->character_size = config->character_size;
    257a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    257c:	2324      	movs	r3, #36	; 0x24
    257e:	5cd3      	ldrb	r3, [r2, r3]
	uint16_t baud  = 0;
    2580:	ae0c      	add	r6, sp, #48	; 0x30
	module->receiver_enabled = config->receiver_enable;
    2582:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2584:	2325      	movs	r3, #37	; 0x25
    2586:	5cd3      	ldrb	r3, [r2, r3]
    2588:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    258a:	7ed3      	ldrb	r3, [r2, #27]
    258c:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    258e:	7f13      	ldrb	r3, [r2, #28]
    2590:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2592:	682b      	ldr	r3, [r5, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2594:	0018      	movs	r0, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2596:	469a      	mov	sl, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2598:	47c8      	blx	r9
	switch (config->sample_rate) {
    259a:	4643      	mov	r3, r8
	uint16_t baud  = 0;
    259c:	8037      	strh	r7, [r6, #0]
	switch (config->sample_rate) {
    259e:	8a1a      	ldrh	r2, [r3, #16]
    25a0:	2380      	movs	r3, #128	; 0x80
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    25a2:	3014      	adds	r0, #20
	switch (config->sample_rate) {
    25a4:	9202      	str	r2, [sp, #8]
    25a6:	01db      	lsls	r3, r3, #7
    25a8:	429a      	cmp	r2, r3
    25aa:	d100      	bne.n	25ae <usart_init+0xb2>
    25ac:	e0d2      	b.n	2754 <usart_init+0x258>
    25ae:	d800      	bhi.n	25b2 <usart_init+0xb6>
    25b0:	e0ee      	b.n	2790 <usart_init+0x294>
    25b2:	23c0      	movs	r3, #192	; 0xc0
    25b4:	01db      	lsls	r3, r3, #7
    25b6:	429a      	cmp	r2, r3
    25b8:	d100      	bne.n	25bc <usart_init+0xc0>
    25ba:	e0f7      	b.n	27ac <usart_init+0x2b0>
    25bc:	2380      	movs	r3, #128	; 0x80
    25be:	021b      	lsls	r3, r3, #8
    25c0:	429a      	cmp	r2, r3
    25c2:	d000      	beq.n	25c6 <usart_init+0xca>
    25c4:	e0ed      	b.n	27a2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    25c6:	2303      	movs	r3, #3
    25c8:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    25ca:	2300      	movs	r3, #0
    25cc:	9308      	str	r3, [sp, #32]
	ctrla = (uint32_t)config->data_order |
    25ce:	4643      	mov	r3, r8
    25d0:	681b      	ldr	r3, [r3, #0]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    25d2:	4642      	mov	r2, r8
	ctrla = (uint32_t)config->data_order |
    25d4:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    25d6:	4643      	mov	r3, r8
    25d8:	68db      	ldr	r3, [r3, #12]
    25da:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    25dc:	4643      	mov	r3, r8
    25de:	695b      	ldr	r3, [r3, #20]
    25e0:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    25e2:	4643      	mov	r3, r8
    25e4:	7e1b      	ldrb	r3, [r3, #24]
    25e6:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    25e8:	2326      	movs	r3, #38	; 0x26
    25ea:	5cd3      	ldrb	r3, [r2, r3]
    25ec:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
    25ee:	6853      	ldr	r3, [r2, #4]
    25f0:	469b      	mov	fp, r3
	switch (transfer_mode)
    25f2:	2b00      	cmp	r3, #0
    25f4:	d100      	bne.n	25f8 <usart_init+0xfc>
    25f6:	e0b7      	b.n	2768 <usart_init+0x26c>
    25f8:	2380      	movs	r3, #128	; 0x80
    25fa:	055b      	lsls	r3, r3, #21
    25fc:	459b      	cmp	fp, r3
    25fe:	d000      	beq.n	2602 <usart_init+0x106>
    2600:	e0b0      	b.n	2764 <usart_init+0x268>
			if (!config->use_external_clock) {
    2602:	2327      	movs	r3, #39	; 0x27
    2604:	5cd3      	ldrb	r3, [r2, r3]
    2606:	2100      	movs	r1, #0
    2608:	2b00      	cmp	r3, #0
    260a:	d100      	bne.n	260e <usart_init+0x112>
    260c:	e0ea      	b.n	27e4 <usart_init+0x2e8>
	if(config->encoding_format_enable) {
    260e:	4643      	mov	r3, r8
    2610:	7e5b      	ldrb	r3, [r3, #25]
    2612:	2b00      	cmp	r3, #0
    2614:	d003      	beq.n	261e <usart_init+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2616:	4643      	mov	r3, r8
    2618:	4652      	mov	r2, sl
    261a:	7e9b      	ldrb	r3, [r3, #26]
    261c:	7393      	strb	r3, [r2, #14]
    261e:	682a      	ldr	r2, [r5, #0]
    2620:	9f02      	ldr	r7, [sp, #8]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2622:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2624:	2b00      	cmp	r3, #0
    2626:	d1fc      	bne.n	2622 <usart_init+0x126>
	usart_hw->BAUD.reg = baud;
    2628:	4653      	mov	r3, sl
	ctrla |= transfer_mode;
    262a:	9a04      	ldr	r2, [sp, #16]
	usart_hw->BAUD.reg = baud;
    262c:	8199      	strh	r1, [r3, #12]
	ctrla |= transfer_mode;
    262e:	9b03      	ldr	r3, [sp, #12]
    2630:	4313      	orrs	r3, r2
    2632:	9a05      	ldr	r2, [sp, #20]
    2634:	4313      	orrs	r3, r2
    2636:	465a      	mov	r2, fp
    2638:	4313      	orrs	r3, r2
    263a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    263c:	9b06      	ldr	r3, [sp, #24]
	if (config->use_external_clock == false) {
    263e:	4642      	mov	r2, r8
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2640:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2642:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2644:	9b07      	ldr	r3, [sp, #28]
    2646:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2648:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    264a:	2327      	movs	r3, #39	; 0x27
    264c:	5cd3      	ldrb	r3, [r2, r3]
    264e:	2b00      	cmp	r3, #0
    2650:	d101      	bne.n	2656 <usart_init+0x15a>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2652:	3304      	adds	r3, #4
    2654:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2656:	4643      	mov	r3, r8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2658:	4642      	mov	r2, r8
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    265a:	7e5b      	ldrb	r3, [r3, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    265c:	7f12      	ldrb	r2, [r2, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    265e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2660:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2662:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2664:	4642      	mov	r2, r8
    2666:	7f52      	ldrb	r2, [r2, #29]
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2668:	4641      	mov	r1, r8
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    266a:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    266c:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    266e:	2224      	movs	r2, #36	; 0x24
    2670:	5c8a      	ldrb	r2, [r1, r2]
    2672:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2674:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2676:	2225      	movs	r2, #37	; 0x25
    2678:	5c8a      	ldrb	r2, [r1, r2]
	ctrlb |= (uint32_t)config->character_size;
    267a:	7a89      	ldrb	r1, [r1, #10]
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    267c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    267e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2680:	4642      	mov	r2, r8
    2682:	7ad2      	ldrb	r2, [r2, #11]
    2684:	4311      	orrs	r1, r2
    2686:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2688:	4643      	mov	r3, r8
    268a:	891b      	ldrh	r3, [r3, #8]
    268c:	2bff      	cmp	r3, #255	; 0xff
    268e:	d100      	bne.n	2692 <usart_init+0x196>
    2690:	e091      	b.n	27b6 <usart_init+0x2ba>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2692:	2280      	movs	r2, #128	; 0x80
    2694:	0452      	lsls	r2, r2, #17
    2696:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2698:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    269a:	232c      	movs	r3, #44	; 0x2c
    269c:	4642      	mov	r2, r8
    269e:	5cd3      	ldrb	r3, [r2, r3]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d103      	bne.n	26ac <usart_init+0x1b0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    26a4:	4b5a      	ldr	r3, [pc, #360]	; (2810 <usart_init+0x314>)
    26a6:	789b      	ldrb	r3, [r3, #2]
    26a8:	079b      	lsls	r3, r3, #30
    26aa:	d501      	bpl.n	26b0 <usart_init+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    26ac:	2380      	movs	r3, #128	; 0x80
    26ae:	431f      	orrs	r7, r3
    26b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26b4:	2b00      	cmp	r3, #0
    26b6:	d1fc      	bne.n	26b2 <usart_init+0x1b6>
	usart_hw->CTRLB.reg = ctrlb;
    26b8:	4653      	mov	r3, sl
    26ba:	6059      	str	r1, [r3, #4]
    26bc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26c0:	2b00      	cmp	r3, #0
    26c2:	d1fc      	bne.n	26be <usart_init+0x1c2>
	usart_hw->CTRLA.reg = ctrla;
    26c4:	4652      	mov	r2, sl
    26c6:	a908      	add	r1, sp, #32
    26c8:	6017      	str	r7, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    26ca:	734b      	strb	r3, [r1, #13]
	config->powersave    = false;
    26cc:	73cb      	strb	r3, [r1, #15]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    26ce:	738b      	strb	r3, [r1, #14]
	uint32_t pad_pinmuxes[] = {
    26d0:	4643      	mov	r3, r8
    26d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	config->mux_position = SYSTEM_PINMUX_GPIO;
    26d4:	2280      	movs	r2, #128	; 0x80
    26d6:	930c      	str	r3, [sp, #48]	; 0x30
    26d8:	4643      	mov	r3, r8
    26da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    26dc:	2700      	movs	r7, #0
    26de:	6073      	str	r3, [r6, #4]
    26e0:	4643      	mov	r3, r8
    26e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    26e4:	730a      	strb	r2, [r1, #12]
    26e6:	60b3      	str	r3, [r6, #8]
    26e8:	4643      	mov	r3, r8
    26ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    26ec:	60f3      	str	r3, [r6, #12]
			current_pinmux = _sercom_get_default_pad(hw, pad);
    26ee:	4b49      	ldr	r3, [pc, #292]	; (2814 <usart_init+0x318>)
    26f0:	469b      	mov	fp, r3
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    26f2:	4b49      	ldr	r3, [pc, #292]	; (2818 <usart_init+0x31c>)
    26f4:	469a      	mov	sl, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
    26f6:	00bb      	lsls	r3, r7, #2
    26f8:	58f0      	ldr	r0, [r6, r3]
    26fa:	b2f9      	uxtb	r1, r7
		if (current_pinmux == PINMUX_DEFAULT) {
    26fc:	2800      	cmp	r0, #0
    26fe:	d02e      	beq.n	275e <usart_init+0x262>
		if (current_pinmux != PINMUX_UNUSED) {
    2700:	1c43      	adds	r3, r0, #1
    2702:	d005      	beq.n	2710 <usart_init+0x214>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2704:	ab08      	add	r3, sp, #32
    2706:	7318      	strb	r0, [r3, #12]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2708:	0c00      	lsrs	r0, r0, #16
    270a:	b2c0      	uxtb	r0, r0
    270c:	a90b      	add	r1, sp, #44	; 0x2c
    270e:	47d0      	blx	sl
    2710:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2712:	2f04      	cmp	r7, #4
    2714:	d1ef      	bne.n	26f6 <usart_init+0x1fa>
		module->callback[i]            = NULL;
    2716:	0028      	movs	r0, r5
    2718:	2100      	movs	r1, #0
    271a:	2218      	movs	r2, #24
    271c:	4b3f      	ldr	r3, [pc, #252]	; (281c <usart_init+0x320>)
    271e:	300c      	adds	r0, #12
    2720:	4798      	blx	r3
	module->tx_buffer_ptr              = NULL;
    2722:	2200      	movs	r2, #0
	module->remaining_tx_buffer_length = 0x0000;
    2724:	2300      	movs	r3, #0
    2726:	85ea      	strh	r2, [r5, #46]	; 0x2e
	module->tx_buffer_ptr              = NULL;
    2728:	62aa      	str	r2, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    272a:	626a      	str	r2, [r5, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
    272c:	85aa      	strh	r2, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    272e:	3230      	adds	r2, #48	; 0x30
    2730:	54ab      	strb	r3, [r5, r2]
	module->callback_enable_mask       = 0x00;
    2732:	3201      	adds	r2, #1
    2734:	54ab      	strb	r3, [r5, r2]
	module->rx_status                  = STATUS_OK;
    2736:	3201      	adds	r2, #1
    2738:	54ab      	strb	r3, [r5, r2]
	module->tx_status                  = STATUS_OK;
    273a:	3201      	adds	r2, #1
    273c:	54ab      	strb	r3, [r5, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    273e:	6828      	ldr	r0, [r5, #0]
    2740:	47c8      	blx	r9
    2742:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2744:	4b36      	ldr	r3, [pc, #216]	; (2820 <usart_init+0x324>)
    2746:	4937      	ldr	r1, [pc, #220]	; (2824 <usart_init+0x328>)
    2748:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    274a:	4b37      	ldr	r3, [pc, #220]	; (2828 <usart_init+0x32c>)
    274c:	00a4      	lsls	r4, r4, #2
    274e:	50e5      	str	r5, [r4, r3]
	return status_code;
    2750:	2000      	movs	r0, #0
    2752:	e6e8      	b.n	2526 <usart_init+0x2a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2754:	2308      	movs	r3, #8
    2756:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2758:	2300      	movs	r3, #0
    275a:	9308      	str	r3, [sp, #32]
    275c:	e737      	b.n	25ce <usart_init+0xd2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    275e:	0020      	movs	r0, r4
    2760:	47d8      	blx	fp
    2762:	e7cd      	b.n	2700 <usart_init+0x204>
	switch (transfer_mode)
    2764:	2100      	movs	r1, #0
    2766:	e752      	b.n	260e <usart_init+0x112>
			if (config->use_external_clock) {
    2768:	2327      	movs	r3, #39	; 0x27
    276a:	4642      	mov	r2, r8
    276c:	5cd3      	ldrb	r3, [r2, r3]
    276e:	2b00      	cmp	r3, #0
    2770:	d02a      	beq.n	27c8 <usart_init+0x2cc>
				status_code =
    2772:	4641      	mov	r1, r8
    2774:	4640      	mov	r0, r8
    2776:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2778:	0032      	movs	r2, r6
    277a:	9300      	str	r3, [sp, #0]
    277c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    277e:	9b08      	ldr	r3, [sp, #32]
    2780:	6a00      	ldr	r0, [r0, #32]
    2782:	4f2a      	ldr	r7, [pc, #168]	; (282c <usart_init+0x330>)
    2784:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2786:	2800      	cmp	r0, #0
    2788:	d000      	beq.n	278c <usart_init+0x290>
    278a:	e6cc      	b.n	2526 <usart_init+0x2a>
    278c:	8831      	ldrh	r1, [r6, #0]
    278e:	e73e      	b.n	260e <usart_init+0x112>
	switch (config->sample_rate) {
    2790:	2380      	movs	r3, #128	; 0x80
    2792:	019b      	lsls	r3, r3, #6
    2794:	429a      	cmp	r2, r3
    2796:	d104      	bne.n	27a2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2798:	2310      	movs	r3, #16
    279a:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    279c:	3b0f      	subs	r3, #15
    279e:	9308      	str	r3, [sp, #32]
    27a0:	e715      	b.n	25ce <usart_init+0xd2>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    27a2:	2310      	movs	r3, #16
    27a4:	9309      	str	r3, [sp, #36]	; 0x24
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27a6:	2300      	movs	r3, #0
    27a8:	9308      	str	r3, [sp, #32]
    27aa:	e710      	b.n	25ce <usart_init+0xd2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    27ac:	2308      	movs	r3, #8
    27ae:	9309      	str	r3, [sp, #36]	; 0x24
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    27b0:	3b07      	subs	r3, #7
    27b2:	9308      	str	r3, [sp, #32]
    27b4:	e70b      	b.n	25ce <usart_init+0xd2>
		if(config->lin_slave_enable) {
    27b6:	4643      	mov	r3, r8
    27b8:	7edb      	ldrb	r3, [r3, #27]
    27ba:	2b00      	cmp	r3, #0
    27bc:	d100      	bne.n	27c0 <usart_init+0x2c4>
    27be:	e76c      	b.n	269a <usart_init+0x19e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    27c0:	2380      	movs	r3, #128	; 0x80
    27c2:	04db      	lsls	r3, r3, #19
    27c4:	431f      	orrs	r7, r3
    27c6:	e768      	b.n	269a <usart_init+0x19e>
						_sercom_get_async_baud_val(config->baudrate,
    27c8:	6a13      	ldr	r3, [r2, #32]
    27ca:	b2c0      	uxtb	r0, r0
    27cc:	001f      	movs	r7, r3
    27ce:	4b18      	ldr	r3, [pc, #96]	; (2830 <usart_init+0x334>)
    27d0:	4798      	blx	r3
				status_code =
    27d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
						_sercom_get_async_baud_val(config->baudrate,
    27d4:	0001      	movs	r1, r0
				status_code =
    27d6:	9300      	str	r3, [sp, #0]
    27d8:	0032      	movs	r2, r6
    27da:	9b08      	ldr	r3, [sp, #32]
    27dc:	0038      	movs	r0, r7
    27de:	4f13      	ldr	r7, [pc, #76]	; (282c <usart_init+0x330>)
    27e0:	47b8      	blx	r7
    27e2:	e7d0      	b.n	2786 <usart_init+0x28a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    27e4:	6a13      	ldr	r3, [r2, #32]
    27e6:	b2c0      	uxtb	r0, r0
    27e8:	001f      	movs	r7, r3
    27ea:	4b11      	ldr	r3, [pc, #68]	; (2830 <usart_init+0x334>)
    27ec:	4798      	blx	r3
    27ee:	0032      	movs	r2, r6
    27f0:	0001      	movs	r1, r0
    27f2:	4b10      	ldr	r3, [pc, #64]	; (2834 <usart_init+0x338>)
    27f4:	0038      	movs	r0, r7
    27f6:	4798      	blx	r3
    27f8:	e7c5      	b.n	2786 <usart_init+0x28a>
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	000023bd 	.word	0x000023bd
    2800:	40000400 	.word	0x40000400
    2804:	00002df1 	.word	0x00002df1
    2808:	00002e55 	.word	0x00002e55
    280c:	00002215 	.word	0x00002215
    2810:	41002000 	.word	0x41002000
    2814:	0000225d 	.word	0x0000225d
    2818:	00002f65 	.word	0x00002f65
    281c:	000061a7 	.word	0x000061a7
    2820:	00002425 	.word	0x00002425
    2824:	000028fd 	.word	0x000028fd
    2828:	20000394 	.word	0x20000394
    282c:	00001fad 	.word	0x00001fad
    2830:	00002e85 	.word	0x00002e85
    2834:	00001f85 	.word	0x00001f85

00002838 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2838:	1c93      	adds	r3, r2, #2
    283a:	009b      	lsls	r3, r3, #2
    283c:	18c3      	adds	r3, r0, r3
    283e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2840:	2301      	movs	r3, #1
    2842:	4093      	lsls	r3, r2
    2844:	2130      	movs	r1, #48	; 0x30
    2846:	001a      	movs	r2, r3
    2848:	5c43      	ldrb	r3, [r0, r1]
    284a:	4313      	orrs	r3, r2
    284c:	5443      	strb	r3, [r0, r1]
}
    284e:	4770      	bx	lr

00002850 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2852:	0005      	movs	r5, r0
    2854:	000e      	movs	r6, r1
    2856:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2858:	2017      	movs	r0, #23
	if (length == 0) {
    285a:	2a00      	cmp	r2, #0
    285c:	d100      	bne.n	2860 <usart_write_buffer_job+0x10>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    285e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    2860:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    2862:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    2864:	2b00      	cmp	r3, #0
    2866:	d0fa      	beq.n	285e <usart_write_buffer_job+0xe>
	cpu_irq_enter_critical();
    2868:	4b0a      	ldr	r3, [pc, #40]	; (2894 <usart_write_buffer_job+0x44>)
	SercomUsart *const usart_hw = &(module->hw->USART);
    286a:	682f      	ldr	r7, [r5, #0]
    286c:	4798      	blx	r3
	if (module->remaining_tx_buffer_length > 0) {
    286e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2870:	2b00      	cmp	r3, #0
    2872:	d003      	beq.n	287c <usart_write_buffer_job+0x2c>
	cpu_irq_leave_critical();
    2874:	4b08      	ldr	r3, [pc, #32]	; (2898 <usart_write_buffer_job+0x48>)
    2876:	4798      	blx	r3
		return STATUS_BUSY;
    2878:	2005      	movs	r0, #5
    287a:	e7f0      	b.n	285e <usart_write_buffer_job+0xe>
    287c:	4b06      	ldr	r3, [pc, #24]	; (2898 <usart_write_buffer_job+0x48>)
	module->remaining_tx_buffer_length = length;
    287e:	85ec      	strh	r4, [r5, #46]	; 0x2e
    2880:	4798      	blx	r3
	module->tx_status                  = STATUS_BUSY;
    2882:	2333      	movs	r3, #51	; 0x33
    2884:	2205      	movs	r2, #5
	module->tx_buffer_ptr              = tx_data;
    2886:	62ae      	str	r6, [r5, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2888:	54ea      	strb	r2, [r5, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    288a:	3b32      	subs	r3, #50	; 0x32
    288c:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    288e:	2000      	movs	r0, #0
    2890:	e7e5      	b.n	285e <usart_write_buffer_job+0xe>
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	00001795 	.word	0x00001795
    2898:	000017d1 	.word	0x000017d1

0000289c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    289e:	0005      	movs	r5, r0
    28a0:	000e      	movs	r6, r1
    28a2:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    28a4:	2017      	movs	r0, #23
	if (length == 0) {
    28a6:	2a00      	cmp	r2, #0
    28a8:	d100      	bne.n	28ac <usart_read_buffer_job+0x10>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    28aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    28ac:	79ab      	ldrb	r3, [r5, #6]
		return STATUS_ERR_DENIED;
    28ae:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    28b0:	2b00      	cmp	r3, #0
    28b2:	d0fa      	beq.n	28aa <usart_read_buffer_job+0xe>
	cpu_irq_enter_critical();
    28b4:	4b0f      	ldr	r3, [pc, #60]	; (28f4 <usart_read_buffer_job+0x58>)
	SercomUsart *const usart_hw = &(module->hw->USART);
    28b6:	682f      	ldr	r7, [r5, #0]
    28b8:	4798      	blx	r3
	if (module->remaining_rx_buffer_length > 0) {
    28ba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    28bc:	2b00      	cmp	r3, #0
    28be:	d003      	beq.n	28c8 <usart_read_buffer_job+0x2c>
	cpu_irq_leave_critical();
    28c0:	4b0d      	ldr	r3, [pc, #52]	; (28f8 <usart_read_buffer_job+0x5c>)
    28c2:	4798      	blx	r3
		return STATUS_BUSY;
    28c4:	2005      	movs	r0, #5
    28c6:	e7f0      	b.n	28aa <usart_read_buffer_job+0xe>
    28c8:	4b0b      	ldr	r3, [pc, #44]	; (28f8 <usart_read_buffer_job+0x5c>)
	module->remaining_rx_buffer_length = length;
    28ca:	85ac      	strh	r4, [r5, #44]	; 0x2c
    28cc:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
    28ce:	2332      	movs	r3, #50	; 0x32
    28d0:	2205      	movs	r2, #5
	module->rx_buffer_ptr              = rx_data;
    28d2:	626e      	str	r6, [r5, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    28d4:	54ea      	strb	r2, [r5, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    28d6:	3b2e      	subs	r3, #46	; 0x2e
    28d8:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    28da:	7a2b      	ldrb	r3, [r5, #8]
    28dc:	2b00      	cmp	r3, #0
    28de:	d001      	beq.n	28e4 <usart_read_buffer_job+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    28e0:	2320      	movs	r3, #32
    28e2:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    28e4:	7a6b      	ldrb	r3, [r5, #9]
	return STATUS_OK;
    28e6:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    28e8:	2b00      	cmp	r3, #0
    28ea:	d0de      	beq.n	28aa <usart_read_buffer_job+0xe>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    28ec:	2308      	movs	r3, #8
    28ee:	75bb      	strb	r3, [r7, #22]
    28f0:	e7db      	b.n	28aa <usart_read_buffer_job+0xe>
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	00001795 	.word	0x00001795
    28f8:	000017d1 	.word	0x000017d1

000028fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    28fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    28fe:	4b62      	ldr	r3, [pc, #392]	; (2a88 <_usart_interrupt_handler+0x18c>)
    2900:	0080      	lsls	r0, r0, #2
    2902:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2904:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2906:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2908:	2b00      	cmp	r3, #0
    290a:	d1fc      	bne.n	2906 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    290c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    290e:	7da6      	ldrb	r6, [r4, #22]
	callback_status = module->callback_reg_mask &
    2910:	2231      	movs	r2, #49	; 0x31
    2912:	401e      	ands	r6, r3
    2914:	2330      	movs	r3, #48	; 0x30
    2916:	5caf      	ldrb	r7, [r5, r2]
    2918:	5ceb      	ldrb	r3, [r5, r3]
    291a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    291c:	2301      	movs	r3, #1
    291e:	4233      	tst	r3, r6
    2920:	d019      	beq.n	2956 <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
    2922:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    2924:	2a00      	cmp	r2, #0
    2926:	d04d      	beq.n	29c4 <_usart_interrupt_handler+0xc8>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2928:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    292a:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    292c:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
    292e:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2930:	7969      	ldrb	r1, [r5, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2932:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2934:	2901      	cmp	r1, #1
    2936:	d100      	bne.n	293a <_usart_interrupt_handler+0x3e>
    2938:	e075      	b.n	2a26 <_usart_interrupt_handler+0x12a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    293a:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    293c:	05db      	lsls	r3, r3, #23
    293e:	0ddb      	lsrs	r3, r3, #23
    2940:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2942:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2944:	3b01      	subs	r3, #1
    2946:	b29b      	uxth	r3, r3
    2948:	85eb      	strh	r3, [r5, #46]	; 0x2e
    294a:	2b00      	cmp	r3, #0
    294c:	d103      	bne.n	2956 <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    294e:	3301      	adds	r3, #1
    2950:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2952:	3301      	adds	r3, #1
    2954:	75a3      	strb	r3, [r4, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2956:	2302      	movs	r3, #2
    2958:	4233      	tst	r3, r6
    295a:	d005      	beq.n	2968 <_usart_interrupt_handler+0x6c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
		module->tx_status = STATUS_OK;
    295c:	2200      	movs	r2, #0
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    295e:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2960:	3331      	adds	r3, #49	; 0x31
    2962:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2964:	07fb      	lsls	r3, r7, #31
    2966:	d43b      	bmi.n	29e0 <_usart_interrupt_handler+0xe4>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2968:	2304      	movs	r3, #4
    296a:	4233      	tst	r3, r6
    296c:	d012      	beq.n	2994 <_usart_interrupt_handler+0x98>

		if (module->remaining_rx_buffer_length) {
    296e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    2970:	2a00      	cmp	r2, #0
    2972:	d025      	beq.n	29c0 <_usart_interrupt_handler+0xc4>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2974:	8b63      	ldrh	r3, [r4, #26]
    2976:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2978:	071a      	lsls	r2, r3, #28
    297a:	d535      	bpl.n	29e8 <_usart_interrupt_handler+0xec>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    297c:	2237      	movs	r2, #55	; 0x37
    297e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2980:	d035      	beq.n	29ee <_usart_interrupt_handler+0xf2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2982:	2202      	movs	r2, #2
    2984:	421a      	tst	r2, r3
    2986:	d054      	beq.n	2a32 <_usart_interrupt_handler+0x136>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2988:	211a      	movs	r1, #26
    298a:	2332      	movs	r3, #50	; 0x32
    298c:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    298e:	8362      	strh	r2, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2990:	077b      	lsls	r3, r7, #29
    2992:	d459      	bmi.n	2a48 <_usart_interrupt_handler+0x14c>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2994:	2310      	movs	r3, #16
    2996:	4233      	tst	r3, r6
    2998:	d003      	beq.n	29a2 <_usart_interrupt_handler+0xa6>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    299a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    299c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    299e:	423b      	tst	r3, r7
    29a0:	d116      	bne.n	29d0 <_usart_interrupt_handler+0xd4>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    29a2:	2320      	movs	r3, #32
    29a4:	4233      	tst	r3, r6
    29a6:	d003      	beq.n	29b0 <_usart_interrupt_handler+0xb4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    29a8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    29aa:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    29ac:	073b      	lsls	r3, r7, #28
    29ae:	d413      	bmi.n	29d8 <_usart_interrupt_handler+0xdc>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    29b0:	2308      	movs	r3, #8
    29b2:	4233      	tst	r3, r6
    29b4:	d003      	beq.n	29be <_usart_interrupt_handler+0xc2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    29b6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    29b8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    29ba:	06bb      	lsls	r3, r7, #26
    29bc:	d404      	bmi.n	29c8 <_usart_interrupt_handler+0xcc>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    29be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    29c0:	7523      	strb	r3, [r4, #20]
    29c2:	e7e7      	b.n	2994 <_usart_interrupt_handler+0x98>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    29c4:	7523      	strb	r3, [r4, #20]
    29c6:	e7c6      	b.n	2956 <_usart_interrupt_handler+0x5a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    29c8:	6a2b      	ldr	r3, [r5, #32]
    29ca:	0028      	movs	r0, r5
    29cc:	4798      	blx	r3
}
    29ce:	e7f6      	b.n	29be <_usart_interrupt_handler+0xc2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    29d0:	0028      	movs	r0, r5
    29d2:	69eb      	ldr	r3, [r5, #28]
    29d4:	4798      	blx	r3
    29d6:	e7e4      	b.n	29a2 <_usart_interrupt_handler+0xa6>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    29d8:	0028      	movs	r0, r5
    29da:	69ab      	ldr	r3, [r5, #24]
    29dc:	4798      	blx	r3
    29de:	e7e7      	b.n	29b0 <_usart_interrupt_handler+0xb4>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    29e0:	0028      	movs	r0, r5
    29e2:	68eb      	ldr	r3, [r5, #12]
    29e4:	4798      	blx	r3
    29e6:	e7bf      	b.n	2968 <_usart_interrupt_handler+0x6c>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    29e8:	223f      	movs	r2, #63	; 0x3f
    29ea:	4013      	ands	r3, r2
			if (error_code) {
    29ec:	d1c9      	bne.n	2982 <_usart_interrupt_handler+0x86>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    29ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
    29f0:	6a69      	ldr	r1, [r5, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    29f2:	05db      	lsls	r3, r3, #23
    29f4:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
    29f6:	b2da      	uxtb	r2, r3
    29f8:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
    29fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    29fc:	1c51      	adds	r1, r2, #1
    29fe:	6269      	str	r1, [r5, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a00:	7969      	ldrb	r1, [r5, #5]
    2a02:	2901      	cmp	r1, #1
    2a04:	d029      	beq.n	2a5a <_usart_interrupt_handler+0x15e>
				if(--(module->remaining_rx_buffer_length) == 0) {
    2a06:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2a08:	3b01      	subs	r3, #1
    2a0a:	b29b      	uxth	r3, r3
    2a0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d1c0      	bne.n	2994 <_usart_interrupt_handler+0x98>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2a12:	2204      	movs	r2, #4
    2a14:	7522      	strb	r2, [r4, #20]
					module->rx_status = STATUS_OK;
    2a16:	322e      	adds	r2, #46	; 0x2e
    2a18:	54ab      	strb	r3, [r5, r2]
					if (callback_status
    2a1a:	07bb      	lsls	r3, r7, #30
    2a1c:	d5ba      	bpl.n	2994 <_usart_interrupt_handler+0x98>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2a1e:	0028      	movs	r0, r5
    2a20:	692b      	ldr	r3, [r5, #16]
    2a22:	4798      	blx	r3
    2a24:	e7b6      	b.n	2994 <_usart_interrupt_handler+0x98>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2a26:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
    2a28:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2a2a:	0209      	lsls	r1, r1, #8
    2a2c:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2a2e:	62aa      	str	r2, [r5, #40]	; 0x28
    2a30:	e784      	b.n	293c <_usart_interrupt_handler+0x40>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a32:	2204      	movs	r2, #4
    2a34:	421a      	tst	r2, r3
    2a36:	d10b      	bne.n	2a50 <_usart_interrupt_handler+0x154>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2a38:	2201      	movs	r2, #1
    2a3a:	421a      	tst	r2, r3
    2a3c:	d013      	beq.n	2a66 <_usart_interrupt_handler+0x16a>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2a3e:	2113      	movs	r1, #19
    2a40:	2332      	movs	r3, #50	; 0x32
    2a42:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2a44:	8362      	strh	r2, [r4, #26]
    2a46:	e7a3      	b.n	2990 <_usart_interrupt_handler+0x94>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2a48:	0028      	movs	r0, r5
    2a4a:	696b      	ldr	r3, [r5, #20]
    2a4c:	4798      	blx	r3
    2a4e:	e7a1      	b.n	2994 <_usart_interrupt_handler+0x98>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2a50:	211e      	movs	r1, #30
    2a52:	2332      	movs	r3, #50	; 0x32
    2a54:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2a56:	8362      	strh	r2, [r4, #26]
    2a58:	e79a      	b.n	2990 <_usart_interrupt_handler+0x94>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2a5a:	0a1b      	lsrs	r3, r3, #8
    2a5c:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2a60:	3301      	adds	r3, #1
    2a62:	626b      	str	r3, [r5, #36]	; 0x24
    2a64:	e7cf      	b.n	2a06 <_usart_interrupt_handler+0x10a>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2a66:	2210      	movs	r2, #16
    2a68:	421a      	tst	r2, r3
    2a6a:	d004      	beq.n	2a76 <_usart_interrupt_handler+0x17a>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2a6c:	2142      	movs	r1, #66	; 0x42
    2a6e:	2332      	movs	r3, #50	; 0x32
    2a70:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a72:	8362      	strh	r2, [r4, #26]
    2a74:	e78c      	b.n	2990 <_usart_interrupt_handler+0x94>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a76:	2220      	movs	r2, #32
    2a78:	421a      	tst	r2, r3
    2a7a:	d100      	bne.n	2a7e <_usart_interrupt_handler+0x182>
    2a7c:	e788      	b.n	2990 <_usart_interrupt_handler+0x94>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2a7e:	2141      	movs	r1, #65	; 0x41
    2a80:	2332      	movs	r3, #50	; 0x32
    2a82:	54e9      	strb	r1, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a84:	8362      	strh	r2, [r4, #26]
    2a86:	e783      	b.n	2990 <_usart_interrupt_handler+0x94>
    2a88:	20000394 	.word	0x20000394

00002a8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2a8c:	b510      	push	{r4, lr}
	switch (clock_source) {
    2a8e:	2808      	cmp	r0, #8
    2a90:	d82b      	bhi.n	2aea <system_clock_source_get_hz+0x5e>
    2a92:	4b1b      	ldr	r3, [pc, #108]	; (2b00 <system_clock_source_get_hz+0x74>)
    2a94:	0080      	lsls	r0, r0, #2
    2a96:	581b      	ldr	r3, [r3, r0]
    2a98:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2a9a:	2080      	movs	r0, #128	; 0x80
    2a9c:	0200      	lsls	r0, r0, #8
#endif

	default:
		return 0;
	}
}
    2a9e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc32k.frequency;
    2aa0:	4b18      	ldr	r3, [pc, #96]	; (2b04 <system_clock_source_get_hz+0x78>)
    2aa2:	6958      	ldr	r0, [r3, #20]
    2aa4:	e7fb      	b.n	2a9e <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2aa6:	4b18      	ldr	r3, [pc, #96]	; (2b08 <system_clock_source_get_hz+0x7c>)
    2aa8:	4818      	ldr	r0, [pc, #96]	; (2b0c <system_clock_source_get_hz+0x80>)
    2aaa:	6a1b      	ldr	r3, [r3, #32]
    2aac:	059b      	lsls	r3, r3, #22
    2aae:	0f9b      	lsrs	r3, r3, #30
    2ab0:	40d8      	lsrs	r0, r3
    2ab2:	e7f4      	b.n	2a9e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ab4:	4c13      	ldr	r4, [pc, #76]	; (2b04 <system_clock_source_get_hz+0x78>)
			return 0;
    2ab6:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ab8:	6823      	ldr	r3, [r4, #0]
    2aba:	079b      	lsls	r3, r3, #30
    2abc:	d5ef      	bpl.n	2a9e <system_clock_source_get_hz+0x12>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2abe:	2210      	movs	r2, #16
    2ac0:	4911      	ldr	r1, [pc, #68]	; (2b08 <system_clock_source_get_hz+0x7c>)
    2ac2:	68cb      	ldr	r3, [r1, #12]
    2ac4:	421a      	tst	r2, r3
    2ac6:	d0fc      	beq.n	2ac2 <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2ac8:	6823      	ldr	r3, [r4, #0]
    2aca:	075b      	lsls	r3, r3, #29
    2acc:	d40f      	bmi.n	2aee <system_clock_source_get_hz+0x62>
		return 48000000UL;
    2ace:	4810      	ldr	r0, [pc, #64]	; (2b10 <system_clock_source_get_hz+0x84>)
    2ad0:	e7e5      	b.n	2a9e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc.frequency;
    2ad2:	4b0c      	ldr	r3, [pc, #48]	; (2b04 <system_clock_source_get_hz+0x78>)
    2ad4:	6918      	ldr	r0, [r3, #16]
    2ad6:	e7e2      	b.n	2a9e <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ad8:	2350      	movs	r3, #80	; 0x50
    2ada:	4a0b      	ldr	r2, [pc, #44]	; (2b08 <system_clock_source_get_hz+0x7c>)
			return 0;
    2adc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ade:	5cd3      	ldrb	r3, [r2, r3]
    2ae0:	075b      	lsls	r3, r3, #29
    2ae2:	d5dc      	bpl.n	2a9e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.dpll.frequency;
    2ae4:	4b07      	ldr	r3, [pc, #28]	; (2b04 <system_clock_source_get_hz+0x78>)
    2ae6:	68d8      	ldr	r0, [r3, #12]
    2ae8:	e7d9      	b.n	2a9e <system_clock_source_get_hz+0x12>
		return 0;
    2aea:	2000      	movs	r0, #0
    2aec:	e7d7      	b.n	2a9e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2aee:	4b09      	ldr	r3, [pc, #36]	; (2b14 <system_clock_source_get_hz+0x88>)
    2af0:	2000      	movs	r0, #0
    2af2:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2af4:	68a3      	ldr	r3, [r4, #8]
    2af6:	041b      	lsls	r3, r3, #16
    2af8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2afa:	4358      	muls	r0, r3
    2afc:	e7cf      	b.n	2a9e <system_clock_source_get_hz+0x12>
    2afe:	46c0      	nop			; (mov r8, r8)
    2b00:	000062f4 	.word	0x000062f4
    2b04:	20000288 	.word	0x20000288
    2b08:	40000800 	.word	0x40000800
    2b0c:	007a1200 	.word	0x007a1200
    2b10:	02dc6c00 	.word	0x02dc6c00
    2b14:	00002e85 	.word	0x00002e85

00002b18 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2b18:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2b1a:	7a03      	ldrb	r3, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2b1c:	8942      	ldrh	r2, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2b1e:	069b      	lsls	r3, r3, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2b20:	0592      	lsls	r2, r2, #22
    2b22:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2b24:	0c1b      	lsrs	r3, r3, #16
    2b26:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2b28:	4a17      	ldr	r2, [pc, #92]	; (2b88 <system_clock_source_dfll_set_config+0x70>)
    2b2a:	6053      	str	r3, [r2, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2b2c:	79c1      	ldrb	r1, [r0, #7]
    2b2e:	7983      	ldrb	r3, [r0, #6]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2b30:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    2b32:	430b      	orrs	r3, r1
			(uint32_t)config->quick_lock      |
    2b34:	8841      	ldrh	r1, [r0, #2]
    2b36:	4321      	orrs	r1, r4
    2b38:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2b3a:	7841      	ldrb	r1, [r0, #1]
    2b3c:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    2b3e:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
    2b40:	6013      	str	r3, [r2, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2b42:	7803      	ldrb	r3, [r0, #0]
    2b44:	2b04      	cmp	r3, #4
    2b46:	d010      	beq.n	2b6a <system_clock_source_dfll_set_config+0x52>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2b48:	2b20      	cmp	r3, #32
    2b4a:	d10d      	bne.n	2b68 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b4c:	7b03      	ldrb	r3, [r0, #12]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b4e:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b50:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2b52:	430b      	orrs	r3, r1
    2b54:	89c1      	ldrh	r1, [r0, #14]
    2b56:	480d      	ldr	r0, [pc, #52]	; (2b8c <system_clock_source_dfll_set_config+0x74>)
    2b58:	0409      	lsls	r1, r1, #16
    2b5a:	4001      	ands	r1, r0
    2b5c:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.mul =
    2b5e:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2b60:	6811      	ldr	r1, [r2, #0]
    2b62:	4b0b      	ldr	r3, [pc, #44]	; (2b90 <system_clock_source_dfll_set_config+0x78>)
    2b64:	430b      	orrs	r3, r1
    2b66:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2b68:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b6a:	7b01      	ldrb	r1, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b6c:	8a04      	ldrh	r4, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b6e:	0689      	lsls	r1, r1, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2b70:	89c0      	ldrh	r0, [r0, #14]
    2b72:	4321      	orrs	r1, r4
    2b74:	4c05      	ldr	r4, [pc, #20]	; (2b8c <system_clock_source_dfll_set_config+0x74>)
    2b76:	0400      	lsls	r0, r0, #16
    2b78:	4020      	ands	r0, r4
    2b7a:	4301      	orrs	r1, r0
		_system_clock_inst.dfll.mul =
    2b7c:	6091      	str	r1, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2b7e:	6811      	ldr	r1, [r2, #0]
    2b80:	430b      	orrs	r3, r1
    2b82:	6013      	str	r3, [r2, #0]
    2b84:	e7f0      	b.n	2b68 <system_clock_source_dfll_set_config+0x50>
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	20000288 	.word	0x20000288
    2b8c:	03ff0000 	.word	0x03ff0000
    2b90:	00000424 	.word	0x00000424

00002b94 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2b94:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2b96:	211e      	movs	r1, #30
{
    2b98:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2b9a:	4b42      	ldr	r3, [pc, #264]	; (2ca4 <system_clock_init+0x110>)
    2b9c:	00d2      	lsls	r2, r2, #3
    2b9e:	609a      	str	r2, [r3, #8]
    2ba0:	4a41      	ldr	r2, [pc, #260]	; (2ca8 <system_clock_init+0x114>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2ba2:	2400      	movs	r4, #0
    2ba4:	6853      	ldr	r3, [r2, #4]
{
    2ba6:	b089      	sub	sp, #36	; 0x24
    2ba8:	438b      	bics	r3, r1
    2baa:	391a      	subs	r1, #26
    2bac:	430b      	orrs	r3, r1
    2bae:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2bb0:	2301      	movs	r3, #1
    2bb2:	ad03      	add	r5, sp, #12
    2bb4:	4e3d      	ldr	r6, [pc, #244]	; (2cac <system_clock_init+0x118>)
    2bb6:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2bb8:	b2e0      	uxtb	r0, r4
    2bba:	0029      	movs	r1, r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bbc:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2bbe:	47b0      	blx	r6
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bc0:	2c25      	cmp	r4, #37	; 0x25
    2bc2:	d1f9      	bne.n	2bb8 <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2bc4:	2300      	movs	r3, #0
    2bc6:	2200      	movs	r2, #0
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2bc8:	71ab      	strb	r3, [r5, #6]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2bca:	806a      	strh	r2, [r5, #2]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2bcc:	71eb      	strb	r3, [r5, #7]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    2bce:	706b      	strb	r3, [r5, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2bd0:	3220      	adds	r2, #32
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2bd2:	4b37      	ldr	r3, [pc, #220]	; (2cb0 <system_clock_init+0x11c>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2bd4:	702a      	strb	r2, [r5, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2bd6:	681b      	ldr	r3, [r3, #0]
    2bd8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2bda:	2b3f      	cmp	r3, #63	; 0x3f
    2bdc:	d060      	beq.n	2ca0 <system_clock_init+0x10c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2bde:	722b      	strb	r3, [r5, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2be0:	2307      	movs	r3, #7
    2be2:	732b      	strb	r3, [r5, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2be4:	3303      	adds	r3, #3
    2be6:	81eb      	strh	r3, [r5, #14]
		dfll_conf.fine_value   = 0x1ff;
    2be8:	4b32      	ldr	r3, [pc, #200]	; (2cb4 <system_clock_init+0x120>)
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2bea:	0028      	movs	r0, r5
		dfll_conf.fine_value   = 0x1ff;
    2bec:	816b      	strh	r3, [r5, #10]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2bee:	3bff      	subs	r3, #255	; 0xff
    2bf0:	80ab      	strh	r3, [r5, #4]
		dfll_conf.multiply_factor = 48000;
    2bf2:	4b31      	ldr	r3, [pc, #196]	; (2cb8 <system_clock_init+0x124>)
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2bf4:	2702      	movs	r7, #2
		dfll_conf.multiply_factor = 48000;
    2bf6:	822b      	strh	r3, [r5, #16]
	system_clock_source_dfll_set_config(&dfll_conf);
    2bf8:	4b30      	ldr	r3, [pc, #192]	; (2cbc <system_clock_init+0x128>)
    2bfa:	4798      	blx	r3
	SYSCTRL->OSC8M = temp;
    2bfc:	2240      	movs	r2, #64	; 0x40
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2bfe:	4c29      	ldr	r4, [pc, #164]	; (2ca4 <system_clock_init+0x110>)
    2c00:	6a23      	ldr	r3, [r4, #32]
	SYSCTRL->OSC8M = temp;
    2c02:	4393      	bics	r3, r2
    2c04:	3240      	adds	r2, #64	; 0x40
    2c06:	4313      	orrs	r3, r2
    2c08:	4a2d      	ldr	r2, [pc, #180]	; (2cc0 <system_clock_init+0x12c>)
    2c0a:	4013      	ands	r3, r2
    2c0c:	6223      	str	r3, [r4, #32]
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2c0e:	6a23      	ldr	r3, [r4, #32]
    2c10:	433b      	orrs	r3, r7
    2c12:	6223      	str	r3, [r4, #32]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2c14:	4b2b      	ldr	r3, [pc, #172]	; (2cc4 <system_clock_init+0x130>)
    2c16:	4798      	blx	r3
	config->division_factor    = 1;
    2c18:	2301      	movs	r3, #1
	config->high_when_disabled = false;
    2c1a:	466a      	mov	r2, sp
	config->division_factor    = 1;
    2c1c:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    2c1e:	2300      	movs	r3, #0
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2c20:	4669      	mov	r1, sp
	config->high_when_disabled = false;
    2c22:	7053      	strb	r3, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2c24:	2206      	movs	r2, #6

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2c26:	2003      	movs	r0, #3
    2c28:	4e27      	ldr	r6, [pc, #156]	; (2cc8 <system_clock_init+0x134>)
	config->run_in_standby     = false;
    2c2a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2c2c:	724b      	strb	r3, [r1, #9]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2c2e:	700a      	strb	r2, [r1, #0]
    2c30:	47b0      	blx	r6
    2c32:	2003      	movs	r0, #3
    2c34:	4d25      	ldr	r5, [pc, #148]	; (2ccc <system_clock_init+0x138>)
    2c36:	47a8      	blx	r5
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c38:	2110      	movs	r1, #16
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2c3a:	4825      	ldr	r0, [pc, #148]	; (2cd0 <system_clock_init+0x13c>)
    2c3c:	6803      	ldr	r3, [r0, #0]
    2c3e:	433b      	orrs	r3, r7
    2c40:	6003      	str	r3, [r0, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2c42:	84a7      	strh	r7, [r4, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c44:	68e3      	ldr	r3, [r4, #12]
    2c46:	4219      	tst	r1, r3
    2c48:	d0fc      	beq.n	2c44 <system_clock_init+0xb0>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2c4a:	6883      	ldr	r3, [r0, #8]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c4c:	2110      	movs	r1, #16
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2c50:	6843      	ldr	r3, [r0, #4]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c52:	4a14      	ldr	r2, [pc, #80]	; (2ca4 <system_clock_init+0x110>)
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2c54:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2c56:	2300      	movs	r3, #0
    2c58:	84a3      	strh	r3, [r4, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c5a:	68d3      	ldr	r3, [r2, #12]
    2c5c:	4219      	tst	r1, r3
    2c5e:	d0fc      	beq.n	2c5a <system_clock_init+0xc6>
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2c60:	2110      	movs	r1, #16
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2c62:	6803      	ldr	r3, [r0, #0]
    2c64:	b29b      	uxth	r3, r3
    2c66:	8493      	strh	r3, [r2, #36]	; 0x24
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2c68:	4a0e      	ldr	r2, [pc, #56]	; (2ca4 <system_clock_init+0x110>)
    2c6a:	68d3      	ldr	r3, [r2, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2c6c:	4219      	tst	r1, r3
    2c6e:	d0fc      	beq.n	2c6a <system_clock_init+0xd6>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2c70:	2180      	movs	r1, #128	; 0x80
    2c72:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2c74:	2000      	movs	r0, #0
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2c76:	430b      	orrs	r3, r1
    2c78:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2c7a:	2300      	movs	r3, #0
    2c7c:	4a15      	ldr	r2, [pc, #84]	; (2cd4 <system_clock_init+0x140>)
	config->high_when_disabled = false;
    2c7e:	4669      	mov	r1, sp
    2c80:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2c82:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2c84:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2c86:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2c88:	2201      	movs	r2, #1
	config->high_when_disabled = false;
    2c8a:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2c8c:	724b      	strb	r3, [r1, #9]
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2c8e:	3307      	adds	r3, #7
	config->division_factor    = 1;
    2c90:	9201      	str	r2, [sp, #4]
    2c92:	700b      	strb	r3, [r1, #0]
    2c94:	720a      	strb	r2, [r1, #8]
    2c96:	47b0      	blx	r6
    2c98:	2000      	movs	r0, #0
    2c9a:	47a8      	blx	r5
#endif
}
    2c9c:	b009      	add	sp, #36	; 0x24
    2c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (coarse == 0x3f) {
    2ca0:	3b20      	subs	r3, #32
    2ca2:	e79c      	b.n	2bde <system_clock_init+0x4a>
    2ca4:	40000800 	.word	0x40000800
    2ca8:	41004000 	.word	0x41004000
    2cac:	00002df1 	.word	0x00002df1
    2cb0:	00806024 	.word	0x00806024
    2cb4:	000001ff 	.word	0x000001ff
    2cb8:	ffffbb80 	.word	0xffffbb80
    2cbc:	00002b19 	.word	0x00002b19
    2cc0:	fffffcff 	.word	0xfffffcff
    2cc4:	00002cd9 	.word	0x00002cd9
    2cc8:	00002cfd 	.word	0x00002cfd
    2ccc:	00002db1 	.word	0x00002db1
    2cd0:	20000288 	.word	0x20000288
    2cd4:	40000400 	.word	0x40000400

00002cd8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2cd8:	2108      	movs	r1, #8
    2cda:	4a06      	ldr	r2, [pc, #24]	; (2cf4 <system_gclk_init+0x1c>)
    2cdc:	6993      	ldr	r3, [r2, #24]
    2cde:	430b      	orrs	r3, r1
    2ce0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2ce2:	2301      	movs	r3, #1
    2ce4:	4a04      	ldr	r2, [pc, #16]	; (2cf8 <system_gclk_init+0x20>)
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2ce6:	3907      	subs	r1, #7
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2ce8:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2cea:	7813      	ldrb	r3, [r2, #0]
    2cec:	4219      	tst	r1, r3
    2cee:	d1fc      	bne.n	2cea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2cf0:	4770      	bx	lr
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	40000400 	.word	0x40000400
    2cf8:	40000c00 	.word	0x40000c00

00002cfc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2cfc:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2cfe:	780b      	ldrb	r3, [r1, #0]
{
    2d00:	0006      	movs	r6, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2d02:	021b      	lsls	r3, r3, #8
    2d04:	4303      	orrs	r3, r0
    2d06:	001d      	movs	r5, r3

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2d08:	784b      	ldrb	r3, [r1, #1]
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2d0a:	0004      	movs	r4, r0
	if (config->high_when_disabled) {
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d002      	beq.n	2d16 <system_gclk_gen_set_config+0x1a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2d10:	2380      	movs	r3, #128	; 0x80
    2d12:	02db      	lsls	r3, r3, #11
    2d14:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2d16:	7a4b      	ldrb	r3, [r1, #9]
    2d18:	2b00      	cmp	r3, #0
    2d1a:	d002      	beq.n	2d22 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2d1c:	2380      	movs	r3, #128	; 0x80
    2d1e:	031b      	lsls	r3, r3, #12
    2d20:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2d22:	6848      	ldr	r0, [r1, #4]
    2d24:	2801      	cmp	r0, #1
    2d26:	d90f      	bls.n	2d48 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2d28:	1e43      	subs	r3, r0, #1
    2d2a:	4218      	tst	r0, r3
    2d2c:	d12f      	bne.n	2d8e <system_gclk_gen_set_config+0x92>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2d2e:	2802      	cmp	r0, #2
    2d30:	d033      	beq.n	2d9a <system_gclk_gen_set_config+0x9e>
    2d32:	2302      	movs	r3, #2
    2d34:	2400      	movs	r4, #0
						mask <<= 1) {
				div2_count++;
    2d36:	3401      	adds	r4, #1
						mask <<= 1) {
    2d38:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2d3a:	4298      	cmp	r0, r3
    2d3c:	d8fb      	bhi.n	2d36 <system_gclk_gen_set_config+0x3a>
    2d3e:	0224      	lsls	r4, r4, #8
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2d40:	2380      	movs	r3, #128	; 0x80
    2d42:	035b      	lsls	r3, r3, #13
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2d44:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2d46:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2d48:	7a0b      	ldrb	r3, [r1, #8]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d002      	beq.n	2d54 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2d4e:	2380      	movs	r3, #128	; 0x80
    2d50:	039b      	lsls	r3, r3, #14
    2d52:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d54:	4a12      	ldr	r2, [pc, #72]	; (2da0 <system_gclk_gen_set_config+0xa4>)
    2d56:	7853      	ldrb	r3, [r2, #1]
    2d58:	b25b      	sxtb	r3, r3
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	dbfb      	blt.n	2d56 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2d5e:	4b11      	ldr	r3, [pc, #68]	; (2da4 <system_gclk_gen_set_config+0xa8>)
    2d60:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2d62:	4b11      	ldr	r3, [pc, #68]	; (2da8 <system_gclk_gen_set_config+0xac>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d64:	4a0e      	ldr	r2, [pc, #56]	; (2da0 <system_gclk_gen_set_config+0xa4>)
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2d66:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d68:	7853      	ldrb	r3, [r2, #1]
    2d6a:	b25b      	sxtb	r3, r3
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	dbfb      	blt.n	2d68 <system_gclk_gen_set_config+0x6c>
    2d70:	490b      	ldr	r1, [pc, #44]	; (2da0 <system_gclk_gen_set_config+0xa4>)

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2d72:	6094      	str	r4, [r2, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d74:	784a      	ldrb	r2, [r1, #1]
    2d76:	b252      	sxtb	r2, r2
    2d78:	2a00      	cmp	r2, #0
    2d7a:	dbfb      	blt.n	2d74 <system_gclk_gen_set_config+0x78>

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2d7c:	2280      	movs	r2, #128	; 0x80
    2d7e:	684b      	ldr	r3, [r1, #4]
    2d80:	0252      	lsls	r2, r2, #9
    2d82:	4013      	ands	r3, r2
    2d84:	432b      	orrs	r3, r5
    2d86:	604b      	str	r3, [r1, #4]
	cpu_irq_leave_critical();
    2d88:	4b08      	ldr	r3, [pc, #32]	; (2dac <system_gclk_gen_set_config+0xb0>)
    2d8a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2d8c:	bd70      	pop	{r4, r5, r6, pc}
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2d8e:	2380      	movs	r3, #128	; 0x80
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2d90:	0204      	lsls	r4, r0, #8
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2d92:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |=
    2d94:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2d96:	431d      	orrs	r5, r3
    2d98:	e7d6      	b.n	2d48 <system_gclk_gen_set_config+0x4c>
			for (mask = (1UL << 1); mask < config->division_factor;
    2d9a:	2400      	movs	r4, #0
    2d9c:	e7d0      	b.n	2d40 <system_gclk_gen_set_config+0x44>
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	40000c00 	.word	0x40000c00
    2da4:	00001795 	.word	0x00001795
    2da8:	40000c08 	.word	0x40000c08
    2dac:	000017d1 	.word	0x000017d1

00002db0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2db0:	b510      	push	{r4, lr}
    2db2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2db4:	4a0a      	ldr	r2, [pc, #40]	; (2de0 <system_gclk_gen_enable+0x30>)
    2db6:	7853      	ldrb	r3, [r2, #1]
    2db8:	b25b      	sxtb	r3, r3
    2dba:	2b00      	cmp	r3, #0
    2dbc:	dbfb      	blt.n	2db6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2dbe:	4b09      	ldr	r3, [pc, #36]	; (2de4 <system_gclk_gen_enable+0x34>)
    2dc0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2dc2:	4b09      	ldr	r3, [pc, #36]	; (2de8 <system_gclk_gen_enable+0x38>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2dc4:	4a06      	ldr	r2, [pc, #24]	; (2de0 <system_gclk_gen_enable+0x30>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2dc6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2dc8:	7853      	ldrb	r3, [r2, #1]
    2dca:	b25b      	sxtb	r3, r3
    2dcc:	2b00      	cmp	r3, #0
    2dce:	dbfb      	blt.n	2dc8 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2dd0:	2380      	movs	r3, #128	; 0x80
    2dd2:	6851      	ldr	r1, [r2, #4]
    2dd4:	025b      	lsls	r3, r3, #9
    2dd6:	430b      	orrs	r3, r1
    2dd8:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2dda:	4b04      	ldr	r3, [pc, #16]	; (2dec <system_gclk_gen_enable+0x3c>)
    2ddc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2dde:	bd10      	pop	{r4, pc}
    2de0:	40000c00 	.word	0x40000c00
    2de4:	00001795 	.word	0x00001795
    2de8:	40000c04 	.word	0x40000c04
    2dec:	000017d1 	.word	0x000017d1

00002df0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2df0:	b570      	push	{r4, r5, r6, lr}
    2df2:	0004      	movs	r4, r0

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2df4:	780d      	ldrb	r5, [r1, #0]
	cpu_irq_enter_critical();
    2df6:	4b11      	ldr	r3, [pc, #68]	; (2e3c <system_gclk_chan_set_config+0x4c>)
    2df8:	022d      	lsls	r5, r5, #8
    2dfa:	4305      	orrs	r5, r0
    2dfc:	4798      	blx	r3
		const uint8_t channel)
{
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2dfe:	4b10      	ldr	r3, [pc, #64]	; (2e40 <system_gclk_chan_set_config+0x50>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    2e00:	4a10      	ldr	r2, [pc, #64]	; (2e44 <system_gclk_chan_set_config+0x54>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e02:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2e04:	4c10      	ldr	r4, [pc, #64]	; (2e48 <system_gclk_chan_set_config+0x58>)
    2e06:	8863      	ldrh	r3, [r4, #2]
    2e08:	051b      	lsls	r3, r3, #20
    2e0a:	0f19      	lsrs	r1, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2e0c:	8863      	ldrh	r3, [r4, #2]
    2e0e:	4013      	ands	r3, r2
    2e10:	8063      	strh	r3, [r4, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2e12:	8863      	ldrh	r3, [r4, #2]
    2e14:	4a0d      	ldr	r2, [pc, #52]	; (2e4c <system_gclk_chan_set_config+0x5c>)
    2e16:	4013      	ands	r3, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2e18:	2280      	movs	r2, #128	; 0x80
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2e1a:	8063      	strh	r3, [r4, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2e1c:	01d2      	lsls	r2, r2, #7
    2e1e:	8863      	ldrh	r3, [r4, #2]
    2e20:	4213      	tst	r3, r2
    2e22:	d1fc      	bne.n	2e1e <system_gclk_chan_set_config+0x2e>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2e24:	8862      	ldrh	r2, [r4, #2]
    2e26:	020b      	lsls	r3, r1, #8
    2e28:	4906      	ldr	r1, [pc, #24]	; (2e44 <system_gclk_chan_set_config+0x54>)
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2e2a:	b2ad      	uxth	r5, r5
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2e2c:	400a      	ands	r2, r1
    2e2e:	4313      	orrs	r3, r2
    2e30:	8063      	strh	r3, [r4, #2]
	cpu_irq_leave_critical();
    2e32:	4b07      	ldr	r3, [pc, #28]	; (2e50 <system_gclk_chan_set_config+0x60>)
    2e34:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2e36:	8065      	strh	r5, [r4, #2]
}
    2e38:	bd70      	pop	{r4, r5, r6, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	00001795 	.word	0x00001795
    2e40:	40000c02 	.word	0x40000c02
    2e44:	fffff0ff 	.word	0xfffff0ff
    2e48:	40000c00 	.word	0x40000c00
    2e4c:	ffffbfff 	.word	0xffffbfff
    2e50:	000017d1 	.word	0x000017d1

00002e54 <system_gclk_chan_enable>:
{
    2e54:	b510      	push	{r4, lr}
    2e56:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2e58:	4b06      	ldr	r3, [pc, #24]	; (2e74 <system_gclk_chan_enable+0x20>)
    2e5a:	4798      	blx	r3
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e5c:	4b06      	ldr	r3, [pc, #24]	; (2e78 <system_gclk_chan_enable+0x24>)
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2e5e:	4a07      	ldr	r2, [pc, #28]	; (2e7c <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e60:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2e62:	2380      	movs	r3, #128	; 0x80
    2e64:	8851      	ldrh	r1, [r2, #2]
    2e66:	01db      	lsls	r3, r3, #7
    2e68:	430b      	orrs	r3, r1
    2e6a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2e6c:	4b04      	ldr	r3, [pc, #16]	; (2e80 <system_gclk_chan_enable+0x2c>)
    2e6e:	4798      	blx	r3
}
    2e70:	bd10      	pop	{r4, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	00001795 	.word	0x00001795
    2e78:	40000c02 	.word	0x40000c02
    2e7c:	40000c00 	.word	0x40000c00
    2e80:	000017d1 	.word	0x000017d1

00002e84 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e86:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2e88:	4f1c      	ldr	r7, [pc, #112]	; (2efc <system_gclk_chan_get_hz+0x78>)
    2e8a:	47b8      	blx	r7
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e8c:	4b1c      	ldr	r3, [pc, #112]	; (2f00 <system_gclk_chan_get_hz+0x7c>)
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2e8e:	4d1d      	ldr	r5, [pc, #116]	; (2f04 <system_gclk_chan_get_hz+0x80>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e90:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2e92:	886c      	ldrh	r4, [r5, #2]
	cpu_irq_leave_critical();
    2e94:	4e1c      	ldr	r6, [pc, #112]	; (2f08 <system_gclk_chan_get_hz+0x84>)
    2e96:	0524      	lsls	r4, r4, #20
    2e98:	0f24      	lsrs	r4, r4, #28
    2e9a:	47b0      	blx	r6
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e9c:	786b      	ldrb	r3, [r5, #1]
    2e9e:	b25b      	sxtb	r3, r3
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	dbfb      	blt.n	2e9c <system_gclk_chan_get_hz+0x18>
	cpu_irq_enter_critical();
    2ea4:	47b8      	blx	r7
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2ea6:	4b19      	ldr	r3, [pc, #100]	; (2f0c <system_gclk_chan_get_hz+0x88>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ea8:	4d16      	ldr	r5, [pc, #88]	; (2f04 <system_gclk_chan_get_hz+0x80>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2eaa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2eac:	786b      	ldrb	r3, [r5, #1]
    2eae:	b25b      	sxtb	r3, r3
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	dbfb      	blt.n	2eac <system_gclk_chan_get_hz+0x28>
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2eb4:	6868      	ldr	r0, [r5, #4]
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2eb6:	4b16      	ldr	r3, [pc, #88]	; (2f10 <system_gclk_chan_get_hz+0x8c>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2eb8:	04c0      	lsls	r0, r0, #19
    2eba:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2ebc:	4798      	blx	r3
    2ebe:	0007      	movs	r7, r0
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2ec0:	4b12      	ldr	r3, [pc, #72]	; (2f0c <system_gclk_chan_get_hz+0x88>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ec2:	4a10      	ldr	r2, [pc, #64]	; (2f04 <system_gclk_chan_get_hz+0x80>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2ec4:	701c      	strb	r4, [r3, #0]
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2ec6:	686d      	ldr	r5, [r5, #4]
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2ec8:	4b12      	ldr	r3, [pc, #72]	; (2f14 <system_gclk_chan_get_hz+0x90>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2eca:	02ed      	lsls	r5, r5, #11
    2ecc:	0fed      	lsrs	r5, r5, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2ece:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ed0:	7853      	ldrb	r3, [r2, #1]
    2ed2:	b25b      	sxtb	r3, r3
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	dbfb      	blt.n	2ed0 <system_gclk_chan_get_hz+0x4c>
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2ed8:	6891      	ldr	r1, [r2, #8]
    2eda:	0209      	lsls	r1, r1, #8
    2edc:	0c0c      	lsrs	r4, r1, #16
	cpu_irq_leave_critical();
    2ede:	47b0      	blx	r6
	if (!divsel && divider > 1) {
    2ee0:	2d00      	cmp	r5, #0
    2ee2:	d003      	beq.n	2eec <system_gclk_chan_get_hz+0x68>
		gen_input_hz >>= (divider+1);
    2ee4:	3401      	adds	r4, #1
    2ee6:	40e7      	lsrs	r7, r4

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
}
    2ee8:	0038      	movs	r0, r7
    2eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!divsel && divider > 1) {
    2eec:	2c01      	cmp	r4, #1
    2eee:	d9fb      	bls.n	2ee8 <system_gclk_chan_get_hz+0x64>
		gen_input_hz /= divider;
    2ef0:	0038      	movs	r0, r7
    2ef2:	0021      	movs	r1, r4
    2ef4:	4b08      	ldr	r3, [pc, #32]	; (2f18 <system_gclk_chan_get_hz+0x94>)
    2ef6:	4798      	blx	r3
    2ef8:	0007      	movs	r7, r0
    2efa:	e7f5      	b.n	2ee8 <system_gclk_chan_get_hz+0x64>
    2efc:	00001795 	.word	0x00001795
    2f00:	40000c02 	.word	0x40000c02
    2f04:	40000c00 	.word	0x40000c00
    2f08:	000017d1 	.word	0x000017d1
    2f0c:	40000c04 	.word	0x40000c04
    2f10:	00002a8d 	.word	0x00002a8d
    2f14:	40000c08 	.word	0x40000c08
    2f18:	00005dcd 	.word	0x00005dcd

00002f1c <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    2f1c:	b530      	push	{r4, r5, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    2f1e:	2800      	cmp	r0, #0
    2f20:	db13      	blt.n	2f4a <system_interrupt_set_priority+0x2e>
		uint8_t register_num = vector / 4;
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    2f22:	2403      	movs	r4, #3
    2f24:	4a0d      	ldr	r2, [pc, #52]	; (2f5c <system_interrupt_set_priority+0x40>)
    2f26:	1083      	asrs	r3, r0, #2
    2f28:	4694      	mov	ip, r2
    2f2a:	4020      	ands	r0, r4

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    2f2c:	25c0      	movs	r5, #192	; 0xc0
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    2f2e:	00c0      	lsls	r0, r0, #3
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    2f30:	3006      	adds	r0, #6
    2f32:	4084      	lsls	r4, r0
				(priority_level << priority_pos);
    2f34:	4081      	lsls	r1, r0
    2f36:	009b      	lsls	r3, r3, #2
    2f38:	4463      	add	r3, ip
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    2f3a:	00ad      	lsls	r5, r5, #2
    2f3c:	595a      	ldr	r2, [r3, r5]
    2f3e:	43a2      	bics	r2, r4
    2f40:	4311      	orrs	r1, r2
		NVIC->IP[register_num] =
    2f42:	5159      	str	r1, [r3, r5]
	enum status_code status = STATUS_OK;
    2f44:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    2f46:	0018      	movs	r0, r3
    2f48:	bd30      	pop	{r4, r5, pc}
		status = STATUS_ERR_INVALID_ARG;
    2f4a:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    2f4c:	1c42      	adds	r2, r0, #1
    2f4e:	d1fa      	bne.n	2f46 <system_interrupt_set_priority+0x2a>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    2f50:	4b03      	ldr	r3, [pc, #12]	; (2f60 <system_interrupt_set_priority+0x44>)
    2f52:	0789      	lsls	r1, r1, #30
    2f54:	6219      	str	r1, [r3, #32]
	enum status_code status = STATUS_OK;
    2f56:	2300      	movs	r3, #0
    2f58:	e7f5      	b.n	2f46 <system_interrupt_set_priority+0x2a>
    2f5a:	46c0      	nop			; (mov r8, r8)
    2f5c:	e000e100 	.word	0xe000e100
    2f60:	e000ed00 	.word	0xe000ed00

00002f64 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2f64:	b570      	push	{r4, r5, r6, lr}
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2f66:	09c2      	lsrs	r2, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2f68:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2f6a:	2a00      	cmp	r2, #0
    2f6c:	d104      	bne.n	2f78 <system_pinmux_pin_set_config+0x14>
		return &(ports[port_index]->Group[group_index]);
    2f6e:	4a2f      	ldr	r2, [pc, #188]	; (302c <system_pinmux_pin_set_config+0xc8>)
    2f70:	0943      	lsrs	r3, r0, #5
    2f72:	4694      	mov	ip, r2
    2f74:	01db      	lsls	r3, r3, #7
    2f76:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2f78:	221f      	movs	r2, #31
    2f7a:	4010      	ands	r0, r2
    2f7c:	3a1e      	subs	r2, #30
    2f7e:	4082      	lsls	r2, r0
	if (!config->powersave) {
    2f80:	78c8      	ldrb	r0, [r1, #3]
    2f82:	2800      	cmp	r0, #0
    2f84:	d131      	bne.n	2fea <system_pinmux_pin_set_config+0x86>
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2f86:	7808      	ldrb	r0, [r1, #0]
    2f88:	2880      	cmp	r0, #128	; 0x80
    2f8a:	d047      	beq.n	301c <system_pinmux_pin_set_config+0xb8>
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2f8c:	2480      	movs	r4, #128	; 0x80
    2f8e:	0600      	lsls	r0, r0, #24
    2f90:	0264      	lsls	r4, r4, #9
    2f92:	4320      	orrs	r0, r4
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2f94:	784c      	ldrb	r4, [r1, #1]
    2f96:	2502      	movs	r5, #2
    2f98:	0026      	movs	r6, r4
    2f9a:	43ae      	bics	r6, r5
    2f9c:	d107      	bne.n	2fae <system_pinmux_pin_set_config+0x4a>
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2f9e:	788c      	ldrb	r4, [r1, #2]
    2fa0:	2c00      	cmp	r4, #0
    2fa2:	d137      	bne.n	3014 <system_pinmux_pin_set_config+0xb0>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2fa4:	2480      	movs	r4, #128	; 0x80
    2fa6:	02a4      	lsls	r4, r4, #10
    2fa8:	4320      	orrs	r0, r4
			port->DIRCLR.reg = pin_mask;
    2faa:	605a      	str	r2, [r3, #4]
    2fac:	784c      	ldrb	r4, [r1, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2fae:	3c01      	subs	r4, #1
    2fb0:	2c01      	cmp	r4, #1
    2fb2:	d935      	bls.n	3020 <system_pinmux_pin_set_config+0xbc>
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2fb4:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2fb6:	0415      	lsls	r5, r2, #16
    2fb8:	0c2d      	lsrs	r5, r5, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2fba:	05e4      	lsls	r4, r4, #23
    2fbc:	432c      	orrs	r4, r5
    2fbe:	4304      	orrs	r4, r0
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2fc0:	629c      	str	r4, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2fc2:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2fc4:	0c15      	lsrs	r5, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2fc6:	0624      	lsls	r4, r4, #24
    2fc8:	432c      	orrs	r4, r5
    2fca:	4304      	orrs	r4, r0
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2fcc:	629c      	str	r4, [r3, #40]	; 0x28
	if(!config->powersave) {
    2fce:	78cc      	ldrb	r4, [r1, #3]
    2fd0:	2c00      	cmp	r4, #0
    2fd2:	d109      	bne.n	2fe8 <system_pinmux_pin_set_config+0x84>
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2fd4:	0340      	lsls	r0, r0, #13
    2fd6:	d503      	bpl.n	2fe0 <system_pinmux_pin_set_config+0x7c>
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2fd8:	7888      	ldrb	r0, [r1, #2]
    2fda:	2801      	cmp	r0, #1
    2fdc:	d023      	beq.n	3026 <system_pinmux_pin_set_config+0xc2>
				port->OUTCLR.reg = pin_mask;
    2fde:	615a      	str	r2, [r3, #20]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2fe0:	7849      	ldrb	r1, [r1, #1]
    2fe2:	3901      	subs	r1, #1
    2fe4:	2901      	cmp	r1, #1
    2fe6:	d913      	bls.n	3010 <system_pinmux_pin_set_config+0xac>

	_system_pinmux_config(port, pin_mask, config);
}
    2fe8:	bd70      	pop	{r4, r5, r6, pc}
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2fea:	20a0      	movs	r0, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2fec:	0414      	lsls	r4, r2, #16
    2fee:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2ff0:	05c0      	lsls	r0, r0, #23
    2ff2:	4320      	orrs	r0, r4
		port->DIRCLR.reg = pin_mask;
    2ff4:	605a      	str	r2, [r3, #4]
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2ff6:	6298      	str	r0, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2ff8:	20d0      	movs	r0, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2ffa:	0c14      	lsrs	r4, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2ffc:	0600      	lsls	r0, r0, #24
    2ffe:	4320      	orrs	r0, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3000:	6298      	str	r0, [r3, #40]	; 0x28
	if(!config->powersave) {
    3002:	78c8      	ldrb	r0, [r1, #3]
    3004:	2800      	cmp	r0, #0
    3006:	d1ef      	bne.n	2fe8 <system_pinmux_pin_set_config+0x84>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3008:	7849      	ldrb	r1, [r1, #1]
    300a:	3901      	subs	r1, #1
    300c:	2901      	cmp	r1, #1
    300e:	d8eb      	bhi.n	2fe8 <system_pinmux_pin_set_config+0x84>
			port->DIRSET.reg = pin_mask;
    3010:	609a      	str	r2, [r3, #8]
}
    3012:	e7e9      	b.n	2fe8 <system_pinmux_pin_set_config+0x84>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3014:	24c0      	movs	r4, #192	; 0xc0
    3016:	02e4      	lsls	r4, r4, #11
    3018:	4320      	orrs	r0, r4
    301a:	e7c6      	b.n	2faa <system_pinmux_pin_set_config+0x46>
	uint32_t pin_cfg = 0;
    301c:	2000      	movs	r0, #0
    301e:	e7b9      	b.n	2f94 <system_pinmux_pin_set_config+0x30>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3020:	4c03      	ldr	r4, [pc, #12]	; (3030 <system_pinmux_pin_set_config+0xcc>)
    3022:	4020      	ands	r0, r4
    3024:	e7c6      	b.n	2fb4 <system_pinmux_pin_set_config+0x50>
				port->OUTSET.reg = pin_mask;
    3026:	619a      	str	r2, [r3, #24]
    3028:	e7da      	b.n	2fe0 <system_pinmux_pin_set_config+0x7c>
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	41004400 	.word	0x41004400
    3030:	fffbffff 	.word	0xfffbffff

00003034 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3034:	4770      	bx	lr
    3036:	46c0      	nop			; (mov r8, r8)

00003038 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3038:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    303a:	4b05      	ldr	r3, [pc, #20]	; (3050 <system_init+0x18>)
    303c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    303e:	4b05      	ldr	r3, [pc, #20]	; (3054 <system_init+0x1c>)
    3040:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3042:	4b05      	ldr	r3, [pc, #20]	; (3058 <system_init+0x20>)
    3044:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3046:	4b05      	ldr	r3, [pc, #20]	; (305c <system_init+0x24>)
    3048:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    304a:	4b05      	ldr	r3, [pc, #20]	; (3060 <system_init+0x28>)
    304c:	4798      	blx	r3
}
    304e:	bd10      	pop	{r4, pc}
    3050:	00002b95 	.word	0x00002b95
    3054:	00001801 	.word	0x00001801
    3058:	00003035 	.word	0x00003035
    305c:	00001e61 	.word	0x00001e61
    3060:	00003035 	.word	0x00003035

00003064 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3064:	1c93      	adds	r3, r2, #2
    3066:	009b      	lsls	r3, r3, #2
    3068:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    306a:	2a02      	cmp	r2, #2
    306c:	d009      	beq.n	3082 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    306e:	2a03      	cmp	r2, #3
    3070:	d00c      	beq.n	308c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    3072:	2301      	movs	r3, #1
    3074:	4093      	lsls	r3, r2
    3076:	001a      	movs	r2, r3
    3078:	7e03      	ldrb	r3, [r0, #24]
    307a:	4313      	orrs	r3, r2
    307c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    307e:	2000      	movs	r0, #0
    3080:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    3082:	2210      	movs	r2, #16
    3084:	7e03      	ldrb	r3, [r0, #24]
    3086:	4313      	orrs	r3, r2
    3088:	7603      	strb	r3, [r0, #24]
    308a:	e7f8      	b.n	307e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    308c:	2220      	movs	r2, #32
    308e:	7e03      	ldrb	r3, [r0, #24]
    3090:	4313      	orrs	r3, r2
    3092:	7603      	strb	r3, [r0, #24]
    3094:	e7f3      	b.n	307e <tc_register_callback+0x1a>
    3096:	46c0      	nop			; (mov r8, r8)

00003098 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3098:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    309a:	2601      	movs	r6, #1
	struct tc_module *module
    309c:	4b15      	ldr	r3, [pc, #84]	; (30f4 <TC3_Handler+0x5c>)
    309e:	681d      	ldr	r5, [r3, #0]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    30a0:	682b      	ldr	r3, [r5, #0]
    30a2:	7e2a      	ldrb	r2, [r5, #24]
    30a4:	7e6c      	ldrb	r4, [r5, #25]
    30a6:	7b9b      	ldrb	r3, [r3, #14]
    30a8:	4014      	ands	r4, r2
    30aa:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    30ac:	4226      	tst	r6, r4
    30ae:	d11a      	bne.n	30e6 <TC3_Handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    30b0:	2602      	movs	r6, #2
    30b2:	4226      	tst	r6, r4
    30b4:	d111      	bne.n	30da <TC3_Handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    30b6:	2610      	movs	r6, #16
    30b8:	4226      	tst	r6, r4
    30ba:	d108      	bne.n	30ce <TC3_Handler+0x36>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    30bc:	2620      	movs	r6, #32
    30be:	4226      	tst	r6, r4
    30c0:	d004      	beq.n	30cc <TC3_Handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    30c2:	696b      	ldr	r3, [r5, #20]
    30c4:	0028      	movs	r0, r5
    30c6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    30c8:	682b      	ldr	r3, [r5, #0]
    30ca:	739e      	strb	r6, [r3, #14]
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    30cc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    30ce:	692b      	ldr	r3, [r5, #16]
    30d0:	0028      	movs	r0, r5
    30d2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    30d4:	682b      	ldr	r3, [r5, #0]
    30d6:	739e      	strb	r6, [r3, #14]
    30d8:	e7f0      	b.n	30bc <TC3_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
    30da:	68eb      	ldr	r3, [r5, #12]
    30dc:	0028      	movs	r0, r5
    30de:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    30e0:	682b      	ldr	r3, [r5, #0]
    30e2:	739e      	strb	r6, [r3, #14]
    30e4:	e7e7      	b.n	30b6 <TC3_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    30e6:	68ab      	ldr	r3, [r5, #8]
    30e8:	0028      	movs	r0, r5
    30ea:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    30ec:	682b      	ldr	r3, [r5, #0]
    30ee:	739e      	strb	r6, [r3, #14]
    30f0:	e7de      	b.n	30b0 <TC3_Handler+0x18>
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	200003ac 	.word	0x200003ac

000030f8 <TC4_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    30f8:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    30fa:	2601      	movs	r6, #1
	struct tc_module *module
    30fc:	4b15      	ldr	r3, [pc, #84]	; (3154 <TC4_Handler+0x5c>)
    30fe:	685d      	ldr	r5, [r3, #4]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3100:	682b      	ldr	r3, [r5, #0]
    3102:	7e2a      	ldrb	r2, [r5, #24]
    3104:	7e6c      	ldrb	r4, [r5, #25]
    3106:	7b9b      	ldrb	r3, [r3, #14]
    3108:	4014      	ands	r4, r2
    310a:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    310c:	4226      	tst	r6, r4
    310e:	d11a      	bne.n	3146 <TC4_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3110:	2602      	movs	r6, #2
    3112:	4226      	tst	r6, r4
    3114:	d111      	bne.n	313a <TC4_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3116:	2610      	movs	r6, #16
    3118:	4226      	tst	r6, r4
    311a:	d108      	bne.n	312e <TC4_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    311c:	2620      	movs	r6, #32
    311e:	4226      	tst	r6, r4
    3120:	d004      	beq.n	312c <TC4_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3122:	696b      	ldr	r3, [r5, #20]
    3124:	0028      	movs	r0, r5
    3126:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3128:	682b      	ldr	r3, [r5, #0]
    312a:	739e      	strb	r6, [r3, #14]
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    312c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    312e:	692b      	ldr	r3, [r5, #16]
    3130:	0028      	movs	r0, r5
    3132:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3134:	682b      	ldr	r3, [r5, #0]
    3136:	739e      	strb	r6, [r3, #14]
    3138:	e7f0      	b.n	311c <TC4_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
    313a:	68eb      	ldr	r3, [r5, #12]
    313c:	0028      	movs	r0, r5
    313e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3140:	682b      	ldr	r3, [r5, #0]
    3142:	739e      	strb	r6, [r3, #14]
    3144:	e7e7      	b.n	3116 <TC4_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3146:	68ab      	ldr	r3, [r5, #8]
    3148:	0028      	movs	r0, r5
    314a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    314c:	682b      	ldr	r3, [r5, #0]
    314e:	739e      	strb	r6, [r3, #14]
    3150:	e7de      	b.n	3110 <TC4_Handler+0x18>
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	200003ac 	.word	0x200003ac

00003158 <TC5_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3158:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    315a:	2601      	movs	r6, #1
	struct tc_module *module
    315c:	4b15      	ldr	r3, [pc, #84]	; (31b4 <TC5_Handler+0x5c>)
    315e:	689d      	ldr	r5, [r3, #8]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3160:	682b      	ldr	r3, [r5, #0]
    3162:	7e2a      	ldrb	r2, [r5, #24]
    3164:	7e6c      	ldrb	r4, [r5, #25]
    3166:	7b9b      	ldrb	r3, [r3, #14]
    3168:	4014      	ands	r4, r2
    316a:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    316c:	4226      	tst	r6, r4
    316e:	d11a      	bne.n	31a6 <TC5_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3170:	2602      	movs	r6, #2
    3172:	4226      	tst	r6, r4
    3174:	d111      	bne.n	319a <TC5_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3176:	2610      	movs	r6, #16
    3178:	4226      	tst	r6, r4
    317a:	d108      	bne.n	318e <TC5_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    317c:	2620      	movs	r6, #32
    317e:	4226      	tst	r6, r4
    3180:	d004      	beq.n	318c <TC5_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3182:	696b      	ldr	r3, [r5, #20]
    3184:	0028      	movs	r0, r5
    3186:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3188:	682b      	ldr	r3, [r5, #0]
    318a:	739e      	strb	r6, [r3, #14]
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    318c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    318e:	692b      	ldr	r3, [r5, #16]
    3190:	0028      	movs	r0, r5
    3192:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3194:	682b      	ldr	r3, [r5, #0]
    3196:	739e      	strb	r6, [r3, #14]
    3198:	e7f0      	b.n	317c <TC5_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
    319a:	68eb      	ldr	r3, [r5, #12]
    319c:	0028      	movs	r0, r5
    319e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    31a0:	682b      	ldr	r3, [r5, #0]
    31a2:	739e      	strb	r6, [r3, #14]
    31a4:	e7e7      	b.n	3176 <TC5_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    31a6:	68ab      	ldr	r3, [r5, #8]
    31a8:	0028      	movs	r0, r5
    31aa:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    31ac:	682b      	ldr	r3, [r5, #0]
    31ae:	739e      	strb	r6, [r3, #14]
    31b0:	e7de      	b.n	3170 <TC5_Handler+0x18>
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	200003ac 	.word	0x200003ac

000031b8 <TC6_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    31b8:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    31ba:	2601      	movs	r6, #1
	struct tc_module *module
    31bc:	4b15      	ldr	r3, [pc, #84]	; (3214 <TC6_Handler+0x5c>)
    31be:	68dd      	ldr	r5, [r3, #12]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    31c0:	682b      	ldr	r3, [r5, #0]
    31c2:	7e2a      	ldrb	r2, [r5, #24]
    31c4:	7e6c      	ldrb	r4, [r5, #25]
    31c6:	7b9b      	ldrb	r3, [r3, #14]
    31c8:	4014      	ands	r4, r2
    31ca:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    31cc:	4226      	tst	r6, r4
    31ce:	d11a      	bne.n	3206 <TC6_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    31d0:	2602      	movs	r6, #2
    31d2:	4226      	tst	r6, r4
    31d4:	d111      	bne.n	31fa <TC6_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    31d6:	2610      	movs	r6, #16
    31d8:	4226      	tst	r6, r4
    31da:	d108      	bne.n	31ee <TC6_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    31dc:	2620      	movs	r6, #32
    31de:	4226      	tst	r6, r4
    31e0:	d004      	beq.n	31ec <TC6_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    31e2:	696b      	ldr	r3, [r5, #20]
    31e4:	0028      	movs	r0, r5
    31e6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    31e8:	682b      	ldr	r3, [r5, #0]
    31ea:	739e      	strb	r6, [r3, #14]
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    31ec:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    31ee:	692b      	ldr	r3, [r5, #16]
    31f0:	0028      	movs	r0, r5
    31f2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    31f4:	682b      	ldr	r3, [r5, #0]
    31f6:	739e      	strb	r6, [r3, #14]
    31f8:	e7f0      	b.n	31dc <TC6_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
    31fa:	68eb      	ldr	r3, [r5, #12]
    31fc:	0028      	movs	r0, r5
    31fe:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3200:	682b      	ldr	r3, [r5, #0]
    3202:	739e      	strb	r6, [r3, #14]
    3204:	e7e7      	b.n	31d6 <TC6_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3206:	68ab      	ldr	r3, [r5, #8]
    3208:	0028      	movs	r0, r5
    320a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    320c:	682b      	ldr	r3, [r5, #0]
    320e:	739e      	strb	r6, [r3, #14]
    3210:	e7de      	b.n	31d0 <TC6_Handler+0x18>
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	200003ac 	.word	0x200003ac

00003218 <TC7_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3218:	b570      	push	{r4, r5, r6, lr}
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    321a:	2601      	movs	r6, #1
	struct tc_module *module
    321c:	4b15      	ldr	r3, [pc, #84]	; (3274 <TC7_Handler+0x5c>)
    321e:	691d      	ldr	r5, [r3, #16]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3220:	682b      	ldr	r3, [r5, #0]
    3222:	7e2a      	ldrb	r2, [r5, #24]
    3224:	7e6c      	ldrb	r4, [r5, #25]
    3226:	7b9b      	ldrb	r3, [r3, #14]
    3228:	4014      	ands	r4, r2
    322a:	401c      	ands	r4, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    322c:	4226      	tst	r6, r4
    322e:	d11a      	bne.n	3266 <TC7_Handler+0x4e>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3230:	2602      	movs	r6, #2
    3232:	4226      	tst	r6, r4
    3234:	d111      	bne.n	325a <TC7_Handler+0x42>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3236:	2610      	movs	r6, #16
    3238:	4226      	tst	r6, r4
    323a:	d108      	bne.n	324e <TC7_Handler+0x36>
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    323c:	2620      	movs	r6, #32
    323e:	4226      	tst	r6, r4
    3240:	d004      	beq.n	324c <TC7_Handler+0x34>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3242:	696b      	ldr	r3, [r5, #20]
    3244:	0028      	movs	r0, r5
    3246:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3248:	682b      	ldr	r3, [r5, #0]
    324a:	739e      	strb	r6, [r3, #14]
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    324c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    324e:	692b      	ldr	r3, [r5, #16]
    3250:	0028      	movs	r0, r5
    3252:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3254:	682b      	ldr	r3, [r5, #0]
    3256:	739e      	strb	r6, [r3, #14]
    3258:	e7f0      	b.n	323c <TC7_Handler+0x24>
		(module->callback[TC_CALLBACK_ERROR])(module);
    325a:	68eb      	ldr	r3, [r5, #12]
    325c:	0028      	movs	r0, r5
    325e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3260:	682b      	ldr	r3, [r5, #0]
    3262:	739e      	strb	r6, [r3, #14]
    3264:	e7e7      	b.n	3236 <TC7_Handler+0x1e>
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3266:	68ab      	ldr	r3, [r5, #8]
    3268:	0028      	movs	r0, r5
    326a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    326c:	682b      	ldr	r3, [r5, #0]
    326e:	739e      	strb	r6, [r3, #14]
    3270:	e7de      	b.n	3230 <TC7_Handler+0x18>
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	200003ac 	.word	0x200003ac

00003278 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3278:	b570      	push	{r4, r5, r6, lr}
    327a:	b086      	sub	sp, #24
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    327c:	aa01      	add	r2, sp, #4
{
    327e:	0001      	movs	r1, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3280:	0010      	movs	r0, r2
    3282:	4b13      	ldr	r3, [pc, #76]	; (32d0 <_tc_get_inst_index+0x58>)
    3284:	cb70      	ldmia	r3!, {r4, r5, r6}
    3286:	c070      	stmia	r0!, {r4, r5, r6}
    3288:	cb30      	ldmia	r3!, {r4, r5}
    328a:	c030      	stmia	r0!, {r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    328c:	9b01      	ldr	r3, [sp, #4]
    328e:	4299      	cmp	r1, r3
    3290:	d00e      	beq.n	32b0 <_tc_get_inst_index+0x38>
    3292:	9b02      	ldr	r3, [sp, #8]
    3294:	4299      	cmp	r1, r3
    3296:	d00e      	beq.n	32b6 <_tc_get_inst_index+0x3e>
    3298:	9b03      	ldr	r3, [sp, #12]
    329a:	4299      	cmp	r1, r3
    329c:	d00e      	beq.n	32bc <_tc_get_inst_index+0x44>
    329e:	9b04      	ldr	r3, [sp, #16]
    32a0:	4299      	cmp	r1, r3
    32a2:	d00e      	beq.n	32c2 <_tc_get_inst_index+0x4a>
    32a4:	9b05      	ldr	r3, [sp, #20]
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    32a6:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
    32a8:	428b      	cmp	r3, r1
    32aa:	d00d      	beq.n	32c8 <_tc_get_inst_index+0x50>
}
    32ac:	b006      	add	sp, #24
    32ae:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    32b0:	2000      	movs	r0, #0
			return i;
    32b2:	b2c0      	uxtb	r0, r0
    32b4:	e7fa      	b.n	32ac <_tc_get_inst_index+0x34>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    32b6:	2001      	movs	r0, #1
			return i;
    32b8:	b2c0      	uxtb	r0, r0
    32ba:	e7f7      	b.n	32ac <_tc_get_inst_index+0x34>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    32bc:	2002      	movs	r0, #2
			return i;
    32be:	b2c0      	uxtb	r0, r0
    32c0:	e7f4      	b.n	32ac <_tc_get_inst_index+0x34>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    32c2:	2003      	movs	r0, #3
			return i;
    32c4:	b2c0      	uxtb	r0, r0
    32c6:	e7f1      	b.n	32ac <_tc_get_inst_index+0x34>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    32c8:	3004      	adds	r0, #4
			return i;
    32ca:	b2c0      	uxtb	r0, r0
    32cc:	e7ee      	b.n	32ac <_tc_get_inst_index+0x34>
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	00006318 	.word	0x00006318

000032d4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    32d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32d6:	46ce      	mov	lr, r9
    32d8:	4647      	mov	r7, r8
    32da:	b580      	push	{r7, lr}
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    32dc:	4bae      	ldr	r3, [pc, #696]	; (3598 <tc_init+0x2c4>)
{
    32de:	b08b      	sub	sp, #44	; 0x2c
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    32e0:	ac05      	add	r4, sp, #20
{
    32e2:	000f      	movs	r7, r1
    32e4:	4691      	mov	r9, r2
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    32e6:	0019      	movs	r1, r3
    32e8:	0022      	movs	r2, r4
{
    32ea:	0006      	movs	r6, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    32ec:	469c      	mov	ip, r3
    32ee:	c929      	ldmia	r1!, {r0, r3, r5}
    32f0:	c229      	stmia	r2!, {r0, r3, r5}
    32f2:	c909      	ldmia	r1!, {r0, r3}
    32f4:	c209      	stmia	r2!, {r0, r3}
		if (hw == tc_modules[i]) {
    32f6:	9a05      	ldr	r2, [sp, #20]
    32f8:	42ba      	cmp	r2, r7
    32fa:	d100      	bne.n	32fe <tc_init+0x2a>
    32fc:	e114      	b.n	3528 <tc_init+0x254>
    32fe:	6862      	ldr	r2, [r4, #4]
    3300:	4297      	cmp	r7, r2
    3302:	d100      	bne.n	3306 <tc_init+0x32>
    3304:	e113      	b.n	352e <tc_init+0x25a>
    3306:	68a2      	ldr	r2, [r4, #8]
    3308:	4297      	cmp	r7, r2
    330a:	d100      	bne.n	330e <tc_init+0x3a>
    330c:	e112      	b.n	3534 <tc_init+0x260>
    330e:	68e2      	ldr	r2, [r4, #12]
    3310:	4297      	cmp	r7, r2
    3312:	d100      	bne.n	3316 <tc_init+0x42>
    3314:	e111      	b.n	353a <tc_init+0x266>
    3316:	2200      	movs	r2, #0
    3318:	4690      	mov	r8, r2
    331a:	6922      	ldr	r2, [r4, #16]
    331c:	4297      	cmp	r7, r2
    331e:	d100      	bne.n	3322 <tc_init+0x4e>
    3320:	e10e      	b.n	3540 <tc_init+0x26c>
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    3322:	221b      	movs	r2, #27
    3324:	ad03      	add	r5, sp, #12
    3326:	702a      	strb	r2, [r5, #0]
    3328:	3201      	adds	r2, #1
    332a:	706a      	strb	r2, [r5, #1]
    332c:	70aa      	strb	r2, [r5, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    332e:	4663      	mov	r3, ip
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    3330:	3201      	adds	r2, #1
    3332:	70ea      	strb	r2, [r5, #3]
    3334:	712a      	strb	r2, [r5, #4]
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    3336:	0022      	movs	r2, r4
    3338:	3314      	adds	r3, #20
    333a:	cb03      	ldmia	r3!, {r0, r1}
    333c:	c203      	stmia	r2!, {r0, r1}
    333e:	881b      	ldrh	r3, [r3, #0]
    3340:	8013      	strh	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    3342:	2300      	movs	r3, #0
    3344:	60b3      	str	r3, [r6, #8]
    3346:	60f3      	str	r3, [r6, #12]
    3348:	6133      	str	r3, [r6, #16]
    334a:	6173      	str	r3, [r6, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    334c:	7633      	strb	r3, [r6, #24]
	module_inst->enable_callback_mask       = 0x00;
    334e:	7673      	strb	r3, [r6, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    3350:	4643      	mov	r3, r8
    3352:	4a92      	ldr	r2, [pc, #584]	; (359c <tc_init+0x2c8>)
    3354:	009b      	lsls	r3, r3, #2
    3356:	509e      	str	r6, [r3, r2]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3358:	464b      	mov	r3, r9
	module_inst->hw = hw;
    335a:	6037      	str	r7, [r6, #0]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    335c:	789b      	ldrb	r3, [r3, #2]
    335e:	2b08      	cmp	r3, #8
    3360:	d00a      	beq.n	3378 <tc_init+0xa4>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    3362:	7133      	strb	r3, [r6, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3364:	883b      	ldrh	r3, [r7, #0]
    3366:	2201      	movs	r2, #1
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3368:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    336a:	07db      	lsls	r3, r3, #31
    336c:	d509      	bpl.n	3382 <tc_init+0xae>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    336e:	b00b      	add	sp, #44	; 0x2c
    3370:	bc0c      	pop	{r2, r3}
    3372:	4690      	mov	r8, r2
    3374:	4699      	mov	r9, r3
    3376:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3378:	4642      	mov	r2, r8
		return STATUS_ERR_INVALID_ARG;
    337a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    337c:	07d2      	lsls	r2, r2, #31
    337e:	d5f6      	bpl.n	336e <tc_init+0x9a>
    3380:	e7ef      	b.n	3362 <tc_init+0x8e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3382:	7bfb      	ldrb	r3, [r7, #15]
		return STATUS_ERR_DENIED;
    3384:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3386:	06db      	lsls	r3, r3, #27
    3388:	d4f1      	bmi.n	336e <tc_init+0x9a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    338a:	2302      	movs	r3, #2
    338c:	8839      	ldrh	r1, [r7, #0]
    338e:	400b      	ands	r3, r1
    3390:	d1ed      	bne.n	336e <tc_init+0x9a>
	if (config->pwm_channel[0].enabled) {
    3392:	4649      	mov	r1, r9
    3394:	7c09      	ldrb	r1, [r1, #16]
    3396:	2900      	cmp	r1, #0
    3398:	d000      	beq.n	339c <tc_init+0xc8>
    339a:	e0d7      	b.n	354c <tc_init+0x278>
	if (config->pwm_channel[1].enabled) {
    339c:	464b      	mov	r3, r9
    339e:	7f1b      	ldrb	r3, [r3, #28]
    33a0:	2b00      	cmp	r3, #0
    33a2:	d000      	beq.n	33a6 <tc_init+0xd2>
    33a4:	e0de      	b.n	3564 <tc_init+0x290>
			inst_pm_apbmask[instance]);
    33a6:	4643      	mov	r3, r8
			PM->APBCMASK.reg |= mask;
    33a8:	4a7d      	ldr	r2, [pc, #500]	; (35a0 <tc_init+0x2cc>)
    33aa:	005b      	lsls	r3, r3, #1
    33ac:	6a11      	ldr	r1, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    33ae:	5ae3      	ldrh	r3, [r4, r3]
    33b0:	430b      	orrs	r3, r1
    33b2:	6213      	str	r3, [r2, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    33b4:	464b      	mov	r3, r9
    33b6:	789b      	ldrb	r3, [r3, #2]
    33b8:	2b08      	cmp	r3, #8
    33ba:	d100      	bne.n	33be <tc_init+0xea>
    33bc:	e0e4      	b.n	3588 <tc_init+0x2b4>
	gclk_chan_config.source_generator = config->clock_source;
    33be:	464b      	mov	r3, r9
    33c0:	781b      	ldrb	r3, [r3, #0]
    33c2:	a901      	add	r1, sp, #4
    33c4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    33c6:	4643      	mov	r3, r8
    33c8:	5cec      	ldrb	r4, [r5, r3]
    33ca:	4b76      	ldr	r3, [pc, #472]	; (35a4 <tc_init+0x2d0>)
    33cc:	0020      	movs	r0, r4
    33ce:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    33d0:	4b75      	ldr	r3, [pc, #468]	; (35a8 <tc_init+0x2d4>)
    33d2:	0020      	movs	r0, r4
    33d4:	4798      	blx	r3
	ctrla_tmp =
    33d6:	464b      	mov	r3, r9
			(uint32_t)config->wave_generation |
    33d8:	464a      	mov	r2, r9
	ctrla_tmp =
    33da:	8919      	ldrh	r1, [r3, #8]
    33dc:	889b      	ldrh	r3, [r3, #4]
    33de:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    33e0:	7891      	ldrb	r1, [r2, #2]
    33e2:	7992      	ldrb	r2, [r2, #6]
    33e4:	4311      	orrs	r1, r2
	ctrla_tmp =
    33e6:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    33e8:	464b      	mov	r3, r9
    33ea:	785b      	ldrb	r3, [r3, #1]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d002      	beq.n	33f6 <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    33f0:	2380      	movs	r3, #128	; 0x80
    33f2:	011b      	lsls	r3, r3, #4
    33f4:	4319      	orrs	r1, r3
    33f6:	6832      	ldr	r2, [r6, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    33f8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    33fa:	b25b      	sxtb	r3, r3
    33fc:	2b00      	cmp	r3, #0
    33fe:	dbfb      	blt.n	33f8 <tc_init+0x124>
	if (config->oneshot) {
    3400:	464b      	mov	r3, r9
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    3402:	8039      	strh	r1, [r7, #0]
	if (config->oneshot) {
    3404:	7b5b      	ldrb	r3, [r3, #13]
    3406:	2b00      	cmp	r3, #0
    3408:	d000      	beq.n	340c <tc_init+0x138>
    340a:	e09c      	b.n	3546 <tc_init+0x272>
    340c:	2101      	movs	r1, #1
	uint8_t ctrlbset_tmp = 0;
    340e:	2200      	movs	r2, #0
	if (config->count_direction) {
    3410:	464b      	mov	r3, r9
    3412:	7b9b      	ldrb	r3, [r3, #14]
    3414:	2b00      	cmp	r3, #0
    3416:	d100      	bne.n	341a <tc_init+0x146>
    3418:	0011      	movs	r1, r2
    341a:	6832      	ldr	r2, [r6, #0]
    341c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    341e:	b25b      	sxtb	r3, r3
    3420:	2b00      	cmp	r3, #0
    3422:	dbfb      	blt.n	341c <tc_init+0x148>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    3424:	23ff      	movs	r3, #255	; 0xff
    3426:	713b      	strb	r3, [r7, #4]
	if (ctrlbset_tmp) {
    3428:	2900      	cmp	r1, #0
    342a:	d005      	beq.n	3438 <tc_init+0x164>
    342c:	6832      	ldr	r2, [r6, #0]
    342e:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    3430:	b25b      	sxtb	r3, r3
    3432:	2b00      	cmp	r3, #0
    3434:	dbfb      	blt.n	342e <tc_init+0x15a>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3436:	7179      	strb	r1, [r7, #5]
	ctrlc_tmp = config->waveform_invert_output;
    3438:	464b      	mov	r3, r9
    343a:	7a99      	ldrb	r1, [r3, #10]
		if (config->enable_capture_on_channel[i] == true) {
    343c:	7adb      	ldrb	r3, [r3, #11]
    343e:	2b00      	cmp	r3, #0
    3440:	d001      	beq.n	3446 <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    3442:	2310      	movs	r3, #16
    3444:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    3446:	464b      	mov	r3, r9
    3448:	7b1b      	ldrb	r3, [r3, #12]
    344a:	2b00      	cmp	r3, #0
    344c:	d001      	beq.n	3452 <tc_init+0x17e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    344e:	2320      	movs	r3, #32
    3450:	4319      	orrs	r1, r3
    3452:	6832      	ldr	r2, [r6, #0]
    3454:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    3456:	b25b      	sxtb	r3, r3
    3458:	2b00      	cmp	r3, #0
    345a:	dbfb      	blt.n	3454 <tc_init+0x180>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    345c:	71b9      	strb	r1, [r7, #6]
    345e:	6832      	ldr	r2, [r6, #0]
    3460:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    3462:	b25b      	sxtb	r3, r3
    3464:	2b00      	cmp	r3, #0
    3466:	dbfb      	blt.n	3460 <tc_init+0x18c>
	switch (module_inst->counter_size) {
    3468:	7933      	ldrb	r3, [r6, #4]
    346a:	2b04      	cmp	r3, #4
    346c:	d01e      	beq.n	34ac <tc_init+0x1d8>
    346e:	2b08      	cmp	r3, #8
    3470:	d041      	beq.n	34f6 <tc_init+0x222>
	return STATUS_ERR_INVALID_ARG;
    3472:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    3474:	2b00      	cmp	r3, #0
    3476:	d000      	beq.n	347a <tc_init+0x1a6>
    3478:	e779      	b.n	336e <tc_init+0x9a>
    347a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    347c:	b25b      	sxtb	r3, r3
    347e:	2b00      	cmp	r3, #0
    3480:	dbfb      	blt.n	347a <tc_init+0x1a6>
				= config->counter_16_bit.value;
    3482:	464b      	mov	r3, r9
    3484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3486:	823b      	strh	r3, [r7, #16]
    3488:	6832      	ldr	r2, [r6, #0]
    348a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    348c:	b25b      	sxtb	r3, r3
    348e:	2b00      	cmp	r3, #0
    3490:	dbfb      	blt.n	348a <tc_init+0x1b6>
					config->counter_16_bit.compare_capture_channel[0];
    3492:	464b      	mov	r3, r9
    3494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    3496:	833b      	strh	r3, [r7, #24]
    3498:	6832      	ldr	r2, [r6, #0]
    349a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    349c:	b25b      	sxtb	r3, r3
    349e:	2b00      	cmp	r3, #0
    34a0:	dbfb      	blt.n	349a <tc_init+0x1c6>
					config->counter_16_bit.compare_capture_channel[1];
    34a2:	464b      	mov	r3, r9
    34a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			return STATUS_OK;
    34a6:	2000      	movs	r0, #0
			hw->COUNT16.CC[1].reg =
    34a8:	837b      	strh	r3, [r7, #26]
			return STATUS_OK;
    34aa:	e760      	b.n	336e <tc_init+0x9a>
    34ac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    34ae:	b25b      	sxtb	r3, r3
    34b0:	2b00      	cmp	r3, #0
    34b2:	dbfb      	blt.n	34ac <tc_init+0x1d8>
					config->counter_8_bit.value;
    34b4:	464a      	mov	r2, r9
    34b6:	2328      	movs	r3, #40	; 0x28
    34b8:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.COUNT.reg =
    34ba:	743b      	strb	r3, [r7, #16]
    34bc:	6832      	ldr	r2, [r6, #0]
    34be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    34c0:	b25b      	sxtb	r3, r3
    34c2:	2b00      	cmp	r3, #0
    34c4:	dbfb      	blt.n	34be <tc_init+0x1ea>
					config->counter_8_bit.period;
    34c6:	464a      	mov	r2, r9
    34c8:	2329      	movs	r3, #41	; 0x29
    34ca:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.PER.reg =
    34cc:	753b      	strb	r3, [r7, #20]
    34ce:	6832      	ldr	r2, [r6, #0]
    34d0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    34d2:	b25b      	sxtb	r3, r3
    34d4:	2b00      	cmp	r3, #0
    34d6:	dbfb      	blt.n	34d0 <tc_init+0x1fc>
					config->counter_8_bit.compare_capture_channel[0];
    34d8:	464a      	mov	r2, r9
    34da:	232a      	movs	r3, #42	; 0x2a
    34dc:	5cd3      	ldrb	r3, [r2, r3]
			hw->COUNT8.CC[0].reg =
    34de:	763b      	strb	r3, [r7, #24]
    34e0:	6832      	ldr	r2, [r6, #0]
    34e2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    34e4:	b25b      	sxtb	r3, r3
    34e6:	2b00      	cmp	r3, #0
    34e8:	dbfb      	blt.n	34e2 <tc_init+0x20e>
					config->counter_8_bit.compare_capture_channel[1];
    34ea:	232b      	movs	r3, #43	; 0x2b
    34ec:	464a      	mov	r2, r9
    34ee:	5cd3      	ldrb	r3, [r2, r3]
			return STATUS_OK;
    34f0:	2000      	movs	r0, #0
			hw->COUNT8.CC[1].reg =
    34f2:	767b      	strb	r3, [r7, #25]
			return STATUS_OK;
    34f4:	e73b      	b.n	336e <tc_init+0x9a>
    34f6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    34f8:	b25b      	sxtb	r3, r3
    34fa:	2b00      	cmp	r3, #0
    34fc:	dbfb      	blt.n	34f6 <tc_init+0x222>
				= config->counter_32_bit.value;
    34fe:	464b      	mov	r3, r9
    3500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3502:	613b      	str	r3, [r7, #16]
    3504:	6832      	ldr	r2, [r6, #0]
    3506:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    3508:	b25b      	sxtb	r3, r3
    350a:	2b00      	cmp	r3, #0
    350c:	dbfb      	blt.n	3506 <tc_init+0x232>
			hw->COUNT32.CC[0].reg =
    350e:	464b      	mov	r3, r9
    3510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3512:	61bb      	str	r3, [r7, #24]
    3514:	6832      	ldr	r2, [r6, #0]
    3516:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    3518:	b25b      	sxtb	r3, r3
    351a:	2b00      	cmp	r3, #0
    351c:	dbfb      	blt.n	3516 <tc_init+0x242>
					config->counter_32_bit.compare_capture_channel[1];
    351e:	464b      	mov	r3, r9
    3520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			return STATUS_OK;
    3522:	2000      	movs	r0, #0
			hw->COUNT32.CC[1].reg =
    3524:	61fb      	str	r3, [r7, #28]
			return STATUS_OK;
    3526:	e722      	b.n	336e <tc_init+0x9a>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3528:	2200      	movs	r2, #0
    352a:	4690      	mov	r8, r2
    352c:	e6f9      	b.n	3322 <tc_init+0x4e>
    352e:	2201      	movs	r2, #1
    3530:	4690      	mov	r8, r2
    3532:	e6f6      	b.n	3322 <tc_init+0x4e>
    3534:	2202      	movs	r2, #2
    3536:	4690      	mov	r8, r2
    3538:	e6f3      	b.n	3322 <tc_init+0x4e>
    353a:	2203      	movs	r2, #3
    353c:	4690      	mov	r8, r2
    353e:	e6f0      	b.n	3322 <tc_init+0x4e>
    3540:	2204      	movs	r2, #4
    3542:	4690      	mov	r8, r2
    3544:	e6ed      	b.n	3322 <tc_init+0x4e>
    3546:	2105      	movs	r1, #5
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    3548:	2204      	movs	r2, #4
    354a:	e761      	b.n	3410 <tc_init+0x13c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    354c:	a902      	add	r1, sp, #8
	config->powersave    = false;
    354e:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    3550:	464b      	mov	r3, r9
    3552:	7e1b      	ldrb	r3, [r3, #24]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3554:	708a      	strb	r2, [r1, #2]
    3556:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(
    3558:	464b      	mov	r3, r9
    355a:	7d18      	ldrb	r0, [r3, #20]
    355c:	4b13      	ldr	r3, [pc, #76]	; (35ac <tc_init+0x2d8>)
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    355e:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    3560:	4798      	blx	r3
    3562:	e71b      	b.n	339c <tc_init+0xc8>
	config->powersave    = false;
    3564:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3566:	a902      	add	r1, sp, #8
	config->powersave    = false;
    3568:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    356a:	2024      	movs	r0, #36	; 0x24
    356c:	464a      	mov	r2, r9
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    356e:	2301      	movs	r3, #1
    3570:	1812      	adds	r2, r2, r0
    3572:	7812      	ldrb	r2, [r2, #0]
    3574:	708b      	strb	r3, [r1, #2]
    3576:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3578:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    357a:	2220      	movs	r2, #32
    357c:	464b      	mov	r3, r9
    357e:	189b      	adds	r3, r3, r2
    3580:	7818      	ldrb	r0, [r3, #0]
    3582:	4b0a      	ldr	r3, [pc, #40]	; (35ac <tc_init+0x2d8>)
    3584:	4798      	blx	r3
    3586:	e70e      	b.n	33a6 <tc_init+0xd2>
				inst_pm_apbmask[instance + 1]);
    3588:	4643      	mov	r3, r8
    358a:	1c59      	adds	r1, r3, #1
    358c:	0049      	lsls	r1, r1, #1
    358e:	6a10      	ldr	r0, [r2, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3590:	5a63      	ldrh	r3, [r4, r1]
    3592:	4303      	orrs	r3, r0
    3594:	6213      	str	r3, [r2, #32]
    3596:	e712      	b.n	33be <tc_init+0xea>
    3598:	00006318 	.word	0x00006318
    359c:	200003ac 	.word	0x200003ac
    35a0:	40000400 	.word	0x40000400
    35a4:	00002df1 	.word	0x00002df1
    35a8:	00002e55 	.word	0x00002e55
    35ac:	00002f65 	.word	0x00002f65

000035b0 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    35b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35b2:	4657      	mov	r7, sl
    35b4:	464e      	mov	r6, r9
    35b6:	46de      	mov	lr, fp
    35b8:	4645      	mov	r5, r8
    35ba:	b5e0      	push	{r5, r6, r7, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    35bc:	798e      	ldrb	r6, [r1, #6]
{
    35be:	b083      	sub	sp, #12

	if (ep & USB_EP_DIR_IN) {
    35c0:	b273      	sxtb	r3, r6
{
    35c2:	468a      	mov	sl, r1
	if (ep & USB_EP_DIR_IN) {
    35c4:	2b00      	cmp	r3, #0
    35c6:	da00      	bge.n	35ca <udd_ep_transfer_process+0x1a>
    35c8:	e071      	b.n	36ae <udd_ep_transfer_process+0xfe>
	if ((ep == 0) || (ep == 0x80)) {
    35ca:	2e00      	cmp	r6, #0
    35cc:	d033      	beq.n	3636 <udd_ep_transfer_process+0x86>
    35ce:	230f      	movs	r3, #15
    35d0:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    35d2:	005c      	lsls	r4, r3, #1
    35d4:	3c02      	subs	r4, #2
	ep_size = ptr_job->ep_size;
    35d6:	00a5      	lsls	r5, r4, #2
    35d8:	4699      	mov	r9, r3
    35da:	4f6f      	ldr	r7, [pc, #444]	; (3798 <udd_ep_transfer_process+0x1e8>)
    35dc:	192b      	adds	r3, r5, r4
    35de:	009b      	lsls	r3, r3, #2
    35e0:	18fb      	adds	r3, r7, r3
    35e2:	8a1a      	ldrh	r2, [r3, #16]
    35e4:	9201      	str	r2, [sp, #4]
	nb_trans = ep_callback_para->received_bytes;
    35e6:	880a      	ldrh	r2, [r1, #0]
    35e8:	4693      	mov	fp, r2
	if (ptr_job->b_use_out_cache_buffer) {
    35ea:	7c9a      	ldrb	r2, [r3, #18]
    35ec:	0752      	lsls	r2, r2, #29
    35ee:	d426      	bmi.n	363e <udd_ep_transfer_process+0x8e>
	ptr_job->nb_trans += nb_trans;
    35f0:	192b      	adds	r3, r5, r4
    35f2:	009b      	lsls	r3, r3, #2
    35f4:	18fb      	adds	r3, r7, r3
    35f6:	68da      	ldr	r2, [r3, #12]
    35f8:	445a      	add	r2, fp
    35fa:	4690      	mov	r8, r2
    35fc:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    35fe:	689a      	ldr	r2, [r3, #8]
    3600:	4590      	cmp	r8, r2
    3602:	d81a      	bhi.n	363a <udd_ep_transfer_process+0x8a>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    3604:	4653      	mov	r3, sl
    3606:	889b      	ldrh	r3, [r3, #4]
    3608:	455b      	cmp	r3, fp
    360a:	d02b      	beq.n	3664 <udd_ep_transfer_process+0xb4>
	ptr_job->busy = false;
    360c:	2001      	movs	r0, #1
    360e:	192c      	adds	r4, r5, r4
    3610:	00a4      	lsls	r4, r4, #2
    3612:	1939      	adds	r1, r7, r4
    3614:	7c8b      	ldrb	r3, [r1, #18]
    3616:	4383      	bics	r3, r0
    3618:	748b      	strb	r3, [r1, #18]
	if (NULL != ptr_job->call_trans) {
    361a:	593b      	ldr	r3, [r7, r4]
    361c:	2b00      	cmp	r3, #0
    361e:	d003      	beq.n	3628 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3620:	68c9      	ldr	r1, [r1, #12]
    3622:	0032      	movs	r2, r6
    3624:	2000      	movs	r0, #0
    3626:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    3628:	b003      	add	sp, #12
    362a:	bc3c      	pop	{r2, r3, r4, r5}
    362c:	4690      	mov	r8, r2
    362e:	4699      	mov	r9, r3
    3630:	46a2      	mov	sl, r4
    3632:	46ab      	mov	fp, r5
    3634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_size = ptr_job->ep_size;
    3636:	8a33      	ldrh	r3, [r6, #16]
    3638:	deff      	udf	#255	; 0xff
		ptr_job->nb_trans = ptr_job->buf_size;
    363a:	60da      	str	r2, [r3, #12]
    363c:	e7e6      	b.n	360c <udd_ep_transfer_process+0x5c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    363e:	68d9      	ldr	r1, [r3, #12]
    3640:	685a      	ldr	r2, [r3, #4]
    3642:	468c      	mov	ip, r1
    3644:	6898      	ldr	r0, [r3, #8]
    3646:	4462      	add	r2, ip
    3648:	9901      	ldr	r1, [sp, #4]
    364a:	4b54      	ldr	r3, [pc, #336]	; (379c <udd_ep_transfer_process+0x1ec>)
    364c:	4690      	mov	r8, r2
    364e:	4798      	blx	r3
    3650:	464b      	mov	r3, r9
    3652:	000a      	movs	r2, r1
    3654:	3b01      	subs	r3, #1
    3656:	4952      	ldr	r1, [pc, #328]	; (37a0 <udd_ep_transfer_process+0x1f0>)
    3658:	019b      	lsls	r3, r3, #6
    365a:	1859      	adds	r1, r3, r1
    365c:	4640      	mov	r0, r8
    365e:	4b51      	ldr	r3, [pc, #324]	; (37a4 <udd_ep_transfer_process+0x1f4>)
    3660:	4798      	blx	r3
    3662:	e7c5      	b.n	35f0 <udd_ep_transfer_process+0x40>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    3664:	4590      	cmp	r8, r2
    3666:	d0d1      	beq.n	360c <udd_ep_transfer_process+0x5c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3668:	4643      	mov	r3, r8
    366a:	1ad2      	subs	r2, r2, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    366c:	4b4e      	ldr	r3, [pc, #312]	; (37a8 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    366e:	b296      	uxth	r6, r2
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3670:	469a      	mov	sl, r3
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    3672:	9901      	ldr	r1, [sp, #4]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3674:	429e      	cmp	r6, r3
    3676:	d96c      	bls.n	3752 <udd_ep_transfer_process+0x1a2>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    3678:	0018      	movs	r0, r3
    367a:	4b4c      	ldr	r3, [pc, #304]	; (37ac <udd_ep_transfer_process+0x1fc>)
    367c:	4798      	blx	r3
    367e:	4653      	mov	r3, sl
    3680:	1a5b      	subs	r3, r3, r1
    3682:	b29b      	uxth	r3, r3
			ptr_job->b_use_out_cache_buffer = true;
    3684:	192c      	adds	r4, r5, r4
		if (next_trans < ep_size) {
    3686:	9901      	ldr	r1, [sp, #4]
			ptr_job->b_use_out_cache_buffer = true;
    3688:	00a4      	lsls	r4, r4, #2
    368a:	193f      	adds	r7, r7, r4
		if (next_trans < ep_size) {
    368c:	4299      	cmp	r1, r3
    368e:	d959      	bls.n	3744 <udd_ep_transfer_process+0x194>
			ptr_job->b_use_out_cache_buffer = true;
    3690:	2204      	movs	r2, #4
    3692:	7cbb      	ldrb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    3694:	4c46      	ldr	r4, [pc, #280]	; (37b0 <udd_ep_transfer_process+0x200>)
			ptr_job->b_use_out_cache_buffer = true;
    3696:	4313      	orrs	r3, r2
    3698:	74bb      	strb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    369a:	464b      	mov	r3, r9
    369c:	1e5a      	subs	r2, r3, #1
    369e:	4b40      	ldr	r3, [pc, #256]	; (37a0 <udd_ep_transfer_process+0x1f0>)
    36a0:	0192      	lsls	r2, r2, #6
    36a2:	18d2      	adds	r2, r2, r3
    36a4:	4843      	ldr	r0, [pc, #268]	; (37b4 <udd_ep_transfer_process+0x204>)
    36a6:	000b      	movs	r3, r1
    36a8:	4649      	mov	r1, r9
    36aa:	47a0      	blx	r4
    36ac:	e7bc      	b.n	3628 <udd_ep_transfer_process+0x78>
	if ((ep == 0) || (ep == 0x80)) {
    36ae:	2e80      	cmp	r6, #128	; 0x80
    36b0:	d045      	beq.n	373e <udd_ep_transfer_process+0x18e>
    36b2:	230f      	movs	r3, #15
    36b4:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    36b6:	005c      	lsls	r4, r3, #1
    36b8:	4699      	mov	r9, r3
    36ba:	1e63      	subs	r3, r4, #1
	ep_size = ptr_job->ep_size;
    36bc:	009c      	lsls	r4, r3, #2
    36be:	18e0      	adds	r0, r4, r3
    36c0:	4f35      	ldr	r7, [pc, #212]	; (3798 <udd_ep_transfer_process+0x1e8>)
    36c2:	0080      	lsls	r0, r0, #2
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    36c4:	4698      	mov	r8, r3
	ep_size = ptr_job->ep_size;
    36c6:	183b      	adds	r3, r7, r0
    36c8:	8a19      	ldrh	r1, [r3, #16]
    36ca:	001a      	movs	r2, r3
    36cc:	468b      	mov	fp, r1
	ptr_job->nb_trans += nb_trans;
    36ce:	4651      	mov	r1, sl
    36d0:	884d      	ldrh	r5, [r1, #2]
    36d2:	68d9      	ldr	r1, [r3, #12]
	ep_size = ptr_job->ep_size;
    36d4:	3210      	adds	r2, #16
	ptr_job->nb_trans += nb_trans;
    36d6:	468c      	mov	ip, r1
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    36d8:	6899      	ldr	r1, [r3, #8]
	ptr_job->nb_trans += nb_trans;
    36da:	4465      	add	r5, ip
    36dc:	60dd      	str	r5, [r3, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    36de:	428d      	cmp	r5, r1
    36e0:	d03d      	beq.n	375e <udd_ep_transfer_process+0x1ae>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    36e2:	1b4e      	subs	r6, r1, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    36e4:	4b30      	ldr	r3, [pc, #192]	; (37a8 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    36e6:	b2b6      	uxth	r6, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    36e8:	469a      	mov	sl, r3
    36ea:	429e      	cmp	r6, r3
    36ec:	d906      	bls.n	36fc <udd_ep_transfer_process+0x14c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    36ee:	0018      	movs	r0, r3
    36f0:	4659      	mov	r1, fp
    36f2:	4b2e      	ldr	r3, [pc, #184]	; (37ac <udd_ep_transfer_process+0x1fc>)
    36f4:	4798      	blx	r3
    36f6:	4653      	mov	r3, sl
    36f8:	1a5e      	subs	r6, r3, r1
    36fa:	b2b6      	uxth	r6, r6
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    36fc:	4643      	mov	r3, r8
    36fe:	18e3      	adds	r3, r4, r3
    3700:	009b      	lsls	r3, r3, #2
    3702:	18fb      	adds	r3, r7, r3
    3704:	7c9a      	ldrb	r2, [r3, #18]
    3706:	2300      	movs	r3, #0
    3708:	0792      	lsls	r2, r2, #30
    370a:	d507      	bpl.n	371c <udd_ep_transfer_process+0x16c>
    370c:	4b23      	ldr	r3, [pc, #140]	; (379c <udd_ep_transfer_process+0x1ec>)
    370e:	4659      	mov	r1, fp
    3710:	0030      	movs	r0, r6
    3712:	4798      	blx	r3
    3714:	b289      	uxth	r1, r1
    3716:	424b      	negs	r3, r1
    3718:	414b      	adcs	r3, r1
    371a:	b2db      	uxtb	r3, r3
    371c:	2002      	movs	r0, #2
    371e:	4444      	add	r4, r8
    3720:	00a4      	lsls	r4, r4, #2
    3722:	193f      	adds	r7, r7, r4
    3724:	7cba      	ldrb	r2, [r7, #18]
    3726:	005b      	lsls	r3, r3, #1
    3728:	4382      	bics	r2, r0
    372a:	4313      	orrs	r3, r2
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    372c:	687a      	ldr	r2, [r7, #4]
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    372e:	74bb      	strb	r3, [r7, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    3730:	1952      	adds	r2, r2, r5
    3732:	0033      	movs	r3, r6
    3734:	4649      	mov	r1, r9
    3736:	4c20      	ldr	r4, [pc, #128]	; (37b8 <udd_ep_transfer_process+0x208>)
    3738:	481e      	ldr	r0, [pc, #120]	; (37b4 <udd_ep_transfer_process+0x204>)
    373a:	47a0      	blx	r4
    373c:	e774      	b.n	3628 <udd_ep_transfer_process+0x78>
	ep_size = ptr_job->ep_size;
    373e:	2300      	movs	r3, #0
    3740:	8a1b      	ldrh	r3, [r3, #16]
    3742:	deff      	udf	#255	; 0xff
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    3744:	687a      	ldr	r2, [r7, #4]
    3746:	4649      	mov	r1, r9
    3748:	4442      	add	r2, r8
    374a:	4c19      	ldr	r4, [pc, #100]	; (37b0 <udd_ep_transfer_process+0x200>)
    374c:	4819      	ldr	r0, [pc, #100]	; (37b4 <udd_ep_transfer_process+0x204>)
    374e:	47a0      	blx	r4
    3750:	e76a      	b.n	3628 <udd_ep_transfer_process+0x78>
			next_trans -= next_trans % ep_size;
    3752:	4b12      	ldr	r3, [pc, #72]	; (379c <udd_ep_transfer_process+0x1ec>)
    3754:	0030      	movs	r0, r6
    3756:	4798      	blx	r3
    3758:	1a73      	subs	r3, r6, r1
    375a:	b29b      	uxth	r3, r3
    375c:	e792      	b.n	3684 <udd_ep_transfer_process+0xd4>
	if (ptr_job->b_shortpacket) {
    375e:	2102      	movs	r1, #2
    3760:	7c9c      	ldrb	r4, [r3, #18]
    3762:	4221      	tst	r1, r4
    3764:	d10c      	bne.n	3780 <udd_ep_transfer_process+0x1d0>
	ptr_job->busy = false;
    3766:	2101      	movs	r1, #1
    3768:	7893      	ldrb	r3, [r2, #2]
    376a:	438b      	bics	r3, r1
    376c:	7093      	strb	r3, [r2, #2]
	if (NULL != ptr_job->call_trans) {
    376e:	583b      	ldr	r3, [r7, r0]
    3770:	2b00      	cmp	r3, #0
    3772:	d100      	bne.n	3776 <udd_ep_transfer_process+0x1c6>
    3774:	e758      	b.n	3628 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3776:	0032      	movs	r2, r6
    3778:	0029      	movs	r1, r5
    377a:	2000      	movs	r0, #0
    377c:	4798      	blx	r3
    377e:	e753      	b.n	3628 <udd_ep_transfer_process+0x78>
		ptr_job->b_shortpacket = false;
    3780:	7890      	ldrb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    3782:	4c0d      	ldr	r4, [pc, #52]	; (37b8 <udd_ep_transfer_process+0x208>)
		ptr_job->b_shortpacket = false;
    3784:	4388      	bics	r0, r1
    3786:	7090      	strb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    3788:	685a      	ldr	r2, [r3, #4]
    378a:	4649      	mov	r1, r9
    378c:	1952      	adds	r2, r2, r5
    378e:	2300      	movs	r3, #0
    3790:	4808      	ldr	r0, [pc, #32]	; (37b4 <udd_ep_transfer_process+0x204>)
    3792:	47a0      	blx	r4
    3794:	e748      	b.n	3628 <udd_ep_transfer_process+0x78>
    3796:	46c0      	nop			; (mov r8, r8)
    3798:	200002a8 	.word	0x200002a8
    379c:	00005ed9 	.word	0x00005ed9
    37a0:	200003c0 	.word	0x200003c0
    37a4:	00006195 	.word	0x00006195
    37a8:	00001fff 	.word	0x00001fff
    37ac:	000060ad 	.word	0x000060ad
    37b0:	00004d89 	.word	0x00004d89
    37b4:	20000480 	.word	0x20000480
    37b8:	00004d3d 	.word	0x00004d3d

000037bc <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    37bc:	b530      	push	{r4, r5, lr}
    37be:	0004      	movs	r4, r0
    37c0:	b083      	sub	sp, #12
	// Reset USB Device Stack Core
	udc_reset();
    37c2:	4b1e      	ldr	r3, [pc, #120]	; (383c <_usb_on_bus_reset+0x80>)
    37c4:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    37c6:	2380      	movs	r3, #128	; 0x80
    37c8:	6822      	ldr	r2, [r4, #0]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    37ca:	ad01      	add	r5, sp, #4
    37cc:	7293      	strb	r3, [r2, #10]
    37ce:	0028      	movs	r0, r5
    37d0:	4b1b      	ldr	r3, [pc, #108]	; (3840 <_usb_on_bus_reset+0x84>)
    37d2:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    37d4:	2303      	movs	r3, #3
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    37d6:	0029      	movs	r1, r5
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    37d8:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    37da:	0020      	movs	r0, r4
    37dc:	4b19      	ldr	r3, [pc, #100]	; (3844 <_usb_on_bus_reset+0x88>)
    37de:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    37e0:	4919      	ldr	r1, [pc, #100]	; (3848 <_usb_on_bus_reset+0x8c>)
    37e2:	0020      	movs	r0, r4
    37e4:	4b19      	ldr	r3, [pc, #100]	; (384c <_usb_on_bus_reset+0x90>)
    37e6:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    37e8:	4d19      	ldr	r5, [pc, #100]	; (3850 <_usb_on_bus_reset+0x94>)
    37ea:	4b1a      	ldr	r3, [pc, #104]	; (3854 <_usb_on_bus_reset+0x98>)
    37ec:	2202      	movs	r2, #2
    37ee:	2100      	movs	r1, #0
    37f0:	0020      	movs	r0, r4
    37f2:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    37f4:	4b18      	ldr	r3, [pc, #96]	; (3858 <_usb_on_bus_reset+0x9c>)
    37f6:	2200      	movs	r2, #0
    37f8:	2100      	movs	r1, #0
    37fa:	0020      	movs	r0, r4
    37fc:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    37fe:	4b17      	ldr	r3, [pc, #92]	; (385c <_usb_on_bus_reset+0xa0>)
    3800:	2201      	movs	r2, #1
    3802:	2100      	movs	r1, #0
    3804:	0020      	movs	r0, r4
    3806:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    3808:	4d15      	ldr	r5, [pc, #84]	; (3860 <_usb_on_bus_reset+0xa4>)
    380a:	2202      	movs	r2, #2
    380c:	2100      	movs	r1, #0
    380e:	0020      	movs	r0, r4
    3810:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3812:	2200      	movs	r2, #0
    3814:	2100      	movs	r1, #0
    3816:	0020      	movs	r0, r4
    3818:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    381a:	2201      	movs	r2, #1
    381c:	2100      	movs	r1, #0
    381e:	0020      	movs	r0, r4
    3820:	47a8      	blx	r5
    3822:	6821      	ldr	r1, [r4, #0]
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3824:	4a0f      	ldr	r2, [pc, #60]	; (3864 <_usb_on_bus_reset+0xa8>)
    3826:	890b      	ldrh	r3, [r1, #8]
    3828:	401a      	ands	r2, r3
    382a:	2380      	movs	r3, #128	; 0x80
    382c:	00db      	lsls	r3, r3, #3
    382e:	4313      	orrs	r3, r2
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3830:	2200      	movs	r2, #0
    3832:	810b      	strh	r3, [r1, #8]
    3834:	4b0c      	ldr	r3, [pc, #48]	; (3868 <_usb_on_bus_reset+0xac>)
    3836:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    3838:	b003      	add	sp, #12
    383a:	bd30      	pop	{r4, r5, pc}
    383c:	00001021 	.word	0x00001021
    3840:	00004a55 	.word	0x00004a55
    3844:	00004a65 	.word	0x00004a65
    3848:	20000600 	.word	0x20000600
    384c:	00004dd1 	.word	0x00004dd1
    3850:	000048a5 	.word	0x000048a5
    3854:	00003c31 	.word	0x00003c31
    3858:	00003e49 	.word	0x00003e49
    385c:	0000386d 	.word	0x0000386d
    3860:	000048f5 	.word	0x000048f5
    3864:	fffff3ff 	.word	0xfffff3ff
    3868:	200002a6 	.word	0x200002a6

0000386c <_usb_ep0_on_tansfer_fail>:
{
    386c:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    386e:	7989      	ldrb	r1, [r1, #6]
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3870:	4a12      	ldr	r2, [pc, #72]	; (38bc <_usb_ep0_on_tansfer_fail+0x50>)
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    3872:	b24b      	sxtb	r3, r1
    3874:	2b00      	cmp	r3, #0
    3876:	db05      	blt.n	3884 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    3878:	7813      	ldrb	r3, [r2, #0]
    387a:	2b02      	cmp	r3, #2
    387c:	d00b      	beq.n	3896 <_usb_ep0_on_tansfer_fail+0x2a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    387e:	2b03      	cmp	r3, #3
    3880:	d005      	beq.n	388e <_usb_ep0_on_tansfer_fail+0x22>
}
    3882:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3884:	7813      	ldrb	r3, [r2, #0]
    3886:	2b01      	cmp	r3, #1
    3888:	d008      	beq.n	389c <_usb_ep0_on_tansfer_fail+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    388a:	2b04      	cmp	r3, #4
    388c:	d1f9      	bne.n	3882 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    388e:	480c      	ldr	r0, [pc, #48]	; (38c0 <_usb_ep0_on_tansfer_fail+0x54>)
    3890:	4b0c      	ldr	r3, [pc, #48]	; (38c4 <_usb_ep0_on_tansfer_fail+0x58>)
    3892:	4798      	blx	r3
}
    3894:	e7f5      	b.n	3882 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3896:	3302      	adds	r3, #2
    3898:	7013      	strb	r3, [r2, #0]
    389a:	e7f2      	b.n	3882 <_usb_ep0_on_tansfer_fail+0x16>
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    389c:	4c08      	ldr	r4, [pc, #32]	; (38c0 <_usb_ep0_on_tansfer_fail+0x54>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    389e:	3302      	adds	r3, #2
    38a0:	7013      	strb	r3, [r2, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    38a2:	4909      	ldr	r1, [pc, #36]	; (38c8 <_usb_ep0_on_tansfer_fail+0x5c>)
    38a4:	0020      	movs	r0, r4
    38a6:	4b09      	ldr	r3, [pc, #36]	; (38cc <_usb_ep0_on_tansfer_fail+0x60>)
    38a8:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    38aa:	4b09      	ldr	r3, [pc, #36]	; (38d0 <_usb_ep0_on_tansfer_fail+0x64>)
    38ac:	2100      	movs	r1, #0
    38ae:	689a      	ldr	r2, [r3, #8]
    38b0:	0020      	movs	r0, r4
    38b2:	2300      	movs	r3, #0
    38b4:	4c07      	ldr	r4, [pc, #28]	; (38d4 <_usb_ep0_on_tansfer_fail+0x68>)
    38b6:	47a0      	blx	r4
    38b8:	e7e3      	b.n	3882 <_usb_ep0_on_tansfer_fail+0x16>
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	200002a6 	.word	0x200002a6
    38c0:	20000480 	.word	0x20000480
    38c4:	00004ca1 	.word	0x00004ca1
    38c8:	20000600 	.word	0x20000600
    38cc:	00004dd1 	.word	0x00004dd1
    38d0:	200005e8 	.word	0x200005e8
    38d4:	00004d3d 	.word	0x00004d3d

000038d8 <udd_ctrl_in_sent>:
{
    38d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    38da:	4d1f      	ldr	r5, [pc, #124]	; (3958 <udd_ctrl_in_sent+0x80>)
    38dc:	4e1f      	ldr	r6, [pc, #124]	; (395c <udd_ctrl_in_sent+0x84>)
    38de:	882a      	ldrh	r2, [r5, #0]
    38e0:	89b4      	ldrh	r4, [r6, #12]
    38e2:	1aa4      	subs	r4, r4, r2
    38e4:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    38e6:	2c00      	cmp	r4, #0
    38e8:	d010      	beq.n	390c <udd_ctrl_in_sent+0x34>
    38ea:	4f1d      	ldr	r7, [pc, #116]	; (3960 <udd_ctrl_in_sent+0x88>)
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    38ec:	2c3f      	cmp	r4, #63	; 0x3f
    38ee:	d923      	bls.n	3938 <udd_ctrl_in_sent+0x60>
    38f0:	2340      	movs	r3, #64	; 0x40
		b_shortpacket = false;
    38f2:	2100      	movs	r1, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    38f4:	2440      	movs	r4, #64	; 0x40
    38f6:	7039      	strb	r1, [r7, #0]
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    38f8:	68b1      	ldr	r1, [r6, #8]
    38fa:	481a      	ldr	r0, [pc, #104]	; (3964 <udd_ctrl_in_sent+0x8c>)
    38fc:	188a      	adds	r2, r1, r2
    38fe:	4e1a      	ldr	r6, [pc, #104]	; (3968 <udd_ctrl_in_sent+0x90>)
    3900:	2100      	movs	r1, #0
    3902:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3904:	882b      	ldrh	r3, [r5, #0]
    3906:	18e4      	adds	r4, r4, r3
    3908:	802c      	strh	r4, [r5, #0]
}
    390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    390c:	4917      	ldr	r1, [pc, #92]	; (396c <udd_ctrl_in_sent+0x94>)
    390e:	880b      	ldrh	r3, [r1, #0]
    3910:	18d3      	adds	r3, r2, r3
    3912:	b29b      	uxth	r3, r3
    3914:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    3916:	88f1      	ldrh	r1, [r6, #6]
    3918:	4299      	cmp	r1, r3
    391a:	d010      	beq.n	393e <udd_ctrl_in_sent+0x66>
    391c:	4f10      	ldr	r7, [pc, #64]	; (3960 <udd_ctrl_in_sent+0x88>)
    391e:	783b      	ldrb	r3, [r7, #0]
    3920:	2b00      	cmp	r3, #0
    3922:	d10c      	bne.n	393e <udd_ctrl_in_sent+0x66>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3924:	6973      	ldr	r3, [r6, #20]
    3926:	2b00      	cmp	r3, #0
    3928:	d004      	beq.n	3934 <udd_ctrl_in_sent+0x5c>
    392a:	4798      	blx	r3
    392c:	2800      	cmp	r0, #0
    392e:	d10e      	bne.n	394e <udd_ctrl_in_sent+0x76>
    3930:	2300      	movs	r3, #0
    3932:	882a      	ldrh	r2, [r5, #0]
		b_shortpacket = true;
    3934:	2101      	movs	r1, #1
    3936:	e7de      	b.n	38f6 <udd_ctrl_in_sent+0x1e>
    3938:	0023      	movs	r3, r4
    393a:	2101      	movs	r1, #1
    393c:	e7db      	b.n	38f6 <udd_ctrl_in_sent+0x1e>
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    393e:	2204      	movs	r2, #4
    3940:	4b0b      	ldr	r3, [pc, #44]	; (3970 <udd_ctrl_in_sent+0x98>)
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3942:	490c      	ldr	r1, [pc, #48]	; (3974 <udd_ctrl_in_sent+0x9c>)
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3944:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3946:	4807      	ldr	r0, [pc, #28]	; (3964 <udd_ctrl_in_sent+0x8c>)
    3948:	4b0b      	ldr	r3, [pc, #44]	; (3978 <udd_ctrl_in_sent+0xa0>)
    394a:	4798      	blx	r3
			return;
    394c:	e7dd      	b.n	390a <udd_ctrl_in_sent+0x32>
			udd_ctrl_payload_nb_trans = 0;
    394e:	802c      	strh	r4, [r5, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3950:	89b4      	ldrh	r4, [r6, #12]
    3952:	2200      	movs	r2, #0
    3954:	e7ca      	b.n	38ec <udd_ctrl_in_sent+0x14>
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	200002a2 	.word	0x200002a2
    395c:	200005e8 	.word	0x200005e8
    3960:	200002a0 	.word	0x200002a0
    3964:	20000480 	.word	0x20000480
    3968:	00004d3d 	.word	0x00004d3d
    396c:	200002a4 	.word	0x200002a4
    3970:	200002a6 	.word	0x200002a6
    3974:	20000600 	.word	0x20000600
    3978:	00004dd1 	.word	0x00004dd1

0000397c <_usb_on_sof_notify>:
{
    397c:	b510      	push	{r4, lr}
	udc_sof_notify();
    397e:	4b02      	ldr	r3, [pc, #8]	; (3988 <_usb_on_sof_notify+0xc>)
    3980:	4798      	blx	r3
	UDC_SOF_EVENT();
    3982:	4b02      	ldr	r3, [pc, #8]	; (398c <_usb_on_sof_notify+0x10>)
    3984:	4798      	blx	r3
}
    3986:	bd10      	pop	{r4, pc}
    3988:	000010d1 	.word	0x000010d1
    398c:	00005a6d 	.word	0x00005a6d

00003990 <cpu_irq_restore.part.0>:
    3990:	2201      	movs	r2, #1
    3992:	4b03      	ldr	r3, [pc, #12]	; (39a0 <cpu_irq_restore.part.0+0x10>)
    3994:	701a      	strb	r2, [r3, #0]
    3996:	f3bf 8f5f 	dmb	sy
    399a:	b662      	cpsie	i
}
    399c:	4770      	bx	lr
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	200000e8 	.word	0x200000e8

000039a4 <_usb_device_lpm_suspend>:
{
    39a4:	b570      	push	{r4, r5, r6, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    39a6:	4c2e      	ldr	r4, [pc, #184]	; (3a60 <_usb_device_lpm_suspend+0xbc>)
{
    39a8:	b084      	sub	sp, #16
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    39aa:	0020      	movs	r0, r4
    39ac:	4e2d      	ldr	r6, [pc, #180]	; (3a64 <_usb_device_lpm_suspend+0xc0>)
{
    39ae:	000d      	movs	r5, r1
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    39b0:	2106      	movs	r1, #6
    39b2:	47b0      	blx	r6
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    39b4:	2104      	movs	r1, #4
    39b6:	0020      	movs	r0, r4
    39b8:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    39ba:	0020      	movs	r0, r4
    39bc:	4b2a      	ldr	r3, [pc, #168]	; (3a68 <_usb_device_lpm_suspend+0xc4>)
    39be:	2102      	movs	r1, #2
    39c0:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
    39c2:	4b2a      	ldr	r3, [pc, #168]	; (3a6c <_usb_device_lpm_suspend+0xc8>)
	if (udd_state == new_state) {
    39c4:	4c2a      	ldr	r4, [pc, #168]	; (3a70 <_usb_device_lpm_suspend+0xcc>)
	enum sleepmgr_mode sleep_mode[] = {
    39c6:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    39c8:	7823      	ldrb	r3, [r4, #0]
    39ca:	2b02      	cmp	r3, #2
    39cc:	d01e      	beq.n	3a0c <_usb_device_lpm_suspend+0x68>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    39ce:	4b29      	ldr	r3, [pc, #164]	; (3a74 <_usb_device_lpm_suspend+0xd0>)
    39d0:	789a      	ldrb	r2, [r3, #2]
    39d2:	2aff      	cmp	r2, #255	; 0xff
    39d4:	d023      	beq.n	3a1e <_usb_device_lpm_suspend+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    39d6:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    39da:	424a      	negs	r2, r1
    39dc:	414a      	adcs	r2, r1
    39de:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    39e0:	b672      	cpsid	i
    39e2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    39e6:	2200      	movs	r2, #0
    39e8:	4923      	ldr	r1, [pc, #140]	; (3a78 <_usb_device_lpm_suspend+0xd4>)
    39ea:	700a      	strb	r2, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    39ec:	789a      	ldrb	r2, [r3, #2]
	return flags;
    39ee:	9802      	ldr	r0, [sp, #8]
    39f0:	3201      	adds	r2, #1
    39f2:	709a      	strb	r2, [r3, #2]
	if (cpu_irq_is_enabled_flags(flags))
    39f4:	2800      	cmp	r0, #0
    39f6:	d004      	beq.n	3a02 <_usb_device_lpm_suspend+0x5e>
		cpu_irq_enable();
    39f8:	2201      	movs	r2, #1
    39fa:	700a      	strb	r2, [r1, #0]
    39fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a00:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    3a02:	7822      	ldrb	r2, [r4, #0]
    3a04:	2a00      	cmp	r2, #0
    3a06:	d10b      	bne.n	3a20 <_usb_device_lpm_suspend+0x7c>
	udd_state = new_state;
    3a08:	2302      	movs	r3, #2
    3a0a:	7023      	strb	r3, [r4, #0]
	if ((*lpm_wakeup_enable)) {
    3a0c:	682b      	ldr	r3, [r5, #0]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d11f      	bne.n	3a52 <_usb_device_lpm_suspend+0xae>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    3a12:	4b1a      	ldr	r3, [pc, #104]	; (3a7c <_usb_device_lpm_suspend+0xd8>)
    3a14:	4798      	blx	r3
	UDC_SUSPEND_LPM_EVENT();
    3a16:	4b1a      	ldr	r3, [pc, #104]	; (3a80 <_usb_device_lpm_suspend+0xdc>)
    3a18:	4798      	blx	r3
}
    3a1a:	b004      	add	sp, #16
    3a1c:	bd70      	pop	{r4, r5, r6, pc}
    3a1e:	e7fe      	b.n	3a1e <_usb_device_lpm_suspend+0x7a>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    3a20:	a801      	add	r0, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    3a22:	5c82      	ldrb	r2, [r0, r2]
    3a24:	5c98      	ldrb	r0, [r3, r2]
    3a26:	2800      	cmp	r0, #0
    3a28:	d012      	beq.n	3a50 <_usb_device_lpm_suspend+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a2a:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3a2e:	4270      	negs	r0, r6
    3a30:	4170      	adcs	r0, r6
    3a32:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    3a34:	b672      	cpsid	i
    3a36:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3a3a:	2000      	movs	r0, #0
    3a3c:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3a3e:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    3a40:	9803      	ldr	r0, [sp, #12]
    3a42:	3901      	subs	r1, #1
    3a44:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    3a46:	2800      	cmp	r0, #0
    3a48:	d0de      	beq.n	3a08 <_usb_device_lpm_suspend+0x64>
    3a4a:	4b0e      	ldr	r3, [pc, #56]	; (3a84 <_usb_device_lpm_suspend+0xe0>)
    3a4c:	4798      	blx	r3
    3a4e:	e7db      	b.n	3a08 <_usb_device_lpm_suspend+0x64>
    3a50:	e7fe      	b.n	3a50 <_usb_device_lpm_suspend+0xac>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    3a52:	4b0d      	ldr	r3, [pc, #52]	; (3a88 <_usb_device_lpm_suspend+0xe4>)
    3a54:	4798      	blx	r3
	if (!(*lpm_wakeup_enable)) {
    3a56:	682b      	ldr	r3, [r5, #0]
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d1dc      	bne.n	3a16 <_usb_device_lpm_suspend+0x72>
    3a5c:	e7d9      	b.n	3a12 <_usb_device_lpm_suspend+0x6e>
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	20000480 	.word	0x20000480
    3a64:	00004889 	.word	0x00004889
    3a68:	00004869 	.word	0x00004869
    3a6c:	01020300 	.word	0x01020300
    3a70:	20000320 	.word	0x20000320
    3a74:	20000344 	.word	0x20000344
    3a78:	200000e8 	.word	0x200000e8
    3a7c:	00005a99 	.word	0x00005a99
    3a80:	00005a8d 	.word	0x00005a8d
    3a84:	00003991 	.word	0x00003991
    3a88:	00005aa5 	.word	0x00005aa5

00003a8c <udd_sleep_mode.constprop.15>:
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
    3a8c:	b530      	push	{r4, r5, lr}
	enum sleepmgr_mode sleep_mode[] = {
    3a8e:	4b21      	ldr	r3, [pc, #132]	; (3b14 <udd_sleep_mode.constprop.15+0x88>)
	if (udd_state == new_state) {
    3a90:	4c21      	ldr	r4, [pc, #132]	; (3b18 <udd_sleep_mode.constprop.15+0x8c>)
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
    3a92:	b085      	sub	sp, #20
	enum sleepmgr_mode sleep_mode[] = {
    3a94:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    3a96:	7823      	ldrb	r3, [r4, #0]
    3a98:	2b01      	cmp	r3, #1
    3a9a:	d01e      	beq.n	3ada <udd_sleep_mode.constprop.15+0x4e>
	if(sleepmgr_locks[mode] >= 0xff) {
    3a9c:	4b1f      	ldr	r3, [pc, #124]	; (3b1c <udd_sleep_mode.constprop.15+0x90>)
    3a9e:	78da      	ldrb	r2, [r3, #3]
    3aa0:	2aff      	cmp	r2, #255	; 0xff
    3aa2:	d01c      	beq.n	3ade <udd_sleep_mode.constprop.15+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3aa4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3aa8:	4251      	negs	r1, r2
    3aaa:	414a      	adcs	r2, r1
    3aac:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    3aae:	b672      	cpsid	i
    3ab0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3ab4:	2200      	movs	r2, #0
    3ab6:	491a      	ldr	r1, [pc, #104]	; (3b20 <udd_sleep_mode.constprop.15+0x94>)
    3ab8:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    3aba:	78da      	ldrb	r2, [r3, #3]
	return flags;
    3abc:	9802      	ldr	r0, [sp, #8]
    3abe:	3201      	adds	r2, #1
    3ac0:	70da      	strb	r2, [r3, #3]
	if (cpu_irq_is_enabled_flags(flags))
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d004      	beq.n	3ad0 <udd_sleep_mode.constprop.15+0x44>
		cpu_irq_enable();
    3ac6:	2201      	movs	r2, #1
    3ac8:	700a      	strb	r2, [r1, #0]
    3aca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ace:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    3ad0:	7822      	ldrb	r2, [r4, #0]
    3ad2:	2a00      	cmp	r2, #0
    3ad4:	d104      	bne.n	3ae0 <udd_sleep_mode.constprop.15+0x54>
	udd_state = new_state;
    3ad6:	2301      	movs	r3, #1
    3ad8:	7023      	strb	r3, [r4, #0]
}
    3ada:	b005      	add	sp, #20
    3adc:	bd30      	pop	{r4, r5, pc}
    3ade:	e7fe      	b.n	3ade <udd_sleep_mode.constprop.15+0x52>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    3ae0:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    3ae2:	5c82      	ldrb	r2, [r0, r2]
    3ae4:	5c98      	ldrb	r0, [r3, r2]
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d012      	beq.n	3b10 <udd_sleep_mode.constprop.15+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3aea:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3aee:	4245      	negs	r5, r0
    3af0:	4168      	adcs	r0, r5
    3af2:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    3af4:	b672      	cpsid	i
    3af6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3afa:	2000      	movs	r0, #0
    3afc:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    3afe:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    3b00:	9803      	ldr	r0, [sp, #12]
    3b02:	3901      	subs	r1, #1
    3b04:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    3b06:	2800      	cmp	r0, #0
    3b08:	d0e5      	beq.n	3ad6 <udd_sleep_mode.constprop.15+0x4a>
    3b0a:	4b06      	ldr	r3, [pc, #24]	; (3b24 <udd_sleep_mode.constprop.15+0x98>)
    3b0c:	4798      	blx	r3
    3b0e:	e7e2      	b.n	3ad6 <udd_sleep_mode.constprop.15+0x4a>
    3b10:	e7fe      	b.n	3b10 <udd_sleep_mode.constprop.15+0x84>
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	01020300 	.word	0x01020300
    3b18:	20000320 	.word	0x20000320
    3b1c:	20000344 	.word	0x20000344
    3b20:	200000e8 	.word	0x200000e8
    3b24:	00003991 	.word	0x00003991

00003b28 <udd_sleep_mode.constprop.14>:
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
    3b28:	b530      	push	{r4, r5, lr}
	enum sleepmgr_mode sleep_mode[] = {
    3b2a:	4b21      	ldr	r3, [pc, #132]	; (3bb0 <udd_sleep_mode.constprop.14+0x88>)
	if (udd_state == new_state) {
    3b2c:	4c21      	ldr	r4, [pc, #132]	; (3bb4 <udd_sleep_mode.constprop.14+0x8c>)
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
    3b2e:	b085      	sub	sp, #20
	enum sleepmgr_mode sleep_mode[] = {
    3b30:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    3b32:	7823      	ldrb	r3, [r4, #0]
    3b34:	2b03      	cmp	r3, #3
    3b36:	d01e      	beq.n	3b76 <udd_sleep_mode.constprop.14+0x4e>
	if(sleepmgr_locks[mode] >= 0xff) {
    3b38:	4b1f      	ldr	r3, [pc, #124]	; (3bb8 <udd_sleep_mode.constprop.14+0x90>)
    3b3a:	785a      	ldrb	r2, [r3, #1]
    3b3c:	2aff      	cmp	r2, #255	; 0xff
    3b3e:	d01c      	beq.n	3b7a <udd_sleep_mode.constprop.14+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b40:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3b44:	4251      	negs	r1, r2
    3b46:	414a      	adcs	r2, r1
    3b48:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    3b4a:	b672      	cpsid	i
    3b4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b50:	2200      	movs	r2, #0
    3b52:	491a      	ldr	r1, [pc, #104]	; (3bbc <udd_sleep_mode.constprop.14+0x94>)
    3b54:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    3b56:	785a      	ldrb	r2, [r3, #1]
	return flags;
    3b58:	9802      	ldr	r0, [sp, #8]
    3b5a:	3201      	adds	r2, #1
    3b5c:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    3b5e:	2800      	cmp	r0, #0
    3b60:	d004      	beq.n	3b6c <udd_sleep_mode.constprop.14+0x44>
		cpu_irq_enable();
    3b62:	2201      	movs	r2, #1
    3b64:	700a      	strb	r2, [r1, #0]
    3b66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b6a:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    3b6c:	7822      	ldrb	r2, [r4, #0]
    3b6e:	2a00      	cmp	r2, #0
    3b70:	d104      	bne.n	3b7c <udd_sleep_mode.constprop.14+0x54>
	udd_state = new_state;
    3b72:	2303      	movs	r3, #3
    3b74:	7023      	strb	r3, [r4, #0]
}
    3b76:	b005      	add	sp, #20
    3b78:	bd30      	pop	{r4, r5, pc}
    3b7a:	e7fe      	b.n	3b7a <udd_sleep_mode.constprop.14+0x52>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    3b7c:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    3b7e:	5c82      	ldrb	r2, [r0, r2]
    3b80:	5c98      	ldrb	r0, [r3, r2]
    3b82:	2800      	cmp	r0, #0
    3b84:	d012      	beq.n	3bac <udd_sleep_mode.constprop.14+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b86:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3b8a:	4245      	negs	r5, r0
    3b8c:	4168      	adcs	r0, r5
    3b8e:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    3b90:	b672      	cpsid	i
    3b92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b96:	2000      	movs	r0, #0
    3b98:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    3b9a:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    3b9c:	9803      	ldr	r0, [sp, #12]
    3b9e:	3901      	subs	r1, #1
    3ba0:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    3ba2:	2800      	cmp	r0, #0
    3ba4:	d0e5      	beq.n	3b72 <udd_sleep_mode.constprop.14+0x4a>
    3ba6:	4b06      	ldr	r3, [pc, #24]	; (3bc0 <udd_sleep_mode.constprop.14+0x98>)
    3ba8:	4798      	blx	r3
    3baa:	e7e2      	b.n	3b72 <udd_sleep_mode.constprop.14+0x4a>
    3bac:	e7fe      	b.n	3bac <udd_sleep_mode.constprop.14+0x84>
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	01020300 	.word	0x01020300
    3bb4:	20000320 	.word	0x20000320
    3bb8:	20000344 	.word	0x20000344
    3bbc:	200000e8 	.word	0x200000e8
    3bc0:	00003991 	.word	0x00003991

00003bc4 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3bc4:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3bc6:	4b12      	ldr	r3, [pc, #72]	; (3c10 <_usb_on_wakeup+0x4c>)
    3bc8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    3bca:	0692      	lsls	r2, r2, #26
    3bcc:	d41b      	bmi.n	3c06 <_usb_on_wakeup+0x42>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3bce:	001a      	movs	r2, r3
    3bd0:	21d0      	movs	r1, #208	; 0xd0
    3bd2:	68d3      	ldr	r3, [r2, #12]
    3bd4:	400b      	ands	r3, r1
    3bd6:	2bd0      	cmp	r3, #208	; 0xd0
    3bd8:	d1fb      	bne.n	3bd2 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3bda:	4c0e      	ldr	r4, [pc, #56]	; (3c14 <_usb_on_wakeup+0x50>)
    3bdc:	4b0e      	ldr	r3, [pc, #56]	; (3c18 <_usb_on_wakeup+0x54>)
    3bde:	2102      	movs	r1, #2
    3be0:	0020      	movs	r0, r4
    3be2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3be4:	4d0d      	ldr	r5, [pc, #52]	; (3c1c <_usb_on_wakeup+0x58>)
    3be6:	2104      	movs	r1, #4
    3be8:	0020      	movs	r0, r4
    3bea:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3bec:	4a0c      	ldr	r2, [pc, #48]	; (3c20 <_usb_on_wakeup+0x5c>)
    3bee:	4b0d      	ldr	r3, [pc, #52]	; (3c24 <_usb_on_wakeup+0x60>)
    3bf0:	2106      	movs	r1, #6
    3bf2:	0020      	movs	r0, r4
    3bf4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3bf6:	2106      	movs	r1, #6
    3bf8:	0020      	movs	r0, r4
    3bfa:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3bfc:	4b0a      	ldr	r3, [pc, #40]	; (3c28 <_usb_on_wakeup+0x64>)
    3bfe:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3c00:	4b0a      	ldr	r3, [pc, #40]	; (3c2c <_usb_on_wakeup+0x68>)
    3c02:	4798      	blx	r3
#endif
}
    3c04:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3c06:	2110      	movs	r1, #16
    3c08:	68da      	ldr	r2, [r3, #12]
    3c0a:	4211      	tst	r1, r2
    3c0c:	d0fc      	beq.n	3c08 <_usb_on_wakeup+0x44>
    3c0e:	e7e4      	b.n	3bda <_usb_on_wakeup+0x16>
    3c10:	40000800 	.word	0x40000800
    3c14:	20000480 	.word	0x20000480
    3c18:	00004889 	.word	0x00004889
    3c1c:	00004869 	.word	0x00004869
    3c20:	000039a5 	.word	0x000039a5
    3c24:	00004845 	.word	0x00004845
    3c28:	00003b29 	.word	0x00003b29
    3c2c:	00005a61 	.word	0x00005a61

00003c30 <_usb_ep0_on_setup>:
{
    3c30:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    3c32:	4d33      	ldr	r5, [pc, #204]	; (3d00 <_usb_ep0_on_setup+0xd0>)
{
    3c34:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    3c36:	782b      	ldrb	r3, [r5, #0]
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d006      	beq.n	3c4a <_usb_ep0_on_setup+0x1a>
		if (NULL != udd_g_ctrlreq.callback) {
    3c3c:	4b31      	ldr	r3, [pc, #196]	; (3d04 <_usb_ep0_on_setup+0xd4>)
    3c3e:	691b      	ldr	r3, [r3, #16]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d000      	beq.n	3c46 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    3c44:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    3c46:	2300      	movs	r3, #0
    3c48:	702b      	strb	r3, [r5, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    3c4a:	8823      	ldrh	r3, [r4, #0]
    3c4c:	2b08      	cmp	r3, #8
    3c4e:	d00b      	beq.n	3c68 <_usb_ep0_on_setup+0x38>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3c50:	2305      	movs	r3, #5
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    3c52:	4c2d      	ldr	r4, [pc, #180]	; (3d08 <_usb_ep0_on_setup+0xd8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3c54:	702b      	strb	r3, [r5, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    3c56:	2180      	movs	r1, #128	; 0x80
    3c58:	0020      	movs	r0, r4
    3c5a:	4b2c      	ldr	r3, [pc, #176]	; (3d0c <_usb_ep0_on_setup+0xdc>)
    3c5c:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    3c5e:	2100      	movs	r1, #0
    3c60:	0020      	movs	r0, r4
    3c62:	4b2b      	ldr	r3, [pc, #172]	; (3d10 <_usb_ep0_on_setup+0xe0>)
    3c64:	4798      	blx	r3
}
    3c66:	bd70      	pop	{r4, r5, r6, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    3c68:	4c2a      	ldr	r4, [pc, #168]	; (3d14 <_usb_ep0_on_setup+0xe4>)
    3c6a:	4e26      	ldr	r6, [pc, #152]	; (3d04 <_usb_ep0_on_setup+0xd4>)
    3c6c:	7823      	ldrb	r3, [r4, #0]
    3c6e:	7033      	strb	r3, [r6, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    3c70:	7863      	ldrb	r3, [r4, #1]
    3c72:	7073      	strb	r3, [r6, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    3c74:	78e2      	ldrb	r2, [r4, #3]
    3c76:	78a3      	ldrb	r3, [r4, #2]
    3c78:	0212      	lsls	r2, r2, #8
    3c7a:	189b      	adds	r3, r3, r2
    3c7c:	8073      	strh	r3, [r6, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    3c7e:	7962      	ldrb	r2, [r4, #5]
    3c80:	7923      	ldrb	r3, [r4, #4]
    3c82:	0212      	lsls	r2, r2, #8
    3c84:	189b      	adds	r3, r3, r2
    3c86:	80b3      	strh	r3, [r6, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    3c88:	79e2      	ldrb	r2, [r4, #7]
    3c8a:	79a3      	ldrb	r3, [r4, #6]
    3c8c:	0212      	lsls	r2, r2, #8
    3c8e:	189b      	adds	r3, r3, r2
    3c90:	80f3      	strh	r3, [r6, #6]
		if (false == udc_process_setup()) {
    3c92:	4b21      	ldr	r3, [pc, #132]	; (3d18 <_usb_ep0_on_setup+0xe8>)
    3c94:	4798      	blx	r3
    3c96:	2800      	cmp	r0, #0
    3c98:	d0da      	beq.n	3c50 <_usb_ep0_on_setup+0x20>
		} else if (Udd_setup_is_in()) {
    3c9a:	7833      	ldrb	r3, [r6, #0]
    3c9c:	2b7f      	cmp	r3, #127	; 0x7f
    3c9e:	d81e      	bhi.n	3cde <_usb_ep0_on_setup+0xae>
			if(0 == udd_g_ctrlreq.req.wLength) {
    3ca0:	88f3      	ldrh	r3, [r6, #6]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d00d      	beq.n	3cc2 <_usb_ep0_on_setup+0x92>
				udd_ctrl_prev_payload_nb_trans = 0;
    3ca6:	2300      	movs	r3, #0
    3ca8:	4a1c      	ldr	r2, [pc, #112]	; (3d1c <_usb_ep0_on_setup+0xec>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3caa:	2100      	movs	r1, #0
				udd_ctrl_prev_payload_nb_trans = 0;
    3cac:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3cae:	4a1c      	ldr	r2, [pc, #112]	; (3d20 <_usb_ep0_on_setup+0xf0>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3cb0:	4815      	ldr	r0, [pc, #84]	; (3d08 <_usb_ep0_on_setup+0xd8>)
				udd_ctrl_payload_nb_trans = 0;
    3cb2:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    3cb4:	3301      	adds	r3, #1
    3cb6:	702b      	strb	r3, [r5, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3cb8:	0022      	movs	r2, r4
    3cba:	333f      	adds	r3, #63	; 0x3f
    3cbc:	4c19      	ldr	r4, [pc, #100]	; (3d24 <_usb_ep0_on_setup+0xf4>)
    3cbe:	47a0      	blx	r4
    3cc0:	e7d1      	b.n	3c66 <_usb_ep0_on_setup+0x36>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    3cc2:	3303      	adds	r3, #3
    3cc4:	702b      	strb	r3, [r5, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3cc6:	4d10      	ldr	r5, [pc, #64]	; (3d08 <_usb_ep0_on_setup+0xd8>)
    3cc8:	0021      	movs	r1, r4
    3cca:	0028      	movs	r0, r5
    3ccc:	4b16      	ldr	r3, [pc, #88]	; (3d28 <_usb_ep0_on_setup+0xf8>)
    3cce:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    3cd0:	68b2      	ldr	r2, [r6, #8]
    3cd2:	2300      	movs	r3, #0
    3cd4:	2100      	movs	r1, #0
    3cd6:	0028      	movs	r0, r5
    3cd8:	4c14      	ldr	r4, [pc, #80]	; (3d2c <_usb_ep0_on_setup+0xfc>)
    3cda:	47a0      	blx	r4
    3cdc:	e7c3      	b.n	3c66 <_usb_ep0_on_setup+0x36>
			udd_ctrl_prev_payload_nb_trans = 0;
    3cde:	2300      	movs	r3, #0
    3ce0:	4a0e      	ldr	r2, [pc, #56]	; (3d1c <_usb_ep0_on_setup+0xec>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3ce2:	2100      	movs	r1, #0
			udd_ctrl_prev_payload_nb_trans = 0;
    3ce4:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3ce6:	4a0e      	ldr	r2, [pc, #56]	; (3d20 <_usb_ep0_on_setup+0xf0>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3ce8:	4807      	ldr	r0, [pc, #28]	; (3d08 <_usb_ep0_on_setup+0xd8>)
			udd_ctrl_payload_nb_trans = 0;
    3cea:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3cec:	3302      	adds	r3, #2
    3cee:	702b      	strb	r3, [r5, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3cf0:	0022      	movs	r2, r4
    3cf2:	333e      	adds	r3, #62	; 0x3e
    3cf4:	4c0b      	ldr	r4, [pc, #44]	; (3d24 <_usb_ep0_on_setup+0xf4>)
    3cf6:	47a0      	blx	r4
			udd_ctrl_in_sent();
    3cf8:	4b0d      	ldr	r3, [pc, #52]	; (3d30 <_usb_ep0_on_setup+0x100>)
    3cfa:	4798      	blx	r3
    3cfc:	e7b3      	b.n	3c66 <_usb_ep0_on_setup+0x36>
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	200002a6 	.word	0x200002a6
    3d04:	200005e8 	.word	0x200005e8
    3d08:	20000480 	.word	0x20000480
    3d0c:	00004ca1 	.word	0x00004ca1
    3d10:	00004cc1 	.word	0x00004cc1
    3d14:	20000600 	.word	0x20000600
    3d18:	00001111 	.word	0x00001111
    3d1c:	200002a4 	.word	0x200002a4
    3d20:	200002a2 	.word	0x200002a2
    3d24:	00004d89 	.word	0x00004d89
    3d28:	00004dd1 	.word	0x00004dd1
    3d2c:	00004d3d 	.word	0x00004d3d
    3d30:	000038d9 	.word	0x000038d9

00003d34 <_usb_on_suspend>:
{
    3d34:	b530      	push	{r4, r5, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3d36:	4c26      	ldr	r4, [pc, #152]	; (3dd0 <_usb_on_suspend+0x9c>)
{
    3d38:	b085      	sub	sp, #20
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3d3a:	2104      	movs	r1, #4
    3d3c:	0020      	movs	r0, r4
    3d3e:	4b25      	ldr	r3, [pc, #148]	; (3dd4 <_usb_on_suspend+0xa0>)
    3d40:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3d42:	0020      	movs	r0, r4
    3d44:	4b24      	ldr	r3, [pc, #144]	; (3dd8 <_usb_on_suspend+0xa4>)
    3d46:	2102      	movs	r1, #2
    3d48:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
    3d4a:	4b24      	ldr	r3, [pc, #144]	; (3ddc <_usb_on_suspend+0xa8>)
	if (udd_state == new_state) {
    3d4c:	4c24      	ldr	r4, [pc, #144]	; (3de0 <_usb_on_suspend+0xac>)
	enum sleepmgr_mode sleep_mode[] = {
    3d4e:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    3d50:	7823      	ldrb	r3, [r4, #0]
    3d52:	2b01      	cmp	r3, #1
    3d54:	d01e      	beq.n	3d94 <_usb_on_suspend+0x60>
	if(sleepmgr_locks[mode] >= 0xff) {
    3d56:	4b23      	ldr	r3, [pc, #140]	; (3de4 <_usb_on_suspend+0xb0>)
    3d58:	78da      	ldrb	r2, [r3, #3]
    3d5a:	2aff      	cmp	r2, #255	; 0xff
    3d5c:	d01e      	beq.n	3d9c <_usb_on_suspend+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d5e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3d62:	4251      	negs	r1, r2
    3d64:	414a      	adcs	r2, r1
    3d66:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    3d68:	b672      	cpsid	i
    3d6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3d6e:	2200      	movs	r2, #0
    3d70:	491d      	ldr	r1, [pc, #116]	; (3de8 <_usb_on_suspend+0xb4>)
    3d72:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    3d74:	78da      	ldrb	r2, [r3, #3]
	return flags;
    3d76:	9802      	ldr	r0, [sp, #8]
    3d78:	3201      	adds	r2, #1
    3d7a:	70da      	strb	r2, [r3, #3]
	if (cpu_irq_is_enabled_flags(flags))
    3d7c:	2800      	cmp	r0, #0
    3d7e:	d004      	beq.n	3d8a <_usb_on_suspend+0x56>
		cpu_irq_enable();
    3d80:	2201      	movs	r2, #1
    3d82:	700a      	strb	r2, [r1, #0]
    3d84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3d88:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    3d8a:	7822      	ldrb	r2, [r4, #0]
    3d8c:	2a00      	cmp	r2, #0
    3d8e:	d106      	bne.n	3d9e <_usb_on_suspend+0x6a>
	udd_state = new_state;
    3d90:	2301      	movs	r3, #1
    3d92:	7023      	strb	r3, [r4, #0]
	UDC_SUSPEND_EVENT();
    3d94:	4b15      	ldr	r3, [pc, #84]	; (3dec <_usb_on_suspend+0xb8>)
    3d96:	4798      	blx	r3
}
    3d98:	b005      	add	sp, #20
    3d9a:	bd30      	pop	{r4, r5, pc}
    3d9c:	e7fe      	b.n	3d9c <_usb_on_suspend+0x68>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    3d9e:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    3da0:	5c82      	ldrb	r2, [r0, r2]
    3da2:	5c98      	ldrb	r0, [r3, r2]
    3da4:	2800      	cmp	r0, #0
    3da6:	d012      	beq.n	3dce <_usb_on_suspend+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3da8:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3dac:	4245      	negs	r5, r0
    3dae:	4168      	adcs	r0, r5
    3db0:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    3db2:	b672      	cpsid	i
    3db4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3db8:	2000      	movs	r0, #0
    3dba:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    3dbc:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    3dbe:	9803      	ldr	r0, [sp, #12]
    3dc0:	3901      	subs	r1, #1
    3dc2:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    3dc4:	2800      	cmp	r0, #0
    3dc6:	d0e3      	beq.n	3d90 <_usb_on_suspend+0x5c>
    3dc8:	4b09      	ldr	r3, [pc, #36]	; (3df0 <_usb_on_suspend+0xbc>)
    3dca:	4798      	blx	r3
    3dcc:	e7e0      	b.n	3d90 <_usb_on_suspend+0x5c>
    3dce:	e7fe      	b.n	3dce <_usb_on_suspend+0x9a>
    3dd0:	20000480 	.word	0x20000480
    3dd4:	00004889 	.word	0x00004889
    3dd8:	00004869 	.word	0x00004869
    3ddc:	01020300 	.word	0x01020300
    3de0:	20000320 	.word	0x20000320
    3de4:	20000344 	.word	0x20000344
    3de8:	200000e8 	.word	0x200000e8
    3dec:	00005a55 	.word	0x00005a55
    3df0:	00003991 	.word	0x00003991

00003df4 <udd_ep_abort>:
{
    3df4:	b570      	push	{r4, r5, r6, lr}
	usb_device_endpoint_abort_job(&usb_device, ep);
    3df6:	0001      	movs	r1, r0
{
    3df8:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    3dfa:	4b10      	ldr	r3, [pc, #64]	; (3e3c <udd_ep_abort+0x48>)
    3dfc:	4810      	ldr	r0, [pc, #64]	; (3e40 <udd_ep_abort+0x4c>)
    3dfe:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    3e00:	237f      	movs	r3, #127	; 0x7f
    3e02:	4023      	ands	r3, r4
    3e04:	d017      	beq.n	3e36 <udd_ep_abort+0x42>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    3e06:	230f      	movs	r3, #15
	if (!ptr_job->busy) {
    3e08:	2001      	movs	r0, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    3e0a:	4023      	ands	r3, r4
    3e0c:	09e2      	lsrs	r2, r4, #7
    3e0e:	005b      	lsls	r3, r3, #1
    3e10:	189b      	adds	r3, r3, r2
    3e12:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
    3e14:	009a      	lsls	r2, r3, #2
    3e16:	18d3      	adds	r3, r2, r3
    3e18:	490a      	ldr	r1, [pc, #40]	; (3e44 <udd_ep_abort+0x50>)
    3e1a:	009b      	lsls	r3, r3, #2
    3e1c:	18ca      	adds	r2, r1, r3
    3e1e:	7c95      	ldrb	r5, [r2, #18]
    3e20:	4228      	tst	r0, r5
    3e22:	d007      	beq.n	3e34 <udd_ep_abort+0x40>
	if (NULL != ptr_job->call_trans) {
    3e24:	585b      	ldr	r3, [r3, r1]
	ptr_job->busy = false;
    3e26:	4385      	bics	r5, r0
    3e28:	7495      	strb	r5, [r2, #18]
	if (NULL != ptr_job->call_trans) {
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d002      	beq.n	3e34 <udd_ep_abort+0x40>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    3e2e:	68d1      	ldr	r1, [r2, #12]
    3e30:	0022      	movs	r2, r4
    3e32:	4798      	blx	r3
}
    3e34:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptr_job->busy) {
    3e36:	7c9b      	ldrb	r3, [r3, #18]
    3e38:	deff      	udf	#255	; 0xff
    3e3a:	46c0      	nop			; (mov r8, r8)
    3e3c:	00004c51 	.word	0x00004c51
    3e40:	20000480 	.word	0x20000480
    3e44:	200002a8 	.word	0x200002a8

00003e48 <_usb_ep0_on_tansfer_ok>:
{
    3e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e4a:	46ce      	mov	lr, r9
    3e4c:	4647      	mov	r7, r8
    3e4e:	b580      	push	{r7, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    3e50:	4c3c      	ldr	r4, [pc, #240]	; (3f44 <_usb_ep0_on_tansfer_ok+0xfc>)
    3e52:	7823      	ldrb	r3, [r4, #0]
    3e54:	2b01      	cmp	r3, #1
    3e56:	d00c      	beq.n	3e72 <_usb_ep0_on_tansfer_ok+0x2a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    3e58:	2b02      	cmp	r3, #2
    3e5a:	d036      	beq.n	3eca <_usb_ep0_on_tansfer_ok+0x82>
			if (NULL != udd_g_ctrlreq.callback) {
    3e5c:	4b3a      	ldr	r3, [pc, #232]	; (3f48 <_usb_ep0_on_tansfer_ok+0x100>)
    3e5e:	691b      	ldr	r3, [r3, #16]
    3e60:	2b00      	cmp	r3, #0
    3e62:	d000      	beq.n	3e66 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_g_ctrlreq.callback();
    3e64:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3e66:	2300      	movs	r3, #0
    3e68:	7023      	strb	r3, [r4, #0]
}
    3e6a:	bc0c      	pop	{r2, r3}
    3e6c:	4690      	mov	r8, r2
    3e6e:	4699      	mov	r9, r3
    3e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3e72:	4a36      	ldr	r2, [pc, #216]	; (3f4c <_usb_ep0_on_tansfer_ok+0x104>)
    3e74:	4e34      	ldr	r6, [pc, #208]	; (3f48 <_usb_ep0_on_tansfer_ok+0x100>)
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3e76:	880f      	ldrh	r7, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3e78:	8810      	ldrh	r0, [r2, #0]
    3e7a:	89b3      	ldrh	r3, [r6, #12]
    3e7c:	19c5      	adds	r5, r0, r7
    3e7e:	4690      	mov	r8, r2
    3e80:	42ab      	cmp	r3, r5
    3e82:	db25      	blt.n	3ed0 <_usb_ep0_on_tansfer_ok+0x88>
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3e84:	68b3      	ldr	r3, [r6, #8]
    3e86:	003a      	movs	r2, r7
    3e88:	469c      	mov	ip, r3
    3e8a:	4b31      	ldr	r3, [pc, #196]	; (3f50 <_usb_ep0_on_tansfer_ok+0x108>)
    3e8c:	4460      	add	r0, ip
    3e8e:	0019      	movs	r1, r3
    3e90:	4699      	mov	r9, r3
    3e92:	4b30      	ldr	r3, [pc, #192]	; (3f54 <_usb_ep0_on_tansfer_ok+0x10c>)
    3e94:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3e96:	4643      	mov	r3, r8
    3e98:	b2ad      	uxth	r5, r5
    3e9a:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3e9c:	2f40      	cmp	r7, #64	; 0x40
    3e9e:	d01b      	beq.n	3ed8 <_usb_ep0_on_tansfer_ok+0x90>
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3ea0:	6973      	ldr	r3, [r6, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3ea2:	81b5      	strh	r5, [r6, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d002      	beq.n	3eae <_usb_ep0_on_tansfer_ok+0x66>
			if (!udd_g_ctrlreq.over_under_run()) {
    3ea8:	4798      	blx	r3
    3eaa:	1e05      	subs	r5, r0, #0
    3eac:	d032      	beq.n	3f14 <_usb_ep0_on_tansfer_ok+0xcc>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    3eae:	2303      	movs	r3, #3
    3eb0:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3eb2:	4c29      	ldr	r4, [pc, #164]	; (3f58 <_usb_ep0_on_tansfer_ok+0x110>)
    3eb4:	4649      	mov	r1, r9
    3eb6:	0020      	movs	r0, r4
    3eb8:	4b28      	ldr	r3, [pc, #160]	; (3f5c <_usb_ep0_on_tansfer_ok+0x114>)
    3eba:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    3ebc:	68b2      	ldr	r2, [r6, #8]
    3ebe:	2300      	movs	r3, #0
    3ec0:	2100      	movs	r1, #0
    3ec2:	0020      	movs	r0, r4
    3ec4:	4c26      	ldr	r4, [pc, #152]	; (3f60 <_usb_ep0_on_tansfer_ok+0x118>)
    3ec6:	47a0      	blx	r4
    3ec8:	e7cf      	b.n	3e6a <_usb_ep0_on_tansfer_ok+0x22>
			udd_ctrl_in_sent();
    3eca:	4b26      	ldr	r3, [pc, #152]	; (3f64 <_usb_ep0_on_tansfer_ok+0x11c>)
    3ecc:	4798      	blx	r3
    3ece:	e7cc      	b.n	3e6a <_usb_ep0_on_tansfer_ok+0x22>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3ed0:	1a1f      	subs	r7, r3, r0
    3ed2:	b2bf      	uxth	r7, r7
    3ed4:	19c5      	adds	r5, r0, r7
    3ed6:	e7d5      	b.n	3e84 <_usb_ep0_on_tansfer_ok+0x3c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3ed8:	4f23      	ldr	r7, [pc, #140]	; (3f68 <_usb_ep0_on_tansfer_ok+0x120>)
    3eda:	88f2      	ldrh	r2, [r6, #6]
    3edc:	883b      	ldrh	r3, [r7, #0]
    3ede:	195b      	adds	r3, r3, r5
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3ee0:	429a      	cmp	r2, r3
    3ee2:	dddd      	ble.n	3ea0 <_usb_ep0_on_tansfer_ok+0x58>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3ee4:	89b3      	ldrh	r3, [r6, #12]
    3ee6:	42ab      	cmp	r3, r5
    3ee8:	d10d      	bne.n	3f06 <_usb_ep0_on_tansfer_ok+0xbe>
		if (!udd_g_ctrlreq.over_under_run) {
    3eea:	6975      	ldr	r5, [r6, #20]
    3eec:	2d00      	cmp	r5, #0
    3eee:	d011      	beq.n	3f14 <_usb_ep0_on_tansfer_ok+0xcc>
		if (!udd_g_ctrlreq.over_under_run()) {
    3ef0:	47a8      	blx	r5
    3ef2:	2800      	cmp	r0, #0
    3ef4:	d01b      	beq.n	3f2e <_usb_ep0_on_tansfer_ok+0xe6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3ef6:	4642      	mov	r2, r8
    3ef8:	883b      	ldrh	r3, [r7, #0]
    3efa:	8812      	ldrh	r2, [r2, #0]
    3efc:	189b      	adds	r3, r3, r2
    3efe:	803b      	strh	r3, [r7, #0]
		udd_ctrl_payload_nb_trans = 0;
    3f00:	4642      	mov	r2, r8
    3f02:	2300      	movs	r3, #0
    3f04:	8013      	strh	r3, [r2, #0]
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3f06:	2340      	movs	r3, #64	; 0x40
    3f08:	464a      	mov	r2, r9
    3f0a:	2100      	movs	r1, #0
    3f0c:	4c17      	ldr	r4, [pc, #92]	; (3f6c <_usb_ep0_on_tansfer_ok+0x124>)
    3f0e:	4812      	ldr	r0, [pc, #72]	; (3f58 <_usb_ep0_on_tansfer_ok+0x110>)
    3f10:	47a0      	blx	r4
    3f12:	e7aa      	b.n	3e6a <_usb_ep0_on_tansfer_ok+0x22>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3f14:	2305      	movs	r3, #5
    3f16:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_set_halt(&usb_device, ep);
    3f18:	4c0f      	ldr	r4, [pc, #60]	; (3f58 <_usb_ep0_on_tansfer_ok+0x110>)
    3f1a:	2100      	movs	r1, #0
    3f1c:	0020      	movs	r0, r4
    3f1e:	4b14      	ldr	r3, [pc, #80]	; (3f70 <_usb_ep0_on_tansfer_ok+0x128>)
    3f20:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    3f22:	2100      	movs	r1, #0
    3f24:	0020      	movs	r0, r4
    3f26:	4b13      	ldr	r3, [pc, #76]	; (3f74 <_usb_ep0_on_tansfer_ok+0x12c>)
    3f28:	4798      	blx	r3
	if (!ptr_job->busy) {
    3f2a:	7cab      	ldrb	r3, [r5, #18]
    3f2c:	deff      	udf	#255	; 0xff
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3f2e:	2305      	movs	r3, #5
	usb_device_endpoint_set_halt(&usb_device, ep);
    3f30:	2100      	movs	r1, #0
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3f32:	7023      	strb	r3, [r4, #0]
	usb_device_endpoint_set_halt(&usb_device, ep);
    3f34:	4808      	ldr	r0, [pc, #32]	; (3f58 <_usb_ep0_on_tansfer_ok+0x110>)
    3f36:	4b0e      	ldr	r3, [pc, #56]	; (3f70 <_usb_ep0_on_tansfer_ok+0x128>)
    3f38:	4798      	blx	r3
	udd_ep_abort(ep);
    3f3a:	2000      	movs	r0, #0
    3f3c:	4b0e      	ldr	r3, [pc, #56]	; (3f78 <_usb_ep0_on_tansfer_ok+0x130>)
    3f3e:	4798      	blx	r3
    3f40:	e793      	b.n	3e6a <_usb_ep0_on_tansfer_ok+0x22>
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	200002a6 	.word	0x200002a6
    3f48:	200005e8 	.word	0x200005e8
    3f4c:	200002a2 	.word	0x200002a2
    3f50:	20000600 	.word	0x20000600
    3f54:	00006195 	.word	0x00006195
    3f58:	20000480 	.word	0x20000480
    3f5c:	00004dd1 	.word	0x00004dd1
    3f60:	00004d3d 	.word	0x00004d3d
    3f64:	000038d9 	.word	0x000038d9
    3f68:	200002a4 	.word	0x200002a4
    3f6c:	00004d89 	.word	0x00004d89
    3f70:	00004ca1 	.word	0x00004ca1
    3f74:	00004c51 	.word	0x00004c51
    3f78:	00003df5 	.word	0x00003df5

00003f7c <udd_is_high_speed>:
}
    3f7c:	2000      	movs	r0, #0
    3f7e:	4770      	bx	lr

00003f80 <udd_get_frame_number>:
{
    3f80:	4b02      	ldr	r3, [pc, #8]	; (3f8c <udd_get_frame_number+0xc>)
}
    3f82:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3f84:	8a18      	ldrh	r0, [r3, #16]
    3f86:	0480      	lsls	r0, r0, #18
    3f88:	0d40      	lsrs	r0, r0, #21
    3f8a:	4770      	bx	lr
    3f8c:	20000480 	.word	0x20000480

00003f90 <udd_get_micro_frame_number>:
{
    3f90:	4b02      	ldr	r3, [pc, #8]	; (3f9c <udd_get_micro_frame_number+0xc>)
}
    3f92:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    3f94:	8a18      	ldrh	r0, [r3, #16]
    3f96:	b280      	uxth	r0, r0
    3f98:	4770      	bx	lr
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	20000480 	.word	0x20000480

00003fa0 <udd_ep_free>:
{
    3fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fa2:	46ce      	mov	lr, r9
    3fa4:	4647      	mov	r7, r8
    3fa6:	0005      	movs	r5, r0
    3fa8:	b580      	push	{r7, lr}
    3faa:	b083      	sub	sp, #12
	usb_device_endpoint_get_config_defaults(&config_ep);
    3fac:	ac01      	add	r4, sp, #4
    3fae:	0020      	movs	r0, r4
    3fb0:	4b21      	ldr	r3, [pc, #132]	; (4038 <udd_ep_free+0x98>)
    3fb2:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    3fb4:	4e21      	ldr	r6, [pc, #132]	; (403c <udd_ep_free+0x9c>)
    3fb6:	4b22      	ldr	r3, [pc, #136]	; (4040 <udd_ep_free+0xa0>)
    3fb8:	0029      	movs	r1, r5
    3fba:	0030      	movs	r0, r6
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3fbc:	270f      	movs	r7, #15
	usb_device_endpoint_abort_job(&usb_device, ep);
    3fbe:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    3fc0:	237f      	movs	r3, #127	; 0x7f
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3fc2:	402f      	ands	r7, r5
	if ((ep == 0) || (ep == 0x80)) {
    3fc4:	402b      	ands	r3, r5
    3fc6:	d035      	beq.n	4034 <udd_ep_free+0x94>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    3fc8:	007a      	lsls	r2, r7, #1
    3fca:	09e9      	lsrs	r1, r5, #7
    3fcc:	1853      	adds	r3, r2, r1
	if (!ptr_job->busy) {
    3fce:	4a1d      	ldr	r2, [pc, #116]	; (4044 <udd_ep_free+0xa4>)
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    3fd0:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
    3fd2:	4691      	mov	r9, r2
    3fd4:	009a      	lsls	r2, r3, #2
    3fd6:	18d3      	adds	r3, r2, r3
    3fd8:	464a      	mov	r2, r9
    3fda:	2001      	movs	r0, #1
    3fdc:	009b      	lsls	r3, r3, #2
    3fde:	18d2      	adds	r2, r2, r3
    3fe0:	7c91      	ldrb	r1, [r2, #18]
    3fe2:	4208      	tst	r0, r1
    3fe4:	d010      	beq.n	4008 <udd_ep_free+0x68>
	ptr_job->busy = false;
    3fe6:	2110      	movs	r1, #16
    3fe8:	4688      	mov	r8, r1
    3fea:	4490      	add	r8, r2
    3fec:	4641      	mov	r1, r8
    3fee:	7889      	ldrb	r1, [r1, #2]
    3ff0:	4381      	bics	r1, r0
    3ff2:	0008      	movs	r0, r1
    3ff4:	4641      	mov	r1, r8
    3ff6:	7088      	strb	r0, [r1, #2]
	if (NULL != ptr_job->call_trans) {
    3ff8:	4649      	mov	r1, r9
    3ffa:	585b      	ldr	r3, [r3, r1]
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d003      	beq.n	4008 <udd_ep_free+0x68>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    4000:	68d1      	ldr	r1, [r2, #12]
    4002:	2001      	movs	r0, #1
    4004:	002a      	movs	r2, r5
    4006:	4798      	blx	r3
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    4008:	2300      	movs	r3, #0
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    400a:	0021      	movs	r1, r4
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    400c:	70e3      	strb	r3, [r4, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    400e:	0030      	movs	r0, r6
    4010:	4b0d      	ldr	r3, [pc, #52]	; (4048 <udd_ep_free+0xa8>)
	config_ep.ep_address = ep;
    4012:	7025      	strb	r5, [r4, #0]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    4014:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    4016:	0039      	movs	r1, r7
    4018:	2200      	movs	r2, #0
    401a:	0030      	movs	r0, r6
    401c:	4b0b      	ldr	r3, [pc, #44]	; (404c <udd_ep_free+0xac>)
    401e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    4020:	2200      	movs	r2, #0
    4022:	0029      	movs	r1, r5
    4024:	0030      	movs	r0, r6
    4026:	4b0a      	ldr	r3, [pc, #40]	; (4050 <udd_ep_free+0xb0>)
    4028:	4798      	blx	r3
}
    402a:	b003      	add	sp, #12
    402c:	bc0c      	pop	{r2, r3}
    402e:	4690      	mov	r8, r2
    4030:	4699      	mov	r9, r3
    4032:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!ptr_job->busy) {
    4034:	7c9b      	ldrb	r3, [r3, #18]
    4036:	deff      	udf	#255	; 0xff
    4038:	00004a55 	.word	0x00004a55
    403c:	20000480 	.word	0x20000480
    4040:	00004c51 	.word	0x00004c51
    4044:	200002a8 	.word	0x200002a8
    4048:	00004a65 	.word	0x00004a65
    404c:	000048cd 	.word	0x000048cd
    4050:	000049a5 	.word	0x000049a5

00004054 <udd_ep_alloc>:
{
    4054:	b5f0      	push	{r4, r5, r6, r7, lr}
    4056:	46c6      	mov	lr, r8
    4058:	0005      	movs	r5, r0
    405a:	b500      	push	{lr}
    405c:	b082      	sub	sp, #8
	usb_device_endpoint_get_config_defaults(&config_ep);
    405e:	ac01      	add	r4, sp, #4
    4060:	0020      	movs	r0, r4
    4062:	4b37      	ldr	r3, [pc, #220]	; (4140 <udd_ep_alloc+0xec>)
{
    4064:	000e      	movs	r6, r1
    4066:	0017      	movs	r7, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    4068:	4798      	blx	r3
	config_ep.ep_address = ep;
    406a:	7025      	strb	r5, [r4, #0]
	if(MaxEndpointSize <= 8) {
    406c:	2f08      	cmp	r7, #8
    406e:	d820      	bhi.n	40b2 <udd_ep_alloc+0x5e>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    4070:	2300      	movs	r3, #0
    4072:	7063      	strb	r3, [r4, #1]
	if ((ep == 0) || (ep == 0x80)) {
    4074:	237f      	movs	r3, #127	; 0x7f
    4076:	402b      	ands	r3, r5
    4078:	d019      	beq.n	40ae <udd_ep_alloc+0x5a>
    407a:	230f      	movs	r3, #15
    407c:	402b      	ands	r3, r5
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    407e:	09ea      	lsrs	r2, r5, #7
    4080:	4698      	mov	r8, r3
	ptr_job->ep_size = MaxEndpointSize;
    4082:	005b      	lsls	r3, r3, #1
    4084:	189b      	adds	r3, r3, r2
    4086:	3b02      	subs	r3, #2
    4088:	009a      	lsls	r2, r3, #2
    408a:	18d3      	adds	r3, r2, r3
    408c:	4a2d      	ldr	r2, [pc, #180]	; (4144 <udd_ep_alloc+0xf0>)
    408e:	009b      	lsls	r3, r3, #2
    4090:	18d3      	adds	r3, r2, r3
    4092:	821f      	strh	r7, [r3, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    4094:	2303      	movs	r3, #3
    4096:	401e      	ands	r6, r3
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    4098:	2e01      	cmp	r6, #1
    409a:	d030      	beq.n	40fe <udd_ep_alloc+0xaa>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    409c:	2e02      	cmp	r6, #2
    409e:	d015      	beq.n	40cc <udd_ep_alloc+0x78>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    40a0:	2e03      	cmp	r6, #3
    40a2:	d012      	beq.n	40ca <udd_ep_alloc+0x76>
		return false;
    40a4:	2000      	movs	r0, #0
}
    40a6:	b002      	add	sp, #8
    40a8:	bc04      	pop	{r2}
    40aa:	4690      	mov	r8, r2
    40ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job->ep_size = MaxEndpointSize;
    40ae:	821b      	strh	r3, [r3, #16]
    40b0:	deff      	udf	#255	; 0xff
	} else if(MaxEndpointSize <= 16) {
    40b2:	2f10      	cmp	r7, #16
    40b4:	d802      	bhi.n	40bc <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    40b6:	2301      	movs	r3, #1
    40b8:	7063      	strb	r3, [r4, #1]
    40ba:	e7db      	b.n	4074 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 32) {
    40bc:	2f20      	cmp	r7, #32
    40be:	d921      	bls.n	4104 <udd_ep_alloc+0xb0>
	} else if(MaxEndpointSize <= 64) {
    40c0:	2f40      	cmp	r7, #64	; 0x40
    40c2:	d822      	bhi.n	410a <udd_ep_alloc+0xb6>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    40c4:	2303      	movs	r3, #3
    40c6:	7063      	strb	r3, [r4, #1]
    40c8:	e7d4      	b.n	4074 <udd_ep_alloc+0x20>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    40ca:	2304      	movs	r3, #4
    40cc:	70e3      	strb	r3, [r4, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    40ce:	4e1e      	ldr	r6, [pc, #120]	; (4148 <udd_ep_alloc+0xf4>)
    40d0:	0021      	movs	r1, r4
    40d2:	0030      	movs	r0, r6
    40d4:	4b1d      	ldr	r3, [pc, #116]	; (414c <udd_ep_alloc+0xf8>)
    40d6:	4798      	blx	r3
    40d8:	2800      	cmp	r0, #0
    40da:	d1e3      	bne.n	40a4 <udd_ep_alloc+0x50>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    40dc:	4b1c      	ldr	r3, [pc, #112]	; (4150 <udd_ep_alloc+0xfc>)
    40de:	2200      	movs	r2, #0
    40e0:	4641      	mov	r1, r8
    40e2:	4c1c      	ldr	r4, [pc, #112]	; (4154 <udd_ep_alloc+0x100>)
    40e4:	0030      	movs	r0, r6
    40e6:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    40e8:	2200      	movs	r2, #0
    40ea:	0029      	movs	r1, r5
    40ec:	4c1a      	ldr	r4, [pc, #104]	; (4158 <udd_ep_alloc+0x104>)
    40ee:	0030      	movs	r0, r6
    40f0:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    40f2:	2201      	movs	r2, #1
    40f4:	0029      	movs	r1, r5
    40f6:	0030      	movs	r0, r6
    40f8:	47a0      	blx	r4
	return true;
    40fa:	2001      	movs	r0, #1
    40fc:	e7d3      	b.n	40a6 <udd_ep_alloc+0x52>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    40fe:	3b01      	subs	r3, #1
    4100:	70e3      	strb	r3, [r4, #3]
    4102:	e7e4      	b.n	40ce <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    4104:	2302      	movs	r3, #2
    4106:	7063      	strb	r3, [r4, #1]
    4108:	e7b4      	b.n	4074 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 128) {
    410a:	2f80      	cmp	r7, #128	; 0x80
    410c:	d906      	bls.n	411c <udd_ep_alloc+0xc8>
	} else if(MaxEndpointSize <= 256) {
    410e:	2380      	movs	r3, #128	; 0x80
    4110:	005b      	lsls	r3, r3, #1
    4112:	429f      	cmp	r7, r3
    4114:	d805      	bhi.n	4122 <udd_ep_alloc+0xce>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    4116:	3bfb      	subs	r3, #251	; 0xfb
    4118:	7063      	strb	r3, [r4, #1]
    411a:	e7ab      	b.n	4074 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    411c:	2304      	movs	r3, #4
    411e:	7063      	strb	r3, [r4, #1]
    4120:	e7a8      	b.n	4074 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 512) {
    4122:	2380      	movs	r3, #128	; 0x80
    4124:	009b      	lsls	r3, r3, #2
    4126:	429f      	cmp	r7, r3
    4128:	d803      	bhi.n	4132 <udd_ep_alloc+0xde>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    412a:	3bfb      	subs	r3, #251	; 0xfb
    412c:	3bff      	subs	r3, #255	; 0xff
    412e:	7063      	strb	r3, [r4, #1]
    4130:	e7a0      	b.n	4074 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 1023) {
    4132:	4b0a      	ldr	r3, [pc, #40]	; (415c <udd_ep_alloc+0x108>)
    4134:	429f      	cmp	r7, r3
    4136:	d8b5      	bhi.n	40a4 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    4138:	2307      	movs	r3, #7
    413a:	7063      	strb	r3, [r4, #1]
    413c:	e79a      	b.n	4074 <udd_ep_alloc+0x20>
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	00004a55 	.word	0x00004a55
    4144:	200002a8 	.word	0x200002a8
    4148:	20000480 	.word	0x20000480
    414c:	00004a65 	.word	0x00004a65
    4150:	000035b1 	.word	0x000035b1
    4154:	000048a5 	.word	0x000048a5
    4158:	000048f5 	.word	0x000048f5
    415c:	000003ff 	.word	0x000003ff

00004160 <udd_ep_is_halted>:
{
    4160:	b510      	push	{r4, lr}
    4162:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    4164:	4b01      	ldr	r3, [pc, #4]	; (416c <udd_ep_is_halted+0xc>)
    4166:	4802      	ldr	r0, [pc, #8]	; (4170 <udd_ep_is_halted+0x10>)
    4168:	4798      	blx	r3
}
    416a:	bd10      	pop	{r4, pc}
    416c:	00004c81 	.word	0x00004c81
    4170:	20000480 	.word	0x20000480

00004174 <udd_ep_set_halt>:
{
    4174:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4176:	240f      	movs	r4, #15
{
    4178:	0005      	movs	r5, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    417a:	4004      	ands	r4, r0
		return false;
    417c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    417e:	2c03      	cmp	r4, #3
    4180:	d900      	bls.n	4184 <udd_ep_set_halt+0x10>
}
    4182:	bd70      	pop	{r4, r5, r6, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    4184:	4e13      	ldr	r6, [pc, #76]	; (41d4 <udd_ep_set_halt+0x60>)
    4186:	0029      	movs	r1, r5
    4188:	0030      	movs	r0, r6
    418a:	4b13      	ldr	r3, [pc, #76]	; (41d8 <udd_ep_set_halt+0x64>)
    418c:	4798      	blx	r3
	usb_device_endpoint_abort_job(&usb_device, ep);
    418e:	4b13      	ldr	r3, [pc, #76]	; (41dc <udd_ep_set_halt+0x68>)
    4190:	0029      	movs	r1, r5
    4192:	0030      	movs	r0, r6
    4194:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
    4196:	237f      	movs	r3, #127	; 0x7f
    4198:	402b      	ands	r3, r5
    419a:	d018      	beq.n	41ce <udd_ep_set_halt+0x5a>
	if (!ptr_job->busy) {
    419c:	2101      	movs	r1, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    419e:	09eb      	lsrs	r3, r5, #7
    41a0:	0064      	lsls	r4, r4, #1
    41a2:	18e4      	adds	r4, r4, r3
    41a4:	3c02      	subs	r4, #2
	if (!ptr_job->busy) {
    41a6:	00a3      	lsls	r3, r4, #2
    41a8:	191c      	adds	r4, r3, r4
    41aa:	4a0d      	ldr	r2, [pc, #52]	; (41e0 <udd_ep_set_halt+0x6c>)
    41ac:	00a4      	lsls	r4, r4, #2
    41ae:	1913      	adds	r3, r2, r4
    41b0:	7c98      	ldrb	r0, [r3, #18]
    41b2:	4201      	tst	r1, r0
    41b4:	d009      	beq.n	41ca <udd_ep_set_halt+0x56>
	ptr_job->busy = false;
    41b6:	7c98      	ldrb	r0, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    41b8:	58a4      	ldr	r4, [r4, r2]
	ptr_job->busy = false;
    41ba:	4388      	bics	r0, r1
    41bc:	7498      	strb	r0, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    41be:	2c00      	cmp	r4, #0
    41c0:	d003      	beq.n	41ca <udd_ep_set_halt+0x56>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    41c2:	68d9      	ldr	r1, [r3, #12]
    41c4:	002a      	movs	r2, r5
    41c6:	2001      	movs	r0, #1
    41c8:	47a0      	blx	r4
    41ca:	2001      	movs	r0, #1
    41cc:	e7d9      	b.n	4182 <udd_ep_set_halt+0xe>
	if (!ptr_job->busy) {
    41ce:	7c9b      	ldrb	r3, [r3, #18]
    41d0:	deff      	udf	#255	; 0xff
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	20000480 	.word	0x20000480
    41d8:	00004ca1 	.word	0x00004ca1
    41dc:	00004c51 	.word	0x00004c51
    41e0:	200002a8 	.word	0x200002a8

000041e4 <udd_ep_clear_halt>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41e4:	230f      	movs	r3, #15
{
    41e6:	b570      	push	{r4, r5, r6, lr}
    41e8:	0001      	movs	r1, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41ea:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    41ec:	2b03      	cmp	r3, #3
    41ee:	d81f      	bhi.n	4230 <udd_ep_clear_halt+0x4c>
	if ((ep == 0) || (ep == 0x80)) {
    41f0:	247f      	movs	r4, #127	; 0x7f
    41f2:	4004      	ands	r4, r0
    41f4:	d104      	bne.n	4200 <udd_ep_clear_halt+0x1c>
	usb_device_endpoint_clear_halt(&usb_device, ep);
    41f6:	480f      	ldr	r0, [pc, #60]	; (4234 <udd_ep_clear_halt+0x50>)
    41f8:	4b0f      	ldr	r3, [pc, #60]	; (4238 <udd_ep_clear_halt+0x54>)
    41fa:	4798      	blx	r3
	if (ptr_job->busy == true) {
    41fc:	7ca3      	ldrb	r3, [r4, #18]
    41fe:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    4200:	005c      	lsls	r4, r3, #1
    4202:	09c3      	lsrs	r3, r0, #7
    4204:	18e4      	adds	r4, r4, r3
    4206:	3c02      	subs	r4, #2
	usb_device_endpoint_clear_halt(&usb_device, ep);
    4208:	4b0b      	ldr	r3, [pc, #44]	; (4238 <udd_ep_clear_halt+0x54>)
    420a:	480a      	ldr	r0, [pc, #40]	; (4234 <udd_ep_clear_halt+0x50>)
    420c:	4798      	blx	r3
	if (ptr_job->busy == true) {
    420e:	00a3      	lsls	r3, r4, #2
    4210:	191c      	adds	r4, r3, r4
    4212:	4a0a      	ldr	r2, [pc, #40]	; (423c <udd_ep_clear_halt+0x58>)
    4214:	00a4      	lsls	r4, r4, #2
    4216:	1913      	adds	r3, r2, r4
    4218:	7c99      	ldrb	r1, [r3, #18]
	return true;
    421a:	2501      	movs	r5, #1
	if (ptr_job->busy == true) {
    421c:	07c9      	lsls	r1, r1, #31
    421e:	d401      	bmi.n	4224 <udd_ep_clear_halt+0x40>
}
    4220:	0028      	movs	r0, r5
    4222:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job->busy = false;
    4224:	7c99      	ldrb	r1, [r3, #18]
    4226:	43a9      	bics	r1, r5
    4228:	7499      	strb	r1, [r3, #18]
		ptr_job->call_nohalt();
    422a:	58a3      	ldr	r3, [r4, r2]
    422c:	4798      	blx	r3
    422e:	e7f7      	b.n	4220 <udd_ep_clear_halt+0x3c>
		return false;
    4230:	2500      	movs	r5, #0
    4232:	e7f5      	b.n	4220 <udd_ep_clear_halt+0x3c>
    4234:	20000480 	.word	0x20000480
    4238:	00004cc1 	.word	0x00004cc1
    423c:	200002a8 	.word	0x200002a8

00004240 <udd_ep_run>:
{
    4240:	b5f0      	push	{r4, r5, r6, r7, lr}
    4242:	4645      	mov	r5, r8
    4244:	4657      	mov	r7, sl
    4246:	464e      	mov	r6, r9
    4248:	46de      	mov	lr, fp
	ep_num = ep & USB_EP_ADDR_MASK;
    424a:	240f      	movs	r4, #15
{
    424c:	b5e0      	push	{r5, r6, r7, lr}
    424e:	4688      	mov	r8, r1
    4250:	b087      	sub	sp, #28
    4252:	0005      	movs	r5, r0
    4254:	4691      	mov	r9, r2
    4256:	001f      	movs	r7, r3
	ep_num = ep & USB_EP_ADDR_MASK;
    4258:	4004      	ands	r4, r0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    425a:	2c03      	cmp	r4, #3
    425c:	d907      	bls.n	426e <udd_ep_run+0x2e>
		return false;
    425e:	2000      	movs	r0, #0
}
    4260:	b007      	add	sp, #28
    4262:	bc3c      	pop	{r2, r3, r4, r5}
    4264:	4690      	mov	r8, r2
    4266:	4699      	mov	r9, r3
    4268:	46a2      	mov	sl, r4
    426a:	46ab      	mov	fp, r5
    426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return usb_device_endpoint_is_halted(&usb_device, ep);
    426e:	4b75      	ldr	r3, [pc, #468]	; (4444 <udd_ep_run+0x204>)
    4270:	0001      	movs	r1, r0
    4272:	469b      	mov	fp, r3
    4274:	0018      	movs	r0, r3
    4276:	4b74      	ldr	r3, [pc, #464]	; (4448 <udd_ep_run+0x208>)
    4278:	4798      	blx	r3
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    427a:	2800      	cmp	r0, #0
    427c:	d1ef      	bne.n	425e <udd_ep_run+0x1e>
	if ((ep == 0) || (ep == 0x80)) {
    427e:	237f      	movs	r3, #127	; 0x7f
    4280:	402b      	ands	r3, r5
    4282:	d10c      	bne.n	429e <udd_ep_run+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4284:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4288:	4251      	negs	r1, r2
    428a:	414a      	adcs	r2, r1
    428c:	9205      	str	r2, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    428e:	b672      	cpsid	i
    4290:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4294:	4a6d      	ldr	r2, [pc, #436]	; (444c <udd_ep_run+0x20c>)
    4296:	7013      	strb	r3, [r2, #0]
	return flags;
    4298:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    429a:	7c9b      	ldrb	r3, [r3, #18]
    429c:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    429e:	b26b      	sxtb	r3, r5
    42a0:	001a      	movs	r2, r3
    42a2:	9303      	str	r3, [sp, #12]
    42a4:	0fd2      	lsrs	r2, r2, #31
    42a6:	0063      	lsls	r3, r4, #1
    42a8:	189e      	adds	r6, r3, r2
    42aa:	1eb1      	subs	r1, r6, #2
    42ac:	000e      	movs	r6, r1
    42ae:	9101      	str	r1, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42b0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    42b4:	425a      	negs	r2, r3
    42b6:	4153      	adcs	r3, r2
    42b8:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    42ba:	b672      	cpsid	i
    42bc:	f3bf 8f5f 	dmb	sy
	if (ptr_job->busy == true) {
    42c0:	4963      	ldr	r1, [pc, #396]	; (4450 <udd_ep_run+0x210>)
    42c2:	46b4      	mov	ip, r6
    42c4:	468a      	mov	sl, r1
    42c6:	2101      	movs	r1, #1
	cpu_irq_disable();
    42c8:	4a60      	ldr	r2, [pc, #384]	; (444c <udd_ep_run+0x20c>)
    42ca:	7010      	strb	r0, [r2, #0]
	return flags;
    42cc:	9b05      	ldr	r3, [sp, #20]
    42ce:	9300      	str	r3, [sp, #0]
    42d0:	00b3      	lsls	r3, r6, #2
    42d2:	9302      	str	r3, [sp, #8]
    42d4:	4463      	add	r3, ip
    42d6:	009b      	lsls	r3, r3, #2
    42d8:	4453      	add	r3, sl
    42da:	7c9e      	ldrb	r6, [r3, #18]
    42dc:	4231      	tst	r1, r6
    42de:	d153      	bne.n	4388 <udd_ep_run+0x148>
	ptr_job->busy = true;
    42e0:	2601      	movs	r6, #1
    42e2:	46b4      	mov	ip, r6
    42e4:	4666      	mov	r6, ip
    42e6:	7c98      	ldrb	r0, [r3, #18]
    42e8:	4330      	orrs	r0, r6
    42ea:	7498      	strb	r0, [r3, #18]
	if (cpu_irq_is_enabled_flags(flags))
    42ec:	9b00      	ldr	r3, [sp, #0]
    42ee:	2b00      	cmp	r3, #0
    42f0:	d160      	bne.n	43b4 <udd_ep_run+0x174>
	ptr_job->buf = buf;
    42f2:	9a01      	ldr	r2, [sp, #4]
    42f4:	4649      	mov	r1, r9
    42f6:	4694      	mov	ip, r2
    42f8:	4652      	mov	r2, sl
    42fa:	9b02      	ldr	r3, [sp, #8]
	ptr_job->call_trans = callback;
    42fc:	9810      	ldr	r0, [sp, #64]	; 0x40
	ptr_job->buf = buf;
    42fe:	4463      	add	r3, ip
    4300:	009b      	lsls	r3, r3, #2
    4302:	18d2      	adds	r2, r2, r3
    4304:	6051      	str	r1, [r2, #4]
	ptr_job->nb_trans = 0;
    4306:	2100      	movs	r1, #0
    4308:	60d1      	str	r1, [r2, #12]
	ptr_job->call_trans = callback;
    430a:	4651      	mov	r1, sl
    430c:	50c8      	str	r0, [r1, r3]
	ptr_job->b_shortpacket = b_shortpacket;
    430e:	0011      	movs	r1, r2
    4310:	3110      	adds	r1, #16
    4312:	788e      	ldrb	r6, [r1, #2]
    4314:	4643      	mov	r3, r8
    4316:	46b0      	mov	r8, r6
    4318:	2602      	movs	r6, #2
    431a:	2001      	movs	r0, #1
    431c:	46b4      	mov	ip, r6
    431e:	4003      	ands	r3, r0
    4320:	4646      	mov	r6, r8
    4322:	4660      	mov	r0, ip
    4324:	4386      	bics	r6, r0
	ptr_job->b_use_out_cache_buffer = false;
    4326:	2004      	movs	r0, #4
	ptr_job->b_shortpacket = b_shortpacket;
    4328:	005b      	lsls	r3, r3, #1
	ptr_job->b_use_out_cache_buffer = false;
    432a:	4333      	orrs	r3, r6
    432c:	4383      	bics	r3, r0
    432e:	708b      	strb	r3, [r1, #2]
	if (ep & USB_EP_DIR_IN) {
    4330:	9b03      	ldr	r3, [sp, #12]
	ptr_job->buf_size = buf_size;
    4332:	6097      	str	r7, [r2, #8]
	if (ep & USB_EP_DIR_IN) {
    4334:	2b00      	cmp	r3, #0
    4336:	db42      	blt.n	43be <udd_ep_run+0x17e>
		if (0 != ptr_job->buf_size) {
    4338:	2f00      	cmp	r7, #0
    433a:	d02e      	beq.n	439a <udd_ep_run+0x15a>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    433c:	8a13      	ldrh	r3, [r2, #16]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    433e:	4d45      	ldr	r5, [pc, #276]	; (4454 <udd_ep_run+0x214>)
			next_trans = ptr_job->buf_size;
    4340:	b2bf      	uxth	r7, r7
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    4342:	4698      	mov	r8, r3
    4344:	0019      	movs	r1, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4346:	42af      	cmp	r7, r5
    4348:	d96d      	bls.n	4426 <udd_ep_run+0x1e6>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    434a:	4b43      	ldr	r3, [pc, #268]	; (4458 <udd_ep_run+0x218>)
    434c:	0028      	movs	r0, r5
    434e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4350:	1a6b      	subs	r3, r5, r1
    4352:	b29b      	uxth	r3, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    4354:	464a      	mov	r2, r9
			if (next_trans < ptr_job->ep_size) {
    4356:	4543      	cmp	r3, r8
    4358:	d20e      	bcs.n	4378 <udd_ep_run+0x138>
				ptr_job->b_use_out_cache_buffer = true;
    435a:	9b02      	ldr	r3, [sp, #8]
    435c:	2104      	movs	r1, #4
    435e:	469c      	mov	ip, r3
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	4463      	add	r3, ip
    4364:	009e      	lsls	r6, r3, #2
    4366:	4456      	add	r6, sl
    4368:	7cb2      	ldrb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    436a:	4b3c      	ldr	r3, [pc, #240]	; (445c <udd_ep_run+0x21c>)
				ptr_job->b_use_out_cache_buffer = true;
    436c:	430a      	orrs	r2, r1
    436e:	74b2      	strb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    4370:	1e62      	subs	r2, r4, #1
    4372:	0192      	lsls	r2, r2, #6
    4374:	18d2      	adds	r2, r2, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    4376:	4643      	mov	r3, r8
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    4378:	0021      	movs	r1, r4
    437a:	4658      	mov	r0, fp
    437c:	4c38      	ldr	r4, [pc, #224]	; (4460 <udd_ep_run+0x220>)
    437e:	47a0      	blx	r4
				return (STATUS_OK ==
    4380:	4243      	negs	r3, r0
    4382:	4158      	adcs	r0, r3
    4384:	b2c0      	uxtb	r0, r0
    4386:	e76b      	b.n	4260 <udd_ep_run+0x20>
    4388:	9b00      	ldr	r3, [sp, #0]
    438a:	2b00      	cmp	r3, #0
    438c:	d100      	bne.n	4390 <udd_ep_run+0x150>
    438e:	e766      	b.n	425e <udd_ep_run+0x1e>
		cpu_irq_enable();
    4390:	7011      	strb	r1, [r2, #0]
    4392:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4396:	b662      	cpsie	i
    4398:	e762      	b.n	4260 <udd_ep_run+0x20>
			ptr_job->busy = false;
    439a:	2201      	movs	r2, #1
    439c:	788b      	ldrb	r3, [r1, #2]
    439e:	4393      	bics	r3, r2
    43a0:	708b      	strb	r3, [r1, #2]
			if (NULL != ptr_job->call_trans) {
    43a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    43a4:	2b00      	cmp	r3, #0
    43a6:	d003      	beq.n	43b0 <udd_ep_run+0x170>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    43a8:	002a      	movs	r2, r5
    43aa:	2100      	movs	r1, #0
    43ac:	2000      	movs	r0, #0
    43ae:	4798      	blx	r3
			return true;
    43b0:	2001      	movs	r0, #1
    43b2:	e755      	b.n	4260 <udd_ep_run+0x20>
    43b4:	7011      	strb	r1, [r2, #0]
    43b6:	f3bf 8f5f 	dmb	sy
    43ba:	b662      	cpsie	i
    43bc:	e799      	b.n	42f2 <udd_ep_run+0xb2>
		if (0 != ptr_job->buf_size) {
    43be:	2f00      	cmp	r7, #0
    43c0:	d037      	beq.n	4432 <udd_ep_run+0x1f2>
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    43c2:	4d24      	ldr	r5, [pc, #144]	; (4454 <udd_ep_run+0x214>)
			next_trans = ptr_job->buf_size;
    43c4:	b2bf      	uxth	r7, r7
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    43c6:	42af      	cmp	r7, r5
    43c8:	d905      	bls.n	43d6 <udd_ep_run+0x196>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    43ca:	8a11      	ldrh	r1, [r2, #16]
    43cc:	0028      	movs	r0, r5
    43ce:	4b22      	ldr	r3, [pc, #136]	; (4458 <udd_ep_run+0x218>)
    43d0:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    43d2:	1a6f      	subs	r7, r5, r1
    43d4:	b2bf      	uxth	r7, r7
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    43d6:	9a01      	ldr	r2, [sp, #4]
    43d8:	9b02      	ldr	r3, [sp, #8]
    43da:	4694      	mov	ip, r2
    43dc:	4463      	add	r3, ip
    43de:	009b      	lsls	r3, r3, #2
    43e0:	4453      	add	r3, sl
    43e2:	7c99      	ldrb	r1, [r3, #18]
    43e4:	2200      	movs	r2, #0
    43e6:	0789      	lsls	r1, r1, #30
    43e8:	d507      	bpl.n	43fa <udd_ep_run+0x1ba>
					(0 == (next_trans % ptr_job->ep_size));
    43ea:	8a19      	ldrh	r1, [r3, #16]
    43ec:	0038      	movs	r0, r7
    43ee:	4b1d      	ldr	r3, [pc, #116]	; (4464 <udd_ep_run+0x224>)
    43f0:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    43f2:	b289      	uxth	r1, r1
    43f4:	424a      	negs	r2, r1
    43f6:	414a      	adcs	r2, r1
    43f8:	b2d2      	uxtb	r2, r2
    43fa:	9901      	ldr	r1, [sp, #4]
    43fc:	2002      	movs	r0, #2
    43fe:	468c      	mov	ip, r1
    4400:	9b02      	ldr	r3, [sp, #8]
    4402:	0051      	lsls	r1, r2, #1
    4404:	4463      	add	r3, ip
    4406:	009b      	lsls	r3, r3, #2
    4408:	4453      	add	r3, sl
    440a:	7c9a      	ldrb	r2, [r3, #18]
    440c:	4382      	bics	r2, r0
    440e:	430a      	orrs	r2, r1
    4410:	749a      	strb	r2, [r3, #18]
    4412:	003b      	movs	r3, r7
				usb_device_endpoint_write_buffer_job(&usb_device,
    4414:	0021      	movs	r1, r4
    4416:	464a      	mov	r2, r9
    4418:	4658      	mov	r0, fp
    441a:	4c13      	ldr	r4, [pc, #76]	; (4468 <udd_ep_run+0x228>)
    441c:	47a0      	blx	r4
		return (STATUS_OK ==
    441e:	4243      	negs	r3, r0
    4420:	4158      	adcs	r0, r3
    4422:	b2c0      	uxtb	r0, r0
    4424:	e71c      	b.n	4260 <udd_ep_run+0x20>
				next_trans -= next_trans % ptr_job->ep_size;
    4426:	0038      	movs	r0, r7
    4428:	4b0e      	ldr	r3, [pc, #56]	; (4464 <udd_ep_run+0x224>)
    442a:	4798      	blx	r3
    442c:	1a7f      	subs	r7, r7, r1
    442e:	b2bb      	uxth	r3, r7
    4430:	e790      	b.n	4354 <udd_ep_run+0x114>
		} else if (true == ptr_job->b_shortpacket) {
    4432:	7c93      	ldrb	r3, [r2, #18]
    4434:	4662      	mov	r2, ip
    4436:	421a      	tst	r2, r3
    4438:	d0af      	beq.n	439a <udd_ep_run+0x15a>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    443a:	788b      	ldrb	r3, [r1, #2]
    443c:	4393      	bics	r3, r2
    443e:	708b      	strb	r3, [r1, #2]
    4440:	2300      	movs	r3, #0
    4442:	e7e7      	b.n	4414 <udd_ep_run+0x1d4>
    4444:	20000480 	.word	0x20000480
    4448:	00004c81 	.word	0x00004c81
    444c:	200000e8 	.word	0x200000e8
    4450:	200002a8 	.word	0x200002a8
    4454:	00001fff 	.word	0x00001fff
    4458:	000060ad 	.word	0x000060ad
    445c:	200003c0 	.word	0x200003c0
    4460:	00004d89 	.word	0x00004d89
    4464:	00005ed9 	.word	0x00005ed9
    4468:	00004d3d 	.word	0x00004d3d

0000446c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    446c:	2280      	movs	r2, #128	; 0x80
    446e:	4b02      	ldr	r3, [pc, #8]	; (4478 <udd_set_address+0xc>)
    4470:	4310      	orrs	r0, r2
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	7298      	strb	r0, [r3, #10]
}
    4476:	4770      	bx	lr
    4478:	20000480 	.word	0x20000480

0000447c <udd_getaddress>:
{
    447c:	4b02      	ldr	r3, [pc, #8]	; (4488 <udd_getaddress+0xc>)
}
    447e:	681b      	ldr	r3, [r3, #0]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    4480:	7a98      	ldrb	r0, [r3, #10]
    4482:	0640      	lsls	r0, r0, #25
    4484:	0e40      	lsrs	r0, r0, #25
    4486:	4770      	bx	lr
    4488:	20000480 	.word	0x20000480

0000448c <udd_send_remotewakeup>:
{
    448c:	b530      	push	{r4, r5, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    448e:	4b3b      	ldr	r3, [pc, #236]	; (457c <udd_send_remotewakeup+0xf0>)
{
    4490:	b085      	sub	sp, #20
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    4492:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    4494:	0692      	lsls	r2, r2, #26
    4496:	d453      	bmi.n	4540 <udd_send_remotewakeup+0xb4>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    4498:	21d0      	movs	r1, #208	; 0xd0
    449a:	68da      	ldr	r2, [r3, #12]
    449c:	400a      	ands	r2, r1
    449e:	2ad0      	cmp	r2, #208	; 0xd0
    44a0:	d1fb      	bne.n	449a <udd_send_remotewakeup+0xe>
	enum sleepmgr_mode sleep_mode[] = {
    44a2:	4b37      	ldr	r3, [pc, #220]	; (4580 <udd_send_remotewakeup+0xf4>)
	if (udd_state == new_state) {
    44a4:	4c37      	ldr	r4, [pc, #220]	; (4584 <udd_send_remotewakeup+0xf8>)
	enum sleepmgr_mode sleep_mode[] = {
    44a6:	9301      	str	r3, [sp, #4]
	if (udd_state == new_state) {
    44a8:	7823      	ldrb	r3, [r4, #0]
    44aa:	2b03      	cmp	r3, #3
    44ac:	d01e      	beq.n	44ec <udd_send_remotewakeup+0x60>
	if(sleepmgr_locks[mode] >= 0xff) {
    44ae:	4b36      	ldr	r3, [pc, #216]	; (4588 <udd_send_remotewakeup+0xfc>)
    44b0:	785a      	ldrb	r2, [r3, #1]
    44b2:	2aff      	cmp	r2, #255	; 0xff
    44b4:	d043      	beq.n	453e <udd_send_remotewakeup+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    44b6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    44ba:	4251      	negs	r1, r2
    44bc:	414a      	adcs	r2, r1
    44be:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    44c0:	b672      	cpsid	i
    44c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    44c6:	2200      	movs	r2, #0
    44c8:	4930      	ldr	r1, [pc, #192]	; (458c <udd_send_remotewakeup+0x100>)
    44ca:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
    44cc:	785a      	ldrb	r2, [r3, #1]
	return flags;
    44ce:	9802      	ldr	r0, [sp, #8]
    44d0:	3201      	adds	r2, #1
    44d2:	705a      	strb	r2, [r3, #1]
	if (cpu_irq_is_enabled_flags(flags))
    44d4:	2800      	cmp	r0, #0
    44d6:	d004      	beq.n	44e2 <udd_send_remotewakeup+0x56>
		cpu_irq_enable();
    44d8:	2201      	movs	r2, #1
    44da:	700a      	strb	r2, [r1, #0]
    44dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    44e0:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    44e2:	7822      	ldrb	r2, [r4, #0]
    44e4:	2a00      	cmp	r2, #0
    44e6:	d130      	bne.n	454a <udd_send_remotewakeup+0xbe>
	udd_state = new_state;
    44e8:	2303      	movs	r3, #3
    44ea:	7023      	strb	r3, [r4, #0]
    44ec:	4b28      	ldr	r3, [pc, #160]	; (4590 <udd_send_remotewakeup+0x104>)
    44ee:	681b      	ldr	r3, [r3, #0]
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    44f0:	7b5a      	ldrb	r2, [r3, #13]
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    44f2:	2a02      	cmp	r2, #2
    44f4:	d021      	beq.n	453a <udd_send_remotewakeup+0xae>
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    44f6:	2102      	movs	r1, #2
    44f8:	891a      	ldrh	r2, [r3, #8]
    44fa:	430a      	orrs	r2, r1
    44fc:	b292      	uxth	r2, r2
    44fe:	811a      	strh	r2, [r3, #8]
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    4500:	7b5a      	ldrb	r2, [r3, #13]
    4502:	2a02      	cmp	r2, #2
    4504:	d019      	beq.n	453a <udd_send_remotewakeup+0xae>
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    4506:	891a      	ldrh	r2, [r3, #8]
    4508:	430a      	orrs	r2, r1
    450a:	b292      	uxth	r2, r2
    450c:	811a      	strh	r2, [r3, #8]
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    450e:	7b5a      	ldrb	r2, [r3, #13]
    4510:	2a02      	cmp	r2, #2
    4512:	d012      	beq.n	453a <udd_send_remotewakeup+0xae>
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    4514:	891a      	ldrh	r2, [r3, #8]
    4516:	430a      	orrs	r2, r1
    4518:	b292      	uxth	r2, r2
    451a:	811a      	strh	r2, [r3, #8]
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    451c:	7b5a      	ldrb	r2, [r3, #13]
    451e:	2a02      	cmp	r2, #2
    4520:	d00b      	beq.n	453a <udd_send_remotewakeup+0xae>
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    4522:	891a      	ldrh	r2, [r3, #8]
    4524:	430a      	orrs	r2, r1
    4526:	b292      	uxth	r2, r2
    4528:	811a      	strh	r2, [r3, #8]
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    452a:	7b5a      	ldrb	r2, [r3, #13]
    452c:	2a02      	cmp	r2, #2
    452e:	d004      	beq.n	453a <udd_send_remotewakeup+0xae>
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    4530:	891a      	ldrh	r2, [r3, #8]
    4532:	430a      	orrs	r2, r1
    4534:	b292      	uxth	r2, r2
    4536:	811a      	strh	r2, [r3, #8]
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    4538:	7b5b      	ldrb	r3, [r3, #13]
}
    453a:	b005      	add	sp, #20
    453c:	bd30      	pop	{r4, r5, pc}
    453e:	e7fe      	b.n	453e <udd_send_remotewakeup+0xb2>
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    4540:	2110      	movs	r1, #16
    4542:	68da      	ldr	r2, [r3, #12]
    4544:	4211      	tst	r1, r2
    4546:	d0fc      	beq.n	4542 <udd_send_remotewakeup+0xb6>
    4548:	e7ab      	b.n	44a2 <udd_send_remotewakeup+0x16>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    454a:	a801      	add	r0, sp, #4
	if(sleepmgr_locks[mode] == 0) {
    454c:	5c82      	ldrb	r2, [r0, r2]
    454e:	5c98      	ldrb	r0, [r3, r2]
    4550:	2800      	cmp	r0, #0
    4552:	d012      	beq.n	457a <udd_send_remotewakeup+0xee>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4554:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4558:	4245      	negs	r5, r0
    455a:	4168      	adcs	r0, r5
    455c:	9003      	str	r0, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    455e:	b672      	cpsid	i
    4560:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4564:	2000      	movs	r0, #0
    4566:	7008      	strb	r0, [r1, #0]
	--sleepmgr_locks[mode];
    4568:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    456a:	9803      	ldr	r0, [sp, #12]
    456c:	3901      	subs	r1, #1
    456e:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    4570:	2800      	cmp	r0, #0
    4572:	d0b9      	beq.n	44e8 <udd_send_remotewakeup+0x5c>
    4574:	4b07      	ldr	r3, [pc, #28]	; (4594 <udd_send_remotewakeup+0x108>)
    4576:	4798      	blx	r3
    4578:	e7b6      	b.n	44e8 <udd_send_remotewakeup+0x5c>
    457a:	e7fe      	b.n	457a <udd_send_remotewakeup+0xee>
    457c:	40000800 	.word	0x40000800
    4580:	01020300 	.word	0x01020300
    4584:	20000320 	.word	0x20000320
    4588:	20000344 	.word	0x20000344
    458c:	200000e8 	.word	0x200000e8
    4590:	20000480 	.word	0x20000480
    4594:	00003991 	.word	0x00003991

00004598 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    4598:	4b01      	ldr	r3, [pc, #4]	; (45a0 <udd_set_setup_payload+0x8>)
    459a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    459c:	8199      	strh	r1, [r3, #12]
}
    459e:	4770      	bx	lr
    45a0:	200005e8 	.word	0x200005e8

000045a4 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    45a4:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    45a6:	4b17      	ldr	r3, [pc, #92]	; (4604 <udd_attach+0x60>)
    45a8:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    45aa:	2101      	movs	r1, #1
    45ac:	4c16      	ldr	r4, [pc, #88]	; (4608 <udd_attach+0x64>)
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    45ae:	4e17      	ldr	r6, [pc, #92]	; (460c <udd_attach+0x68>)
    45b0:	6822      	ldr	r2, [r4, #0]
    45b2:	0020      	movs	r0, r4
    45b4:	8913      	ldrh	r3, [r2, #8]
    45b6:	438b      	bics	r3, r1
    45b8:	8113      	strh	r3, [r2, #8]
    45ba:	3103      	adds	r1, #3
    45bc:	4a14      	ldr	r2, [pc, #80]	; (4610 <udd_attach+0x6c>)
    45be:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    45c0:	4a14      	ldr	r2, [pc, #80]	; (4614 <udd_attach+0x70>)
    45c2:	2100      	movs	r1, #0
    45c4:	0020      	movs	r0, r4
    45c6:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    45c8:	4a13      	ldr	r2, [pc, #76]	; (4618 <udd_attach+0x74>)
    45ca:	2101      	movs	r1, #1
    45cc:	0020      	movs	r0, r4
    45ce:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    45d0:	4a12      	ldr	r2, [pc, #72]	; (461c <udd_attach+0x78>)
    45d2:	2102      	movs	r1, #2
    45d4:	0020      	movs	r0, r4
    45d6:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    45d8:	4d11      	ldr	r5, [pc, #68]	; (4620 <udd_attach+0x7c>)
    45da:	2104      	movs	r1, #4
    45dc:	0020      	movs	r0, r4
    45de:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    45e0:	2100      	movs	r1, #0
    45e2:	0020      	movs	r0, r4
    45e4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    45e6:	2101      	movs	r1, #1
    45e8:	0020      	movs	r0, r4
    45ea:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    45ec:	2102      	movs	r1, #2
    45ee:	0020      	movs	r0, r4
    45f0:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    45f2:	4a0c      	ldr	r2, [pc, #48]	; (4624 <udd_attach+0x80>)
    45f4:	2106      	movs	r1, #6
    45f6:	0020      	movs	r0, r4
    45f8:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    45fa:	2106      	movs	r1, #6
    45fc:	0020      	movs	r0, r4
    45fe:	47a8      	blx	r5
#endif
}
    4600:	bd70      	pop	{r4, r5, r6, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	00003b29 	.word	0x00003b29
    4608:	20000480 	.word	0x20000480
    460c:	00004845 	.word	0x00004845
    4610:	00003d35 	.word	0x00003d35
    4614:	0000397d 	.word	0x0000397d
    4618:	000037bd 	.word	0x000037bd
    461c:	00003bc5 	.word	0x00003bc5
    4620:	00004869 	.word	0x00004869
    4624:	000039a5 	.word	0x000039a5

00004628 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    4628:	b570      	push	{r4, r5, r6, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    462a:	2100      	movs	r1, #0
    462c:	4b2d      	ldr	r3, [pc, #180]	; (46e4 <_uhd_vbus_handler+0xbc>)
{
    462e:	b084      	sub	sp, #16
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    4630:	200e      	movs	r0, #14
    4632:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    4634:	4b2c      	ldr	r3, [pc, #176]	; (46e8 <_uhd_vbus_handler+0xc0>)
    4636:	6a19      	ldr	r1, [r3, #32]
    4638:	2380      	movs	r3, #128	; 0x80
    463a:	01db      	lsls	r3, r3, #7
    463c:	4019      	ands	r1, r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    463e:	d135      	bne.n	46ac <_uhd_vbus_handler+0x84>
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    4640:	2501      	movs	r5, #1
    4642:	4b2a      	ldr	r3, [pc, #168]	; (46ec <_uhd_vbus_handler+0xc4>)
	if (udd_state == new_state) {
    4644:	4c2a      	ldr	r4, [pc, #168]	; (46f0 <_uhd_vbus_handler+0xc8>)
    4646:	681a      	ldr	r2, [r3, #0]
    4648:	8913      	ldrh	r3, [r2, #8]
    464a:	432b      	orrs	r3, r5
    464c:	b29b      	uxth	r3, r3
    464e:	8113      	strh	r3, [r2, #8]
	enum sleepmgr_mode sleep_mode[] = {
    4650:	2303      	movs	r3, #3
    4652:	aa01      	add	r2, sp, #4
    4654:	7053      	strb	r3, [r2, #1]
    4656:	3b01      	subs	r3, #1
    4658:	7093      	strb	r3, [r2, #2]
	if (udd_state == new_state) {
    465a:	7823      	ldrb	r3, [r4, #0]
	enum sleepmgr_mode sleep_mode[] = {
    465c:	7011      	strb	r1, [r2, #0]
    465e:	70d5      	strb	r5, [r2, #3]
	if (udd_state == new_state) {
    4660:	2b01      	cmp	r3, #1
    4662:	d01c      	beq.n	469e <_uhd_vbus_handler+0x76>
	if(sleepmgr_locks[mode] >= 0xff) {
    4664:	4b23      	ldr	r3, [pc, #140]	; (46f4 <_uhd_vbus_handler+0xcc>)
    4666:	78d8      	ldrb	r0, [r3, #3]
    4668:	28ff      	cmp	r0, #255	; 0xff
    466a:	d01e      	beq.n	46aa <_uhd_vbus_handler+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    466c:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4670:	4246      	negs	r6, r0
    4672:	4170      	adcs	r0, r6
    4674:	9002      	str	r0, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    4676:	b672      	cpsid	i
    4678:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    467c:	481e      	ldr	r0, [pc, #120]	; (46f8 <_uhd_vbus_handler+0xd0>)
    467e:	7001      	strb	r1, [r0, #0]
	++sleepmgr_locks[mode];
    4680:	78d9      	ldrb	r1, [r3, #3]
	return flags;
    4682:	9e02      	ldr	r6, [sp, #8]
    4684:	3101      	adds	r1, #1
    4686:	70d9      	strb	r1, [r3, #3]
	if (cpu_irq_is_enabled_flags(flags))
    4688:	2e00      	cmp	r6, #0
    468a:	d003      	beq.n	4694 <_uhd_vbus_handler+0x6c>
		cpu_irq_enable();
    468c:	7005      	strb	r5, [r0, #0]
    468e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4692:	b662      	cpsie	i
	if (udd_state != UDD_STATE_OFF) {
    4694:	7821      	ldrb	r1, [r4, #0]
    4696:	2900      	cmp	r1, #0
    4698:	d10b      	bne.n	46b2 <_uhd_vbus_handler+0x8a>
	udd_state = new_state;
    469a:	2301      	movs	r3, #1
    469c:	7023      	strb	r3, [r4, #0]
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    469e:	2100      	movs	r1, #0
    46a0:	4b16      	ldr	r3, [pc, #88]	; (46fc <_uhd_vbus_handler+0xd4>)
    46a2:	200e      	movs	r0, #14
    46a4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    46a6:	b004      	add	sp, #16
    46a8:	bd70      	pop	{r4, r5, r6, pc}
    46aa:	e7fe      	b.n	46aa <_uhd_vbus_handler+0x82>
		udd_attach();
    46ac:	4b14      	ldr	r3, [pc, #80]	; (4700 <_uhd_vbus_handler+0xd8>)
    46ae:	4798      	blx	r3
    46b0:	e7f5      	b.n	469e <_uhd_vbus_handler+0x76>
	if(sleepmgr_locks[mode] == 0) {
    46b2:	5c52      	ldrb	r2, [r2, r1]
    46b4:	5c99      	ldrb	r1, [r3, r2]
    46b6:	2900      	cmp	r1, #0
    46b8:	d012      	beq.n	46e0 <_uhd_vbus_handler+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    46ba:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    46be:	424d      	negs	r5, r1
    46c0:	4169      	adcs	r1, r5
    46c2:	9103      	str	r1, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    46c4:	b672      	cpsid	i
    46c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    46ca:	2100      	movs	r1, #0
    46cc:	7001      	strb	r1, [r0, #0]
	--sleepmgr_locks[mode];
    46ce:	5c99      	ldrb	r1, [r3, r2]
	return flags;
    46d0:	9803      	ldr	r0, [sp, #12]
    46d2:	3901      	subs	r1, #1
    46d4:	5499      	strb	r1, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
    46d6:	2800      	cmp	r0, #0
    46d8:	d0df      	beq.n	469a <_uhd_vbus_handler+0x72>
    46da:	4b0a      	ldr	r3, [pc, #40]	; (4704 <_uhd_vbus_handler+0xdc>)
    46dc:	4798      	blx	r3
    46de:	e7dc      	b.n	469a <_uhd_vbus_handler+0x72>
    46e0:	e7fe      	b.n	46e0 <_uhd_vbus_handler+0xb8>
    46e2:	46c0      	nop			; (mov r8, r8)
    46e4:	00001dfd 	.word	0x00001dfd
    46e8:	41004400 	.word	0x41004400
    46ec:	20000480 	.word	0x20000480
    46f0:	20000320 	.word	0x20000320
    46f4:	20000344 	.word	0x20000344
    46f8:	200000e8 	.word	0x200000e8
    46fc:	00001dd9 	.word	0x00001dd9
    4700:	000045a5 	.word	0x000045a5
    4704:	00003991 	.word	0x00003991

00004708 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    4708:	b5f0      	push	{r4, r5, r6, r7, lr}
    470a:	46de      	mov	lr, fp
    470c:	4657      	mov	r7, sl
    470e:	464e      	mov	r6, r9
    4710:	4645      	mov	r5, r8
    4712:	b5e0      	push	{r5, r6, r7, lr}
    4714:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4716:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    471a:	425a      	negs	r2, r3
    471c:	4153      	adcs	r3, r2
    471e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    4720:	b672      	cpsid	i
    4722:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4726:	2400      	movs	r4, #0
    4728:	4d36      	ldr	r5, [pc, #216]	; (4804 <udd_enable+0xfc>)
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    472a:	af01      	add	r7, sp, #4
    472c:	702c      	strb	r4, [r5, #0]
    472e:	0038      	movs	r0, r7
    4730:	4b35      	ldr	r3, [pc, #212]	; (4808 <udd_enable+0x100>)
	return flags;
    4732:	9e02      	ldr	r6, [sp, #8]
    4734:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    4736:	70bc      	strb	r4, [r7, #2]
	usb_init(&usb_device, USB, &config_usb);
    4738:	4c34      	ldr	r4, [pc, #208]	; (480c <udd_enable+0x104>)
    473a:	003a      	movs	r2, r7
    473c:	4934      	ldr	r1, [pc, #208]	; (4810 <udd_enable+0x108>)
    473e:	4b35      	ldr	r3, [pc, #212]	; (4814 <udd_enable+0x10c>)
    4740:	0020      	movs	r0, r4
    4742:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    4744:	4b34      	ldr	r3, [pc, #208]	; (4818 <udd_enable+0x110>)
    4746:	0020      	movs	r0, r4
    4748:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    474a:	4b34      	ldr	r3, [pc, #208]	; (481c <udd_enable+0x114>)
    474c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    474e:	0692      	lsls	r2, r2, #26
    4750:	d43d      	bmi.n	47ce <udd_enable+0xc6>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    4752:	001a      	movs	r2, r3
    4754:	21d0      	movs	r1, #208	; 0xd0
    4756:	68d3      	ldr	r3, [r2, #12]
    4758:	400b      	ands	r3, r1
    475a:	2bd0      	cmp	r3, #208	; 0xd0
    475c:	d1fb      	bne.n	4756 <udd_enable+0x4e>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    475e:	4b30      	ldr	r3, [pc, #192]	; (4820 <udd_enable+0x118>)
	extint_chan_get_config_defaults(&eint_chan_conf);
    4760:	af03      	add	r7, sp, #12
	udd_sleep_mode(UDD_STATE_SUSPEND);
    4762:	4699      	mov	r9, r3
    4764:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    4766:	0038      	movs	r0, r7
    4768:	4b2e      	ldr	r3, [pc, #184]	; (4824 <udd_enable+0x11c>)
    476a:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    476c:	230e      	movs	r3, #14
    476e:	9303      	str	r3, [sp, #12]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    4770:	2300      	movs	r3, #0
    4772:	607b      	str	r3, [r7, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    4774:	723b      	strb	r3, [r7, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    4776:	3303      	adds	r3, #3
    4778:	72fb      	strb	r3, [r7, #11]
	eint_chan_conf.filter_input_signal = true;
    477a:	3b02      	subs	r3, #2
    477c:	72bb      	strb	r3, [r7, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    477e:	4b2a      	ldr	r3, [pc, #168]	; (4828 <udd_enable+0x120>)
    4780:	2100      	movs	r1, #0
    4782:	200e      	movs	r0, #14
    4784:	469a      	mov	sl, r3
    4786:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    4788:	0039      	movs	r1, r7
    478a:	200e      	movs	r0, #14
    478c:	4b27      	ldr	r3, [pc, #156]	; (482c <udd_enable+0x124>)
    478e:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    4790:	2200      	movs	r2, #0
    4792:	4b27      	ldr	r3, [pc, #156]	; (4830 <udd_enable+0x128>)
    4794:	210e      	movs	r1, #14
    4796:	4827      	ldr	r0, [pc, #156]	; (4834 <udd_enable+0x12c>)
    4798:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    479a:	2100      	movs	r1, #0
    479c:	200e      	movs	r0, #14
    479e:	4f26      	ldr	r7, [pc, #152]	; (4838 <udd_enable+0x130>)
    47a0:	47b8      	blx	r7
    47a2:	2280      	movs	r2, #128	; 0x80
    47a4:	4b25      	ldr	r3, [pc, #148]	; (483c <udd_enable+0x134>)
    47a6:	01d2      	lsls	r2, r2, #7
    47a8:	469b      	mov	fp, r3
    47aa:	6a1b      	ldr	r3, [r3, #32]
    47ac:	4690      	mov	r8, r2

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    47ae:	4213      	tst	r3, r2
    47b0:	d112      	bne.n	47d8 <udd_enable+0xd0>
	if (cpu_irq_is_enabled_flags(flags))
    47b2:	2e00      	cmp	r6, #0
    47b4:	d004      	beq.n	47c0 <udd_enable+0xb8>
		cpu_irq_enable();
    47b6:	2301      	movs	r3, #1
    47b8:	702b      	strb	r3, [r5, #0]
    47ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    47be:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    47c0:	b007      	add	sp, #28
    47c2:	bc3c      	pop	{r2, r3, r4, r5}
    47c4:	4690      	mov	r8, r2
    47c6:	4699      	mov	r9, r3
    47c8:	46a2      	mov	sl, r4
    47ca:	46ab      	mov	fp, r5
    47cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    47ce:	2110      	movs	r1, #16
    47d0:	68da      	ldr	r2, [r3, #12]
    47d2:	4211      	tst	r1, r2
    47d4:	d0fc      	beq.n	47d0 <udd_enable+0xc8>
    47d6:	e7c2      	b.n	475e <udd_enable+0x56>
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    47d8:	2100      	movs	r1, #0
    47da:	200e      	movs	r0, #14
    47dc:	47d0      	blx	sl
    47de:	465b      	mov	r3, fp
	if (is_usb_vbus_high()) {
    47e0:	4642      	mov	r2, r8
    47e2:	6a1b      	ldr	r3, [r3, #32]
    47e4:	4213      	tst	r3, r2
    47e6:	d109      	bne.n	47fc <udd_enable+0xf4>
    47e8:	2101      	movs	r1, #1
    47ea:	6822      	ldr	r2, [r4, #0]
    47ec:	8913      	ldrh	r3, [r2, #8]
    47ee:	430b      	orrs	r3, r1
    47f0:	8113      	strh	r3, [r2, #8]
	udd_sleep_mode(UDD_STATE_SUSPEND);
    47f2:	47c8      	blx	r9
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    47f4:	2100      	movs	r1, #0
    47f6:	200e      	movs	r0, #14
    47f8:	47b8      	blx	r7
    47fa:	e7da      	b.n	47b2 <udd_enable+0xaa>
		udd_attach();
    47fc:	4b10      	ldr	r3, [pc, #64]	; (4840 <udd_enable+0x138>)
    47fe:	4798      	blx	r3
    4800:	e7f8      	b.n	47f4 <udd_enable+0xec>
    4802:	46c0      	nop			; (mov r8, r8)
    4804:	200000e8 	.word	0x200000e8
    4808:	00005391 	.word	0x00005391
    480c:	20000480 	.word	0x20000480
    4810:	41005000 	.word	0x41005000
    4814:	000053a1 	.word	0x000053a1
    4818:	00004e01 	.word	0x00004e01
    481c:	40000800 	.word	0x40000800
    4820:	00003a8d 	.word	0x00003a8d
    4824:	00001ed5 	.word	0x00001ed5
    4828:	00001dfd 	.word	0x00001dfd
    482c:	00001ee9 	.word	0x00001ee9
    4830:	00001db1 	.word	0x00001db1
    4834:	00004629 	.word	0x00004629
    4838:	00001dd9 	.word	0x00001dd9
    483c:	41004400 	.word	0x41004400
    4840:	000045a5 	.word	0x000045a5

00004844 <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    4844:	000b      	movs	r3, r1
    4846:	332e      	adds	r3, #46	; 0x2e
    4848:	009b      	lsls	r3, r3, #2
{
    484a:	b510      	push	{r4, lr}
	module_inst->device_callback[callback_type] = callback_func;
    484c:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    484e:	22aa      	movs	r2, #170	; 0xaa
    4850:	4c04      	ldr	r4, [pc, #16]	; (4864 <usb_device_register_callback+0x20>)
    4852:	0052      	lsls	r2, r2, #1
    4854:	0049      	lsls	r1, r1, #1
    4856:	5a83      	ldrh	r3, [r0, r2]
    4858:	5b09      	ldrh	r1, [r1, r4]
    485a:	430b      	orrs	r3, r1
    485c:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    485e:	2000      	movs	r0, #0
    4860:	bd10      	pop	{r4, pc}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	0000634c 	.word	0x0000634c

00004868 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4868:	4b06      	ldr	r3, [pc, #24]	; (4884 <usb_device_enable_callback+0x1c>)
    486a:	0049      	lsls	r1, r1, #1
    486c:	5acb      	ldrh	r3, [r1, r3]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    486e:	21ab      	movs	r1, #171	; 0xab
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4870:	6802      	ldr	r2, [r0, #0]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    4872:	0049      	lsls	r1, r1, #1
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4874:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    4876:	5a42      	ldrh	r2, [r0, r1]
    4878:	431a      	orrs	r2, r3
    487a:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    487c:	6802      	ldr	r2, [r0, #0]

	return STATUS_OK;
}
    487e:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    4880:	8313      	strh	r3, [r2, #24]
}
    4882:	4770      	bx	lr
    4884:	0000634c 	.word	0x0000634c

00004888 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    4888:	4b05      	ldr	r3, [pc, #20]	; (48a0 <usb_device_disable_callback+0x18>)
    488a:	0049      	lsls	r1, r1, #1
    488c:	5aca      	ldrh	r2, [r1, r3]
    488e:	21ab      	movs	r1, #171	; 0xab
    4890:	0049      	lsls	r1, r1, #1
    4892:	5a43      	ldrh	r3, [r0, r1]
    4894:	4393      	bics	r3, r2
    4896:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    4898:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
    489a:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    489c:	829a      	strh	r2, [r3, #20]
}
    489e:	4770      	bx	lr
    48a0:	0000634c 	.word	0x0000634c

000048a4 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    48a4:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    48a6:	008c      	lsls	r4, r1, #2
    48a8:	18a4      	adds	r4, r4, r2
    48aa:	3434      	adds	r4, #52	; 0x34
    48ac:	00a4      	lsls	r4, r4, #2
    48ae:	1904      	adds	r4, r0, r4

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    48b0:	1840      	adds	r0, r0, r1
    48b2:	3059      	adds	r0, #89	; 0x59
    48b4:	4904      	ldr	r1, [pc, #16]	; (48c8 <usb_device_endpoint_register_callback+0x24>)
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    48b6:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    48b8:	30ff      	adds	r0, #255	; 0xff
    48ba:	7803      	ldrb	r3, [r0, #0]
    48bc:	5c8a      	ldrb	r2, [r1, r2]
    48be:	4313      	orrs	r3, r2
    48c0:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    48c2:	2000      	movs	r0, #0
    48c4:	bd10      	pop	{r4, pc}
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	0000635c 	.word	0x0000635c

000048cc <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    48cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    48ce:	2400      	movs	r4, #0
    48d0:	008b      	lsls	r3, r1, #2
    48d2:	189b      	adds	r3, r3, r2
    48d4:	3334      	adds	r3, #52	; 0x34
    48d6:	009b      	lsls	r3, r3, #2
    48d8:	18c3      	adds	r3, r0, r3

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    48da:	1840      	adds	r0, r0, r1
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    48dc:	605c      	str	r4, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    48de:	3059      	adds	r0, #89	; 0x59
    48e0:	4b03      	ldr	r3, [pc, #12]	; (48f0 <usb_device_endpoint_unregister_callback+0x24>)
    48e2:	30ff      	adds	r0, #255	; 0xff
    48e4:	5c9a      	ldrb	r2, [r3, r2]
    48e6:	7803      	ldrb	r3, [r0, #0]
    48e8:	4393      	bics	r3, r2
    48ea:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    48ec:	2000      	movs	r0, #0
    48ee:	bd10      	pop	{r4, pc}
    48f0:	0000635c 	.word	0x0000635c

000048f4 <usb_device_endpoint_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    48f4:	230f      	movs	r3, #15
{
    48f6:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    48f8:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    48fa:	18c4      	adds	r4, r0, r3
    48fc:	3461      	adds	r4, #97	; 0x61
    48fe:	4e28      	ldr	r6, [pc, #160]	; (49a0 <usb_device_endpoint_enable_callback+0xac>)
    4900:	34ff      	adds	r4, #255	; 0xff
    4902:	7825      	ldrb	r5, [r4, #0]
    4904:	5cb6      	ldrb	r6, [r6, r2]
    4906:	4335      	orrs	r5, r6
    4908:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    490a:	2a00      	cmp	r2, #0
    490c:	d108      	bne.n	4920 <usb_device_endpoint_enable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
    490e:	2b00      	cmp	r3, #0
    4910:	d115      	bne.n	493e <usb_device_endpoint_enable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    4912:	230a      	movs	r3, #10
    4914:	2103      	movs	r1, #3
    4916:	6802      	ldr	r2, [r0, #0]
    4918:	33ff      	adds	r3, #255	; 0xff
    491a:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
		}
	}

	return STATUS_OK;
}
    491c:	2000      	movs	r0, #0
    491e:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    4920:	2a01      	cmp	r2, #1
    4922:	d117      	bne.n	4954 <usb_device_endpoint_enable_callback+0x60>
		if (ep_num == 0) { // control endpoint
    4924:	2b00      	cmp	r3, #0
    4926:	d01f      	beq.n	4968 <usb_device_endpoint_enable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    4928:	6802      	ldr	r2, [r0, #0]
    492a:	015b      	lsls	r3, r3, #5
    492c:	18d3      	adds	r3, r2, r3
    492e:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
    4930:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    4932:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    4934:	2900      	cmp	r1, #0
    4936:	db20      	blt.n	497a <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    4938:	2204      	movs	r2, #4
    493a:	701a      	strb	r2, [r3, #0]
    493c:	e7ee      	b.n	491c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    493e:	6802      	ldr	r2, [r0, #0]
    4940:	015b      	lsls	r3, r3, #5
    4942:	18d3      	adds	r3, r2, r3
    4944:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
    4946:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    4948:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    494a:	2900      	cmp	r1, #0
    494c:	db12      	blt.n	4974 <usb_device_endpoint_enable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    494e:	2201      	movs	r2, #1
    4950:	701a      	strb	r2, [r3, #0]
    4952:	e7e3      	b.n	491c <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4954:	2a02      	cmp	r2, #2
    4956:	d113      	bne.n	4980 <usb_device_endpoint_enable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4958:	6802      	ldr	r2, [r0, #0]
    495a:	015b      	lsls	r3, r3, #5
    495c:	18d3      	adds	r3, r2, r3
    495e:	2210      	movs	r2, #16
    4960:	330a      	adds	r3, #10
    4962:	33ff      	adds	r3, #255	; 0xff
    4964:	701a      	strb	r2, [r3, #0]
    4966:	e7d9      	b.n	491c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    4968:	230a      	movs	r3, #10
    496a:	210c      	movs	r1, #12
    496c:	6802      	ldr	r2, [r0, #0]
    496e:	33ff      	adds	r3, #255	; 0xff
    4970:	54d1      	strb	r1, [r2, r3]
    4972:	e7d3      	b.n	491c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    4974:	2202      	movs	r2, #2
    4976:	701a      	strb	r2, [r3, #0]
    4978:	e7d0      	b.n	491c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    497a:	2208      	movs	r2, #8
    497c:	701a      	strb	r2, [r3, #0]
    497e:	e7cd      	b.n	491c <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4980:	2a03      	cmp	r2, #3
    4982:	d1cb      	bne.n	491c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    4984:	6802      	ldr	r2, [r0, #0]
    4986:	015b      	lsls	r3, r3, #5
    4988:	18d3      	adds	r3, r2, r3
    498a:	330a      	adds	r3, #10
		if (ep & USB_EP_DIR_IN) {
    498c:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    498e:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
    4990:	2900      	cmp	r1, #0
    4992:	db02      	blt.n	499a <usb_device_endpoint_enable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    4994:	2220      	movs	r2, #32
    4996:	701a      	strb	r2, [r3, #0]
    4998:	e7c0      	b.n	491c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    499a:	2240      	movs	r2, #64	; 0x40
    499c:	701a      	strb	r2, [r3, #0]
    499e:	e7bd      	b.n	491c <usb_device_endpoint_enable_callback+0x28>
    49a0:	0000635c 	.word	0x0000635c

000049a4 <usb_device_endpoint_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    49a4:	230f      	movs	r3, #15
{
    49a6:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    49a8:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    49aa:	18c4      	adds	r4, r0, r3
    49ac:	4d28      	ldr	r5, [pc, #160]	; (4a50 <usb_device_endpoint_disable_callback+0xac>)
    49ae:	3461      	adds	r4, #97	; 0x61
    49b0:	34ff      	adds	r4, #255	; 0xff
    49b2:	5cae      	ldrb	r6, [r5, r2]
    49b4:	7825      	ldrb	r5, [r4, #0]
    49b6:	43b5      	bics	r5, r6
    49b8:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    49ba:	2a00      	cmp	r2, #0
    49bc:	d108      	bne.n	49d0 <usb_device_endpoint_disable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
    49be:	2b00      	cmp	r3, #0
    49c0:	d115      	bne.n	49ee <usb_device_endpoint_disable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    49c2:	2103      	movs	r1, #3
    49c4:	6802      	ldr	r2, [r0, #0]
    49c6:	3309      	adds	r3, #9
    49c8:	33ff      	adds	r3, #255	; 0xff
    49ca:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
		}
	}

	return STATUS_OK;
}
    49cc:	2000      	movs	r0, #0
    49ce:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    49d0:	2a01      	cmp	r2, #1
    49d2:	d117      	bne.n	4a04 <usb_device_endpoint_disable_callback+0x60>
		if (ep_num == 0) { // control endpoint
    49d4:	2b00      	cmp	r3, #0
    49d6:	d01f      	beq.n	4a18 <usb_device_endpoint_disable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    49d8:	6802      	ldr	r2, [r0, #0]
    49da:	015b      	lsls	r3, r3, #5
    49dc:	18d3      	adds	r3, r2, r3
    49de:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
    49e0:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    49e2:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    49e4:	2900      	cmp	r1, #0
    49e6:	db20      	blt.n	4a2a <usb_device_endpoint_disable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    49e8:	2204      	movs	r2, #4
    49ea:	701a      	strb	r2, [r3, #0]
    49ec:	e7ee      	b.n	49cc <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    49ee:	6802      	ldr	r2, [r0, #0]
    49f0:	015b      	lsls	r3, r3, #5
    49f2:	18d3      	adds	r3, r2, r3
    49f4:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
    49f6:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    49f8:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
    49fa:	2900      	cmp	r1, #0
    49fc:	db12      	blt.n	4a24 <usb_device_endpoint_disable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    49fe:	2201      	movs	r2, #1
    4a00:	701a      	strb	r2, [r3, #0]
    4a02:	e7e3      	b.n	49cc <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4a04:	2a02      	cmp	r2, #2
    4a06:	d113      	bne.n	4a30 <usb_device_endpoint_disable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    4a08:	6802      	ldr	r2, [r0, #0]
    4a0a:	015b      	lsls	r3, r3, #5
    4a0c:	18d3      	adds	r3, r2, r3
    4a0e:	2210      	movs	r2, #16
    4a10:	3309      	adds	r3, #9
    4a12:	33ff      	adds	r3, #255	; 0xff
    4a14:	701a      	strb	r2, [r3, #0]
    4a16:	e7d9      	b.n	49cc <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    4a18:	210c      	movs	r1, #12
    4a1a:	6802      	ldr	r2, [r0, #0]
    4a1c:	3309      	adds	r3, #9
    4a1e:	33ff      	adds	r3, #255	; 0xff
    4a20:	54d1      	strb	r1, [r2, r3]
    4a22:	e7d3      	b.n	49cc <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    4a24:	2202      	movs	r2, #2
    4a26:	701a      	strb	r2, [r3, #0]
    4a28:	e7d0      	b.n	49cc <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    4a2a:	2208      	movs	r2, #8
    4a2c:	701a      	strb	r2, [r3, #0]
    4a2e:	e7cd      	b.n	49cc <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4a30:	2a03      	cmp	r2, #3
    4a32:	d1cb      	bne.n	49cc <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    4a34:	6802      	ldr	r2, [r0, #0]
    4a36:	015b      	lsls	r3, r3, #5
    4a38:	18d3      	adds	r3, r2, r3
    4a3a:	3309      	adds	r3, #9
		if (ep & USB_EP_DIR_IN) {
    4a3c:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    4a3e:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
    4a40:	2900      	cmp	r1, #0
    4a42:	db02      	blt.n	4a4a <usb_device_endpoint_disable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    4a44:	2220      	movs	r2, #32
    4a46:	701a      	strb	r2, [r3, #0]
    4a48:	e7c0      	b.n	49cc <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    4a4a:	2240      	movs	r2, #64	; 0x40
    4a4c:	701a      	strb	r2, [r3, #0]
    4a4e:	e7bd      	b.n	49cc <usb_device_endpoint_disable_callback+0x28>
    4a50:	0000635c 	.word	0x0000635c

00004a54 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    4a54:	2300      	movs	r3, #0
    4a56:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    4a58:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    4a5a:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    4a5c:	3301      	adds	r3, #1
    4a5e:	70c3      	strb	r3, [r0, #3]
}
    4a60:	4770      	bx	lr
    4a62:	46c0      	nop			; (mov r8, r8)

00004a64 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    4a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a66:	46ce      	mov	lr, r9
    4a68:	4647      	mov	r7, r8
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    4a6a:	230f      	movs	r3, #15
{
    4a6c:	b580      	push	{r7, lr}
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    4a6e:	780c      	ldrb	r4, [r1, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;

	switch (ep_config->ep_type) {
    4a70:	78ca      	ldrb	r2, [r1, #3]
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    4a72:	4023      	ands	r3, r4
{
    4a74:	0006      	movs	r6, r0
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    4a76:	b264      	sxtb	r4, r4
	switch (ep_config->ep_type) {
    4a78:	2a04      	cmp	r2, #4
    4a7a:	d81a      	bhi.n	4ab2 <usb_device_endpoint_set_config+0x4e>
    4a7c:	4d71      	ldr	r5, [pc, #452]	; (4c44 <usb_device_endpoint_set_config+0x1e0>)
    4a7e:	0092      	lsls	r2, r2, #2
    4a80:	58aa      	ldr	r2, [r5, r2]
    4a82:	4697      	mov	pc, r2
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4a84:	2080      	movs	r0, #128	; 0x80
    4a86:	0040      	lsls	r0, r0, #1
    4a88:	4680      	mov	r8, r0
    4a8a:	5c17      	ldrb	r7, [r2, r0]
    4a8c:	3890      	subs	r0, #144	; 0x90
    4a8e:	4684      	mov	ip, r0
    4a90:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    4a92:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4a94:	423d      	tst	r5, r7
    4a96:	d124      	bne.n	4ae2 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    4a98:	4640      	mov	r0, r8
    4a9a:	2720      	movs	r7, #32
    4a9c:	5c10      	ldrb	r0, [r2, r0]
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4a9e:	4645      	mov	r5, r8
    4aa0:	4338      	orrs	r0, r7
    4aa2:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4aa4:	0018      	movs	r0, r3
    4aa6:	6832      	ldr	r2, [r6, #0]
    4aa8:	3008      	adds	r0, #8
    4aaa:	0140      	lsls	r0, r0, #5
    4aac:	1812      	adds	r2, r2, r0
    4aae:	2080      	movs	r0, #128	; 0x80
    4ab0:	7110      	strb	r0, [r2, #4]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4ab2:	2007      	movs	r0, #7
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    4ab4:	0fe2      	lsrs	r2, r4, #31
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4ab6:	005b      	lsls	r3, r3, #1
    4ab8:	189b      	adds	r3, r3, r2
    4aba:	4a63      	ldr	r2, [pc, #396]	; (4c48 <usb_device_endpoint_set_config+0x1e4>)
    4abc:	784c      	ldrb	r4, [r1, #1]
    4abe:	011b      	lsls	r3, r3, #4
    4ac0:	18d3      	adds	r3, r2, r3
    4ac2:	685a      	ldr	r2, [r3, #4]
    4ac4:	4020      	ands	r0, r4
    4ac6:	4c61      	ldr	r4, [pc, #388]	; (4c4c <usb_device_endpoint_set_config+0x1e8>)
    4ac8:	0700      	lsls	r0, r0, #28
    4aca:	4022      	ands	r2, r4
    4acc:	4302      	orrs	r2, r0
    4ace:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    4ad0:	788a      	ldrb	r2, [r1, #2]
    4ad2:	2a00      	cmp	r2, #0
    4ad4:	d000      	beq.n	4ad8 <usb_device_endpoint_set_config+0x74>
    4ad6:	e084      	b.n	4be2 <usb_device_endpoint_set_config+0x17e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    4ad8:	2000      	movs	r0, #0
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4ada:	685a      	ldr	r2, [r3, #4]
    4adc:	0052      	lsls	r2, r2, #1
    4ade:	0852      	lsrs	r2, r2, #1
    4ae0:	605a      	str	r2, [r3, #4]
}
    4ae2:	bc0c      	pop	{r2, r3}
    4ae4:	4690      	mov	r8, r2
    4ae6:	4699      	mov	r9, r3
    4ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4aea:	6800      	ldr	r0, [r0, #0]
    4aec:	015a      	lsls	r2, r3, #5
    4aee:	4684      	mov	ip, r0
    4af0:	4462      	add	r2, ip
			if (ep_bank) {
    4af2:	2c00      	cmp	r4, #0
    4af4:	da00      	bge.n	4af8 <usb_device_endpoint_set_config+0x94>
    4af6:	e08a      	b.n	4c0e <usb_device_endpoint_set_config+0x1aa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4af8:	2580      	movs	r5, #128	; 0x80
    4afa:	006d      	lsls	r5, r5, #1
    4afc:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    4afe:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4b00:	077f      	lsls	r7, r7, #29
    4b02:	d1ee      	bne.n	4ae2 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4b04:	5d50      	ldrb	r0, [r2, r5]
    4b06:	2703      	movs	r7, #3
    4b08:	e061      	b.n	4bce <usb_device_endpoint_set_config+0x16a>
    4b0a:	6800      	ldr	r0, [r0, #0]
    4b0c:	015a      	lsls	r2, r3, #5
    4b0e:	4684      	mov	ip, r0
    4b10:	4462      	add	r2, ip
			if (ep_bank) {
    4b12:	2c00      	cmp	r4, #0
    4b14:	db6c      	blt.n	4bf0 <usb_device_endpoint_set_config+0x18c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4b16:	2580      	movs	r5, #128	; 0x80
    4b18:	006d      	lsls	r5, r5, #1
    4b1a:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    4b1c:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4b1e:	077f      	lsls	r7, r7, #29
    4b20:	d1df      	bne.n	4ae2 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4b22:	5d50      	ldrb	r0, [r2, r5]
    4b24:	2704      	movs	r7, #4
    4b26:	e052      	b.n	4bce <usb_device_endpoint_set_config+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    4b28:	2100      	movs	r1, #0
    4b2a:	6802      	ldr	r2, [r0, #0]
    4b2c:	3308      	adds	r3, #8
    4b2e:	015b      	lsls	r3, r3, #5
    4b30:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    4b32:	2000      	movs	r0, #0
    4b34:	e7d5      	b.n	4ae2 <usb_device_endpoint_set_config+0x7e>
    4b36:	6802      	ldr	r2, [r0, #0]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4b38:	2080      	movs	r0, #128	; 0x80
    4b3a:	015d      	lsls	r5, r3, #5
    4b3c:	0040      	lsls	r0, r0, #1
    4b3e:	1952      	adds	r2, r2, r5
    4b40:	5c17      	ldrb	r7, [r2, r0]
    4b42:	4681      	mov	r9, r0
				return STATUS_ERR_DENIED;
    4b44:	38e4      	subs	r0, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4b46:	077f      	lsls	r7, r7, #29
    4b48:	d1cb      	bne.n	4ae2 <usb_device_endpoint_set_config+0x7e>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    4b4a:	464c      	mov	r4, r9
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4b4c:	2770      	movs	r7, #112	; 0x70
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    4b4e:	5d14      	ldrb	r4, [r2, r4]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4b50:	4227      	tst	r7, r4
    4b52:	d1c6      	bne.n	4ae2 <usb_device_endpoint_set_config+0x7e>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    4b54:	464c      	mov	r4, r9
    4b56:	380b      	subs	r0, #11
    4b58:	5510      	strb	r0, [r2, r4]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4b5a:	6832      	ldr	r2, [r6, #0]
    4b5c:	3308      	adds	r3, #8
    4b5e:	015b      	lsls	r3, r3, #5
    4b60:	18d2      	adds	r2, r2, r3
    4b62:	302f      	adds	r0, #47	; 0x2f
    4b64:	7150      	strb	r0, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4b66:	6832      	ldr	r2, [r6, #0]
    4b68:	18d3      	adds	r3, r2, r3
    4b6a:	2280      	movs	r2, #128	; 0x80
    4b6c:	711a      	strb	r2, [r3, #4]
			if (true == ep_config->auto_zlp) {
    4b6e:	788b      	ldrb	r3, [r1, #2]
    4b70:	2b00      	cmp	r3, #0
    4b72:	d05b      	beq.n	4c2c <usb_device_endpoint_set_config+0x1c8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4b74:	2080      	movs	r0, #128	; 0x80
    4b76:	4b34      	ldr	r3, [pc, #208]	; (4c48 <usb_device_endpoint_set_config+0x1e4>)
    4b78:	0600      	lsls	r0, r0, #24
    4b7a:	195a      	adds	r2, r3, r5
    4b7c:	6854      	ldr	r4, [r2, #4]
    4b7e:	4304      	orrs	r4, r0
    4b80:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4b82:	6954      	ldr	r4, [r2, #20]
    4b84:	4320      	orrs	r0, r4
    4b86:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4b88:	2207      	movs	r2, #7
    4b8a:	784c      	ldrb	r4, [r1, #1]
    4b8c:	195d      	adds	r5, r3, r5
    4b8e:	6868      	ldr	r0, [r5, #4]
    4b90:	4e2e      	ldr	r6, [pc, #184]	; (4c4c <usb_device_endpoint_set_config+0x1e8>)
    4b92:	4014      	ands	r4, r2
    4b94:	0724      	lsls	r4, r4, #28
    4b96:	4030      	ands	r0, r6
    4b98:	4320      	orrs	r0, r4
    4b9a:	6068      	str	r0, [r5, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4b9c:	7849      	ldrb	r1, [r1, #1]
    4b9e:	696b      	ldr	r3, [r5, #20]
    4ba0:	400a      	ands	r2, r1
    4ba2:	0712      	lsls	r2, r2, #28
    4ba4:	4033      	ands	r3, r6
    4ba6:	431a      	orrs	r2, r3
    4ba8:	616a      	str	r2, [r5, #20]
			return STATUS_OK;
    4baa:	2000      	movs	r0, #0
    4bac:	e799      	b.n	4ae2 <usb_device_endpoint_set_config+0x7e>
    4bae:	6800      	ldr	r0, [r0, #0]
    4bb0:	015a      	lsls	r2, r3, #5
    4bb2:	4684      	mov	ip, r0
    4bb4:	4462      	add	r2, ip
			if (ep_bank) {
    4bb6:	2c00      	cmp	r4, #0
    4bb8:	da00      	bge.n	4bbc <usb_device_endpoint_set_config+0x158>
    4bba:	e763      	b.n	4a84 <usb_device_endpoint_set_config+0x20>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4bbc:	2580      	movs	r5, #128	; 0x80
    4bbe:	006d      	lsls	r5, r5, #1
    4bc0:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
    4bc2:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4bc4:	077f      	lsls	r7, r7, #29
    4bc6:	d000      	beq.n	4bca <usb_device_endpoint_set_config+0x166>
    4bc8:	e78b      	b.n	4ae2 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    4bca:	2702      	movs	r7, #2
    4bcc:	5d50      	ldrb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4bce:	4338      	orrs	r0, r7
    4bd0:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4bd2:	0018      	movs	r0, r3
    4bd4:	6832      	ldr	r2, [r6, #0]
    4bd6:	3008      	adds	r0, #8
    4bd8:	0140      	lsls	r0, r0, #5
    4bda:	1812      	adds	r2, r2, r0
    4bdc:	2040      	movs	r0, #64	; 0x40
    4bde:	7150      	strb	r0, [r2, #5]
    4be0:	e767      	b.n	4ab2 <usb_device_endpoint_set_config+0x4e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4be2:	2280      	movs	r2, #128	; 0x80
    4be4:	6859      	ldr	r1, [r3, #4]
    4be6:	0612      	lsls	r2, r2, #24
    4be8:	430a      	orrs	r2, r1
    4bea:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
    4bec:	2000      	movs	r0, #0
    4bee:	e778      	b.n	4ae2 <usb_device_endpoint_set_config+0x7e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4bf0:	2080      	movs	r0, #128	; 0x80
    4bf2:	0040      	lsls	r0, r0, #1
    4bf4:	4680      	mov	r8, r0
    4bf6:	5c17      	ldrb	r7, [r2, r0]
    4bf8:	3890      	subs	r0, #144	; 0x90
    4bfa:	4684      	mov	ip, r0
    4bfc:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    4bfe:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4c00:	423d      	tst	r5, r7
    4c02:	d000      	beq.n	4c06 <usb_device_endpoint_set_config+0x1a2>
    4c04:	e76d      	b.n	4ae2 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    4c06:	4640      	mov	r0, r8
    4c08:	2740      	movs	r7, #64	; 0x40
    4c0a:	5c10      	ldrb	r0, [r2, r0]
    4c0c:	e747      	b.n	4a9e <usb_device_endpoint_set_config+0x3a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4c0e:	2080      	movs	r0, #128	; 0x80
    4c10:	0040      	lsls	r0, r0, #1
    4c12:	4680      	mov	r8, r0
    4c14:	5c17      	ldrb	r7, [r2, r0]
    4c16:	3890      	subs	r0, #144	; 0x90
    4c18:	4684      	mov	ip, r0
    4c1a:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
    4c1c:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4c1e:	423d      	tst	r5, r7
    4c20:	d000      	beq.n	4c24 <usb_device_endpoint_set_config+0x1c0>
    4c22:	e75e      	b.n	4ae2 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4c24:	4640      	mov	r0, r8
    4c26:	2730      	movs	r7, #48	; 0x30
    4c28:	5c10      	ldrb	r0, [r2, r0]
    4c2a:	e738      	b.n	4a9e <usb_device_endpoint_set_config+0x3a>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4c2c:	4b06      	ldr	r3, [pc, #24]	; (4c48 <usb_device_endpoint_set_config+0x1e4>)
    4c2e:	1958      	adds	r0, r3, r5
    4c30:	6842      	ldr	r2, [r0, #4]
    4c32:	0052      	lsls	r2, r2, #1
    4c34:	0852      	lsrs	r2, r2, #1
    4c36:	6042      	str	r2, [r0, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4c38:	6942      	ldr	r2, [r0, #20]
    4c3a:	0052      	lsls	r2, r2, #1
    4c3c:	0852      	lsrs	r2, r2, #1
    4c3e:	6142      	str	r2, [r0, #20]
    4c40:	e7a2      	b.n	4b88 <usb_device_endpoint_set_config+0x124>
    4c42:	46c0      	nop			; (mov r8, r8)
    4c44:	00006338 	.word	0x00006338
    4c48:	20000640 	.word	0x20000640
    4c4c:	8fffffff 	.word	0x8fffffff

00004c50 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4c50:	230f      	movs	r3, #15
    4c52:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4c54:	3308      	adds	r3, #8
    4c56:	6802      	ldr	r2, [r0, #0]
    4c58:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    4c5a:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4c5c:	18d2      	adds	r2, r2, r3
	if (ep & USB_EP_DIR_IN) {
    4c5e:	2900      	cmp	r1, #0
    4c60:	db06      	blt.n	4c70 <usb_device_endpoint_abort_job+0x20>
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4c62:	2140      	movs	r1, #64	; 0x40
    4c64:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4c66:	6802      	ldr	r2, [r0, #0]
    4c68:	18d3      	adds	r3, r2, r3
    4c6a:	2201      	movs	r2, #1
    4c6c:	71da      	strb	r2, [r3, #7]
	}
}
    4c6e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4c70:	2180      	movs	r1, #128	; 0x80
    4c72:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4c74:	6802      	ldr	r2, [r0, #0]
    4c76:	18d3      	adds	r3, r2, r3
    4c78:	2202      	movs	r2, #2
    4c7a:	71da      	strb	r2, [r3, #7]
    4c7c:	e7f7      	b.n	4c6e <usb_device_endpoint_abort_job+0x1e>
    4c7e:	46c0      	nop			; (mov r8, r8)

00004c80 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4c80:	230f      	movs	r3, #15
    4c82:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4c84:	6802      	ldr	r2, [r0, #0]
    4c86:	3308      	adds	r3, #8
    4c88:	015b      	lsls	r3, r3, #5
    4c8a:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
    4c8c:	b249      	sxtb	r1, r1
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4c8e:	7998      	ldrb	r0, [r3, #6]
	if (ep & USB_EP_DIR_IN) {
    4c90:	2900      	cmp	r1, #0
    4c92:	db02      	blt.n	4c9a <usb_device_endpoint_is_halted+0x1a>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    4c94:	06c0      	lsls	r0, r0, #27
    4c96:	0fc0      	lsrs	r0, r0, #31
	}
}
    4c98:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4c9a:	0680      	lsls	r0, r0, #26
    4c9c:	0fc0      	lsrs	r0, r0, #31
    4c9e:	e7fb      	b.n	4c98 <usb_device_endpoint_is_halted+0x18>

00004ca0 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4ca0:	230f      	movs	r3, #15
    4ca2:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4ca4:	6802      	ldr	r2, [r0, #0]
    4ca6:	3308      	adds	r3, #8
    4ca8:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    4caa:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4cac:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
    4cae:	2900      	cmp	r1, #0
    4cb0:	db02      	blt.n	4cb8 <usb_device_endpoint_set_halt+0x18>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4cb2:	2210      	movs	r2, #16
    4cb4:	715a      	strb	r2, [r3, #5]
	}
}
    4cb6:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4cb8:	2220      	movs	r2, #32
    4cba:	715a      	strb	r2, [r3, #5]
    4cbc:	e7fb      	b.n	4cb6 <usb_device_endpoint_set_halt+0x16>
    4cbe:	46c0      	nop			; (mov r8, r8)

00004cc0 <usb_device_endpoint_clear_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4cc0:	230f      	movs	r3, #15
    4cc2:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4cc4:	b249      	sxtb	r1, r1
{
    4cc6:	b530      	push	{r4, r5, lr}
	if (ep & USB_EP_DIR_IN) {
    4cc8:	2900      	cmp	r1, #0
    4cca:	db1b      	blt.n	4d04 <usb_device_endpoint_clear_halt+0x44>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    4ccc:	2483      	movs	r4, #131	; 0x83
    4cce:	6802      	ldr	r2, [r0, #0]
    4cd0:	0159      	lsls	r1, r3, #5
    4cd2:	0064      	lsls	r4, r4, #1
    4cd4:	1852      	adds	r2, r2, r1
    4cd6:	5d15      	ldrb	r5, [r2, r4]
    4cd8:	3cf6      	subs	r4, #246	; 0xf6
    4cda:	422c      	tst	r4, r5
    4cdc:	d011      	beq.n	4d02 <usb_device_endpoint_clear_halt+0x42>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    4cde:	2582      	movs	r5, #130	; 0x82
    4ce0:	006d      	lsls	r5, r5, #1
    4ce2:	5554      	strb	r4, [r2, r5]
    4ce4:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4ce6:	3410      	adds	r4, #16
    4ce8:	1852      	adds	r2, r2, r1
    4cea:	2108      	movs	r1, #8
    4cec:	31ff      	adds	r1, #255	; 0xff
    4cee:	5c55      	ldrb	r5, [r2, r1]
    4cf0:	422c      	tst	r4, r5
    4cf2:	d006      	beq.n	4d02 <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4cf4:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    4cf6:	6802      	ldr	r2, [r0, #0]
    4cf8:	3308      	adds	r3, #8
    4cfa:	015b      	lsls	r3, r3, #5
    4cfc:	18d3      	adds	r3, r2, r3
    4cfe:	2201      	movs	r2, #1
    4d00:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    4d02:	bd30      	pop	{r4, r5, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4d04:	2483      	movs	r4, #131	; 0x83
    4d06:	6802      	ldr	r2, [r0, #0]
    4d08:	0159      	lsls	r1, r3, #5
    4d0a:	0064      	lsls	r4, r4, #1
    4d0c:	1852      	adds	r2, r2, r1
    4d0e:	5d15      	ldrb	r5, [r2, r4]
    4d10:	3ce6      	subs	r4, #230	; 0xe6
    4d12:	422c      	tst	r4, r5
    4d14:	d0f5      	beq.n	4d02 <usb_device_endpoint_clear_halt+0x42>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    4d16:	2582      	movs	r5, #130	; 0x82
    4d18:	006d      	lsls	r5, r5, #1
    4d1a:	5554      	strb	r4, [r2, r5]
    4d1c:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4d1e:	3420      	adds	r4, #32
    4d20:	1852      	adds	r2, r2, r1
    4d22:	2108      	movs	r1, #8
    4d24:	31ff      	adds	r1, #255	; 0xff
    4d26:	5c55      	ldrb	r5, [r2, r1]
    4d28:	422c      	tst	r4, r5
    4d2a:	d0ea      	beq.n	4d02 <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4d2c:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    4d2e:	6802      	ldr	r2, [r0, #0]
    4d30:	3308      	adds	r3, #8
    4d32:	015b      	lsls	r3, r3, #5
    4d34:	18d3      	adds	r3, r2, r3
    4d36:	2202      	movs	r2, #2
    4d38:	711a      	strb	r2, [r3, #4]
    4d3a:	e7e2      	b.n	4d02 <usb_device_endpoint_clear_halt+0x42>

00004d3c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4d3c:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4d3e:	000d      	movs	r5, r1
    4d40:	6804      	ldr	r4, [r0, #0]
    4d42:	3508      	adds	r5, #8
    4d44:	016d      	lsls	r5, r5, #5
    4d46:	5d2c      	ldrb	r4, [r5, r4]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4d48:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4d4a:	0664      	lsls	r4, r4, #25
    4d4c:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4d4e:	d101      	bne.n	4d54 <usb_device_endpoint_write_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    4d50:	0030      	movs	r0, r6
    4d52:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4d54:	4c0a      	ldr	r4, [pc, #40]	; (4d80 <usb_device_endpoint_write_buffer_job+0x44>)
    4d56:	0149      	lsls	r1, r1, #5
    4d58:	1861      	adds	r1, r4, r1
    4d5a:	000c      	movs	r4, r1
    4d5c:	610a      	str	r2, [r1, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4d5e:	694a      	ldr	r2, [r1, #20]
    4d60:	4908      	ldr	r1, [pc, #32]	; (4d84 <usb_device_endpoint_write_buffer_job+0x48>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4d62:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4d64:	400a      	ands	r2, r1
    4d66:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4d68:	6962      	ldr	r2, [r4, #20]
    4d6a:	0c9b      	lsrs	r3, r3, #18
    4d6c:	0b92      	lsrs	r2, r2, #14
    4d6e:	0392      	lsls	r2, r2, #14
    4d70:	4313      	orrs	r3, r2
    4d72:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4d74:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
    4d76:	2600      	movs	r6, #0
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4d78:	195d      	adds	r5, r3, r5
    4d7a:	2380      	movs	r3, #128	; 0x80
    4d7c:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
    4d7e:	e7e7      	b.n	4d50 <usb_device_endpoint_write_buffer_job+0x14>
    4d80:	20000640 	.word	0x20000640
    4d84:	f0003fff 	.word	0xf0003fff

00004d88 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4d88:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4d8a:	000c      	movs	r4, r1
    4d8c:	6805      	ldr	r5, [r0, #0]
    4d8e:	3408      	adds	r4, #8
    4d90:	0164      	lsls	r4, r4, #5
    4d92:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4d94:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4d96:	076d      	lsls	r5, r5, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4d98:	d101      	bne.n	4d9e <usb_device_endpoint_read_buffer_job+0x16>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    4d9a:	0030      	movs	r0, r6
    4d9c:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4d9e:	4d0a      	ldr	r5, [pc, #40]	; (4dc8 <usb_device_endpoint_read_buffer_job+0x40>)
    4da0:	0149      	lsls	r1, r1, #5
    4da2:	514a      	str	r2, [r1, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    4da4:	1869      	adds	r1, r5, r1
    4da6:	684a      	ldr	r2, [r1, #4]
    4da8:	4d08      	ldr	r5, [pc, #32]	; (4dcc <usb_device_endpoint_read_buffer_job+0x44>)
    4daa:	049b      	lsls	r3, r3, #18
    4dac:	091b      	lsrs	r3, r3, #4
    4dae:	402a      	ands	r2, r5
    4db0:	4313      	orrs	r3, r2
    4db2:	604b      	str	r3, [r1, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4db4:	684b      	ldr	r3, [r1, #4]
	return STATUS_OK;
    4db6:	2600      	movs	r6, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4db8:	0b9b      	lsrs	r3, r3, #14
    4dba:	039b      	lsls	r3, r3, #14
    4dbc:	604b      	str	r3, [r1, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4dbe:	6803      	ldr	r3, [r0, #0]
    4dc0:	191c      	adds	r4, r3, r4
    4dc2:	2340      	movs	r3, #64	; 0x40
    4dc4:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
    4dc6:	e7e8      	b.n	4d9a <usb_device_endpoint_read_buffer_job+0x12>
    4dc8:	20000640 	.word	0x20000640
    4dcc:	f0003fff 	.word	0xf0003fff

00004dd0 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4dd0:	4b09      	ldr	r3, [pc, #36]	; (4df8 <usb_device_endpoint_setup_buffer_job+0x28>)
    4dd2:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4dd4:	685a      	ldr	r2, [r3, #4]
    4dd6:	4909      	ldr	r1, [pc, #36]	; (4dfc <usb_device_endpoint_setup_buffer_job+0x2c>)
    4dd8:	4011      	ands	r1, r2
    4dda:	2280      	movs	r2, #128	; 0x80
    4ddc:	0292      	lsls	r2, r2, #10
    4dde:	430a      	orrs	r2, r1
    4de0:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4de2:	685a      	ldr	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4de4:	2140      	movs	r1, #64	; 0x40
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4de6:	0b92      	lsrs	r2, r2, #14
    4de8:	0392      	lsls	r2, r2, #14
    4dea:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4dec:	2382      	movs	r3, #130	; 0x82
    4dee:	6802      	ldr	r2, [r0, #0]
    4df0:	005b      	lsls	r3, r3, #1

	return STATUS_OK;
}
    4df2:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4df4:	54d1      	strb	r1, [r2, r3]
}
    4df6:	4770      	bx	lr
    4df8:	20000640 	.word	0x20000640
    4dfc:	f0003fff 	.word	0xf0003fff

00004e00 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4e00:	2102      	movs	r1, #2
    4e02:	6802      	ldr	r2, [r0, #0]
    4e04:	7813      	ldrb	r3, [r2, #0]
    4e06:	430b      	orrs	r3, r1
    4e08:	7013      	strb	r3, [r2, #0]
    4e0a:	6802      	ldr	r2, [r0, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    4e0c:	7893      	ldrb	r3, [r2, #2]
    4e0e:	2b02      	cmp	r3, #2
    4e10:	d0fc      	beq.n	4e0c <usb_enable+0xc>
}
    4e12:	4770      	bx	lr

00004e14 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e16:	4645      	mov	r5, r8
    4e18:	4657      	mov	r7, sl
    4e1a:	46de      	mov	lr, fp
    4e1c:	464e      	mov	r6, r9
    4e1e:	b5e0      	push	{r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4e20:	4bcd      	ldr	r3, [pc, #820]	; (5158 <USB_Handler+0x344>)
{
    4e22:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4e24:	681f      	ldr	r7, [r3, #0]
    4e26:	4698      	mov	r8, r3
    4e28:	683d      	ldr	r5, [r7, #0]
    4e2a:	782b      	ldrb	r3, [r5, #0]
    4e2c:	09db      	lsrs	r3, r3, #7
    4e2e:	d16a      	bne.n	4f06 <USB_Handler+0xf2>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4e30:	8c2e      	ldrh	r6, [r5, #32]
    4e32:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    4e34:	2e00      	cmp	r6, #0
    4e36:	d133      	bne.n	4ea0 <USB_Handler+0x8c>
				_usb_instances->device_enabled_callback_mask &
    4e38:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
    4e3a:	22aa      	movs	r2, #170	; 0xaa
				_usb_instances->device_enabled_callback_mask &
    4e3c:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    4e3e:	0052      	lsls	r2, r2, #1
    4e40:	5afb      	ldrh	r3, [r7, r3]
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4e42:	8bae      	ldrh	r6, [r5, #28]
		flags_run = flags &
    4e44:	5abd      	ldrh	r5, [r7, r2]
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4e46:	2400      	movs	r4, #0
		flags_run = flags &
    4e48:	401d      	ands	r5, r3
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4e4a:	4bc4      	ldr	r3, [pc, #784]	; (515c <USB_Handler+0x348>)
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4e4c:	b2b6      	uxth	r6, r6
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4e4e:	469b      	mov	fp, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4e50:	2380      	movs	r3, #128	; 0x80
    4e52:	005b      	lsls	r3, r3, #1
    4e54:	469a      	mov	sl, r3
    4e56:	4bc2      	ldr	r3, [pc, #776]	; (5160 <USB_Handler+0x34c>)
    4e58:	4fc2      	ldr	r7, [pc, #776]	; (5164 <USB_Handler+0x350>)
    4e5a:	4699      	mov	r9, r3
		flags_run = flags &
    4e5c:	4035      	ands	r5, r6
			if (flags & _usb_device_irq_bits[i]) {
    4e5e:	0063      	lsls	r3, r4, #1
    4e60:	5afb      	ldrh	r3, [r7, r3]
    4e62:	4233      	tst	r3, r6
    4e64:	d003      	beq.n	4e6e <USB_Handler+0x5a>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4e66:	4642      	mov	r2, r8
    4e68:	6812      	ldr	r2, [r2, #0]
    4e6a:	6812      	ldr	r2, [r2, #0]
    4e6c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    4e6e:	422b      	tst	r3, r5
    4e70:	d00c      	beq.n	4e8c <USB_Handler+0x78>
    4e72:	4649      	mov	r1, r9
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4e74:	2c06      	cmp	r4, #6
    4e76:	d100      	bne.n	4e7a <USB_Handler+0x66>
    4e78:	e279      	b.n	536e <USB_Handler+0x55a>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4e7a:	0023      	movs	r3, r4
    4e7c:	4642      	mov	r2, r8
    4e7e:	332e      	adds	r3, #46	; 0x2e
    4e80:	6812      	ldr	r2, [r2, #0]
    4e82:	009b      	lsls	r3, r3, #2
    4e84:	589b      	ldr	r3, [r3, r2]
    4e86:	4642      	mov	r2, r8
    4e88:	6810      	ldr	r0, [r2, #0]
    4e8a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4e8c:	3401      	adds	r4, #1
    4e8e:	2c07      	cmp	r4, #7
    4e90:	d1e5      	bne.n	4e5e <USB_Handler+0x4a>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4e92:	b003      	add	sp, #12
    4e94:	bc3c      	pop	{r2, r3, r4, r5}
    4e96:	4690      	mov	r8, r2
    4e98:	4699      	mov	r9, r3
    4e9a:	46a2      	mov	sl, r4
    4e9c:	46ab      	mov	fp, r5
    4e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_inst & (1 << i)) {
    4ea0:	2201      	movs	r2, #1
    4ea2:	003c      	movs	r4, r7
    4ea4:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4ea6:	325f      	adds	r2, #95	; 0x5f
    4ea8:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4eaa:	3a50      	subs	r2, #80	; 0x50
	if (0 == ep_inst) {
    4eac:	2300      	movs	r3, #0
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4eae:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4eb0:	46b9      	mov	r9, r7
    4eb2:	46a8      	mov	r8, r5
    4eb4:	3459      	adds	r4, #89	; 0x59
    4eb6:	34ff      	adds	r4, #255	; 0xff
			if (ep_inst & (1 << i)) {
    4eb8:	0032      	movs	r2, r6
    4eba:	4661      	mov	r1, ip
    4ebc:	411a      	asrs	r2, r3
    4ebe:	b2dd      	uxtb	r5, r3
    4ec0:	4211      	tst	r1, r2
    4ec2:	d01b      	beq.n	4efc <USB_Handler+0xe8>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4ec4:	001f      	movs	r7, r3
    4ec6:	3708      	adds	r7, #8
    4ec8:	017a      	lsls	r2, r7, #5
    4eca:	4442      	add	r2, r8
    4ecc:	1dd1      	adds	r1, r2, #7
    4ece:	79d2      	ldrb	r2, [r2, #7]
    4ed0:	9101      	str	r1, [sp, #4]
    4ed2:	7a21      	ldrb	r1, [r4, #8]
    4ed4:	7820      	ldrb	r0, [r4, #0]
    4ed6:	b2d2      	uxtb	r2, r2
    4ed8:	4011      	ands	r1, r2
    4eda:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4edc:	4658      	mov	r0, fp
    4ede:	4210      	tst	r0, r2
    4ee0:	d000      	beq.n	4ee4 <USB_Handler+0xd0>
    4ee2:	e16d      	b.n	51c0 <USB_Handler+0x3ac>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4ee4:	4650      	mov	r0, sl
    4ee6:	4210      	tst	r0, r2
    4ee8:	d000      	beq.n	4eec <USB_Handler+0xd8>
    4eea:	e189      	b.n	5200 <USB_Handler+0x3ec>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4eec:	2003      	movs	r0, #3
    4eee:	4210      	tst	r0, r2
    4ef0:	d000      	beq.n	4ef4 <USB_Handler+0xe0>
    4ef2:	e19e      	b.n	5232 <USB_Handler+0x41e>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4ef4:	200c      	movs	r0, #12
    4ef6:	4210      	tst	r0, r2
    4ef8:	d000      	beq.n	4efc <USB_Handler+0xe8>
    4efa:	e1be      	b.n	527a <USB_Handler+0x466>
    4efc:	3301      	adds	r3, #1
    4efe:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4f00:	2b08      	cmp	r3, #8
    4f02:	d1d9      	bne.n	4eb8 <USB_Handler+0xa4>
    4f04:	e7c5      	b.n	4e92 <USB_Handler+0x7e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4f06:	8c2b      	ldrh	r3, [r5, #32]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d171      	bne.n	4ff0 <USB_Handler+0x1dc>
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4f0c:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4f0e:	8bac      	ldrh	r4, [r5, #28]
    4f10:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4f12:	4223      	tst	r3, r4
    4f14:	d005      	beq.n	4f22 <USB_Handler+0x10e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4f16:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4f18:	23a5      	movs	r3, #165	; 0xa5
    4f1a:	5cfb      	ldrb	r3, [r7, r3]
    4f1c:	07db      	lsls	r3, r3, #31
    4f1e:	d500      	bpl.n	4f22 <USB_Handler+0x10e>
    4f20:	e12d      	b.n	517e <USB_Handler+0x36a>
		if (flags & USB_HOST_INTFLAG_RST) {
    4f22:	2308      	movs	r3, #8
    4f24:	4223      	tst	r3, r4
    4f26:	d00b      	beq.n	4f40 <USB_Handler+0x12c>
			host_pipe_job_busy_status = 0;
    4f28:	2100      	movs	r1, #0
    4f2a:	4a8f      	ldr	r2, [pc, #572]	; (5168 <USB_Handler+0x354>)
    4f2c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4f2e:	4642      	mov	r2, r8
    4f30:	6810      	ldr	r0, [r2, #0]
    4f32:	6802      	ldr	r2, [r0, #0]
    4f34:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4f36:	339d      	adds	r3, #157	; 0x9d
    4f38:	5cc3      	ldrb	r3, [r0, r3]
    4f3a:	079b      	lsls	r3, r3, #30
    4f3c:	d500      	bpl.n	4f40 <USB_Handler+0x12c>
    4f3e:	e11b      	b.n	5178 <USB_Handler+0x364>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4f40:	2340      	movs	r3, #64	; 0x40
    4f42:	4223      	tst	r3, r4
    4f44:	d008      	beq.n	4f58 <USB_Handler+0x144>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4f46:	4642      	mov	r2, r8
    4f48:	6810      	ldr	r0, [r2, #0]
    4f4a:	6802      	ldr	r2, [r0, #0]
    4f4c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    4f4e:	3365      	adds	r3, #101	; 0x65
    4f50:	5cc3      	ldrb	r3, [r0, r3]
    4f52:	06db      	lsls	r3, r3, #27
    4f54:	d500      	bpl.n	4f58 <USB_Handler+0x144>
    4f56:	e0fb      	b.n	5150 <USB_Handler+0x33c>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4f58:	2320      	movs	r3, #32
    4f5a:	4223      	tst	r3, r4
    4f5c:	d008      	beq.n	4f70 <USB_Handler+0x15c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4f5e:	4642      	mov	r2, r8
    4f60:	6810      	ldr	r0, [r2, #0]
    4f62:	6802      	ldr	r2, [r0, #0]
    4f64:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4f66:	3385      	adds	r3, #133	; 0x85
    4f68:	5cc3      	ldrb	r3, [r0, r3]
    4f6a:	071b      	lsls	r3, r3, #28
    4f6c:	d500      	bpl.n	4f70 <USB_Handler+0x15c>
    4f6e:	e0ec      	b.n	514a <USB_Handler+0x336>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4f70:	2310      	movs	r3, #16
    4f72:	4223      	tst	r3, r4
    4f74:	d008      	beq.n	4f88 <USB_Handler+0x174>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4f76:	4642      	mov	r2, r8
    4f78:	6810      	ldr	r0, [r2, #0]
    4f7a:	6802      	ldr	r2, [r0, #0]
    4f7c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4f7e:	3395      	adds	r3, #149	; 0x95
    4f80:	5cc3      	ldrb	r3, [r0, r3]
    4f82:	075b      	lsls	r3, r3, #29
    4f84:	d500      	bpl.n	4f88 <USB_Handler+0x174>
    4f86:	e0dd      	b.n	5144 <USB_Handler+0x330>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4f88:	2380      	movs	r3, #128	; 0x80
    4f8a:	4223      	tst	r3, r4
    4f8c:	d00b      	beq.n	4fa6 <USB_Handler+0x192>
			host_pipe_job_busy_status = 0;
    4f8e:	2100      	movs	r1, #0
    4f90:	4a75      	ldr	r2, [pc, #468]	; (5168 <USB_Handler+0x354>)
    4f92:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4f94:	4642      	mov	r2, r8
    4f96:	6810      	ldr	r0, [r2, #0]
    4f98:	6802      	ldr	r2, [r0, #0]
    4f9a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    4f9c:	3325      	adds	r3, #37	; 0x25
    4f9e:	5cc3      	ldrb	r3, [r0, r3]
    4fa0:	069b      	lsls	r3, r3, #26
    4fa2:	d500      	bpl.n	4fa6 <USB_Handler+0x192>
    4fa4:	e0cb      	b.n	513e <USB_Handler+0x32a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4fa6:	2380      	movs	r3, #128	; 0x80
    4fa8:	005b      	lsls	r3, r3, #1
    4faa:	421c      	tst	r4, r3
    4fac:	d00b      	beq.n	4fc6 <USB_Handler+0x1b2>
			host_pipe_job_busy_status = 0;
    4fae:	2100      	movs	r1, #0
    4fb0:	4a6d      	ldr	r2, [pc, #436]	; (5168 <USB_Handler+0x354>)
    4fb2:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4fb4:	4642      	mov	r2, r8
    4fb6:	6810      	ldr	r0, [r2, #0]
    4fb8:	6802      	ldr	r2, [r0, #0]
    4fba:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4fbc:	3b5b      	subs	r3, #91	; 0x5b
    4fbe:	5cc3      	ldrb	r3, [r0, r3]
    4fc0:	065b      	lsls	r3, r3, #25
    4fc2:	d500      	bpl.n	4fc6 <USB_Handler+0x1b2>
    4fc4:	e0b8      	b.n	5138 <USB_Handler+0x324>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4fc6:	2380      	movs	r3, #128	; 0x80
    4fc8:	009b      	lsls	r3, r3, #2
    4fca:	421c      	tst	r4, r3
    4fcc:	d100      	bne.n	4fd0 <USB_Handler+0x1bc>
    4fce:	e760      	b.n	4e92 <USB_Handler+0x7e>
			host_pipe_job_busy_status = 0;
    4fd0:	2100      	movs	r1, #0
    4fd2:	4a65      	ldr	r2, [pc, #404]	; (5168 <USB_Handler+0x354>)
    4fd4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4fd6:	4642      	mov	r2, r8
    4fd8:	6810      	ldr	r0, [r2, #0]
    4fda:	6802      	ldr	r2, [r0, #0]
    4fdc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4fde:	3b5c      	subs	r3, #92	; 0x5c
    4fe0:	3bff      	subs	r3, #255	; 0xff
    4fe2:	5cc3      	ldrb	r3, [r0, r3]
    4fe4:	2b7f      	cmp	r3, #127	; 0x7f
    4fe6:	d800      	bhi.n	4fea <USB_Handler+0x1d6>
    4fe8:	e753      	b.n	4e92 <USB_Handler+0x7e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4fea:	6a03      	ldr	r3, [r0, #32]
    4fec:	4798      	blx	r3
    4fee:	e750      	b.n	4e92 <USB_Handler+0x7e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4ff0:	8c28      	ldrh	r0, [r5, #32]
    4ff2:	4b5e      	ldr	r3, [pc, #376]	; (516c <USB_Handler+0x358>)
    4ff4:	b280      	uxth	r0, r0
    4ff6:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4ff8:	0006      	movs	r6, r0
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4ffa:	2203      	movs	r2, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4ffc:	3608      	adds	r6, #8
    4ffe:	0173      	lsls	r3, r6, #5
    5000:	18ed      	adds	r5, r5, r3
    5002:	79ed      	ldrb	r5, [r5, #7]
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    5004:	0004      	movs	r4, r0
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    5006:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    5008:	422a      	tst	r2, r5
    500a:	d013      	beq.n	5034 <USB_Handler+0x220>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    500c:	4956      	ldr	r1, [pc, #344]	; (5168 <USB_Handler+0x354>)
    500e:	468c      	mov	ip, r1
    5010:	2101      	movs	r1, #1
    5012:	4689      	mov	r9, r1
    5014:	4081      	lsls	r1, r0
    5016:	4660      	mov	r0, ip
    5018:	6800      	ldr	r0, [r0, #0]
    501a:	4388      	bics	r0, r1
    501c:	0001      	movs	r1, r0
    501e:	4660      	mov	r0, ip
    5020:	6001      	str	r1, [r0, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5022:	6839      	ldr	r1, [r7, #0]
    5024:	18c9      	adds	r1, r1, r3
    5026:	71ca      	strb	r2, [r1, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5028:	4649      	mov	r1, r9
    502a:	193a      	adds	r2, r7, r4
    502c:	32ae      	adds	r2, #174	; 0xae
    502e:	7812      	ldrb	r2, [r2, #0]
    5030:	4211      	tst	r1, r2
    5032:	d157      	bne.n	50e4 <USB_Handler+0x2d0>
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    5034:	2304      	movs	r3, #4
    5036:	422b      	tst	r3, r5
    5038:	d00b      	beq.n	5052 <USB_Handler+0x23e>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    503a:	2201      	movs	r2, #1
    503c:	40a2      	lsls	r2, r4
    503e:	494a      	ldr	r1, [pc, #296]	; (5168 <USB_Handler+0x354>)
    5040:	6808      	ldr	r0, [r1, #0]
    5042:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5044:	4642      	mov	r2, r8
    5046:	6812      	ldr	r2, [r2, #0]
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5048:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    504a:	6812      	ldr	r2, [r2, #0]
    504c:	0171      	lsls	r1, r6, #5
    504e:	1852      	adds	r2, r2, r1
    5050:	71d3      	strb	r3, [r2, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    5052:	2308      	movs	r3, #8
    5054:	422b      	tst	r3, r5
    5056:	d012      	beq.n	507e <USB_Handler+0x26a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5058:	2201      	movs	r2, #1
    505a:	40a2      	lsls	r2, r4
    505c:	4942      	ldr	r1, [pc, #264]	; (5168 <USB_Handler+0x354>)
    505e:	6808      	ldr	r0, [r1, #0]
    5060:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5062:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5064:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5066:	6810      	ldr	r0, [r2, #0]
    5068:	0172      	lsls	r2, r6, #5
    506a:	6801      	ldr	r1, [r0, #0]
    506c:	468c      	mov	ip, r1
    506e:	4462      	add	r2, ip
    5070:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5072:	1903      	adds	r3, r0, r4
    5074:	33ae      	adds	r3, #174	; 0xae
    5076:	781b      	ldrb	r3, [r3, #0]
    5078:	079b      	lsls	r3, r3, #30
    507a:	d500      	bpl.n	507e <USB_Handler+0x26a>
    507c:	e092      	b.n	51a4 <USB_Handler+0x390>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    507e:	2310      	movs	r3, #16
    5080:	422b      	tst	r3, r5
    5082:	d011      	beq.n	50a8 <USB_Handler+0x294>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5084:	2201      	movs	r2, #1
    5086:	40a2      	lsls	r2, r4
    5088:	4937      	ldr	r1, [pc, #220]	; (5168 <USB_Handler+0x354>)
    508a:	6808      	ldr	r0, [r1, #0]
    508c:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    508e:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5090:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5092:	6810      	ldr	r0, [r2, #0]
    5094:	0172      	lsls	r2, r6, #5
    5096:	6801      	ldr	r1, [r0, #0]
    5098:	468c      	mov	ip, r1
    509a:	4462      	add	r2, ip
    509c:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    509e:	1903      	adds	r3, r0, r4
    50a0:	33ae      	adds	r3, #174	; 0xae
    50a2:	781b      	ldrb	r3, [r3, #0]
    50a4:	075b      	lsls	r3, r3, #29
    50a6:	d46e      	bmi.n	5186 <USB_Handler+0x372>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    50a8:	2320      	movs	r3, #32
    50aa:	422b      	tst	r3, r5
    50ac:	d100      	bne.n	50b0 <USB_Handler+0x29c>
    50ae:	e6f0      	b.n	4e92 <USB_Handler+0x7e>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    50b0:	2201      	movs	r2, #1
    50b2:	40a2      	lsls	r2, r4
    50b4:	492c      	ldr	r1, [pc, #176]	; (5168 <USB_Handler+0x354>)
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    50b6:	0176      	lsls	r6, r6, #5
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    50b8:	6808      	ldr	r0, [r1, #0]
    50ba:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    50bc:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    50be:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    50c0:	6810      	ldr	r0, [r2, #0]
    50c2:	6802      	ldr	r2, [r0, #0]
    50c4:	4694      	mov	ip, r2
    50c6:	4466      	add	r6, ip
    50c8:	71f3      	strb	r3, [r6, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    50ca:	1903      	adds	r3, r0, r4
    50cc:	33ae      	adds	r3, #174	; 0xae
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	071b      	lsls	r3, r3, #28
    50d2:	d400      	bmi.n	50d6 <USB_Handler+0x2c2>
    50d4:	e6dd      	b.n	4e92 <USB_Handler+0x7e>
				pipe_callback_para.pipe_num = pipe_int;
    50d6:	4926      	ldr	r1, [pc, #152]	; (5170 <USB_Handler+0x35c>)
    50d8:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    50da:	0124      	lsls	r4, r4, #4
    50dc:	1904      	adds	r4, r0, r4
    50de:	6b23      	ldr	r3, [r4, #48]	; 0x30
    50e0:	4798      	blx	r3
    50e2:	e6d6      	b.n	4e92 <USB_Handler+0x7e>
				pipe_callback_para.pipe_num = pipe_int;
    50e4:	4922      	ldr	r1, [pc, #136]	; (5170 <USB_Handler+0x35c>)
    50e6:	700c      	strb	r4, [r1, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    50e8:	683a      	ldr	r2, [r7, #0]
    50ea:	5c9b      	ldrb	r3, [r3, r2]
    50ec:	079b      	lsls	r3, r3, #30
    50ee:	0f9b      	lsrs	r3, r3, #30
    50f0:	2b01      	cmp	r3, #1
    50f2:	d100      	bne.n	50f6 <USB_Handler+0x2e2>
    50f4:	e0f4      	b.n	52e0 <USB_Handler+0x4cc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    50f6:	4a19      	ldr	r2, [pc, #100]	; (515c <USB_Handler+0x348>)
    50f8:	0163      	lsls	r3, r4, #5
    50fa:	18d3      	adds	r3, r2, r3
    50fc:	685a      	ldr	r2, [r3, #4]
    50fe:	0112      	lsls	r2, r2, #4
    5100:	0c92      	lsrs	r2, r2, #18
    5102:	804a      	strh	r2, [r1, #2]
    5104:	b290      	uxth	r0, r2
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5106:	685a      	ldr	r2, [r3, #4]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5108:	4682      	mov	sl, r0
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    510a:	0492      	lsls	r2, r2, #18
    510c:	0c92      	lsrs	r2, r2, #18
    510e:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    5110:	685a      	ldr	r2, [r3, #4]
    5112:	4691      	mov	r9, r2
    5114:	4648      	mov	r0, r9
    5116:	4a17      	ldr	r2, [pc, #92]	; (5174 <USB_Handler+0x360>)
    5118:	4010      	ands	r0, r2
					if (0 == pipe_callback_para.transfered_size) {
    511a:	4652      	mov	r2, sl
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    511c:	6058      	str	r0, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    511e:	2a00      	cmp	r2, #0
    5120:	d103      	bne.n	512a <USB_Handler+0x316>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5122:	685b      	ldr	r3, [r3, #4]
    5124:	049b      	lsls	r3, r3, #18
    5126:	0c9b      	lsrs	r3, r3, #18
    5128:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    512a:	1ca3      	adds	r3, r4, #2
    512c:	011b      	lsls	r3, r3, #4
    512e:	18fb      	adds	r3, r7, r3
    5130:	685b      	ldr	r3, [r3, #4]
    5132:	0038      	movs	r0, r7
    5134:	4798      	blx	r3
    5136:	e77d      	b.n	5034 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    5138:	69c3      	ldr	r3, [r0, #28]
    513a:	4798      	blx	r3
    513c:	e743      	b.n	4fc6 <USB_Handler+0x1b2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    513e:	6983      	ldr	r3, [r0, #24]
    5140:	4798      	blx	r3
    5142:	e730      	b.n	4fa6 <USB_Handler+0x192>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    5144:	68c3      	ldr	r3, [r0, #12]
    5146:	4798      	blx	r3
    5148:	e71e      	b.n	4f88 <USB_Handler+0x174>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    514a:	6903      	ldr	r3, [r0, #16]
    514c:	4798      	blx	r3
    514e:	e70f      	b.n	4f70 <USB_Handler+0x15c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    5150:	6943      	ldr	r3, [r0, #20]
    5152:	4798      	blx	r3
    5154:	e700      	b.n	4f58 <USB_Handler+0x144>
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	20000324 	.word	0x20000324
    515c:	20000640 	.word	0x20000640
    5160:	20000328 	.word	0x20000328
    5164:	0000634c 	.word	0x0000634c
    5168:	20000334 	.word	0x20000334
    516c:	000060b9 	.word	0x000060b9
    5170:	20000338 	.word	0x20000338
    5174:	f0003fff 	.word	0xf0003fff
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    5178:	6883      	ldr	r3, [r0, #8]
    517a:	4798      	blx	r3
    517c:	e6e0      	b.n	4f40 <USB_Handler+0x12c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	0038      	movs	r0, r7
    5182:	4798      	blx	r3
    5184:	e6cd      	b.n	4f22 <USB_Handler+0x10e>
				pipe_callback_para.pipe_num = pipe_int;
    5186:	4a7e      	ldr	r2, [pc, #504]	; (5380 <USB_Handler+0x56c>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5188:	4b7e      	ldr	r3, [pc, #504]	; (5384 <USB_Handler+0x570>)
    518a:	0161      	lsls	r1, r4, #5
				pipe_callback_para.pipe_num = pipe_int;
    518c:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    518e:	185b      	adds	r3, r3, r1
    5190:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    5192:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5194:	011b      	lsls	r3, r3, #4
    5196:	0c9b      	lsrs	r3, r3, #18
    5198:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    519a:	0123      	lsls	r3, r4, #4
    519c:	18c3      	adds	r3, r0, r3
    519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51a0:	4798      	blx	r3
    51a2:	e781      	b.n	50a8 <USB_Handler+0x294>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    51a4:	4b77      	ldr	r3, [pc, #476]	; (5384 <USB_Handler+0x570>)
    51a6:	0162      	lsls	r2, r4, #5
    51a8:	189b      	adds	r3, r3, r2
    51aa:	89da      	ldrh	r2, [r3, #14]
    51ac:	231f      	movs	r3, #31
				pipe_callback_para.pipe_num = pipe_int;
    51ae:	4974      	ldr	r1, [pc, #464]	; (5380 <USB_Handler+0x56c>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    51b0:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    51b2:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    51b4:	0123      	lsls	r3, r4, #4
    51b6:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
    51b8:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    51ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51bc:	4798      	blx	r3
    51be:	e75e      	b.n	507e <USB_Handler+0x26a>
    51c0:	002a      	movs	r2, r5
    51c2:	4645      	mov	r5, r8
    51c4:	4690      	mov	r8, r2
    51c6:	015a      	lsls	r2, r3, #5
    51c8:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    51ca:	2208      	movs	r2, #8
    51cc:	2040      	movs	r0, #64	; 0x40
    51ce:	32ff      	adds	r2, #255	; 0xff
    51d0:	5cac      	ldrb	r4, [r5, r2]
    51d2:	464f      	mov	r7, r9
    51d4:	4220      	tst	r0, r4
    51d6:	d100      	bne.n	51da <USB_Handler+0x3c6>
    51d8:	e092      	b.n	5300 <USB_Handler+0x4ec>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    51da:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    51dc:	4640      	mov	r0, r8
    51de:	3a88      	subs	r2, #136	; 0x88
    51e0:	3aff      	subs	r2, #255	; 0xff
    51e2:	4302      	orrs	r2, r0
    51e4:	4868      	ldr	r0, [pc, #416]	; (5388 <USB_Handler+0x574>)
    51e6:	7182      	strb	r2, [r0, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    51e8:	2260      	movs	r2, #96	; 0x60
    51ea:	420a      	tst	r2, r1
    51ec:	d100      	bne.n	51f0 <USB_Handler+0x3dc>
    51ee:	e650      	b.n	4e92 <USB_Handler+0x7e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    51f0:	011b      	lsls	r3, r3, #4
    51f2:	18fb      	adds	r3, r7, r3
    51f4:	33e0      	adds	r3, #224	; 0xe0
    51f6:	681b      	ldr	r3, [r3, #0]
    51f8:	4963      	ldr	r1, [pc, #396]	; (5388 <USB_Handler+0x574>)
    51fa:	0038      	movs	r0, r7
    51fc:	4798      	blx	r3
    51fe:	e648      	b.n	4e92 <USB_Handler+0x7e>
    5200:	464f      	mov	r7, r9
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    5202:	9a01      	ldr	r2, [sp, #4]
    5204:	7010      	strb	r0, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    5206:	18fa      	adds	r2, r7, r3
    5208:	3261      	adds	r2, #97	; 0x61
    520a:	32ff      	adds	r2, #255	; 0xff
    520c:	7812      	ldrb	r2, [r2, #0]
    520e:	4210      	tst	r0, r2
    5210:	d100      	bne.n	5214 <USB_Handler+0x400>
    5212:	e63e      	b.n	4e92 <USB_Handler+0x7e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5214:	4a5b      	ldr	r2, [pc, #364]	; (5384 <USB_Handler+0x570>)
    5216:	0159      	lsls	r1, r3, #5
    5218:	1852      	adds	r2, r2, r1
    521a:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    521c:	011b      	lsls	r3, r3, #4
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    521e:	495a      	ldr	r1, [pc, #360]	; (5388 <USB_Handler+0x574>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5220:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5222:	0492      	lsls	r2, r2, #18
    5224:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5226:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5228:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    522a:	681b      	ldr	r3, [r3, #0]
    522c:	4648      	mov	r0, r9
    522e:	4798      	blx	r3
    5230:	e62f      	b.n	4e92 <USB_Handler+0x7e>
    5232:	002a      	movs	r2, r5
    5234:	4645      	mov	r5, r8
    5236:	4690      	mov	r8, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    5238:	2208      	movs	r2, #8
    523a:	2402      	movs	r4, #2
    523c:	0158      	lsls	r0, r3, #5
    523e:	182d      	adds	r5, r5, r0
    5240:	32ff      	adds	r2, #255	; 0xff
    5242:	5cae      	ldrb	r6, [r5, r2]
    5244:	464f      	mov	r7, r9
    5246:	4234      	tst	r4, r6
    5248:	d064      	beq.n	5314 <USB_Handler+0x500>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    524a:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    524c:	4645      	mov	r5, r8
    524e:	3a88      	subs	r2, #136	; 0x88
    5250:	4c4d      	ldr	r4, [pc, #308]	; (5388 <USB_Handler+0x574>)
    5252:	3aff      	subs	r2, #255	; 0xff
    5254:	432a      	orrs	r2, r5
    5256:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    5258:	4a4a      	ldr	r2, [pc, #296]	; (5384 <USB_Handler+0x570>)
    525a:	1810      	adds	r0, r2, r0
    525c:	6942      	ldr	r2, [r0, #20]
    525e:	0492      	lsls	r2, r2, #18
    5260:	0c92      	lsrs	r2, r2, #18
    5262:	8062      	strh	r2, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    5264:	078a      	lsls	r2, r1, #30
    5266:	d100      	bne.n	526a <USB_Handler+0x456>
    5268:	e613      	b.n	4e92 <USB_Handler+0x7e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    526a:	330d      	adds	r3, #13
    526c:	011b      	lsls	r3, r3, #4
    526e:	18fb      	adds	r3, r7, r3
    5270:	685b      	ldr	r3, [r3, #4]
    5272:	4945      	ldr	r1, [pc, #276]	; (5388 <USB_Handler+0x574>)
    5274:	0038      	movs	r0, r7
    5276:	4798      	blx	r3
    5278:	e60b      	b.n	4e92 <USB_Handler+0x7e>
    527a:	003a      	movs	r2, r7
    527c:	0028      	movs	r0, r5
    527e:	464f      	mov	r7, r9
    5280:	4645      	mov	r5, r8
    5282:	4691      	mov	r9, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    5284:	2208      	movs	r2, #8
    5286:	2408      	movs	r4, #8
    5288:	4680      	mov	r8, r0
    528a:	0158      	lsls	r0, r3, #5
    528c:	182d      	adds	r5, r5, r0
    528e:	32ff      	adds	r2, #255	; 0xff
    5290:	5cae      	ldrb	r6, [r5, r2]
    5292:	4234      	tst	r4, r6
    5294:	d051      	beq.n	533a <USB_Handler+0x526>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    5296:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    5298:	4a3a      	ldr	r2, [pc, #232]	; (5384 <USB_Handler+0x570>)
    529a:	1810      	adds	r0, r2, r0
    529c:	2202      	movs	r2, #2
    529e:	7e84      	ldrb	r4, [r0, #26]
    52a0:	4222      	tst	r2, r4
    52a2:	d002      	beq.n	52aa <USB_Handler+0x496>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    52a4:	7e84      	ldrb	r4, [r0, #26]
    52a6:	4394      	bics	r4, r2
    52a8:	7684      	strb	r4, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    52aa:	2280      	movs	r2, #128	; 0x80
    52ac:	4640      	mov	r0, r8
    52ae:	4252      	negs	r2, r2
    52b0:	4302      	orrs	r2, r0
    52b2:	4835      	ldr	r0, [pc, #212]	; (5388 <USB_Handler+0x574>)
    52b4:	7182      	strb	r2, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    52b6:	6838      	ldr	r0, [r7, #0]
    52b8:	464a      	mov	r2, r9
    52ba:	4684      	mov	ip, r0
    52bc:	0152      	lsls	r2, r2, #5
    52be:	4462      	add	r2, ip
    52c0:	79d2      	ldrb	r2, [r2, #7]
    52c2:	0792      	lsls	r2, r2, #30
    52c4:	d500      	bpl.n	52c8 <USB_Handler+0x4b4>
    52c6:	e5e4      	b.n	4e92 <USB_Handler+0x7e>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    52c8:	220c      	movs	r2, #12
    52ca:	420a      	tst	r2, r1
    52cc:	d100      	bne.n	52d0 <USB_Handler+0x4bc>
    52ce:	e5e0      	b.n	4e92 <USB_Handler+0x7e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    52d0:	011b      	lsls	r3, r3, #4
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	33d8      	adds	r3, #216	; 0xd8
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	492b      	ldr	r1, [pc, #172]	; (5388 <USB_Handler+0x574>)
    52da:	0038      	movs	r0, r7
    52dc:	4798      	blx	r3
    52de:	e5d8      	b.n	4e92 <USB_Handler+0x7e>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    52e0:	4a28      	ldr	r2, [pc, #160]	; (5384 <USB_Handler+0x570>)
    52e2:	0163      	lsls	r3, r4, #5
    52e4:	18d3      	adds	r3, r2, r3
    52e6:	685a      	ldr	r2, [r3, #4]
    52e8:	0492      	lsls	r2, r2, #18
    52ea:	0c92      	lsrs	r2, r2, #18
    52ec:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    52ee:	685a      	ldr	r2, [r3, #4]
    52f0:	0112      	lsls	r2, r2, #4
    52f2:	0c92      	lsrs	r2, r2, #18
    52f4:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    52f6:	685a      	ldr	r2, [r3, #4]
    52f8:	0b92      	lsrs	r2, r2, #14
    52fa:	0392      	lsls	r2, r2, #14
    52fc:	605a      	str	r2, [r3, #4]
    52fe:	e714      	b.n	512a <USB_Handler+0x316>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    5300:	2020      	movs	r0, #32
    5302:	5cac      	ldrb	r4, [r5, r2]
    5304:	4220      	tst	r0, r4
    5306:	d100      	bne.n	530a <USB_Handler+0x4f6>
    5308:	e76e      	b.n	51e8 <USB_Handler+0x3d4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    530a:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    530c:	4640      	mov	r0, r8
    530e:	4a1e      	ldr	r2, [pc, #120]	; (5388 <USB_Handler+0x574>)
    5310:	7190      	strb	r0, [r2, #6]
    5312:	e769      	b.n	51e8 <USB_Handler+0x3d4>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    5314:	5cac      	ldrb	r4, [r5, r2]
    5316:	07e4      	lsls	r4, r4, #31
    5318:	d5a4      	bpl.n	5264 <USB_Handler+0x450>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    531a:	4664      	mov	r4, ip
    531c:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    531e:	4642      	mov	r2, r8
    5320:	4c19      	ldr	r4, [pc, #100]	; (5388 <USB_Handler+0x574>)
    5322:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5324:	4a17      	ldr	r2, [pc, #92]	; (5384 <USB_Handler+0x570>)
    5326:	1810      	adds	r0, r2, r0
    5328:	6842      	ldr	r2, [r0, #4]
    532a:	0492      	lsls	r2, r2, #18
    532c:	0c92      	lsrs	r2, r2, #18
    532e:	8022      	strh	r2, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    5330:	6842      	ldr	r2, [r0, #4]
    5332:	0112      	lsls	r2, r2, #4
    5334:	0c92      	lsrs	r2, r2, #18
    5336:	80a2      	strh	r2, [r4, #4]
    5338:	e794      	b.n	5264 <USB_Handler+0x450>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    533a:	2404      	movs	r4, #4
    533c:	5cae      	ldrb	r6, [r5, r2]
    533e:	4234      	tst	r4, r6
    5340:	d0c2      	beq.n	52c8 <USB_Handler+0x4b4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    5342:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    5344:	4a0f      	ldr	r2, [pc, #60]	; (5384 <USB_Handler+0x570>)
    5346:	3c02      	subs	r4, #2
    5348:	1810      	adds	r0, r2, r0
    534a:	7a82      	ldrb	r2, [r0, #10]
    534c:	4214      	tst	r4, r2
    534e:	d002      	beq.n	5356 <USB_Handler+0x542>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    5350:	7a82      	ldrb	r2, [r0, #10]
    5352:	43a2      	bics	r2, r4
    5354:	7282      	strb	r2, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5356:	4640      	mov	r0, r8
    5358:	4a0b      	ldr	r2, [pc, #44]	; (5388 <USB_Handler+0x574>)
    535a:	7190      	strb	r0, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    535c:	6838      	ldr	r0, [r7, #0]
    535e:	464a      	mov	r2, r9
    5360:	4684      	mov	ip, r0
    5362:	0152      	lsls	r2, r2, #5
    5364:	4462      	add	r2, ip
    5366:	79d2      	ldrb	r2, [r2, #7]
    5368:	07d2      	lsls	r2, r2, #31
    536a:	d5ad      	bpl.n	52c8 <USB_Handler+0x4b4>
    536c:	e591      	b.n	4e92 <USB_Handler+0x7e>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    536e:	465b      	mov	r3, fp
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5370:	4652      	mov	r2, sl
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    5372:	891b      	ldrh	r3, [r3, #8]
					device_callback_lpm_wakeup_enable =
    5374:	4905      	ldr	r1, [pc, #20]	; (538c <USB_Handler+0x578>)
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    5376:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5378:	4013      	ands	r3, r2
    537a:	600b      	str	r3, [r1, #0]
    537c:	e57d      	b.n	4e7a <USB_Handler+0x66>
    537e:	46c0      	nop			; (mov r8, r8)
    5380:	20000338 	.word	0x20000338
    5384:	20000640 	.word	0x20000640
    5388:	2000032c 	.word	0x2000032c
    538c:	20000328 	.word	0x20000328

00005390 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    5390:	2200      	movs	r2, #0
	module_config->run_in_standby = 1;
    5392:	2301      	movs	r3, #1
	module_config->select_host_mode = 0;
    5394:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    5396:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    5398:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    539a:	70c3      	strb	r3, [r0, #3]
}
    539c:	4770      	bx	lr
    539e:	46c0      	nop			; (mov r8, r8)

000053a0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    53a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    53a2:	2300      	movs	r3, #0
{
    53a4:	46ce      	mov	lr, r9
    53a6:	4647      	mov	r7, r8
    53a8:	0004      	movs	r4, r0
    53aa:	0016      	movs	r6, r2
	host_pipe_job_busy_status = 0;
    53ac:	4a98      	ldr	r2, [pc, #608]	; (5610 <usb_init+0x270>)
{
    53ae:	b580      	push	{r7, lr}
	host_pipe_job_busy_status = 0;
    53b0:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    53b2:	4a98      	ldr	r2, [pc, #608]	; (5614 <usb_init+0x274>)

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    53b4:	6021      	str	r1, [r4, #0]
	_usb_instances = module_inst;
    53b6:	6010      	str	r0, [r2, #0]
			PM->APBBMASK.reg |= mask;
    53b8:	2020      	movs	r0, #32
{
    53ba:	000d      	movs	r5, r1
    53bc:	4996      	ldr	r1, [pc, #600]	; (5618 <usb_init+0x278>)
    53be:	b083      	sub	sp, #12
    53c0:	69ca      	ldr	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    53c2:	af01      	add	r7, sp, #4
    53c4:	4302      	orrs	r2, r0
    53c6:	61ca      	str	r2, [r1, #28]
    53c8:	707b      	strb	r3, [r7, #1]
	config->powersave    = false;
    53ca:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    53cc:	3306      	adds	r3, #6
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    53ce:	2201      	movs	r2, #1
    53d0:	4699      	mov	r9, r3
    53d2:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    53d4:	4b91      	ldr	r3, [pc, #580]	; (561c <usb_init+0x27c>)
    53d6:	0039      	movs	r1, r7
    53d8:	3808      	subs	r0, #8
    53da:	70ba      	strb	r2, [r7, #2]
    53dc:	4698      	mov	r8, r3
    53de:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    53e0:	464b      	mov	r3, r9
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    53e2:	0039      	movs	r1, r7
    53e4:	2019      	movs	r0, #25
	pin_config.mux_position = MUX_PA25G_USB_DP;
    53e6:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    53e8:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    53ea:	466a      	mov	r2, sp
    53ec:	78b3      	ldrb	r3, [r6, #2]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    53ee:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = module_config->source_generator;
    53f0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    53f2:	2006      	movs	r0, #6
    53f4:	4b8a      	ldr	r3, [pc, #552]	; (5620 <usb_init+0x280>)
    53f6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    53f8:	4b8a      	ldr	r3, [pc, #552]	; (5624 <usb_init+0x284>)
    53fa:	2006      	movs	r0, #6
    53fc:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    53fe:	2201      	movs	r2, #1
    5400:	782b      	ldrb	r3, [r5, #0]
    5402:	4313      	orrs	r3, r2
    5404:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    5406:	78ab      	ldrb	r3, [r5, #2]
    5408:	07db      	lsls	r3, r3, #31
    540a:	d4fc      	bmi.n	5406 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    540c:	2103      	movs	r1, #3
    540e:	4a86      	ldr	r2, [pc, #536]	; (5628 <usb_init+0x288>)
    5410:	78d3      	ldrb	r3, [r2, #3]
    5412:	438b      	bics	r3, r1
    5414:	2102      	movs	r1, #2
    5416:	430b      	orrs	r3, r1
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5418:	210c      	movs	r1, #12
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    541a:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    541c:	78d3      	ldrb	r3, [r2, #3]
    541e:	438b      	bics	r3, r1
    5420:	2108      	movs	r1, #8
    5422:	430b      	orrs	r3, r1
    5424:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    5426:	4b81      	ldr	r3, [pc, #516]	; (562c <usb_init+0x28c>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    5428:	681b      	ldr	r3, [r3, #0]
    542a:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    542c:	43da      	mvns	r2, r3
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    542e:	06d2      	lsls	r2, r2, #27
    5430:	d100      	bne.n	5434 <usb_init+0x94>
    5432:	e0ea      	b.n	560a <usb_init+0x26a>
    5434:	211f      	movs	r1, #31
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    5436:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    5438:	487d      	ldr	r0, [pc, #500]	; (5630 <usb_init+0x290>)
    543a:	400b      	ands	r3, r1
    543c:	019b      	lsls	r3, r3, #6
    543e:	4002      	ands	r2, r0
    5440:	4313      	orrs	r3, r2
    5442:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    5444:	4b79      	ldr	r3, [pc, #484]	; (562c <usb_init+0x28c>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    5446:	681b      	ldr	r3, [r3, #0]
    5448:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    544a:	4019      	ands	r1, r3
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    544c:	291f      	cmp	r1, #31
    544e:	d100      	bne.n	5452 <usb_init+0xb2>
    5450:	e0d9      	b.n	5606 <usb_init+0x266>
    5452:	211f      	movs	r1, #31
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    5454:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    5456:	400b      	ands	r3, r1
    5458:	438a      	bics	r2, r1
    545a:	4313      	orrs	r3, r2
    545c:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    545e:	4b73      	ldr	r3, [pc, #460]	; (562c <usb_init+0x28c>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    5460:	6819      	ldr	r1, [r3, #0]
    5462:	0dc9      	lsrs	r1, r1, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    5464:	43cb      	mvns	r3, r1
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    5466:	075b      	lsls	r3, r3, #29
    5468:	d100      	bne.n	546c <usb_init+0xcc>
    546a:	e0ca      	b.n	5602 <usb_init+0x262>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    546c:	2207      	movs	r2, #7
    546e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    5470:	400a      	ands	r2, r1
    5472:	4970      	ldr	r1, [pc, #448]	; (5634 <usb_init+0x294>)
    5474:	0312      	lsls	r2, r2, #12
    5476:	400b      	ands	r3, r1
    5478:	4313      	orrs	r3, r2
    547a:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    547c:	237f      	movs	r3, #127	; 0x7f
    547e:	7829      	ldrb	r1, [r5, #0]
    5480:	7832      	ldrb	r2, [r6, #0]
    5482:	400b      	ands	r3, r1
    5484:	01d2      	lsls	r2, r2, #7
    5486:	4313      	orrs	r3, r2
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    5488:	2201      	movs	r2, #1
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    548a:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    548c:	7871      	ldrb	r1, [r6, #1]
    548e:	782b      	ldrb	r3, [r5, #0]
    5490:	400a      	ands	r2, r1
    5492:	2104      	movs	r1, #4
    5494:	0092      	lsls	r2, r2, #2
    5496:	438b      	bics	r3, r1
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    5498:	4867      	ldr	r0, [pc, #412]	; (5638 <usb_init+0x298>)
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    549a:	4313      	orrs	r3, r2
    549c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    549e:	6268      	str	r0, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    54a0:	78f3      	ldrb	r3, [r6, #3]
    54a2:	2b01      	cmp	r3, #1
    54a4:	d100      	bne.n	54a8 <usb_init+0x108>
    54a6:	e0a6      	b.n	55f6 <usb_init+0x256>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    54a8:	2b00      	cmp	r3, #0
    54aa:	d106      	bne.n	54ba <usb_init+0x11a>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    54ac:	210c      	movs	r1, #12
    54ae:	6822      	ldr	r2, [r4, #0]
    54b0:	8913      	ldrh	r3, [r2, #8]
    54b2:	438b      	bics	r3, r1
    54b4:	2104      	movs	r1, #4
    54b6:	430b      	orrs	r3, r1
    54b8:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    54ba:	2380      	movs	r3, #128	; 0x80
    54bc:	005b      	lsls	r3, r3, #1
    54be:	4e5f      	ldr	r6, [pc, #380]	; (563c <usb_init+0x29c>)
    54c0:	001a      	movs	r2, r3
    54c2:	2100      	movs	r1, #0
    54c4:	4698      	mov	r8, r3
    54c6:	47b0      	blx	r6
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    54c8:	1d20      	adds	r0, r4, #4
    54ca:	2220      	movs	r2, #32
    54cc:	2100      	movs	r1, #0
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    54ce:	2500      	movs	r5, #0
    54d0:	47b0      	blx	r6
    54d2:	2780      	movs	r7, #128	; 0x80
    54d4:	2384      	movs	r3, #132	; 0x84
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    54d6:	0020      	movs	r0, r4
			module_inst->host_pipe_callback[i][j] = NULL;
    54d8:	6265      	str	r5, [r4, #36]	; 0x24
    54da:	62a5      	str	r5, [r4, #40]	; 0x28
    54dc:	62e5      	str	r5, [r4, #44]	; 0x2c
    54de:	6325      	str	r5, [r4, #48]	; 0x30
    54e0:	6365      	str	r5, [r4, #52]	; 0x34
    54e2:	63a5      	str	r5, [r4, #56]	; 0x38
    54e4:	63e5      	str	r5, [r4, #60]	; 0x3c
    54e6:	6425      	str	r5, [r4, #64]	; 0x40
    54e8:	6465      	str	r5, [r4, #68]	; 0x44
    54ea:	64a5      	str	r5, [r4, #72]	; 0x48
    54ec:	64e5      	str	r5, [r4, #76]	; 0x4c
    54ee:	6525      	str	r5, [r4, #80]	; 0x50
    54f0:	6565      	str	r5, [r4, #84]	; 0x54
    54f2:	65a5      	str	r5, [r4, #88]	; 0x58
    54f4:	65e5      	str	r5, [r4, #92]	; 0x5c
    54f6:	6625      	str	r5, [r4, #96]	; 0x60
    54f8:	6665      	str	r5, [r4, #100]	; 0x64
    54fa:	66a5      	str	r5, [r4, #104]	; 0x68
    54fc:	66e5      	str	r5, [r4, #108]	; 0x6c
    54fe:	6725      	str	r5, [r4, #112]	; 0x70
    5500:	6765      	str	r5, [r4, #116]	; 0x74
    5502:	67a5      	str	r5, [r4, #120]	; 0x78
    5504:	67e5      	str	r5, [r4, #124]	; 0x7c
    5506:	51e5      	str	r5, [r4, r7]
    5508:	50e5      	str	r5, [r4, r3]
    550a:	3304      	adds	r3, #4
    550c:	50e5      	str	r5, [r4, r3]
    550e:	3304      	adds	r3, #4
    5510:	50e5      	str	r5, [r4, r3]
    5512:	3304      	adds	r3, #4
    5514:	50e5      	str	r5, [r4, r3]
    5516:	3304      	adds	r3, #4
    5518:	50e5      	str	r5, [r4, r3]
    551a:	3304      	adds	r3, #4
    551c:	50e5      	str	r5, [r4, r3]
    551e:	3304      	adds	r3, #4
    5520:	50e5      	str	r5, [r4, r3]
    5522:	3304      	adds	r3, #4
    5524:	50e5      	str	r5, [r4, r3]
	module_inst->host_registered_callback_mask = 0;
    5526:	3304      	adds	r3, #4
    5528:	54e5      	strb	r5, [r4, r3]
	module_inst->host_enabled_callback_mask = 0;
    552a:	3301      	adds	r3, #1
    552c:	54e5      	strb	r5, [r4, r3]
    552e:	2208      	movs	r2, #8
    5530:	2100      	movs	r1, #0
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    5532:	30a6      	adds	r0, #166	; 0xa6
    5534:	47b0      	blx	r6
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    5536:	0020      	movs	r0, r4
    5538:	2208      	movs	r2, #8
    553a:	2100      	movs	r1, #0
    553c:	30ae      	adds	r0, #174	; 0xae
    553e:	47b0      	blx	r6
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    5540:	0020      	movs	r0, r4
    5542:	221c      	movs	r2, #28
    5544:	2100      	movs	r1, #0
    5546:	30b8      	adds	r0, #184	; 0xb8
    5548:	47b0      	blx	r6
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    554a:	23d4      	movs	r3, #212	; 0xd4
    554c:	50e5      	str	r5, [r4, r3]
    554e:	3304      	adds	r3, #4
    5550:	50e5      	str	r5, [r4, r3]
    5552:	3304      	adds	r3, #4
    5554:	50e5      	str	r5, [r4, r3]
    5556:	3304      	adds	r3, #4
    5558:	50e5      	str	r5, [r4, r3]
    555a:	3304      	adds	r3, #4
    555c:	50e5      	str	r5, [r4, r3]
    555e:	3304      	adds	r3, #4
    5560:	50e5      	str	r5, [r4, r3]
    5562:	3304      	adds	r3, #4
    5564:	50e5      	str	r5, [r4, r3]
    5566:	3304      	adds	r3, #4
    5568:	50e5      	str	r5, [r4, r3]
    556a:	3304      	adds	r3, #4
    556c:	50e5      	str	r5, [r4, r3]
    556e:	3304      	adds	r3, #4
    5570:	50e5      	str	r5, [r4, r3]
    5572:	3304      	adds	r3, #4
    5574:	50e5      	str	r5, [r4, r3]
    5576:	4643      	mov	r3, r8
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    5578:	0020      	movs	r0, r4
			module_inst->device_endpoint_callback[i][j] = NULL;
    557a:	50e5      	str	r5, [r4, r3]
    557c:	3304      	adds	r3, #4
    557e:	50e5      	str	r5, [r4, r3]
    5580:	3304      	adds	r3, #4
    5582:	50e5      	str	r5, [r4, r3]
    5584:	3304      	adds	r3, #4
    5586:	50e5      	str	r5, [r4, r3]
    5588:	3304      	adds	r3, #4
    558a:	50e5      	str	r5, [r4, r3]
    558c:	3304      	adds	r3, #4
    558e:	50e5      	str	r5, [r4, r3]
    5590:	3304      	adds	r3, #4
    5592:	50e5      	str	r5, [r4, r3]
    5594:	3304      	adds	r3, #4
    5596:	50e5      	str	r5, [r4, r3]
    5598:	3304      	adds	r3, #4
    559a:	50e5      	str	r5, [r4, r3]
    559c:	3304      	adds	r3, #4
    559e:	50e5      	str	r5, [r4, r3]
    55a0:	3304      	adds	r3, #4
    55a2:	50e5      	str	r5, [r4, r3]
    55a4:	3304      	adds	r3, #4
    55a6:	50e5      	str	r5, [r4, r3]
    55a8:	3304      	adds	r3, #4
    55aa:	50e5      	str	r5, [r4, r3]
    55ac:	3304      	adds	r3, #4
    55ae:	50e5      	str	r5, [r4, r3]
    55b0:	3304      	adds	r3, #4
    55b2:	50e5      	str	r5, [r4, r3]
    55b4:	3304      	adds	r3, #4
    55b6:	50e5      	str	r5, [r4, r3]
    55b8:	3304      	adds	r3, #4
    55ba:	50e5      	str	r5, [r4, r3]
    55bc:	3304      	adds	r3, #4
    55be:	50e5      	str	r5, [r4, r3]
    55c0:	3304      	adds	r3, #4
    55c2:	50e5      	str	r5, [r4, r3]
    55c4:	3304      	adds	r3, #4
    55c6:	50e5      	str	r5, [r4, r3]
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    55c8:	3059      	adds	r0, #89	; 0x59
			module_inst->device_endpoint_callback[i][j] = NULL;
    55ca:	3304      	adds	r3, #4
    55cc:	50e5      	str	r5, [r4, r3]
    55ce:	2208      	movs	r2, #8
	module_inst->device_registered_callback_mask = 0;
    55d0:	3304      	adds	r3, #4
    55d2:	2100      	movs	r1, #0
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    55d4:	30ff      	adds	r0, #255	; 0xff
	module_inst->device_registered_callback_mask = 0;
    55d6:	50e5      	str	r5, [r4, r3]
    55d8:	47b0      	blx	r6
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    55da:	0020      	movs	r0, r4
    55dc:	3061      	adds	r0, #97	; 0x61
    55de:	2208      	movs	r2, #8
    55e0:	2100      	movs	r1, #0
    55e2:	30ff      	adds	r0, #255	; 0xff
    55e4:	47b0      	blx	r6

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    55e6:	2000      	movs	r0, #0
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    55e8:	4b15      	ldr	r3, [pc, #84]	; (5640 <usb_init+0x2a0>)
    55ea:	601f      	str	r7, [r3, #0]
    55ec:	b003      	add	sp, #12
    55ee:	bc0c      	pop	{r2, r3}
    55f0:	4690      	mov	r8, r2
    55f2:	4699      	mov	r9, r3
    55f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    55f6:	6822      	ldr	r2, [r4, #0]
    55f8:	3108      	adds	r1, #8
    55fa:	8913      	ldrh	r3, [r2, #8]
    55fc:	438b      	bics	r3, r1
    55fe:	8113      	strh	r3, [r2, #8]
    5600:	e75b      	b.n	54ba <usb_init+0x11a>
	if (pad_trim == 0x7) {
    5602:	2103      	movs	r1, #3
    5604:	e732      	b.n	546c <usb_init+0xcc>
	if (pad_transp == 0x1F) {
    5606:	231d      	movs	r3, #29
    5608:	e723      	b.n	5452 <usb_init+0xb2>
	if (pad_transn == 0x1F) {
    560a:	2305      	movs	r3, #5
    560c:	e712      	b.n	5434 <usb_init+0x94>
    560e:	46c0      	nop			; (mov r8, r8)
    5610:	20000334 	.word	0x20000334
    5614:	20000324 	.word	0x20000324
    5618:	40000400 	.word	0x40000400
    561c:	00002f65 	.word	0x00002f65
    5620:	00002df1 	.word	0x00002df1
    5624:	00002e55 	.word	0x00002e55
    5628:	41005000 	.word	0x41005000
    562c:	00806024 	.word	0x00806024
    5630:	fffff83f 	.word	0xfffff83f
    5634:	ffff8fff 	.word	0xffff8fff
    5638:	20000640 	.word	0x20000640
    563c:	000061a7 	.word	0x000061a7
    5640:	e000e100 	.word	0xe000e100

00005644 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5644:	e7fe      	b.n	5644 <Dummy_Handler>
    5646:	46c0      	nop			; (mov r8, r8)

00005648 <Reset_Handler>:
        if (pSrc != pDest) {
    5648:	4925      	ldr	r1, [pc, #148]	; (56e0 <Reset_Handler+0x98>)
    564a:	4826      	ldr	r0, [pc, #152]	; (56e4 <Reset_Handler+0x9c>)
{
    564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    564e:	4281      	cmp	r1, r0
    5650:	d009      	beq.n	5666 <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
    5652:	4b25      	ldr	r3, [pc, #148]	; (56e8 <Reset_Handler+0xa0>)
    5654:	4298      	cmp	r0, r3
    5656:	d206      	bcs.n	5666 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
    5658:	43c2      	mvns	r2, r0
    565a:	18d2      	adds	r2, r2, r3
    565c:	0892      	lsrs	r2, r2, #2
    565e:	3201      	adds	r2, #1
    5660:	0092      	lsls	r2, r2, #2
    5662:	4b22      	ldr	r3, [pc, #136]	; (56ec <Reset_Handler+0xa4>)
    5664:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    5666:	4822      	ldr	r0, [pc, #136]	; (56f0 <Reset_Handler+0xa8>)
    5668:	4b22      	ldr	r3, [pc, #136]	; (56f4 <Reset_Handler+0xac>)
    566a:	4298      	cmp	r0, r3
    566c:	d207      	bcs.n	567e <Reset_Handler+0x36>
                *pDest++ = 0;
    566e:	43c2      	mvns	r2, r0
    5670:	18d2      	adds	r2, r2, r3
    5672:	0892      	lsrs	r2, r2, #2
    5674:	3201      	adds	r2, #1
    5676:	0092      	lsls	r2, r2, #2
    5678:	2100      	movs	r1, #0
    567a:	4b1f      	ldr	r3, [pc, #124]	; (56f8 <Reset_Handler+0xb0>)
    567c:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    567e:	21ff      	movs	r1, #255	; 0xff
    5680:	4b1e      	ldr	r3, [pc, #120]	; (56fc <Reset_Handler+0xb4>)
    5682:	4a1f      	ldr	r2, [pc, #124]	; (5700 <Reset_Handler+0xb8>)
    5684:	438b      	bics	r3, r1
    5686:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5688:	2390      	movs	r3, #144	; 0x90
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    568a:	2503      	movs	r5, #3
    568c:	2402      	movs	r4, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    568e:	270c      	movs	r7, #12
    5690:	2608      	movs	r6, #8
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5692:	4a1c      	ldr	r2, [pc, #112]	; (5704 <Reset_Handler+0xbc>)
    5694:	39fd      	subs	r1, #253	; 0xfd
    5696:	005b      	lsls	r3, r3, #1
    5698:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    569a:	4a1b      	ldr	r2, [pc, #108]	; (5708 <Reset_Handler+0xc0>)
    569c:	78d3      	ldrb	r3, [r2, #3]
    569e:	43ab      	bics	r3, r5
    56a0:	4323      	orrs	r3, r4
    56a2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    56a4:	78d3      	ldrb	r3, [r2, #3]
    56a6:	43bb      	bics	r3, r7
    56a8:	4333      	orrs	r3, r6
    56aa:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    56ac:	2230      	movs	r2, #48	; 0x30
    56ae:	4b17      	ldr	r3, [pc, #92]	; (570c <Reset_Handler+0xc4>)
    56b0:	7b98      	ldrb	r0, [r3, #14]
    56b2:	4390      	bics	r0, r2
    56b4:	2220      	movs	r2, #32
    56b6:	4310      	orrs	r0, r2
    56b8:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    56ba:	7b99      	ldrb	r1, [r3, #14]
    56bc:	43b9      	bics	r1, r7
    56be:	4331      	orrs	r1, r6
    56c0:	7399      	strb	r1, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    56c2:	2180      	movs	r1, #128	; 0x80
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    56c4:	7b9a      	ldrb	r2, [r3, #14]
    56c6:	43aa      	bics	r2, r5
    56c8:	4322      	orrs	r2, r4
    56ca:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    56cc:	4a10      	ldr	r2, [pc, #64]	; (5710 <Reset_Handler+0xc8>)
    56ce:	6853      	ldr	r3, [r2, #4]
    56d0:	430b      	orrs	r3, r1
    56d2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    56d4:	4b0f      	ldr	r3, [pc, #60]	; (5714 <Reset_Handler+0xcc>)
    56d6:	4798      	blx	r3
        main();
    56d8:	4b0f      	ldr	r3, [pc, #60]	; (5718 <Reset_Handler+0xd0>)
    56da:	4798      	blx	r3
    56dc:	e7fe      	b.n	56dc <Reset_Handler+0x94>
    56de:	46c0      	nop			; (mov r8, r8)
    56e0:	00006388 	.word	0x00006388
    56e4:	20000000 	.word	0x20000000
    56e8:	200000ec 	.word	0x200000ec
    56ec:	00006195 	.word	0x00006195
    56f0:	200000ec 	.word	0x200000ec
    56f4:	20002834 	.word	0x20002834
    56f8:	000061a7 	.word	0x000061a7
    56fc:	00000000 	.word	0x00000000
    5700:	e000ed00 	.word	0xe000ed00
    5704:	41007000 	.word	0x41007000
    5708:	41005000 	.word	0x41005000
    570c:	41004800 	.word	0x41004800
    5710:	41004000 	.word	0x41004000
    5714:	0000614d 	.word	0x0000614d
    5718:	0000588d 	.word	0x0000588d

0000571c <tc_callback>:
	}
}

void tc_callback(struct tc_module *const module_inst)
{
	module_inst->hw->COUNT16.COUNT.reg = 65535 - (500000 / SAMPLE_RATE);		//EXECUTION_TIMER_PERIOD sec period
    571c:	227b      	movs	r2, #123	; 0x7b
    571e:	6803      	ldr	r3, [r0, #0]
    5720:	4252      	negs	r2, r2
    5722:	821a      	strh	r2, [r3, #16]
	Adc *const adc_module = module_inst->hw;
    5724:	4b07      	ldr	r3, [pc, #28]	; (5744 <tc_callback+0x28>)
    5726:	681a      	ldr	r2, [r3, #0]
    5728:	7e53      	ldrb	r3, [r2, #25]
    572a:	b25b      	sxtb	r3, r3
    572c:	2b00      	cmp	r3, #0
    572e:	dbfb      	blt.n	5728 <tc_callback+0xc>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    5730:	2102      	movs	r1, #2
    5732:	7b13      	ldrb	r3, [r2, #12]
    5734:	430b      	orrs	r3, r1
    5736:	7313      	strb	r3, [r2, #12]
    5738:	7e53      	ldrb	r3, [r2, #25]
    573a:	b25b      	sxtb	r3, r3
    573c:	2b00      	cmp	r3, #0
    573e:	dbfb      	blt.n	5738 <tc_callback+0x1c>
	
	adc_start_conversion(&adc_instance);
}
    5740:	4770      	bx	lr
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	2000279c 	.word	0x2000279c

00005748 <adc_complete_callback>:
	adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    5748:	2280      	movs	r2, #128	; 0x80
{
    574a:	b570      	push	{r4, r5, r6, lr}
	adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    574c:	4d12      	ldr	r5, [pc, #72]	; (5798 <adc_complete_callback+0x50>)
    574e:	0152      	lsls	r2, r2, #5
    5750:	4b12      	ldr	r3, [pc, #72]	; (579c <adc_complete_callback+0x54>)
    5752:	0029      	movs	r1, r5
    5754:	4812      	ldr	r0, [pc, #72]	; (57a0 <adc_complete_callback+0x58>)
    5756:	4798      	blx	r3
	counter += ADC_SAMPLES;
    5758:	2280      	movs	r2, #128	; 0x80
    575a:	0152      	lsls	r2, r2, #5
    575c:	4694      	mov	ip, r2
    575e:	4c11      	ldr	r4, [pc, #68]	; (57a4 <adc_complete_callback+0x5c>)
	if(counter >= SAMPLE_RATE)
    5760:	4a11      	ldr	r2, [pc, #68]	; (57a8 <adc_complete_callback+0x60>)
	counter += ADC_SAMPLES;
    5762:	6823      	ldr	r3, [r4, #0]
    5764:	4463      	add	r3, ip
    5766:	6023      	str	r3, [r4, #0]
	if(counter >= SAMPLE_RATE)
    5768:	4293      	cmp	r3, r2
    576a:	d800      	bhi.n	576e <adc_complete_callback+0x26>
}
    576c:	bd70      	pop	{r4, r5, r6, pc}
		ui_com_tx_start();
    576e:	4b0f      	ldr	r3, [pc, #60]	; (57ac <adc_complete_callback+0x64>)
    5770:	4798      	blx	r3
		if (!udi_cdc_is_tx_ready())
    5772:	4b0f      	ldr	r3, [pc, #60]	; (57b0 <adc_complete_callback+0x68>)
    5774:	4798      	blx	r3
    5776:	2800      	cmp	r0, #0
    5778:	d009      	beq.n	578e <adc_complete_callback+0x46>
			udi_cdc_write_buf((uint8_t*)adc_result_buffer, SAMPLE_RATE * 2);
    577a:	2180      	movs	r1, #128	; 0x80
    577c:	0028      	movs	r0, r5
    577e:	0189      	lsls	r1, r1, #6
    5780:	4b0c      	ldr	r3, [pc, #48]	; (57b4 <adc_complete_callback+0x6c>)
    5782:	4798      	blx	r3
		ui_com_tx_stop();
    5784:	4b0c      	ldr	r3, [pc, #48]	; (57b8 <adc_complete_callback+0x70>)
    5786:	4798      	blx	r3
		counter = 0;
    5788:	2300      	movs	r3, #0
    578a:	6023      	str	r3, [r4, #0]
}
    578c:	e7ee      	b.n	576c <adc_complete_callback+0x24>
			udi_cdc_signal_overrun();
    578e:	4b0b      	ldr	r3, [pc, #44]	; (57bc <adc_complete_callback+0x74>)
    5790:	4798      	blx	r3
			ui_com_overflow();
    5792:	4b0b      	ldr	r3, [pc, #44]	; (57c0 <adc_complete_callback+0x78>)
    5794:	4798      	blx	r3
    5796:	e7f5      	b.n	5784 <adc_complete_callback+0x3c>
    5798:	20000744 	.word	0x20000744
    579c:	00001d65 	.word	0x00001d65
    57a0:	2000279c 	.word	0x2000279c
    57a4:	20002744 	.word	0x20002744
    57a8:	00000fff 	.word	0x00000fff
    57ac:	000001d9 	.word	0x000001d9
    57b0:	00000bed 	.word	0x00000bed
    57b4:	00000edd 	.word	0x00000edd
    57b8:	000001dd 	.word	0x000001dd
    57bc:	00000989 	.word	0x00000989
    57c0:	000001e1 	.word	0x000001e1

000057c4 <configure_tc_callbacks>:
{
    57c4:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance, tc_callback,TC_CALLBACK_OVERFLOW);
    57c6:	4c0c      	ldr	r4, [pc, #48]	; (57f8 <configure_tc_callbacks+0x34>)
    57c8:	2200      	movs	r2, #0
    57ca:	490c      	ldr	r1, [pc, #48]	; (57fc <configure_tc_callbacks+0x38>)
    57cc:	0020      	movs	r0, r4
    57ce:	4b0c      	ldr	r3, [pc, #48]	; (5800 <configure_tc_callbacks+0x3c>)
    57d0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    57d2:	6820      	ldr	r0, [r4, #0]
    57d4:	4b0b      	ldr	r3, [pc, #44]	; (5804 <configure_tc_callbacks+0x40>)
    57d6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    57d8:	4b0b      	ldr	r3, [pc, #44]	; (5808 <configure_tc_callbacks+0x44>)
    57da:	5c1a      	ldrb	r2, [r3, r0]
    57dc:	231f      	movs	r3, #31
    57de:	4013      	ands	r3, r2
    57e0:	2201      	movs	r2, #1
    57e2:	0011      	movs	r1, r2
    57e4:	4099      	lsls	r1, r3
    57e6:	4b09      	ldr	r3, [pc, #36]	; (580c <configure_tc_callbacks+0x48>)
    57e8:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    57ea:	2101      	movs	r1, #1
    57ec:	7e63      	ldrb	r3, [r4, #25]
    57ee:	430b      	orrs	r3, r1
    57f0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    57f2:	6823      	ldr	r3, [r4, #0]
    57f4:	735a      	strb	r2, [r3, #13]
}
    57f6:	bd10      	pop	{r4, pc}
    57f8:	20002780 	.word	0x20002780
    57fc:	0000571d 	.word	0x0000571d
    5800:	00003065 	.word	0x00003065
    5804:	00003279 	.word	0x00003279
    5808:	00006360 	.word	0x00006360
    580c:	e000e100 	.word	0xe000e100

00005810 <configure_adc>:
{
    5810:	b510      	push	{r4, lr}
    5812:	b08c      	sub	sp, #48	; 0x30
	adc_get_config_defaults(&config_adc);
    5814:	4668      	mov	r0, sp
    5816:	4b18      	ldr	r3, [pc, #96]	; (5878 <configure_adc+0x68>)
    5818:	4798      	blx	r3
	config_adc.clock_source    = GCLK_GENERATOR_3;
    581a:	4669      	mov	r1, sp
	config_adc.gain_factor     = ADC_GAIN_FACTOR_1X;
    581c:	2300      	movs	r3, #0
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    581e:	804b      	strh	r3, [r1, #2]
	config_adc.gain_factor     = ADC_GAIN_FACTOR_1X;
    5820:	9302      	str	r3, [sp, #8]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
    5822:	3302      	adds	r3, #2
    5824:	704b      	strb	r3, [r1, #1]
	config_adc.differential_mode = true;
    5826:	3b01      	subs	r3, #1
    5828:	74cb      	strb	r3, [r1, #19]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    582a:	2300      	movs	r3, #0
    582c:	730b      	strb	r3, [r1, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_PIN4;
    582e:	2380      	movs	r3, #128	; 0x80
    5830:	00db      	lsls	r3, r3, #3
    5832:	81cb      	strh	r3, [r1, #14]
	config_adc.clock_source    = GCLK_GENERATOR_3;
    5834:	2203      	movs	r2, #3
	config_adc.resolution      = ADC_RESOLUTION_15BIT;
    5836:	2333      	movs	r3, #51	; 0x33
	adc_init(&adc_instance, ADC, &config_adc);
    5838:	4c10      	ldr	r4, [pc, #64]	; (587c <configure_adc+0x6c>)
	config_adc.clock_source    = GCLK_GENERATOR_3;
    583a:	700a      	strb	r2, [r1, #0]
	config_adc.resolution      = ADC_RESOLUTION_15BIT;
    583c:	710b      	strb	r3, [r1, #4]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    583e:	466a      	mov	r2, sp
	adc_init(&adc_instance, ADC, &config_adc);
    5840:	4b0f      	ldr	r3, [pc, #60]	; (5880 <configure_adc+0x70>)
    5842:	4910      	ldr	r1, [pc, #64]	; (5884 <configure_adc+0x74>)
    5844:	0020      	movs	r0, r4
    5846:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    5848:	6823      	ldr	r3, [r4, #0]
    584a:	7e5a      	ldrb	r2, [r3, #25]
    584c:	b252      	sxtb	r2, r2
    584e:	2a00      	cmp	r2, #0
    5850:	dbfb      	blt.n	584a <configure_adc+0x3a>
    5852:	2180      	movs	r1, #128	; 0x80
    5854:	4a0c      	ldr	r2, [pc, #48]	; (5888 <configure_adc+0x78>)
    5856:	0409      	lsls	r1, r1, #16
    5858:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    585a:	220f      	movs	r2, #15
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    585c:	2102      	movs	r1, #2
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    585e:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    5860:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5862:	781a      	ldrb	r2, [r3, #0]
    5864:	430a      	orrs	r2, r1
    5866:	701a      	strb	r2, [r3, #0]
    5868:	6822      	ldr	r2, [r4, #0]
    586a:	7e53      	ldrb	r3, [r2, #25]
    586c:	b25b      	sxtb	r3, r3
    586e:	2b00      	cmp	r3, #0
    5870:	dbfb      	blt.n	586a <configure_adc+0x5a>
}
    5872:	b00c      	add	sp, #48	; 0x30
    5874:	bd10      	pop	{r4, pc}
    5876:	46c0      	nop			; (mov r8, r8)
    5878:	00001839 	.word	0x00001839
    587c:	2000279c 	.word	0x2000279c
    5880:	0000187d 	.word	0x0000187d
    5884:	42004000 	.word	0x42004000
    5888:	e000e100 	.word	0xe000e100

0000588c <main>:

int main(void)
{
    588c:	b5f0      	push	{r4, r5, r6, r7, lr}
    588e:	46de      	mov	lr, fp
    5890:	4657      	mov	r7, sl
    5892:	464e      	mov	r6, r9
    5894:	4645      	mov	r5, r8
	
	
	uint16_t adc_result;
	
	irq_initialize_vectors();
	cpu_irq_enable();
    5896:	2301      	movs	r3, #1
{
    5898:	b5e0      	push	{r5, r6, r7, lr}
	cpu_irq_enable();
    589a:	4c59      	ldr	r4, [pc, #356]	; (5a00 <main+0x174>)
{
    589c:	b08f      	sub	sp, #60	; 0x3c
	cpu_irq_enable();
    589e:	7023      	strb	r3, [r4, #0]
    58a0:	f3bf 8f5f 	dmb	sy
    58a4:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    58a6:	2600      	movs	r6, #0
    58a8:	4d56      	ldr	r5, [pc, #344]	; (5a04 <main+0x178>)
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    58aa:	712b      	strb	r3, [r5, #4]

	// Initialize the sleep manager
	sleepmgr_init();
	
	/* Configuration of clock and board */
	system_init();
    58ac:	4b56      	ldr	r3, [pc, #344]	; (5a08 <main+0x17c>)
		sleepmgr_locks[i] = 0;
    58ae:	702e      	strb	r6, [r5, #0]
    58b0:	706e      	strb	r6, [r5, #1]
    58b2:	70ae      	strb	r6, [r5, #2]
    58b4:	70ee      	strb	r6, [r5, #3]
    58b6:	4798      	blx	r3
	
	configure_adc();
    58b8:	4b54      	ldr	r3, [pc, #336]	; (5a0c <main+0x180>)
    58ba:	4798      	blx	r3
	adc_register_callback(&adc_instance, adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
    58bc:	4f54      	ldr	r7, [pc, #336]	; (5a10 <main+0x184>)
    58be:	2200      	movs	r2, #0
    58c0:	4954      	ldr	r1, [pc, #336]	; (5a14 <main+0x188>)
    58c2:	0038      	movs	r0, r7
    58c4:	4b54      	ldr	r3, [pc, #336]	; (5a18 <main+0x18c>)
    58c6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    58c8:	2201      	movs	r2, #1
    58ca:	7efb      	ldrb	r3, [r7, #27]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
	config->oneshot                    = false;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    58cc:	9605      	str	r6, [sp, #20]
    58ce:	4313      	orrs	r3, r2
    58d0:	76fb      	strb	r3, [r7, #27]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    58d2:	466b      	mov	r3, sp
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    58d4:	466a      	mov	r2, sp
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    58d6:	709e      	strb	r6, [r3, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    58d8:	719e      	strb	r6, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    58da:	2300      	movs	r3, #0
    58dc:	8116      	strh	r6, [r2, #8]
	config->run_in_standby             = false;
    58de:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    58e0:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    58e2:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    58e4:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    58e6:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    58e8:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    58ea:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    58ec:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    58ee:	2200      	movs	r2, #0
    58f0:	2300      	movs	r3, #0
    58f2:	9208      	str	r2, [sp, #32]
    58f4:	9309      	str	r3, [sp, #36]	; 0x24
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    58f6:	466b      	mov	r3, sp
	s_configTc.clock_source = GCLK_GENERATOR_3;
    58f8:	466a      	mov	r2, sp
    58fa:	851e      	strh	r6, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    58fc:	855e      	strh	r6, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    58fe:	859e      	strh	r6, [r3, #44]	; 0x2c
    5900:	2303      	movs	r3, #3
    5902:	7013      	strb	r3, [r2, #0]
	s_configTc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
    5904:	2380      	movs	r3, #128	; 0x80
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    5906:	9606      	str	r6, [sp, #24]
	tc_init(&tc_instance, TC4, &s_configTc);
    5908:	4e44      	ldr	r6, [pc, #272]	; (5a1c <main+0x190>)
	s_configTc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
    590a:	00db      	lsls	r3, r3, #3
    590c:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_instance, TC4, &s_configTc);
    590e:	4944      	ldr	r1, [pc, #272]	; (5a20 <main+0x194>)
    5910:	4b44      	ldr	r3, [pc, #272]	; (5a24 <main+0x198>)
    5912:	0030      	movs	r0, r6
    5914:	4798      	blx	r3
    5916:	6833      	ldr	r3, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5918:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    591a:	b252      	sxtb	r2, r2
    591c:	2a00      	cmp	r2, #0
    591e:	dbfb      	blt.n	5918 <main+0x8c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    5920:	2102      	movs	r1, #2
    5922:	881a      	ldrh	r2, [r3, #0]
    5924:	430a      	orrs	r2, r1
    5926:	801a      	strh	r2, [r3, #0]
	configure_adc_callbacks();
	
	configure_tc();
	configure_tc_callbacks();
    5928:	4b3f      	ldr	r3, [pc, #252]	; (5a28 <main+0x19c>)
    592a:	4798      	blx	r3
	
	system_interrupt_set_priority(ADC_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_1);
    592c:	4e3f      	ldr	r6, [pc, #252]	; (5a2c <main+0x1a0>)
    592e:	2101      	movs	r1, #1
    5930:	2017      	movs	r0, #23
    5932:	47b0      	blx	r6
	system_interrupt_set_priority(TC4_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    5934:	2100      	movs	r1, #0
    5936:	2013      	movs	r0, #19
    5938:	47b0      	blx	r6
	cpu_irq_enable();
    593a:	2301      	movs	r3, #1
    593c:	7023      	strb	r3, [r4, #0]
    593e:	f3bf 8f5f 	dmb	sy
    5942:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	ui_init();
    5944:	4b3a      	ldr	r3, [pc, #232]	; (5a30 <main+0x1a4>)
    5946:	4798      	blx	r3
	ui_powerdown();
    5948:	4b3a      	ldr	r3, [pc, #232]	; (5a34 <main+0x1a8>)
    594a:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    594c:	4b3a      	ldr	r3, [pc, #232]	; (5a38 <main+0x1ac>)
    594e:	4798      	blx	r3

	adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    5950:	2280      	movs	r2, #128	; 0x80
    5952:	0038      	movs	r0, r7
    5954:	4b39      	ldr	r3, [pc, #228]	; (5a3c <main+0x1b0>)
    5956:	0152      	lsls	r2, r2, #5
    5958:	4939      	ldr	r1, [pc, #228]	; (5a40 <main+0x1b4>)
    595a:	4798      	blx	r3
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    595c:	4b39      	ldr	r3, [pc, #228]	; (5a44 <main+0x1b8>)
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    595e:	2600      	movs	r6, #0
    5960:	4699      	mov	r9, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    5962:	230f      	movs	r3, #15
    5964:	4698      	mov	r8, r3

	switch (sleep_mode) {
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    5966:	4b38      	ldr	r3, [pc, #224]	; (5a48 <main+0x1bc>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    5968:	2701      	movs	r7, #1
    596a:	469c      	mov	ip, r3
    596c:	2304      	movs	r3, #4
    596e:	469b      	mov	fp, r3
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    5970:	4b36      	ldr	r3, [pc, #216]	; (5a4c <main+0x1c0>)
    5972:	469a      	mov	sl, r3
  __ASM volatile ("cpsid i" : : : "memory");
    5974:	b672      	cpsid	i
    5976:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    597a:	7026      	strb	r6, [r4, #0]
	while (!(*lock_ptr)) {
    597c:	782b      	ldrb	r3, [r5, #0]
    597e:	2b00      	cmp	r3, #0
    5980:	d10b      	bne.n	599a <main+0x10e>
    5982:	2100      	movs	r1, #0
    5984:	002a      	movs	r2, r5
    5986:	e000      	b.n	598a <main+0xfe>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    5988:	0019      	movs	r1, r3
		lock_ptr++;
    598a:	3201      	adds	r2, #1
	while (!(*lock_ptr)) {
    598c:	7810      	ldrb	r0, [r2, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    598e:	1c4b      	adds	r3, r1, #1
    5990:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    5992:	2800      	cmp	r0, #0
    5994:	d0f8      	beq.n	5988 <main+0xfc>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    5996:	2b00      	cmp	r3, #0
    5998:	d104      	bne.n	59a4 <main+0x118>
		cpu_irq_enable();
    599a:	7027      	strb	r7, [r4, #0]
    599c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    59a0:	b662      	cpsie	i
    59a2:	e7e7      	b.n	5974 <main+0xe8>
  __ASM volatile ("cpsid i" : : : "memory");
    59a4:	b672      	cpsid	i
    59a6:	f3bf 8f5f 	dmb	sy
	uint32_t rev = DSU->DID.reg;
    59aa:	464b      	mov	r3, r9
	rev = rev >> DSU_DID_REVISION_Pos;
    59ac:	4642      	mov	r2, r8

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    59ae:	7026      	strb	r6, [r4, #0]
	uint32_t rev = DSU->DID.reg;
    59b0:	699b      	ldr	r3, [r3, #24]
    59b2:	0a1b      	lsrs	r3, r3, #8
	rev = rev >> DSU_DID_REVISION_Pos;
    59b4:	4013      	ands	r3, r2
	if (rev < _SYSTEM_MCU_REVISION_D) {
    59b6:	2b02      	cmp	r3, #2
    59b8:	d806      	bhi.n	59c8 <main+0x13c>
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    59ba:	4653      	mov	r3, sl
    59bc:	685a      	ldr	r2, [r3, #4]
    59be:	23c0      	movs	r3, #192	; 0xc0
    59c0:	009b      	lsls	r3, r3, #2
    59c2:	4313      	orrs	r3, r2
    59c4:	4652      	mov	r2, sl
    59c6:	6053      	str	r3, [r2, #4]
	switch (sleep_mode) {
    59c8:	2902      	cmp	r1, #2
    59ca:	d90f      	bls.n	59ec <main+0x160>
    59cc:	2903      	cmp	r1, #3
    59ce:	d105      	bne.n	59dc <main+0x150>
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    59d0:	4663      	mov	r3, ip
    59d2:	465a      	mov	r2, fp
    59d4:	691b      	ldr	r3, [r3, #16]
    59d6:	4313      	orrs	r3, r2
    59d8:	4662      	mov	r2, ip
    59da:	6113      	str	r3, [r2, #16]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    59dc:	7027      	strb	r7, [r4, #0]
    59de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    59e2:	b662      	cpsie	i
  __ASM volatile ("dsb");
    59e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    59e8:	bf30      	wfi
    59ea:	e7c3      	b.n	5974 <main+0xe8>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    59ec:	4663      	mov	r3, ip
    59ee:	465a      	mov	r2, fp
    59f0:	691b      	ldr	r3, [r3, #16]
    59f2:	4393      	bics	r3, r2
    59f4:	4662      	mov	r2, ip
    59f6:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    59f8:	4b15      	ldr	r3, [pc, #84]	; (5a50 <main+0x1c4>)
    59fa:	7059      	strb	r1, [r3, #1]
    59fc:	e7ee      	b.n	59dc <main+0x150>
    59fe:	46c0      	nop			; (mov r8, r8)
    5a00:	200000e8 	.word	0x200000e8
    5a04:	20000344 	.word	0x20000344
    5a08:	00003039 	.word	0x00003039
    5a0c:	00005811 	.word	0x00005811
    5a10:	2000279c 	.word	0x2000279c
    5a14:	00005749 	.word	0x00005749
    5a18:	00001d51 	.word	0x00001d51
    5a1c:	20002780 	.word	0x20002780
    5a20:	42003000 	.word	0x42003000
    5a24:	000032d5 	.word	0x000032d5
    5a28:	000057c5 	.word	0x000057c5
    5a2c:	00002f1d 	.word	0x00002f1d
    5a30:	0000012d 	.word	0x0000012d
    5a34:	00000189 	.word	0x00000189
    5a38:	00001015 	.word	0x00001015
    5a3c:	00001d65 	.word	0x00001d65
    5a40:	20000744 	.word	0x20000744
    5a44:	41002000 	.word	0x41002000
    5a48:	e000ed00 	.word	0xe000ed00
    5a4c:	41004000 	.word	0x41004000
    5a50:	40000400 	.word	0x40000400

00005a54 <main_suspend_action>:
    5a54:	b510      	push	{r4, lr}
    5a56:	4b01      	ldr	r3, [pc, #4]	; (5a5c <main_suspend_action+0x8>)
    5a58:	4798      	blx	r3
    5a5a:	bd10      	pop	{r4, pc}
    5a5c:	00000189 	.word	0x00000189

00005a60 <main_resume_action>:
{
	ui_powerdown();
}

void main_resume_action(void)
{
    5a60:	b510      	push	{r4, lr}
	ui_wakeup();
    5a62:	4b01      	ldr	r3, [pc, #4]	; (5a68 <main_resume_action+0x8>)
    5a64:	4798      	blx	r3
}
    5a66:	bd10      	pop	{r4, pc}
    5a68:	000001b9 	.word	0x000001b9

00005a6c <main_sof_action>:

void main_sof_action(void)
{
    5a6c:	b510      	push	{r4, lr}
	if (!main_b_cdc_enable)
    5a6e:	4b04      	ldr	r3, [pc, #16]	; (5a80 <main_sof_action+0x14>)
    5a70:	781b      	ldrb	r3, [r3, #0]
    5a72:	2b00      	cmp	r3, #0
    5a74:	d003      	beq.n	5a7e <main_sof_action+0x12>
		return;
	ui_process(udd_get_frame_number());
    5a76:	4b03      	ldr	r3, [pc, #12]	; (5a84 <main_sof_action+0x18>)
    5a78:	4798      	blx	r3
    5a7a:	4b03      	ldr	r3, [pc, #12]	; (5a88 <main_sof_action+0x1c>)
    5a7c:	4798      	blx	r3
}
    5a7e:	bd10      	pop	{r4, pc}
    5a80:	2000033e 	.word	0x2000033e
    5a84:	00003f81 	.word	0x00003f81
    5a88:	000001e5 	.word	0x000001e5

00005a8c <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    5a8c:	b510      	push	{r4, lr}
	ui_powerdown();
    5a8e:	4b01      	ldr	r3, [pc, #4]	; (5a94 <main_suspend_lpm_action+0x8>)
    5a90:	4798      	blx	r3
}
    5a92:	bd10      	pop	{r4, pc}
    5a94:	00000189 	.word	0x00000189

00005a98 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    5a98:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    5a9a:	4b01      	ldr	r3, [pc, #4]	; (5aa0 <main_remotewakeup_lpm_disable+0x8>)
    5a9c:	4798      	blx	r3
}
    5a9e:	bd10      	pop	{r4, pc}
    5aa0:	000001a9 	.word	0x000001a9

00005aa4 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    5aa4:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    5aa6:	4b01      	ldr	r3, [pc, #4]	; (5aac <main_remotewakeup_lpm_enable+0x8>)
    5aa8:	4798      	blx	r3
}
    5aaa:	bd10      	pop	{r4, pc}
    5aac:	00000199 	.word	0x00000199

00005ab0 <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    5ab0:	2201      	movs	r2, #1
{
    5ab2:	b510      	push	{r4, lr}
	main_b_cdc_enable = true;
    5ab4:	4b02      	ldr	r3, [pc, #8]	; (5ac0 <main_cdc_enable+0x10>)
    5ab6:	701a      	strb	r2, [r3, #0]
	// Open communication
	uart_open(port);
    5ab8:	4b02      	ldr	r3, [pc, #8]	; (5ac4 <main_cdc_enable+0x14>)
    5aba:	4798      	blx	r3
	return true;
}
    5abc:	2001      	movs	r0, #1
    5abe:	bd10      	pop	{r4, pc}
    5ac0:	2000033e 	.word	0x2000033e
    5ac4:	00005d5d 	.word	0x00005d5d

00005ac8 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    5ac8:	2200      	movs	r2, #0
{
    5aca:	b510      	push	{r4, lr}
	main_b_cdc_enable = false;
    5acc:	4b02      	ldr	r3, [pc, #8]	; (5ad8 <main_cdc_disable+0x10>)
    5ace:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
    5ad0:	4b02      	ldr	r3, [pc, #8]	; (5adc <main_cdc_disable+0x14>)
    5ad2:	4798      	blx	r3
}
    5ad4:	bd10      	pop	{r4, pc}
    5ad6:	46c0      	nop			; (mov r8, r8)
    5ad8:	2000033e 	.word	0x2000033e
    5adc:	00005d95 	.word	0x00005d95

00005ae0 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    5ae0:	b510      	push	{r4, lr}
	if (b_enable) {
    5ae2:	2900      	cmp	r1, #0
    5ae4:	d102      	bne.n	5aec <main_cdc_set_dtr+0xc>
		// Host terminal has open COM
		ui_com_open(port);
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    5ae6:	4b03      	ldr	r3, [pc, #12]	; (5af4 <main_cdc_set_dtr+0x14>)
    5ae8:	4798      	blx	r3
	}
}
    5aea:	bd10      	pop	{r4, pc}
		ui_com_open(port);
    5aec:	4b02      	ldr	r3, [pc, #8]	; (5af8 <main_cdc_set_dtr+0x18>)
    5aee:	4798      	blx	r3
    5af0:	e7fb      	b.n	5aea <main_cdc_set_dtr+0xa>
    5af2:	46c0      	nop			; (mov r8, r8)
    5af4:	000001cd 	.word	0x000001cd
    5af8:	000001c9 	.word	0x000001c9

00005afc <usart_rx_callback>:
 * Called by USART driver when receiving is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_rx_callback(struct usart_module *const module)
{
    5afc:	b510      	push	{r4, lr}
	/* Data received */
	ui_com_tx_start();
    5afe:	4b0c      	ldr	r3, [pc, #48]	; (5b30 <usart_rx_callback+0x34>)
    5b00:	4798      	blx	r3

	/* Transfer UART RX fifo to CDC TX */
	if (!udi_cdc_is_tx_ready()) {
    5b02:	4b0c      	ldr	r3, [pc, #48]	; (5b34 <usart_rx_callback+0x38>)
    5b04:	4798      	blx	r3
    5b06:	2800      	cmp	r0, #0
    5b08:	d00b      	beq.n	5b22 <usart_rx_callback+0x26>
		/* Fifo full */
		udi_cdc_signal_overrun();
		ui_com_overflow();
	} else {
		udi_cdc_putc(rx_data);
    5b0a:	4c0b      	ldr	r4, [pc, #44]	; (5b38 <usart_rx_callback+0x3c>)
    5b0c:	4b0b      	ldr	r3, [pc, #44]	; (5b3c <usart_rx_callback+0x40>)
    5b0e:	7820      	ldrb	r0, [r4, #0]
    5b10:	4798      	blx	r3
	}

	ui_com_tx_stop();
    5b12:	4b0b      	ldr	r3, [pc, #44]	; (5b40 <usart_rx_callback+0x44>)
    5b14:	4798      	blx	r3

	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    5b16:	2201      	movs	r2, #1
    5b18:	0021      	movs	r1, r4
    5b1a:	4b0a      	ldr	r3, [pc, #40]	; (5b44 <usart_rx_callback+0x48>)
    5b1c:	480a      	ldr	r0, [pc, #40]	; (5b48 <usart_rx_callback+0x4c>)
    5b1e:	4798      	blx	r3

	return;
}
    5b20:	bd10      	pop	{r4, pc}
		udi_cdc_signal_overrun();
    5b22:	4b0a      	ldr	r3, [pc, #40]	; (5b4c <usart_rx_callback+0x50>)
    5b24:	4798      	blx	r3
		ui_com_overflow();
    5b26:	4b0a      	ldr	r3, [pc, #40]	; (5b50 <usart_rx_callback+0x54>)
    5b28:	4798      	blx	r3
    5b2a:	4c03      	ldr	r4, [pc, #12]	; (5b38 <usart_rx_callback+0x3c>)
    5b2c:	e7f1      	b.n	5b12 <usart_rx_callback+0x16>
    5b2e:	46c0      	nop			; (mov r8, r8)
    5b30:	000001d9 	.word	0x000001d9
    5b34:	00000bed 	.word	0x00000bed
    5b38:	2000033f 	.word	0x2000033f
    5b3c:	00000d8d 	.word	0x00000d8d
    5b40:	000001dd 	.word	0x000001dd
    5b44:	0000289d 	.word	0x0000289d
    5b48:	20002800 	.word	0x20002800
    5b4c:	00000989 	.word	0x00000989
    5b50:	000001e1 	.word	0x000001e1

00005b54 <usart_tx_callback>:
{
    5b54:	b570      	push	{r4, r5, r6, lr}
	tx_callback_flag = 1;
    5b56:	2501      	movs	r5, #1
    5b58:	4c0d      	ldr	r4, [pc, #52]	; (5b90 <usart_tx_callback+0x3c>)
	if (udi_cdc_is_rx_ready()) {
    5b5a:	4b0e      	ldr	r3, [pc, #56]	; (5b94 <usart_tx_callback+0x40>)
	tx_callback_flag = 1;
    5b5c:	7025      	strb	r5, [r4, #0]
	if (udi_cdc_is_rx_ready()) {
    5b5e:	4798      	blx	r3
    5b60:	2800      	cmp	r0, #0
    5b62:	d109      	bne.n	5b78 <usart_tx_callback+0x24>
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    5b64:	2231      	movs	r2, #49	; 0x31
    5b66:	490c      	ldr	r1, [pc, #48]	; (5b98 <usart_tx_callback+0x44>)
    5b68:	5c8b      	ldrb	r3, [r1, r2]
    5b6a:	43ab      	bics	r3, r5
    5b6c:	548b      	strb	r3, [r1, r2]
		ui_com_rx_stop();
    5b6e:	4b0b      	ldr	r3, [pc, #44]	; (5b9c <usart_tx_callback+0x48>)
    5b70:	4798      	blx	r3
	tx_callback_flag = 0;
    5b72:	2300      	movs	r3, #0
    5b74:	7023      	strb	r3, [r4, #0]
}
    5b76:	bd70      	pop	{r4, r5, r6, pc}
		ui_com_rx_start();
    5b78:	4b09      	ldr	r3, [pc, #36]	; (5ba0 <usart_tx_callback+0x4c>)
    5b7a:	4798      	blx	r3
		tx_data = udi_cdc_getc();
    5b7c:	4b09      	ldr	r3, [pc, #36]	; (5ba4 <usart_tx_callback+0x50>)
    5b7e:	4798      	blx	r3
    5b80:	4909      	ldr	r1, [pc, #36]	; (5ba8 <usart_tx_callback+0x54>)
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    5b82:	2201      	movs	r2, #1
		tx_data = udi_cdc_getc();
    5b84:	7008      	strb	r0, [r1, #0]
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    5b86:	4b09      	ldr	r3, [pc, #36]	; (5bac <usart_tx_callback+0x58>)
    5b88:	4803      	ldr	r0, [pc, #12]	; (5b98 <usart_tx_callback+0x44>)
    5b8a:	4798      	blx	r3
    5b8c:	e7f1      	b.n	5b72 <usart_tx_callback+0x1e>
    5b8e:	46c0      	nop			; (mov r8, r8)
    5b90:	20000340 	.word	0x20000340
    5b94:	00000a01 	.word	0x00000a01
    5b98:	20002800 	.word	0x20002800
    5b9c:	000001d5 	.word	0x000001d5
    5ba0:	000001d1 	.word	0x000001d1
    5ba4:	00000a59 	.word	0x00000a59
    5ba8:	20000341 	.word	0x20000341
    5bac:	00002851 	.word	0x00002851

00005bb0 <uart_rx_notify>:

void uart_rx_notify(uint8_t port)
{
    5bb0:	b510      	push	{r4, lr}
	UNUSED(port);
	if (!tx_callback_flag) {
    5bb2:	4b0a      	ldr	r3, [pc, #40]	; (5bdc <uart_rx_notify+0x2c>)
    5bb4:	781b      	ldrb	r3, [r3, #0]
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	d10f      	bne.n	5bda <uart_rx_notify+0x2a>
		/* Transmit first data */
		ui_com_rx_start();
    5bba:	4b09      	ldr	r3, [pc, #36]	; (5be0 <uart_rx_notify+0x30>)
    5bbc:	4798      	blx	r3
	module->callback_enable_mask |= (1 << callback_type);
    5bbe:	2231      	movs	r2, #49	; 0x31
    5bc0:	2101      	movs	r1, #1
    5bc2:	4c08      	ldr	r4, [pc, #32]	; (5be4 <uart_rx_notify+0x34>)
    5bc4:	5ca3      	ldrb	r3, [r4, r2]
    5bc6:	430b      	orrs	r3, r1
    5bc8:	54a3      	strb	r3, [r4, r2]
		usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
		tx_data = udi_cdc_getc();
    5bca:	4b07      	ldr	r3, [pc, #28]	; (5be8 <uart_rx_notify+0x38>)
    5bcc:	4798      	blx	r3
    5bce:	4907      	ldr	r1, [pc, #28]	; (5bec <uart_rx_notify+0x3c>)
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    5bd0:	2201      	movs	r2, #1
		tx_data = udi_cdc_getc();
    5bd2:	7008      	strb	r0, [r1, #0]
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    5bd4:	4b06      	ldr	r3, [pc, #24]	; (5bf0 <uart_rx_notify+0x40>)
    5bd6:	0020      	movs	r0, r4
    5bd8:	4798      	blx	r3
	}
}
    5bda:	bd10      	pop	{r4, pc}
    5bdc:	20000340 	.word	0x20000340
    5be0:	000001d1 	.word	0x000001d1
    5be4:	20002800 	.word	0x20002800
    5be8:	00000a59 	.word	0x00000a59
    5bec:	20000341 	.word	0x20000341
    5bf0:	00002851 	.word	0x00002851

00005bf4 <uart_config>:
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
    5bf4:	22ff      	movs	r2, #255	; 0xff

void uart_config(uint8_t port,usb_cdc_line_coding_t *cfg)
{
    5bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	config->data_order       = USART_DATAORDER_LSB;
    5bf8:	4c4b      	ldr	r4, [pc, #300]	; (5d28 <uart_config+0x134>)
    5bfa:	2380      	movs	r3, #128	; 0x80
	config->parity           = USART_PARITY_NONE;
    5bfc:	8122      	strh	r2, [r4, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
    5bfe:	2296      	movs	r2, #150	; 0x96
    5c00:	0192      	lsls	r2, r2, #6
    5c02:	6222      	str	r2, [r4, #32]
	config->receiver_enable  = true;
    5c04:	2202      	movs	r2, #2
    5c06:	32ff      	adds	r2, #255	; 0xff
    5c08:	6262      	str	r2, [r4, #36]	; 0x24
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    5c0a:	2288      	movs	r2, #136	; 0x88
	config->data_order       = USART_DATAORDER_LSB;
    5c0c:	05db      	lsls	r3, r3, #23
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    5c0e:	0352      	lsls	r2, r2, #13
	config->data_order       = USART_DATAORDER_LSB;
    5c10:	6023      	str	r3, [r4, #0]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    5c12:	60e2      	str	r2, [r4, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5c14:	2300      	movs	r3, #0
	config->run_in_standby   = false;
    5c16:	222c      	movs	r2, #44	; 0x2c
    5c18:	54a3      	strb	r3, [r4, r2]
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5c1a:	2200      	movs	r2, #0
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5c1c:	76e2      	strb	r2, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5c1e:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5c20:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5c22:	7662      	strb	r2, [r4, #25]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5c24:	7762      	strb	r2, [r4, #29]
	UNUSED(port);
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
	usart_conf.generator_source = GCLK_GENERATOR_3;
    5c26:	2203      	movs	r2, #3
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5c28:	6063      	str	r3, [r4, #4]
	config->stopbits         = USART_STOPBITS_1;
    5c2a:	72a3      	strb	r3, [r4, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5c2c:	72e3      	strb	r3, [r4, #11]
	config->ext_clock_freq   = 0;
    5c2e:	62a3      	str	r3, [r4, #40]	; 0x28
	config->pinmux_pad0      = PINMUX_DEFAULT;
    5c30:	6323      	str	r3, [r4, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    5c32:	6363      	str	r3, [r4, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    5c34:	63a3      	str	r3, [r4, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    5c36:	63e3      	str	r3, [r4, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5c38:	6163      	str	r3, [r4, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5c3a:	8223      	strh	r3, [r4, #16]
	config->receive_pulse_length                    = 19;
    5c3c:	3313      	adds	r3, #19
    5c3e:	76a3      	strb	r3, [r4, #26]
    5c40:	331a      	adds	r3, #26
    5c42:	54e2      	strb	r2, [r4, r3]

	switch (cfg->bCharFormat) {
    5c44:	790b      	ldrb	r3, [r1, #4]
    5c46:	2b02      	cmp	r3, #2
    5c48:	d101      	bne.n	5c4e <uart_config+0x5a>
	case CDC_STOP_BITS_2:
		usart_conf.stopbits = USART_STOPBITS_2;
    5c4a:	333e      	adds	r3, #62	; 0x3e
    5c4c:	72a3      	strb	r3, [r4, #10]
		/* Default stop bit = 1 stop bit */
		usart_conf.stopbits = USART_STOPBITS_1;
		break;
	}

	switch (cfg->bParityType) {
    5c4e:	794b      	ldrb	r3, [r1, #5]
    5c50:	2b01      	cmp	r3, #1
    5c52:	d065      	beq.n	5d20 <uart_config+0x12c>
    5c54:	2b02      	cmp	r3, #2
    5c56:	d060      	beq.n	5d1a <uart_config+0x126>
	default:
		usart_conf.parity = USART_PARITY_NONE;
		break;
	}

	switch(cfg->bDataBits) {
    5c58:	798b      	ldrb	r3, [r1, #6]
    5c5a:	2b06      	cmp	r3, #6
    5c5c:	d05b      	beq.n	5d16 <uart_config+0x122>
    5c5e:	2b07      	cmp	r3, #7
    5c60:	d059      	beq.n	5d16 <uart_config+0x122>
    5c62:	2b05      	cmp	r3, #5
    5c64:	d057      	beq.n	5d16 <uart_config+0x122>
		usart_conf.character_size = USART_CHARACTER_SIZE_8BIT;
		break;
	}

	/* Options for USART. */
	usart_conf.baudrate = LE32_TO_CPU(cfg->dwDTERate);
    5c66:	784a      	ldrb	r2, [r1, #1]
    5c68:	780b      	ldrb	r3, [r1, #0]
    5c6a:	0212      	lsls	r2, r2, #8
    5c6c:	431a      	orrs	r2, r3
    5c6e:	788b      	ldrb	r3, [r1, #2]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5c70:	4d2e      	ldr	r5, [pc, #184]	; (5d2c <uart_config+0x138>)
    5c72:	041b      	lsls	r3, r3, #16
    5c74:	431a      	orrs	r2, r3
    5c76:	78cb      	ldrb	r3, [r1, #3]
    5c78:	682e      	ldr	r6, [r5, #0]
    5c7a:	061b      	lsls	r3, r3, #24
    5c7c:	4313      	orrs	r3, r2
    5c7e:	6223      	str	r3, [r4, #32]
	usart_conf.mux_setting = CONF_USART_MUX_SETTING;
    5c80:	2380      	movs	r3, #128	; 0x80
    5c82:	035b      	lsls	r3, r3, #13
    5c84:	60e3      	str	r3, [r4, #12]
	usart_conf.pinmux_pad0 = CONF_USART_PINMUX_PAD0;
    5c86:	4b2a      	ldr	r3, [pc, #168]	; (5d30 <uart_config+0x13c>)

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5c88:	0030      	movs	r0, r6
    5c8a:	6323      	str	r3, [r4, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_USART_PINMUX_PAD1;
    5c8c:	4b29      	ldr	r3, [pc, #164]	; (5d34 <uart_config+0x140>)
    5c8e:	4f2a      	ldr	r7, [pc, #168]	; (5d38 <uart_config+0x144>)
    5c90:	6363      	str	r3, [r4, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_USART_PINMUX_PAD2;
    5c92:	2301      	movs	r3, #1
    5c94:	425b      	negs	r3, r3
    5c96:	63a3      	str	r3, [r4, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_USART_PINMUX_PAD3;
    5c98:	63e3      	str	r3, [r4, #60]	; 0x3c
    5c9a:	47b8      	blx	r7
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5c9c:	231f      	movs	r3, #31
    5c9e:	4018      	ands	r0, r3
    5ca0:	3b1e      	subs	r3, #30
    5ca2:	2280      	movs	r2, #128	; 0x80
    5ca4:	4083      	lsls	r3, r0
    5ca6:	4925      	ldr	r1, [pc, #148]	; (5d3c <uart_config+0x148>)
    5ca8:	508b      	str	r3, [r1, r2]
    5caa:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5cac:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d1fc      	bne.n	5cac <uart_config+0xb8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    5cb2:	2202      	movs	r2, #2
    5cb4:	6833      	ldr	r3, [r6, #0]
	usart_disable(&usart_module_edbg);
	usart_init(&usart_module_edbg, CONF_USART_BASE, &usart_conf);
    5cb6:	4922      	ldr	r1, [pc, #136]	; (5d40 <uart_config+0x14c>)
    5cb8:	4393      	bics	r3, r2
    5cba:	6033      	str	r3, [r6, #0]
    5cbc:	0022      	movs	r2, r4
    5cbe:	4b21      	ldr	r3, [pc, #132]	; (5d44 <uart_config+0x150>)
    5cc0:	0028      	movs	r0, r5
    5cc2:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5cc4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5cc6:	0020      	movs	r0, r4
    5cc8:	47b8      	blx	r7
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5cca:	231f      	movs	r3, #31
    5ccc:	4018      	ands	r0, r3
    5cce:	3b1e      	subs	r3, #30
    5cd0:	4083      	lsls	r3, r0
    5cd2:	4a1a      	ldr	r2, [pc, #104]	; (5d3c <uart_config+0x148>)
    5cd4:	6013      	str	r3, [r2, #0]
    5cd6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5cd8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d1fc      	bne.n	5cd8 <uart_config+0xe4>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5cde:	2202      	movs	r2, #2
    5ce0:	6823      	ldr	r3, [r4, #0]
	usart_enable(&usart_module_edbg);

	/* Enable interrupts */
	usart_register_callback(&usart_module_edbg, usart_tx_callback,
    5ce2:	0028      	movs	r0, r5
    5ce4:	4313      	orrs	r3, r2
    5ce6:	6023      	str	r3, [r4, #0]
    5ce8:	2431      	movs	r4, #49	; 0x31
    5cea:	4e17      	ldr	r6, [pc, #92]	; (5d48 <uart_config+0x154>)
    5cec:	2200      	movs	r2, #0
    5cee:	4917      	ldr	r1, [pc, #92]	; (5d4c <uart_config+0x158>)
    5cf0:	47b0      	blx	r6
    5cf2:	2201      	movs	r2, #1
    5cf4:	5d2b      	ldrb	r3, [r5, r4]
			USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_module_edbg, usart_rx_callback,
    5cf6:	0028      	movs	r0, r5
    5cf8:	4313      	orrs	r3, r2
    5cfa:	4915      	ldr	r1, [pc, #84]	; (5d50 <uart_config+0x15c>)
    5cfc:	2201      	movs	r2, #1
    5cfe:	552b      	strb	r3, [r5, r4]
    5d00:	47b0      	blx	r6
    5d02:	2202      	movs	r2, #2
    5d04:	5d2b      	ldrb	r3, [r5, r4]
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_RECEIVED);
	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    5d06:	0028      	movs	r0, r5
    5d08:	4313      	orrs	r3, r2
    5d0a:	552b      	strb	r3, [r5, r4]
    5d0c:	2201      	movs	r2, #1
    5d0e:	4911      	ldr	r1, [pc, #68]	; (5d54 <uart_config+0x160>)
    5d10:	4b11      	ldr	r3, [pc, #68]	; (5d58 <uart_config+0x164>)
    5d12:	4798      	blx	r3
}
    5d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    5d16:	72e3      	strb	r3, [r4, #11]
		break;
    5d18:	e7a5      	b.n	5c66 <uart_config+0x72>
		usart_conf.parity = USART_PARITY_EVEN;
    5d1a:	2300      	movs	r3, #0
    5d1c:	8123      	strh	r3, [r4, #8]
		break;
    5d1e:	e79b      	b.n	5c58 <uart_config+0x64>
		usart_conf.parity = USART_PARITY_ODD;
    5d20:	2380      	movs	r3, #128	; 0x80
    5d22:	019b      	lsls	r3, r3, #6
    5d24:	8123      	strh	r3, [r4, #8]
		break;
    5d26:	e797      	b.n	5c58 <uart_config+0x64>
    5d28:	200027c0 	.word	0x200027c0
    5d2c:	20002800 	.word	0x20002800
    5d30:	00160002 	.word	0x00160002
    5d34:	00170002 	.word	0x00170002
    5d38:	0000246d 	.word	0x0000246d
    5d3c:	e000e100 	.word	0xe000e100
    5d40:	42001400 	.word	0x42001400
    5d44:	000024fd 	.word	0x000024fd
    5d48:	00002839 	.word	0x00002839
    5d4c:	00005b55 	.word	0x00005b55
    5d50:	00005afd 	.word	0x00005afd
    5d54:	2000033f 	.word	0x2000033f
    5d58:	0000289d 	.word	0x0000289d

00005d5c <uart_open>:

void uart_open(uint8_t port)
{
    5d5c:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d5e:	4d0a      	ldr	r5, [pc, #40]	; (5d88 <uart_open+0x2c>)
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5d60:	4b0a      	ldr	r3, [pc, #40]	; (5d8c <uart_open+0x30>)
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d62:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5d64:	0020      	movs	r0, r4
    5d66:	4798      	blx	r3
    5d68:	231f      	movs	r3, #31
    5d6a:	4018      	ands	r0, r3
    5d6c:	3b1e      	subs	r3, #30
    5d6e:	4083      	lsls	r3, r0
    5d70:	4a07      	ldr	r2, [pc, #28]	; (5d90 <uart_open+0x34>)
    5d72:	6013      	str	r3, [r2, #0]
    5d74:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5d76:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d1fc      	bne.n	5d76 <uart_open+0x1a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5d7c:	2202      	movs	r2, #2
    5d7e:	6823      	ldr	r3, [r4, #0]
    5d80:	4313      	orrs	r3, r2
    5d82:	6023      	str	r3, [r4, #0]
	UNUSED(port);

	usart_enable(&usart_module_edbg);
}
    5d84:	bd70      	pop	{r4, r5, r6, pc}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	20002800 	.word	0x20002800
    5d8c:	0000246d 	.word	0x0000246d
    5d90:	e000e100 	.word	0xe000e100

00005d94 <uart_close>:

void uart_close(uint8_t port)
{
    5d94:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d96:	4d0a      	ldr	r5, [pc, #40]	; (5dc0 <uart_close+0x2c>)
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5d98:	4b0a      	ldr	r3, [pc, #40]	; (5dc4 <uart_close+0x30>)
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d9a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5d9c:	0020      	movs	r0, r4
    5d9e:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5da0:	231f      	movs	r3, #31
    5da2:	4018      	ands	r0, r3
    5da4:	3b1e      	subs	r3, #30
    5da6:	2280      	movs	r2, #128	; 0x80
    5da8:	4083      	lsls	r3, r0
    5daa:	4907      	ldr	r1, [pc, #28]	; (5dc8 <uart_close+0x34>)
    5dac:	508b      	str	r3, [r1, r2]
    5dae:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5db0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5db2:	2b00      	cmp	r3, #0
    5db4:	d1fc      	bne.n	5db0 <uart_close+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    5db6:	2202      	movs	r2, #2
    5db8:	6823      	ldr	r3, [r4, #0]
    5dba:	4393      	bics	r3, r2
    5dbc:	6023      	str	r3, [r4, #0]
	UNUSED(port);
	/* Close RS232 communication */
	usart_disable(&usart_module_edbg);
}
    5dbe:	bd70      	pop	{r4, r5, r6, pc}
    5dc0:	20002800 	.word	0x20002800
    5dc4:	0000246d 	.word	0x0000246d
    5dc8:	e000e100 	.word	0xe000e100

00005dcc <__udivsi3>:
    5dcc:	2200      	movs	r2, #0
    5dce:	0843      	lsrs	r3, r0, #1
    5dd0:	428b      	cmp	r3, r1
    5dd2:	d374      	bcc.n	5ebe <__udivsi3+0xf2>
    5dd4:	0903      	lsrs	r3, r0, #4
    5dd6:	428b      	cmp	r3, r1
    5dd8:	d35f      	bcc.n	5e9a <__udivsi3+0xce>
    5dda:	0a03      	lsrs	r3, r0, #8
    5ddc:	428b      	cmp	r3, r1
    5dde:	d344      	bcc.n	5e6a <__udivsi3+0x9e>
    5de0:	0b03      	lsrs	r3, r0, #12
    5de2:	428b      	cmp	r3, r1
    5de4:	d328      	bcc.n	5e38 <__udivsi3+0x6c>
    5de6:	0c03      	lsrs	r3, r0, #16
    5de8:	428b      	cmp	r3, r1
    5dea:	d30d      	bcc.n	5e08 <__udivsi3+0x3c>
    5dec:	22ff      	movs	r2, #255	; 0xff
    5dee:	0209      	lsls	r1, r1, #8
    5df0:	ba12      	rev	r2, r2
    5df2:	0c03      	lsrs	r3, r0, #16
    5df4:	428b      	cmp	r3, r1
    5df6:	d302      	bcc.n	5dfe <__udivsi3+0x32>
    5df8:	1212      	asrs	r2, r2, #8
    5dfa:	0209      	lsls	r1, r1, #8
    5dfc:	d065      	beq.n	5eca <__udivsi3+0xfe>
    5dfe:	0b03      	lsrs	r3, r0, #12
    5e00:	428b      	cmp	r3, r1
    5e02:	d319      	bcc.n	5e38 <__udivsi3+0x6c>
    5e04:	e000      	b.n	5e08 <__udivsi3+0x3c>
    5e06:	0a09      	lsrs	r1, r1, #8
    5e08:	0bc3      	lsrs	r3, r0, #15
    5e0a:	428b      	cmp	r3, r1
    5e0c:	d301      	bcc.n	5e12 <__udivsi3+0x46>
    5e0e:	03cb      	lsls	r3, r1, #15
    5e10:	1ac0      	subs	r0, r0, r3
    5e12:	4152      	adcs	r2, r2
    5e14:	0b83      	lsrs	r3, r0, #14
    5e16:	428b      	cmp	r3, r1
    5e18:	d301      	bcc.n	5e1e <__udivsi3+0x52>
    5e1a:	038b      	lsls	r3, r1, #14
    5e1c:	1ac0      	subs	r0, r0, r3
    5e1e:	4152      	adcs	r2, r2
    5e20:	0b43      	lsrs	r3, r0, #13
    5e22:	428b      	cmp	r3, r1
    5e24:	d301      	bcc.n	5e2a <__udivsi3+0x5e>
    5e26:	034b      	lsls	r3, r1, #13
    5e28:	1ac0      	subs	r0, r0, r3
    5e2a:	4152      	adcs	r2, r2
    5e2c:	0b03      	lsrs	r3, r0, #12
    5e2e:	428b      	cmp	r3, r1
    5e30:	d301      	bcc.n	5e36 <__udivsi3+0x6a>
    5e32:	030b      	lsls	r3, r1, #12
    5e34:	1ac0      	subs	r0, r0, r3
    5e36:	4152      	adcs	r2, r2
    5e38:	0ac3      	lsrs	r3, r0, #11
    5e3a:	428b      	cmp	r3, r1
    5e3c:	d301      	bcc.n	5e42 <__udivsi3+0x76>
    5e3e:	02cb      	lsls	r3, r1, #11
    5e40:	1ac0      	subs	r0, r0, r3
    5e42:	4152      	adcs	r2, r2
    5e44:	0a83      	lsrs	r3, r0, #10
    5e46:	428b      	cmp	r3, r1
    5e48:	d301      	bcc.n	5e4e <__udivsi3+0x82>
    5e4a:	028b      	lsls	r3, r1, #10
    5e4c:	1ac0      	subs	r0, r0, r3
    5e4e:	4152      	adcs	r2, r2
    5e50:	0a43      	lsrs	r3, r0, #9
    5e52:	428b      	cmp	r3, r1
    5e54:	d301      	bcc.n	5e5a <__udivsi3+0x8e>
    5e56:	024b      	lsls	r3, r1, #9
    5e58:	1ac0      	subs	r0, r0, r3
    5e5a:	4152      	adcs	r2, r2
    5e5c:	0a03      	lsrs	r3, r0, #8
    5e5e:	428b      	cmp	r3, r1
    5e60:	d301      	bcc.n	5e66 <__udivsi3+0x9a>
    5e62:	020b      	lsls	r3, r1, #8
    5e64:	1ac0      	subs	r0, r0, r3
    5e66:	4152      	adcs	r2, r2
    5e68:	d2cd      	bcs.n	5e06 <__udivsi3+0x3a>
    5e6a:	09c3      	lsrs	r3, r0, #7
    5e6c:	428b      	cmp	r3, r1
    5e6e:	d301      	bcc.n	5e74 <__udivsi3+0xa8>
    5e70:	01cb      	lsls	r3, r1, #7
    5e72:	1ac0      	subs	r0, r0, r3
    5e74:	4152      	adcs	r2, r2
    5e76:	0983      	lsrs	r3, r0, #6
    5e78:	428b      	cmp	r3, r1
    5e7a:	d301      	bcc.n	5e80 <__udivsi3+0xb4>
    5e7c:	018b      	lsls	r3, r1, #6
    5e7e:	1ac0      	subs	r0, r0, r3
    5e80:	4152      	adcs	r2, r2
    5e82:	0943      	lsrs	r3, r0, #5
    5e84:	428b      	cmp	r3, r1
    5e86:	d301      	bcc.n	5e8c <__udivsi3+0xc0>
    5e88:	014b      	lsls	r3, r1, #5
    5e8a:	1ac0      	subs	r0, r0, r3
    5e8c:	4152      	adcs	r2, r2
    5e8e:	0903      	lsrs	r3, r0, #4
    5e90:	428b      	cmp	r3, r1
    5e92:	d301      	bcc.n	5e98 <__udivsi3+0xcc>
    5e94:	010b      	lsls	r3, r1, #4
    5e96:	1ac0      	subs	r0, r0, r3
    5e98:	4152      	adcs	r2, r2
    5e9a:	08c3      	lsrs	r3, r0, #3
    5e9c:	428b      	cmp	r3, r1
    5e9e:	d301      	bcc.n	5ea4 <__udivsi3+0xd8>
    5ea0:	00cb      	lsls	r3, r1, #3
    5ea2:	1ac0      	subs	r0, r0, r3
    5ea4:	4152      	adcs	r2, r2
    5ea6:	0883      	lsrs	r3, r0, #2
    5ea8:	428b      	cmp	r3, r1
    5eaa:	d301      	bcc.n	5eb0 <__udivsi3+0xe4>
    5eac:	008b      	lsls	r3, r1, #2
    5eae:	1ac0      	subs	r0, r0, r3
    5eb0:	4152      	adcs	r2, r2
    5eb2:	0843      	lsrs	r3, r0, #1
    5eb4:	428b      	cmp	r3, r1
    5eb6:	d301      	bcc.n	5ebc <__udivsi3+0xf0>
    5eb8:	004b      	lsls	r3, r1, #1
    5eba:	1ac0      	subs	r0, r0, r3
    5ebc:	4152      	adcs	r2, r2
    5ebe:	1a41      	subs	r1, r0, r1
    5ec0:	d200      	bcs.n	5ec4 <__udivsi3+0xf8>
    5ec2:	4601      	mov	r1, r0
    5ec4:	4152      	adcs	r2, r2
    5ec6:	4610      	mov	r0, r2
    5ec8:	4770      	bx	lr
    5eca:	e7ff      	b.n	5ecc <__udivsi3+0x100>
    5ecc:	b501      	push	{r0, lr}
    5ece:	2000      	movs	r0, #0
    5ed0:	f000 f8f0 	bl	60b4 <__aeabi_idiv0>
    5ed4:	bd02      	pop	{r1, pc}
    5ed6:	46c0      	nop			; (mov r8, r8)

00005ed8 <__aeabi_uidivmod>:
    5ed8:	2900      	cmp	r1, #0
    5eda:	d0f7      	beq.n	5ecc <__udivsi3+0x100>
    5edc:	e776      	b.n	5dcc <__udivsi3>
    5ede:	4770      	bx	lr

00005ee0 <__divsi3>:
    5ee0:	4603      	mov	r3, r0
    5ee2:	430b      	orrs	r3, r1
    5ee4:	d47f      	bmi.n	5fe6 <__divsi3+0x106>
    5ee6:	2200      	movs	r2, #0
    5ee8:	0843      	lsrs	r3, r0, #1
    5eea:	428b      	cmp	r3, r1
    5eec:	d374      	bcc.n	5fd8 <__divsi3+0xf8>
    5eee:	0903      	lsrs	r3, r0, #4
    5ef0:	428b      	cmp	r3, r1
    5ef2:	d35f      	bcc.n	5fb4 <__divsi3+0xd4>
    5ef4:	0a03      	lsrs	r3, r0, #8
    5ef6:	428b      	cmp	r3, r1
    5ef8:	d344      	bcc.n	5f84 <__divsi3+0xa4>
    5efa:	0b03      	lsrs	r3, r0, #12
    5efc:	428b      	cmp	r3, r1
    5efe:	d328      	bcc.n	5f52 <__divsi3+0x72>
    5f00:	0c03      	lsrs	r3, r0, #16
    5f02:	428b      	cmp	r3, r1
    5f04:	d30d      	bcc.n	5f22 <__divsi3+0x42>
    5f06:	22ff      	movs	r2, #255	; 0xff
    5f08:	0209      	lsls	r1, r1, #8
    5f0a:	ba12      	rev	r2, r2
    5f0c:	0c03      	lsrs	r3, r0, #16
    5f0e:	428b      	cmp	r3, r1
    5f10:	d302      	bcc.n	5f18 <__divsi3+0x38>
    5f12:	1212      	asrs	r2, r2, #8
    5f14:	0209      	lsls	r1, r1, #8
    5f16:	d065      	beq.n	5fe4 <__divsi3+0x104>
    5f18:	0b03      	lsrs	r3, r0, #12
    5f1a:	428b      	cmp	r3, r1
    5f1c:	d319      	bcc.n	5f52 <__divsi3+0x72>
    5f1e:	e000      	b.n	5f22 <__divsi3+0x42>
    5f20:	0a09      	lsrs	r1, r1, #8
    5f22:	0bc3      	lsrs	r3, r0, #15
    5f24:	428b      	cmp	r3, r1
    5f26:	d301      	bcc.n	5f2c <__divsi3+0x4c>
    5f28:	03cb      	lsls	r3, r1, #15
    5f2a:	1ac0      	subs	r0, r0, r3
    5f2c:	4152      	adcs	r2, r2
    5f2e:	0b83      	lsrs	r3, r0, #14
    5f30:	428b      	cmp	r3, r1
    5f32:	d301      	bcc.n	5f38 <__divsi3+0x58>
    5f34:	038b      	lsls	r3, r1, #14
    5f36:	1ac0      	subs	r0, r0, r3
    5f38:	4152      	adcs	r2, r2
    5f3a:	0b43      	lsrs	r3, r0, #13
    5f3c:	428b      	cmp	r3, r1
    5f3e:	d301      	bcc.n	5f44 <__divsi3+0x64>
    5f40:	034b      	lsls	r3, r1, #13
    5f42:	1ac0      	subs	r0, r0, r3
    5f44:	4152      	adcs	r2, r2
    5f46:	0b03      	lsrs	r3, r0, #12
    5f48:	428b      	cmp	r3, r1
    5f4a:	d301      	bcc.n	5f50 <__divsi3+0x70>
    5f4c:	030b      	lsls	r3, r1, #12
    5f4e:	1ac0      	subs	r0, r0, r3
    5f50:	4152      	adcs	r2, r2
    5f52:	0ac3      	lsrs	r3, r0, #11
    5f54:	428b      	cmp	r3, r1
    5f56:	d301      	bcc.n	5f5c <__divsi3+0x7c>
    5f58:	02cb      	lsls	r3, r1, #11
    5f5a:	1ac0      	subs	r0, r0, r3
    5f5c:	4152      	adcs	r2, r2
    5f5e:	0a83      	lsrs	r3, r0, #10
    5f60:	428b      	cmp	r3, r1
    5f62:	d301      	bcc.n	5f68 <__divsi3+0x88>
    5f64:	028b      	lsls	r3, r1, #10
    5f66:	1ac0      	subs	r0, r0, r3
    5f68:	4152      	adcs	r2, r2
    5f6a:	0a43      	lsrs	r3, r0, #9
    5f6c:	428b      	cmp	r3, r1
    5f6e:	d301      	bcc.n	5f74 <__divsi3+0x94>
    5f70:	024b      	lsls	r3, r1, #9
    5f72:	1ac0      	subs	r0, r0, r3
    5f74:	4152      	adcs	r2, r2
    5f76:	0a03      	lsrs	r3, r0, #8
    5f78:	428b      	cmp	r3, r1
    5f7a:	d301      	bcc.n	5f80 <__divsi3+0xa0>
    5f7c:	020b      	lsls	r3, r1, #8
    5f7e:	1ac0      	subs	r0, r0, r3
    5f80:	4152      	adcs	r2, r2
    5f82:	d2cd      	bcs.n	5f20 <__divsi3+0x40>
    5f84:	09c3      	lsrs	r3, r0, #7
    5f86:	428b      	cmp	r3, r1
    5f88:	d301      	bcc.n	5f8e <__divsi3+0xae>
    5f8a:	01cb      	lsls	r3, r1, #7
    5f8c:	1ac0      	subs	r0, r0, r3
    5f8e:	4152      	adcs	r2, r2
    5f90:	0983      	lsrs	r3, r0, #6
    5f92:	428b      	cmp	r3, r1
    5f94:	d301      	bcc.n	5f9a <__divsi3+0xba>
    5f96:	018b      	lsls	r3, r1, #6
    5f98:	1ac0      	subs	r0, r0, r3
    5f9a:	4152      	adcs	r2, r2
    5f9c:	0943      	lsrs	r3, r0, #5
    5f9e:	428b      	cmp	r3, r1
    5fa0:	d301      	bcc.n	5fa6 <__divsi3+0xc6>
    5fa2:	014b      	lsls	r3, r1, #5
    5fa4:	1ac0      	subs	r0, r0, r3
    5fa6:	4152      	adcs	r2, r2
    5fa8:	0903      	lsrs	r3, r0, #4
    5faa:	428b      	cmp	r3, r1
    5fac:	d301      	bcc.n	5fb2 <__divsi3+0xd2>
    5fae:	010b      	lsls	r3, r1, #4
    5fb0:	1ac0      	subs	r0, r0, r3
    5fb2:	4152      	adcs	r2, r2
    5fb4:	08c3      	lsrs	r3, r0, #3
    5fb6:	428b      	cmp	r3, r1
    5fb8:	d301      	bcc.n	5fbe <__divsi3+0xde>
    5fba:	00cb      	lsls	r3, r1, #3
    5fbc:	1ac0      	subs	r0, r0, r3
    5fbe:	4152      	adcs	r2, r2
    5fc0:	0883      	lsrs	r3, r0, #2
    5fc2:	428b      	cmp	r3, r1
    5fc4:	d301      	bcc.n	5fca <__divsi3+0xea>
    5fc6:	008b      	lsls	r3, r1, #2
    5fc8:	1ac0      	subs	r0, r0, r3
    5fca:	4152      	adcs	r2, r2
    5fcc:	0843      	lsrs	r3, r0, #1
    5fce:	428b      	cmp	r3, r1
    5fd0:	d301      	bcc.n	5fd6 <__divsi3+0xf6>
    5fd2:	004b      	lsls	r3, r1, #1
    5fd4:	1ac0      	subs	r0, r0, r3
    5fd6:	4152      	adcs	r2, r2
    5fd8:	1a41      	subs	r1, r0, r1
    5fda:	d200      	bcs.n	5fde <__divsi3+0xfe>
    5fdc:	4601      	mov	r1, r0
    5fde:	4152      	adcs	r2, r2
    5fe0:	4610      	mov	r0, r2
    5fe2:	4770      	bx	lr
    5fe4:	e05d      	b.n	60a2 <__divsi3+0x1c2>
    5fe6:	0fca      	lsrs	r2, r1, #31
    5fe8:	d000      	beq.n	5fec <__divsi3+0x10c>
    5fea:	4249      	negs	r1, r1
    5fec:	1003      	asrs	r3, r0, #32
    5fee:	d300      	bcc.n	5ff2 <__divsi3+0x112>
    5ff0:	4240      	negs	r0, r0
    5ff2:	4053      	eors	r3, r2
    5ff4:	2200      	movs	r2, #0
    5ff6:	469c      	mov	ip, r3
    5ff8:	0903      	lsrs	r3, r0, #4
    5ffa:	428b      	cmp	r3, r1
    5ffc:	d32d      	bcc.n	605a <__divsi3+0x17a>
    5ffe:	0a03      	lsrs	r3, r0, #8
    6000:	428b      	cmp	r3, r1
    6002:	d312      	bcc.n	602a <__divsi3+0x14a>
    6004:	22fc      	movs	r2, #252	; 0xfc
    6006:	0189      	lsls	r1, r1, #6
    6008:	ba12      	rev	r2, r2
    600a:	0a03      	lsrs	r3, r0, #8
    600c:	428b      	cmp	r3, r1
    600e:	d30c      	bcc.n	602a <__divsi3+0x14a>
    6010:	0189      	lsls	r1, r1, #6
    6012:	1192      	asrs	r2, r2, #6
    6014:	428b      	cmp	r3, r1
    6016:	d308      	bcc.n	602a <__divsi3+0x14a>
    6018:	0189      	lsls	r1, r1, #6
    601a:	1192      	asrs	r2, r2, #6
    601c:	428b      	cmp	r3, r1
    601e:	d304      	bcc.n	602a <__divsi3+0x14a>
    6020:	0189      	lsls	r1, r1, #6
    6022:	d03a      	beq.n	609a <__divsi3+0x1ba>
    6024:	1192      	asrs	r2, r2, #6
    6026:	e000      	b.n	602a <__divsi3+0x14a>
    6028:	0989      	lsrs	r1, r1, #6
    602a:	09c3      	lsrs	r3, r0, #7
    602c:	428b      	cmp	r3, r1
    602e:	d301      	bcc.n	6034 <__divsi3+0x154>
    6030:	01cb      	lsls	r3, r1, #7
    6032:	1ac0      	subs	r0, r0, r3
    6034:	4152      	adcs	r2, r2
    6036:	0983      	lsrs	r3, r0, #6
    6038:	428b      	cmp	r3, r1
    603a:	d301      	bcc.n	6040 <__divsi3+0x160>
    603c:	018b      	lsls	r3, r1, #6
    603e:	1ac0      	subs	r0, r0, r3
    6040:	4152      	adcs	r2, r2
    6042:	0943      	lsrs	r3, r0, #5
    6044:	428b      	cmp	r3, r1
    6046:	d301      	bcc.n	604c <__divsi3+0x16c>
    6048:	014b      	lsls	r3, r1, #5
    604a:	1ac0      	subs	r0, r0, r3
    604c:	4152      	adcs	r2, r2
    604e:	0903      	lsrs	r3, r0, #4
    6050:	428b      	cmp	r3, r1
    6052:	d301      	bcc.n	6058 <__divsi3+0x178>
    6054:	010b      	lsls	r3, r1, #4
    6056:	1ac0      	subs	r0, r0, r3
    6058:	4152      	adcs	r2, r2
    605a:	08c3      	lsrs	r3, r0, #3
    605c:	428b      	cmp	r3, r1
    605e:	d301      	bcc.n	6064 <__divsi3+0x184>
    6060:	00cb      	lsls	r3, r1, #3
    6062:	1ac0      	subs	r0, r0, r3
    6064:	4152      	adcs	r2, r2
    6066:	0883      	lsrs	r3, r0, #2
    6068:	428b      	cmp	r3, r1
    606a:	d301      	bcc.n	6070 <__divsi3+0x190>
    606c:	008b      	lsls	r3, r1, #2
    606e:	1ac0      	subs	r0, r0, r3
    6070:	4152      	adcs	r2, r2
    6072:	d2d9      	bcs.n	6028 <__divsi3+0x148>
    6074:	0843      	lsrs	r3, r0, #1
    6076:	428b      	cmp	r3, r1
    6078:	d301      	bcc.n	607e <__divsi3+0x19e>
    607a:	004b      	lsls	r3, r1, #1
    607c:	1ac0      	subs	r0, r0, r3
    607e:	4152      	adcs	r2, r2
    6080:	1a41      	subs	r1, r0, r1
    6082:	d200      	bcs.n	6086 <__divsi3+0x1a6>
    6084:	4601      	mov	r1, r0
    6086:	4663      	mov	r3, ip
    6088:	4152      	adcs	r2, r2
    608a:	105b      	asrs	r3, r3, #1
    608c:	4610      	mov	r0, r2
    608e:	d301      	bcc.n	6094 <__divsi3+0x1b4>
    6090:	4240      	negs	r0, r0
    6092:	2b00      	cmp	r3, #0
    6094:	d500      	bpl.n	6098 <__divsi3+0x1b8>
    6096:	4249      	negs	r1, r1
    6098:	4770      	bx	lr
    609a:	4663      	mov	r3, ip
    609c:	105b      	asrs	r3, r3, #1
    609e:	d300      	bcc.n	60a2 <__divsi3+0x1c2>
    60a0:	4240      	negs	r0, r0
    60a2:	b501      	push	{r0, lr}
    60a4:	2000      	movs	r0, #0
    60a6:	f000 f805 	bl	60b4 <__aeabi_idiv0>
    60aa:	bd02      	pop	{r1, pc}

000060ac <__aeabi_idivmod>:
    60ac:	2900      	cmp	r1, #0
    60ae:	d0f8      	beq.n	60a2 <__divsi3+0x1c2>
    60b0:	e716      	b.n	5ee0 <__divsi3>
    60b2:	4770      	bx	lr

000060b4 <__aeabi_idiv0>:
    60b4:	4770      	bx	lr
    60b6:	46c0      	nop			; (mov r8, r8)

000060b8 <__ctzsi2>:
    60b8:	4241      	negs	r1, r0
    60ba:	4008      	ands	r0, r1
    60bc:	211c      	movs	r1, #28
    60be:	2301      	movs	r3, #1
    60c0:	041b      	lsls	r3, r3, #16
    60c2:	4298      	cmp	r0, r3
    60c4:	d301      	bcc.n	60ca <__ctzsi2+0x12>
    60c6:	0c00      	lsrs	r0, r0, #16
    60c8:	3910      	subs	r1, #16
    60ca:	0a1b      	lsrs	r3, r3, #8
    60cc:	4298      	cmp	r0, r3
    60ce:	d301      	bcc.n	60d4 <__ctzsi2+0x1c>
    60d0:	0a00      	lsrs	r0, r0, #8
    60d2:	3908      	subs	r1, #8
    60d4:	091b      	lsrs	r3, r3, #4
    60d6:	4298      	cmp	r0, r3
    60d8:	d301      	bcc.n	60de <__ctzsi2+0x26>
    60da:	0900      	lsrs	r0, r0, #4
    60dc:	3904      	subs	r1, #4
    60de:	a202      	add	r2, pc, #8	; (adr r2, 60e8 <__ctzsi2+0x30>)
    60e0:	5c10      	ldrb	r0, [r2, r0]
    60e2:	1a40      	subs	r0, r0, r1
    60e4:	4770      	bx	lr
    60e6:	46c0      	nop			; (mov r8, r8)
    60e8:	1d1d1c1b 	.word	0x1d1d1c1b
    60ec:	1e1e1e1e 	.word	0x1e1e1e1e
    60f0:	1f1f1f1f 	.word	0x1f1f1f1f
    60f4:	1f1f1f1f 	.word	0x1f1f1f1f

000060f8 <__aeabi_lmul>:
    60f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    60fa:	46ce      	mov	lr, r9
    60fc:	4647      	mov	r7, r8
    60fe:	0415      	lsls	r5, r2, #16
    6100:	0c2d      	lsrs	r5, r5, #16
    6102:	002e      	movs	r6, r5
    6104:	b580      	push	{r7, lr}
    6106:	0407      	lsls	r7, r0, #16
    6108:	0c14      	lsrs	r4, r2, #16
    610a:	0c3f      	lsrs	r7, r7, #16
    610c:	4699      	mov	r9, r3
    610e:	0c03      	lsrs	r3, r0, #16
    6110:	437e      	muls	r6, r7
    6112:	435d      	muls	r5, r3
    6114:	4367      	muls	r7, r4
    6116:	4363      	muls	r3, r4
    6118:	197f      	adds	r7, r7, r5
    611a:	0c34      	lsrs	r4, r6, #16
    611c:	19e4      	adds	r4, r4, r7
    611e:	469c      	mov	ip, r3
    6120:	42a5      	cmp	r5, r4
    6122:	d903      	bls.n	612c <__aeabi_lmul+0x34>
    6124:	2380      	movs	r3, #128	; 0x80
    6126:	025b      	lsls	r3, r3, #9
    6128:	4698      	mov	r8, r3
    612a:	44c4      	add	ip, r8
    612c:	464b      	mov	r3, r9
    612e:	4351      	muls	r1, r2
    6130:	4343      	muls	r3, r0
    6132:	0436      	lsls	r6, r6, #16
    6134:	0c36      	lsrs	r6, r6, #16
    6136:	0c25      	lsrs	r5, r4, #16
    6138:	0424      	lsls	r4, r4, #16
    613a:	4465      	add	r5, ip
    613c:	19a4      	adds	r4, r4, r6
    613e:	1859      	adds	r1, r3, r1
    6140:	1949      	adds	r1, r1, r5
    6142:	0020      	movs	r0, r4
    6144:	bc0c      	pop	{r2, r3}
    6146:	4690      	mov	r8, r2
    6148:	4699      	mov	r9, r3
    614a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000614c <__libc_init_array>:
    614c:	b570      	push	{r4, r5, r6, lr}
    614e:	2600      	movs	r6, #0
    6150:	4d0c      	ldr	r5, [pc, #48]	; (6184 <__libc_init_array+0x38>)
    6152:	4c0d      	ldr	r4, [pc, #52]	; (6188 <__libc_init_array+0x3c>)
    6154:	1b64      	subs	r4, r4, r5
    6156:	10a4      	asrs	r4, r4, #2
    6158:	42a6      	cmp	r6, r4
    615a:	d109      	bne.n	6170 <__libc_init_array+0x24>
    615c:	2600      	movs	r6, #0
    615e:	f000 f903 	bl	6368 <_init>
    6162:	4d0a      	ldr	r5, [pc, #40]	; (618c <__libc_init_array+0x40>)
    6164:	4c0a      	ldr	r4, [pc, #40]	; (6190 <__libc_init_array+0x44>)
    6166:	1b64      	subs	r4, r4, r5
    6168:	10a4      	asrs	r4, r4, #2
    616a:	42a6      	cmp	r6, r4
    616c:	d105      	bne.n	617a <__libc_init_array+0x2e>
    616e:	bd70      	pop	{r4, r5, r6, pc}
    6170:	00b3      	lsls	r3, r6, #2
    6172:	58eb      	ldr	r3, [r5, r3]
    6174:	4798      	blx	r3
    6176:	3601      	adds	r6, #1
    6178:	e7ee      	b.n	6158 <__libc_init_array+0xc>
    617a:	00b3      	lsls	r3, r6, #2
    617c:	58eb      	ldr	r3, [r5, r3]
    617e:	4798      	blx	r3
    6180:	3601      	adds	r6, #1
    6182:	e7f2      	b.n	616a <__libc_init_array+0x1e>
    6184:	00006374 	.word	0x00006374
    6188:	00006374 	.word	0x00006374
    618c:	00006374 	.word	0x00006374
    6190:	00006378 	.word	0x00006378

00006194 <memcpy>:
    6194:	2300      	movs	r3, #0
    6196:	b510      	push	{r4, lr}
    6198:	429a      	cmp	r2, r3
    619a:	d100      	bne.n	619e <memcpy+0xa>
    619c:	bd10      	pop	{r4, pc}
    619e:	5ccc      	ldrb	r4, [r1, r3]
    61a0:	54c4      	strb	r4, [r0, r3]
    61a2:	3301      	adds	r3, #1
    61a4:	e7f8      	b.n	6198 <memcpy+0x4>

000061a6 <memset>:
    61a6:	0003      	movs	r3, r0
    61a8:	1882      	adds	r2, r0, r2
    61aa:	4293      	cmp	r3, r2
    61ac:	d100      	bne.n	61b0 <memset+0xa>
    61ae:	4770      	bx	lr
    61b0:	7019      	strb	r1, [r3, #0]
    61b2:	3301      	adds	r3, #1
    61b4:	e7f9      	b.n	61aa <memset+0x4>
    61b6:	0000      	movs	r0, r0
    61b8:	00001b4a 	.word	0x00001b4a
    61bc:	000019ec 	.word	0x000019ec
    61c0:	000019ec 	.word	0x000019ec
    61c4:	000019ec 	.word	0x000019ec
    61c8:	000019ec 	.word	0x000019ec
    61cc:	000019ec 	.word	0x000019ec
    61d0:	000019ec 	.word	0x000019ec
    61d4:	000019ec 	.word	0x000019ec
    61d8:	000019ec 	.word	0x000019ec
    61dc:	000019ec 	.word	0x000019ec
    61e0:	000019ec 	.word	0x000019ec
    61e4:	000019ec 	.word	0x000019ec
    61e8:	000019ec 	.word	0x000019ec
    61ec:	000019ec 	.word	0x000019ec
    61f0:	000019ec 	.word	0x000019ec
    61f4:	000019ec 	.word	0x000019ec
    61f8:	00001b42 	.word	0x00001b42
    61fc:	000019ec 	.word	0x000019ec
    6200:	000019ec 	.word	0x000019ec
    6204:	000019ec 	.word	0x000019ec
    6208:	000019ec 	.word	0x000019ec
    620c:	000019ec 	.word	0x000019ec
    6210:	000019ec 	.word	0x000019ec
    6214:	000019ec 	.word	0x000019ec
    6218:	000019ec 	.word	0x000019ec
    621c:	000019ec 	.word	0x000019ec
    6220:	000019ec 	.word	0x000019ec
    6224:	000019ec 	.word	0x000019ec
    6228:	000019ec 	.word	0x000019ec
    622c:	000019ec 	.word	0x000019ec
    6230:	000019ec 	.word	0x000019ec
    6234:	000019ec 	.word	0x000019ec
    6238:	00001b3a 	.word	0x00001b3a
    623c:	000019ec 	.word	0x000019ec
    6240:	000019ec 	.word	0x000019ec
    6244:	000019ec 	.word	0x000019ec
    6248:	000019ec 	.word	0x000019ec
    624c:	000019ec 	.word	0x000019ec
    6250:	000019ec 	.word	0x000019ec
    6254:	000019ec 	.word	0x000019ec
    6258:	000019ec 	.word	0x000019ec
    625c:	000019ec 	.word	0x000019ec
    6260:	000019ec 	.word	0x000019ec
    6264:	000019ec 	.word	0x000019ec
    6268:	000019ec 	.word	0x000019ec
    626c:	000019ec 	.word	0x000019ec
    6270:	000019ec 	.word	0x000019ec
    6274:	000019ec 	.word	0x000019ec
    6278:	00001b32 	.word	0x00001b32
    627c:	00001b2a 	.word	0x00001b2a
    6280:	000019f0 	.word	0x000019f0
    6284:	00001b68 	.word	0x00001b68
    6288:	00001b52 	.word	0x00001b52
    628c:	00000002 	.word	0x00000002
    6290:	00000003 	.word	0x00000003
    6294:	00000028 	.word	0x00000028
    6298:	00000029 	.word	0x00000029
    629c:	00000004 	.word	0x00000004
    62a0:	00000005 	.word	0x00000005
    62a4:	00000006 	.word	0x00000006
    62a8:	00000007 	.word	0x00000007
    62ac:	00000020 	.word	0x00000020
    62b0:	00000021 	.word	0x00000021
    62b4:	00000022 	.word	0x00000022
    62b8:	00000023 	.word	0x00000023
    62bc:	00000024 	.word	0x00000024
    62c0:	00000025 	.word	0x00000025
    62c4:	00000026 	.word	0x00000026
    62c8:	00000027 	.word	0x00000027
    62cc:	00000008 	.word	0x00000008
    62d0:	00000009 	.word	0x00000009
    62d4:	0000000a 	.word	0x0000000a
    62d8:	0000000b 	.word	0x0000000b
    62dc:	42000800 	.word	0x42000800
    62e0:	42000c00 	.word	0x42000c00
    62e4:	42001000 	.word	0x42001000
    62e8:	42001400 	.word	0x42001400
    62ec:	42001800 	.word	0x42001800
    62f0:	42001c00 	.word	0x42001c00
    62f4:	00002ad2 	.word	0x00002ad2
    62f8:	00002aea 	.word	0x00002aea
    62fc:	00002aea 	.word	0x00002aea
    6300:	00002a9a 	.word	0x00002a9a
    6304:	00002a9a 	.word	0x00002a9a
    6308:	00002aa0 	.word	0x00002aa0
    630c:	00002aa6 	.word	0x00002aa6
    6310:	00002ab4 	.word	0x00002ab4
    6314:	00002ad8 	.word	0x00002ad8
    6318:	42002c00 	.word	0x42002c00
    631c:	42003000 	.word	0x42003000
    6320:	42003400 	.word	0x42003400
    6324:	42003800 	.word	0x42003800
    6328:	42003c00 	.word	0x42003c00
    632c:	10000800 	.word	0x10000800
    6330:	40002000 	.word	0x40002000
    6334:	00008000 	.word	0x00008000
    6338:	00004b28 	.word	0x00004b28
    633c:	00004b36 	.word	0x00004b36
    6340:	00004bae 	.word	0x00004bae
    6344:	00004aea 	.word	0x00004aea
    6348:	00004b0a 	.word	0x00004b0a

0000634c <_usb_device_irq_bits>:
    634c:	00080004 00800070 01000001 00000200     ....p...........

0000635c <_usb_endpoint_irq_bits>:
    635c:	60100c03                                ...`

00006360 <tc_interrupt_vectors.13086>:
    6360:	15141312 00000016                       ........

00006368 <_init>:
    6368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    636a:	46c0      	nop			; (mov r8, r8)
    636c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    636e:	bc08      	pop	{r3}
    6370:	469e      	mov	lr, r3
    6372:	4770      	bx	lr

00006374 <__init_array_start>:
    6374:	000000dd 	.word	0x000000dd

00006378 <_fini>:
    6378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    637e:	bc08      	pop	{r3}
    6380:	469e      	mov	lr, r3
    6382:	4770      	bx	lr

00006384 <__fini_array_start>:
    6384:	000000b5 	.word	0x000000b5
