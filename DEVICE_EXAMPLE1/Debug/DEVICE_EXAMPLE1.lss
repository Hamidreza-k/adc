
DEVICE_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ec  20000000  000057a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004748  200000ec  0000588c  000200ec  2**2
                  ALLOC
  3 .stack        00002004  20004834  00009fd4  000200ec  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b960  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000063cf  00000000  00000000  0006bacd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b0ea  00000000  00000000  00071e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b58  00000000  00000000  0007cf86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e08  00000000  00000000  0007dade  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a4ee  00000000  00000000  0007e8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015a19  00000000  00000000  00088dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096555  00000000  00000000  0009e7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d08  00000000  00000000  00134d44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 68 00 20 d1 49 00 00 cd 49 00 00 cd 49 00 00     8h. .I...I...I..
	...
      2c:	cd 49 00 00 00 00 00 00 00 00 00 00 cd 49 00 00     .I...........I..
      3c:	cd 49 00 00 cd 49 00 00 cd 49 00 00 cd 49 00 00     .I...I...I...I..
      4c:	cd 49 00 00 5d 17 00 00 cd 49 00 00 cd 49 00 00     .I..]....I...I..
      5c:	f5 41 00 00 cd 49 00 00 c9 1c 00 00 d9 1c 00 00     .A...I..........
      6c:	e9 1c 00 00 f9 1c 00 00 09 1d 00 00 19 1d 00 00     ................
      7c:	cd 49 00 00 cd 49 00 00 cd 49 00 00 71 2a 00 00     .I...I...I..q*..
      8c:	81 2a 00 00 91 2a 00 00 a1 2a 00 00 b1 2a 00 00     .*...*...*...*..
      9c:	f5 15 00 00 cd 49 00 00 cd 49 00 00 cd 49 00 00     .....I...I...I..
      ac:	cd 49 00 00 00 00 00 00                             .I......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000ec 	.word	0x200000ec
      d4:	00000000 	.word	0x00000000
      d8:	000057a0 	.word	0x000057a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000f0 	.word	0x200000f0
     108:	000057a0 	.word	0x000057a0
     10c:	000057a0 	.word	0x000057a0
     110:	00000000 	.word	0x00000000

00000114 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
     114:	b510      	push	{r4, lr}
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <ui_wakeup_handler+0x10>)
     118:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     11a:	2280      	movs	r2, #128	; 0x80
     11c:	05d2      	lsls	r2, r2, #23
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <ui_wakeup_handler+0x14>)
     120:	615a      	str	r2, [r3, #20]
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
	LED_On(LED_0_PIN);
}
     122:	bd10      	pop	{r4, pc}
     124:	00003921 	.word	0x00003921
     128:	41004480 	.word	0x41004480

0000012c <ui_init>:
#endif

void ui_init(void)
{
     12c:	b510      	push	{r4, lr}
     12e:	b084      	sub	sp, #16
#ifdef USB_DEVICE_LPM_SUPPORT
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
     130:	ac01      	add	r4, sp, #4
     132:	0020      	movs	r0, r4
     134:	4b0e      	ldr	r3, [pc, #56]	; (170 <ui_init+0x44>)
     136:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
     138:	230f      	movs	r3, #15
     13a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
     13c:	2300      	movs	r3, #0
     13e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
     140:	3301      	adds	r3, #1
     142:	7223      	strb	r3, [r4, #8]
	config_extint_chan.filter_input_signal = true;
     144:	72a3      	strb	r3, [r4, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
     146:	3301      	adds	r3, #1
     148:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     14a:	0021      	movs	r1, r4
     14c:	200f      	movs	r0, #15
     14e:	4b09      	ldr	r3, [pc, #36]	; (174 <ui_init+0x48>)
     150:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
     152:	2200      	movs	r2, #0
     154:	210f      	movs	r1, #15
     156:	4808      	ldr	r0, [pc, #32]	; (178 <ui_init+0x4c>)
     158:	4b08      	ldr	r3, [pc, #32]	; (17c <ui_init+0x50>)
     15a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     15c:	2100      	movs	r1, #0
     15e:	200f      	movs	r0, #15
     160:	4b07      	ldr	r3, [pc, #28]	; (180 <ui_init+0x54>)
     162:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     164:	2280      	movs	r2, #128	; 0x80
     166:	05d2      	lsls	r2, r2, #23
     168:	4b06      	ldr	r3, [pc, #24]	; (184 <ui_init+0x58>)
     16a:	619a      	str	r2, [r3, #24]
#endif

	/* Initialize LEDs */
	LED_Off(LED_0_PIN);
}
     16c:	b004      	add	sp, #16
     16e:	bd10      	pop	{r4, pc}
     170:	00001835 	.word	0x00001835
     174:	00001849 	.word	0x00001849
     178:	00000115 	.word	0x00000115
     17c:	000016f1 	.word	0x000016f1
     180:	0000171d 	.word	0x0000171d
     184:	41004480 	.word	0x41004480

00000188 <ui_powerdown>:
     188:	2280      	movs	r2, #128	; 0x80
     18a:	05d2      	lsls	r2, r2, #23
     18c:	4b01      	ldr	r3, [pc, #4]	; (194 <ui_powerdown+0xc>)
     18e:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
     190:	4770      	bx	lr
     192:	46c0      	nop			; (mov r8, r8)
     194:	41004480 	.word	0x41004480

00000198 <ui_wakeup_enable>:

#ifdef USB_DEVICE_LPM_SUPPORT
void ui_wakeup_enable(void)
{
     198:	b510      	push	{r4, lr}
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     19a:	2100      	movs	r1, #0
     19c:	200f      	movs	r0, #15
     19e:	4b01      	ldr	r3, [pc, #4]	; (1a4 <ui_wakeup_enable+0xc>)
     1a0:	4798      	blx	r3
}
     1a2:	bd10      	pop	{r4, pc}
     1a4:	0000171d 	.word	0x0000171d

000001a8 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
     1a8:	b510      	push	{r4, lr}
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     1aa:	2100      	movs	r1, #0
     1ac:	200f      	movs	r0, #15
     1ae:	4b01      	ldr	r3, [pc, #4]	; (1b4 <ui_wakeup_disable+0xc>)
     1b0:	4798      	blx	r3
}
     1b2:	bd10      	pop	{r4, pc}
     1b4:	0000173d 	.word	0x0000173d

000001b8 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
     1b8:	2280      	movs	r2, #128	; 0x80
     1ba:	05d2      	lsls	r2, r2, #23
     1bc:	4b01      	ldr	r3, [pc, #4]	; (1c4 <ui_wakeup+0xc>)
     1be:	615a      	str	r2, [r3, #20]
#endif // #ifdef USB_DEVICE_LPM_SUPPORT

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
     1c0:	4770      	bx	lr
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	41004480 	.word	0x41004480

000001c8 <ui_com_open>:


void ui_com_open(uint8_t port)
{
	UNUSED(port);
}
     1c8:	4770      	bx	lr

000001ca <ui_com_close>:


void ui_com_close(uint8_t port)
{
	UNUSED(port);
}
     1ca:	4770      	bx	lr

000001cc <ui_com_rx_start>:


void ui_com_rx_start(void)
{

}
     1cc:	4770      	bx	lr

000001ce <ui_com_rx_stop>:


void ui_com_rx_stop(void)
{

}
     1ce:	4770      	bx	lr

000001d0 <ui_com_tx_start>:


void ui_com_tx_start(void)
{

}
     1d0:	4770      	bx	lr

000001d2 <ui_com_tx_stop>:


void ui_com_tx_stop(void)
{

}
     1d2:	4770      	bx	lr

000001d4 <ui_com_overflow>:


void ui_com_overflow(void)
{

}
     1d4:	4770      	bx	lr
	...

000001d8 <ui_process>:

void ui_process(uint16_t framenumber)
{
     1d8:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
     1da:	21fa      	movs	r1, #250	; 0xfa
     1dc:	0089      	lsls	r1, r1, #2
     1de:	4b09      	ldr	r3, [pc, #36]	; (204 <ui_process+0x2c>)
     1e0:	4798      	blx	r3
     1e2:	b289      	uxth	r1, r1
     1e4:	2900      	cmp	r1, #0
     1e6:	d104      	bne.n	1f2 <ui_process+0x1a>
     1e8:	2280      	movs	r2, #128	; 0x80
     1ea:	05d2      	lsls	r2, r2, #23
     1ec:	4b06      	ldr	r3, [pc, #24]	; (208 <ui_process+0x30>)
     1ee:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
}
     1f0:	bd10      	pop	{r4, pc}
	if ((framenumber % 1000) == 500) {
     1f2:	23fa      	movs	r3, #250	; 0xfa
     1f4:	005b      	lsls	r3, r3, #1
     1f6:	4299      	cmp	r1, r3
     1f8:	d1fa      	bne.n	1f0 <ui_process+0x18>
		port_base->OUTSET.reg = pin_mask;
     1fa:	2280      	movs	r2, #128	; 0x80
     1fc:	05d2      	lsls	r2, r2, #23
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <ui_process+0x30>)
     200:	619a      	str	r2, [r3, #24]
}
     202:	e7f5      	b.n	1f0 <ui_process+0x18>
     204:	000052cd 	.word	0x000052cd
     208:	41004480 	.word	0x41004480

0000020c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     20c:	4a02      	ldr	r2, [pc, #8]	; (218 <udi_cdc_comm_disable+0xc>)
     20e:	7813      	ldrb	r3, [r2, #0]
     210:	3b01      	subs	r3, #1
     212:	b2db      	uxtb	r3, r3
     214:	7013      	strb	r3, [r2, #0]
}
     216:	4770      	bx	lr
     218:	20000113 	.word	0x20000113

0000021c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     21c:	2000      	movs	r0, #0
     21e:	4770      	bx	lr

00000220 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     220:	2000      	movs	r0, #0
     222:	4770      	bx	lr

00000224 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
     224:	b510      	push	{r4, lr}
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
     226:	4902      	ldr	r1, [pc, #8]	; (230 <udi_cdc_line_coding_received+0xc>)
     228:	2000      	movs	r0, #0
     22a:	4b02      	ldr	r3, [pc, #8]	; (234 <udi_cdc_line_coding_received+0x10>)
     22c:	4798      	blx	r3
}
     22e:	bd10      	pop	{r4, pc}
     230:	2000010c 	.word	0x2000010c
     234:	00004fbd 	.word	0x00004fbd

00000238 <udi_cdc_comm_enable>:
{
     238:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
     23a:	2200      	movs	r2, #0
     23c:	4b12      	ldr	r3, [pc, #72]	; (288 <udi_cdc_comm_enable+0x50>)
     23e:	701a      	strb	r2, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
     240:	2000      	movs	r0, #0
     242:	4b12      	ldr	r3, [pc, #72]	; (28c <udi_cdc_comm_enable+0x54>)
     244:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
     246:	4b12      	ldr	r3, [pc, #72]	; (290 <udi_cdc_comm_enable+0x58>)
     248:	21a1      	movs	r1, #161	; 0xa1
     24a:	7019      	strb	r1, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     24c:	3981      	subs	r1, #129	; 0x81
     24e:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     250:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     252:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     254:	391e      	subs	r1, #30
     256:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     258:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     25a:	490e      	ldr	r1, [pc, #56]	; (294 <udi_cdc_comm_enable+0x5c>)
     25c:	23e1      	movs	r3, #225	; 0xe1
     25e:	025b      	lsls	r3, r3, #9
     260:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     262:	7108      	strb	r0, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     264:	7148      	strb	r0, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     266:	2308      	movs	r3, #8
     268:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
     26a:	2000      	movs	r0, #0
     26c:	4b0a      	ldr	r3, [pc, #40]	; (298 <udi_cdc_comm_enable+0x60>)
     26e:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
     270:	2000      	movs	r0, #0
     272:	4b0a      	ldr	r3, [pc, #40]	; (29c <udi_cdc_comm_enable+0x64>)
     274:	4798      	blx	r3
     276:	2800      	cmp	r0, #0
     278:	d004      	beq.n	284 <udi_cdc_comm_enable+0x4c>
	udi_cdc_nb_comm_enabled++;
     27a:	4a03      	ldr	r2, [pc, #12]	; (288 <udi_cdc_comm_enable+0x50>)
     27c:	7813      	ldrb	r3, [r2, #0]
     27e:	3301      	adds	r3, #1
     280:	b2db      	uxtb	r3, r3
     282:	7013      	strb	r3, [r2, #0]
}
     284:	bd10      	pop	{r4, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	20000113 	.word	0x20000113
     28c:	200001ac 	.word	0x200001ac
     290:	20000244 	.word	0x20000244
     294:	2000010c 	.word	0x2000010c
     298:	00004fbd 	.word	0x00004fbd
     29c:	00004e75 	.word	0x00004e75

000002a0 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     2a0:	b570      	push	{r4, r5, r6, lr}
     2a2:	b084      	sub	sp, #16

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     2a4:	4b46      	ldr	r3, [pc, #280]	; (3c0 <udi_cdc_tx_send+0x120>)
     2a6:	781b      	ldrb	r3, [r3, #0]
     2a8:	2b00      	cmp	r3, #0
     2aa:	d001      	beq.n	2b0 <udi_cdc_tx_send+0x10>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     2ac:	b004      	add	sp, #16
     2ae:	bd70      	pop	{r4, r5, r6, pc}
	if (udd_is_high_speed()) {
     2b0:	4b44      	ldr	r3, [pc, #272]	; (3c4 <udi_cdc_tx_send+0x124>)
     2b2:	4798      	blx	r3
     2b4:	2800      	cmp	r0, #0
     2b6:	d043      	beq.n	340 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     2b8:	4b43      	ldr	r3, [pc, #268]	; (3c8 <udi_cdc_tx_send+0x128>)
     2ba:	881c      	ldrh	r4, [r3, #0]
     2bc:	4b43      	ldr	r3, [pc, #268]	; (3cc <udi_cdc_tx_send+0x12c>)
     2be:	4798      	blx	r3
     2c0:	4284      	cmp	r4, r0
     2c2:	d0f3      	beq.n	2ac <udi_cdc_tx_send+0xc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     2c4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     2c8:	425a      	negs	r2, r3
     2ca:	4153      	adcs	r3, r2
     2cc:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     2ce:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     2d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     2d4:	2200      	movs	r2, #0
     2d6:	4b3e      	ldr	r3, [pc, #248]	; (3d0 <udi_cdc_tx_send+0x130>)
     2d8:	701a      	strb	r2, [r3, #0]
	return flags;
     2da:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     2dc:	4b3d      	ldr	r3, [pc, #244]	; (3d4 <udi_cdc_tx_send+0x134>)
     2de:	781c      	ldrb	r4, [r3, #0]
     2e0:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     2e2:	0062      	lsls	r2, r4, #1
     2e4:	4b3c      	ldr	r3, [pc, #240]	; (3d8 <udi_cdc_tx_send+0x138>)
     2e6:	5ad3      	ldrh	r3, [r2, r3]
     2e8:	2b00      	cmp	r3, #0
     2ea:	d030      	beq.n	34e <udi_cdc_tx_send+0xae>
	sof_zlp_counter = 0;
     2ec:	2200      	movs	r2, #0
     2ee:	4b3b      	ldr	r3, [pc, #236]	; (3dc <udi_cdc_tx_send+0x13c>)
     2f0:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
     2f2:	4b3b      	ldr	r3, [pc, #236]	; (3e0 <udi_cdc_tx_send+0x140>)
     2f4:	781b      	ldrb	r3, [r3, #0]
     2f6:	2b00      	cmp	r3, #0
     2f8:	d148      	bne.n	38c <udi_cdc_tx_send+0xec>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     2fa:	4263      	negs	r3, r4
     2fc:	4163      	adcs	r3, r4
     2fe:	b2db      	uxtb	r3, r3
     300:	4a34      	ldr	r2, [pc, #208]	; (3d4 <udi_cdc_tx_send+0x134>)
     302:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     304:	2201      	movs	r2, #1
     306:	4b2e      	ldr	r3, [pc, #184]	; (3c0 <udi_cdc_tx_send+0x120>)
     308:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     30a:	2d00      	cmp	r5, #0
     30c:	d004      	beq.n	318 <udi_cdc_tx_send+0x78>
		cpu_irq_enable();
     30e:	4b30      	ldr	r3, [pc, #192]	; (3d0 <udi_cdc_tx_send+0x130>)
     310:	701a      	strb	r2, [r3, #0]
     312:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     316:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     318:	0026      	movs	r6, r4
     31a:	0063      	lsls	r3, r4, #1
     31c:	4a2e      	ldr	r2, [pc, #184]	; (3d8 <udi_cdc_tx_send+0x138>)
     31e:	5a9b      	ldrh	r3, [r3, r2]
     320:	001d      	movs	r5, r3
     322:	3d40      	subs	r5, #64	; 0x40
     324:	1e6a      	subs	r2, r5, #1
     326:	4195      	sbcs	r5, r2
     328:	b2ed      	uxtb	r5, r5
	if (b_short_packet) {
     32a:	2b40      	cmp	r3, #64	; 0x40
     32c:	d037      	beq.n	39e <udi_cdc_tx_send+0xfe>
		if (udd_is_high_speed()) {
     32e:	4b25      	ldr	r3, [pc, #148]	; (3c4 <udi_cdc_tx_send+0x124>)
     330:	4798      	blx	r3
     332:	2800      	cmp	r0, #0
     334:	d02e      	beq.n	394 <udi_cdc_tx_send+0xf4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     336:	4b25      	ldr	r3, [pc, #148]	; (3cc <udi_cdc_tx_send+0x12c>)
     338:	4798      	blx	r3
     33a:	4b23      	ldr	r3, [pc, #140]	; (3c8 <udi_cdc_tx_send+0x128>)
     33c:	8018      	strh	r0, [r3, #0]
     33e:	e031      	b.n	3a4 <udi_cdc_tx_send+0x104>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     340:	4b21      	ldr	r3, [pc, #132]	; (3c8 <udi_cdc_tx_send+0x128>)
     342:	881c      	ldrh	r4, [r3, #0]
     344:	4b27      	ldr	r3, [pc, #156]	; (3e4 <udi_cdc_tx_send+0x144>)
     346:	4798      	blx	r3
     348:	4284      	cmp	r4, r0
     34a:	d1bb      	bne.n	2c4 <udi_cdc_tx_send+0x24>
     34c:	e7ae      	b.n	2ac <udi_cdc_tx_send+0xc>
		sof_zlp_counter++;
     34e:	4a23      	ldr	r2, [pc, #140]	; (3dc <udi_cdc_tx_send+0x13c>)
     350:	8813      	ldrh	r3, [r2, #0]
     352:	3301      	adds	r3, #1
     354:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     356:	4b1b      	ldr	r3, [pc, #108]	; (3c4 <udi_cdc_tx_send+0x124>)
     358:	4798      	blx	r3
     35a:	2800      	cmp	r0, #0
     35c:	d103      	bne.n	366 <udi_cdc_tx_send+0xc6>
     35e:	4b1f      	ldr	r3, [pc, #124]	; (3dc <udi_cdc_tx_send+0x13c>)
     360:	881b      	ldrh	r3, [r3, #0]
     362:	2b63      	cmp	r3, #99	; 0x63
     364:	d908      	bls.n	378 <udi_cdc_tx_send+0xd8>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     366:	4b17      	ldr	r3, [pc, #92]	; (3c4 <udi_cdc_tx_send+0x124>)
     368:	4798      	blx	r3
     36a:	2800      	cmp	r0, #0
     36c:	d0be      	beq.n	2ec <udi_cdc_tx_send+0x4c>
     36e:	4b1e      	ldr	r3, [pc, #120]	; (3e8 <udi_cdc_tx_send+0x148>)
     370:	4a1a      	ldr	r2, [pc, #104]	; (3dc <udi_cdc_tx_send+0x13c>)
     372:	8812      	ldrh	r2, [r2, #0]
     374:	429a      	cmp	r2, r3
     376:	d8b9      	bhi.n	2ec <udi_cdc_tx_send+0x4c>
	if (cpu_irq_is_enabled_flags(flags))
     378:	2d00      	cmp	r5, #0
     37a:	d100      	bne.n	37e <udi_cdc_tx_send+0xde>
     37c:	e796      	b.n	2ac <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
     37e:	2201      	movs	r2, #1
     380:	4b13      	ldr	r3, [pc, #76]	; (3d0 <udi_cdc_tx_send+0x130>)
     382:	701a      	strb	r2, [r3, #0]
     384:	f3bf 8f5f 	dmb	sy
     388:	b662      	cpsie	i
     38a:	e78f      	b.n	2ac <udi_cdc_tx_send+0xc>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     38c:	4262      	negs	r2, r4
     38e:	4154      	adcs	r4, r2
     390:	b2e4      	uxtb	r4, r4
     392:	e7b7      	b.n	304 <udi_cdc_tx_send+0x64>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     394:	4b13      	ldr	r3, [pc, #76]	; (3e4 <udi_cdc_tx_send+0x144>)
     396:	4798      	blx	r3
     398:	4b0b      	ldr	r3, [pc, #44]	; (3c8 <udi_cdc_tx_send+0x128>)
     39a:	8018      	strh	r0, [r3, #0]
     39c:	e002      	b.n	3a4 <udi_cdc_tx_send+0x104>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     39e:	2200      	movs	r2, #0
     3a0:	4b09      	ldr	r3, [pc, #36]	; (3c8 <udi_cdc_tx_send+0x128>)
     3a2:	801a      	strh	r2, [r3, #0]
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     3a4:	0076      	lsls	r6, r6, #1
	udd_ep_run( ep,
     3a6:	4b0c      	ldr	r3, [pc, #48]	; (3d8 <udi_cdc_tx_send+0x138>)
     3a8:	5af3      	ldrh	r3, [r6, r3]
			udi_cdc_tx_buf[port][buf_sel_trans],
     3aa:	01a4      	lsls	r4, r4, #6
     3ac:	4a0f      	ldr	r2, [pc, #60]	; (3ec <udi_cdc_tx_send+0x14c>)
     3ae:	1914      	adds	r4, r2, r4
	udd_ep_run( ep,
     3b0:	4a0f      	ldr	r2, [pc, #60]	; (3f0 <udi_cdc_tx_send+0x150>)
     3b2:	9200      	str	r2, [sp, #0]
     3b4:	0022      	movs	r2, r4
     3b6:	0029      	movs	r1, r5
     3b8:	2081      	movs	r0, #129	; 0x81
     3ba:	4c0e      	ldr	r4, [pc, #56]	; (3f4 <udi_cdc_tx_send+0x154>)
     3bc:	47a0      	blx	r4
     3be:	e775      	b.n	2ac <udi_cdc_tx_send+0xc>
     3c0:	20000240 	.word	0x20000240
     3c4:	0000341d 	.word	0x0000341d
     3c8:	2000023c 	.word	0x2000023c
     3cc:	00003431 	.word	0x00003431
     3d0:	200000e8 	.word	0x200000e8
     3d4:	20000238 	.word	0x20000238
     3d8:	20000234 	.word	0x20000234
     3dc:	20000108 	.word	0x20000108
     3e0:	200001b0 	.word	0x200001b0
     3e4:	00003421 	.word	0x00003421
     3e8:	0000031f 	.word	0x0000031f
     3ec:	200001b4 	.word	0x200001b4
     3f0:	000003f9 	.word	0x000003f9
     3f4:	00003729 	.word	0x00003729

000003f8 <udi_cdc_data_sent>:
{
     3f8:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     3fa:	2800      	cmp	r0, #0
     3fc:	d000      	beq.n	400 <udi_cdc_data_sent+0x8>
}
     3fe:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     400:	4b07      	ldr	r3, [pc, #28]	; (420 <udi_cdc_data_sent+0x28>)
     402:	781b      	ldrb	r3, [r3, #0]
     404:	425a      	negs	r2, r3
     406:	4153      	adcs	r3, r2
     408:	005b      	lsls	r3, r3, #1
     40a:	2200      	movs	r2, #0
     40c:	4905      	ldr	r1, [pc, #20]	; (424 <udi_cdc_data_sent+0x2c>)
     40e:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     410:	4b05      	ldr	r3, [pc, #20]	; (428 <udi_cdc_data_sent+0x30>)
     412:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     414:	4b05      	ldr	r3, [pc, #20]	; (42c <udi_cdc_data_sent+0x34>)
     416:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
     418:	4b05      	ldr	r3, [pc, #20]	; (430 <udi_cdc_data_sent+0x38>)
     41a:	4798      	blx	r3
     41c:	e7ef      	b.n	3fe <udi_cdc_data_sent+0x6>
     41e:	46c0      	nop			; (mov r8, r8)
     420:	20000238 	.word	0x20000238
     424:	20000234 	.word	0x20000234
     428:	200001b0 	.word	0x200001b0
     42c:	20000240 	.word	0x20000240
     430:	000002a1 	.word	0x000002a1

00000434 <udi_cdc_data_sof_notify>:
{
     434:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
     436:	2000      	movs	r0, #0
     438:	4b01      	ldr	r3, [pc, #4]	; (440 <udi_cdc_data_sof_notify+0xc>)
     43a:	4798      	blx	r3
}
     43c:	bd10      	pop	{r4, pc}
     43e:	46c0      	nop			; (mov r8, r8)
     440:	000002a1 	.word	0x000002a1

00000444 <udi_cdc_ctrl_state_notify>:
{
     444:	b510      	push	{r4, lr}
     446:	b082      	sub	sp, #8
     448:	0008      	movs	r0, r1
	if ((!udi_cdc_serial_state_msg_ongoing[port])
     44a:	4b0c      	ldr	r3, [pc, #48]	; (47c <udi_cdc_ctrl_state_notify+0x38>)
     44c:	781b      	ldrb	r3, [r3, #0]
     44e:	2b00      	cmp	r3, #0
     450:	d112      	bne.n	478 <udi_cdc_ctrl_state_notify+0x34>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
     452:	4b0b      	ldr	r3, [pc, #44]	; (480 <udi_cdc_ctrl_state_notify+0x3c>)
     454:	881b      	ldrh	r3, [r3, #0]
     456:	b29b      	uxth	r3, r3
     458:	4a0a      	ldr	r2, [pc, #40]	; (484 <udi_cdc_ctrl_state_notify+0x40>)
     45a:	8912      	ldrh	r2, [r2, #8]
     45c:	429a      	cmp	r2, r3
     45e:	d00b      	beq.n	478 <udi_cdc_ctrl_state_notify+0x34>
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
     460:	4b07      	ldr	r3, [pc, #28]	; (480 <udi_cdc_ctrl_state_notify+0x3c>)
     462:	881b      	ldrh	r3, [r3, #0]
     464:	4a07      	ldr	r2, [pc, #28]	; (484 <udi_cdc_ctrl_state_notify+0x40>)
     466:	8113      	strh	r3, [r2, #8]
				udd_ep_run(ep,
     468:	4b07      	ldr	r3, [pc, #28]	; (488 <udi_cdc_ctrl_state_notify+0x44>)
     46a:	9300      	str	r3, [sp, #0]
     46c:	230a      	movs	r3, #10
     46e:	2100      	movs	r1, #0
     470:	4c06      	ldr	r4, [pc, #24]	; (48c <udi_cdc_ctrl_state_notify+0x48>)
     472:	47a0      	blx	r4
		udi_cdc_serial_state_msg_ongoing[port] =
     474:	4b01      	ldr	r3, [pc, #4]	; (47c <udi_cdc_ctrl_state_notify+0x38>)
     476:	7018      	strb	r0, [r3, #0]
}
     478:	b002      	add	sp, #8
     47a:	bd10      	pop	{r4, pc}
     47c:	200001a8 	.word	0x200001a8
     480:	200001ac 	.word	0x200001ac
     484:	20000244 	.word	0x20000244
     488:	000004ed 	.word	0x000004ed
     48c:	00003729 	.word	0x00003729

00000490 <udi_cdc_ctrl_state_change>:
{
     490:	b500      	push	{lr}
     492:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     494:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     498:	4258      	negs	r0, r3
     49a:	4143      	adcs	r3, r0
     49c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     49e:	b672      	cpsid	i
     4a0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     4a4:	2000      	movs	r0, #0
     4a6:	4b0e      	ldr	r3, [pc, #56]	; (4e0 <udi_cdc_ctrl_state_change+0x50>)
     4a8:	7018      	strb	r0, [r3, #0]
	return flags;
     4aa:	9b01      	ldr	r3, [sp, #4]
	if (b_set) {
     4ac:	2900      	cmp	r1, #0
     4ae:	d011      	beq.n	4d4 <udi_cdc_ctrl_state_change+0x44>
		udi_cdc_state[port] |= bit_mask;
     4b0:	480c      	ldr	r0, [pc, #48]	; (4e4 <udi_cdc_ctrl_state_change+0x54>)
     4b2:	8801      	ldrh	r1, [r0, #0]
     4b4:	430a      	orrs	r2, r1
     4b6:	8002      	strh	r2, [r0, #0]
	if (cpu_irq_is_enabled_flags(flags))
     4b8:	2b00      	cmp	r3, #0
     4ba:	d005      	beq.n	4c8 <udi_cdc_ctrl_state_change+0x38>
		cpu_irq_enable();
     4bc:	2201      	movs	r2, #1
     4be:	4b08      	ldr	r3, [pc, #32]	; (4e0 <udi_cdc_ctrl_state_change+0x50>)
     4c0:	701a      	strb	r2, [r3, #0]
     4c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     4c6:	b662      	cpsie	i
	udi_cdc_ctrl_state_notify(port, ep_comm);
     4c8:	2183      	movs	r1, #131	; 0x83
     4ca:	2000      	movs	r0, #0
     4cc:	4b06      	ldr	r3, [pc, #24]	; (4e8 <udi_cdc_ctrl_state_change+0x58>)
     4ce:	4798      	blx	r3
}
     4d0:	b003      	add	sp, #12
     4d2:	bd00      	pop	{pc}
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
     4d4:	4803      	ldr	r0, [pc, #12]	; (4e4 <udi_cdc_ctrl_state_change+0x54>)
     4d6:	8801      	ldrh	r1, [r0, #0]
     4d8:	4391      	bics	r1, r2
     4da:	8001      	strh	r1, [r0, #0]
     4dc:	e7ec      	b.n	4b8 <udi_cdc_ctrl_state_change+0x28>
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	200000e8 	.word	0x200000e8
     4e4:	200001ac 	.word	0x200001ac
     4e8:	00000445 	.word	0x00000445

000004ec <udi_cdc_serial_state_msg_sent>:
{
     4ec:	b510      	push	{r4, lr}
	udi_cdc_serial_state_msg_ongoing[port] = false;
     4ee:	2100      	movs	r1, #0
     4f0:	4b07      	ldr	r3, [pc, #28]	; (510 <udi_cdc_serial_state_msg_sent+0x24>)
     4f2:	7019      	strb	r1, [r3, #0]
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
     4f4:	4807      	ldr	r0, [pc, #28]	; (514 <udi_cdc_serial_state_msg_sent+0x28>)
     4f6:	8803      	ldrh	r3, [r0, #0]
     4f8:	247c      	movs	r4, #124	; 0x7c
     4fa:	43a3      	bics	r3, r4
     4fc:	8003      	strh	r3, [r0, #0]
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
     4fe:	4806      	ldr	r0, [pc, #24]	; (518 <udi_cdc_serial_state_msg_sent+0x2c>)
     500:	8903      	ldrh	r3, [r0, #8]
     502:	43a3      	bics	r3, r4
     504:	8103      	strh	r3, [r0, #8]
	udi_cdc_ctrl_state_notify(port, ep);
     506:	0011      	movs	r1, r2
     508:	2000      	movs	r0, #0
     50a:	4b04      	ldr	r3, [pc, #16]	; (51c <udi_cdc_serial_state_msg_sent+0x30>)
     50c:	4798      	blx	r3
}
     50e:	bd10      	pop	{r4, pc}
     510:	200001a8 	.word	0x200001a8
     514:	200001ac 	.word	0x200001ac
     518:	20000244 	.word	0x20000244
     51c:	00000445 	.word	0x00000445

00000520 <udi_cdc_data_disable>:
{
     520:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
     522:	4a06      	ldr	r2, [pc, #24]	; (53c <udi_cdc_data_disable+0x1c>)
     524:	7813      	ldrb	r3, [r2, #0]
     526:	3b01      	subs	r3, #1
     528:	b2db      	uxtb	r3, r3
     52a:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     52c:	7810      	ldrb	r0, [r2, #0]
     52e:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     530:	4b03      	ldr	r3, [pc, #12]	; (540 <udi_cdc_data_disable+0x20>)
     532:	4798      	blx	r3
	udi_cdc_data_running = false;
     534:	2200      	movs	r2, #0
     536:	4b03      	ldr	r3, [pc, #12]	; (544 <udi_cdc_data_disable+0x24>)
     538:	701a      	strb	r2, [r3, #0]
}
     53a:	bd10      	pop	{r4, pc}
     53c:	20000114 	.word	0x20000114
     540:	00004e8d 	.word	0x00004e8d
     544:	2000010a 	.word	0x2000010a

00000548 <udi_cdc_comm_setup>:
{
     548:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     54a:	4b20      	ldr	r3, [pc, #128]	; (5cc <udi_cdc_comm_setup+0x84>)
     54c:	781a      	ldrb	r2, [r3, #0]
     54e:	b253      	sxtb	r3, r2
     550:	2b00      	cmp	r3, #0
     552:	db05      	blt.n	560 <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     554:	2360      	movs	r3, #96	; 0x60
     556:	4013      	ands	r3, r2
	return false;  // request Not supported
     558:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     55a:	2b20      	cmp	r3, #32
     55c:	d014      	beq.n	588 <udi_cdc_comm_setup+0x40>
}
     55e:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     560:	2360      	movs	r3, #96	; 0x60
     562:	4013      	ands	r3, r2
	return false;  // request Not supported
     564:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     566:	2b20      	cmp	r3, #32
     568:	d1f9      	bne.n	55e <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     56a:	4b18      	ldr	r3, [pc, #96]	; (5cc <udi_cdc_comm_setup+0x84>)
     56c:	785b      	ldrb	r3, [r3, #1]
     56e:	2b21      	cmp	r3, #33	; 0x21
     570:	d129      	bne.n	5c6 <udi_cdc_comm_setup+0x7e>
						udd_g_ctrlreq.req.wLength)
     572:	4b16      	ldr	r3, [pc, #88]	; (5cc <udi_cdc_comm_setup+0x84>)
				if (sizeof(usb_cdc_line_coding_t) !=
     574:	88db      	ldrh	r3, [r3, #6]
     576:	2b07      	cmp	r3, #7
     578:	d1f1      	bne.n	55e <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.payload =
     57a:	4b14      	ldr	r3, [pc, #80]	; (5cc <udi_cdc_comm_setup+0x84>)
     57c:	4a14      	ldr	r2, [pc, #80]	; (5d0 <udi_cdc_comm_setup+0x88>)
     57e:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     580:	2207      	movs	r2, #7
     582:	819a      	strh	r2, [r3, #12]
				return true;
     584:	3001      	adds	r0, #1
     586:	e7ea      	b.n	55e <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     588:	4b10      	ldr	r3, [pc, #64]	; (5cc <udi_cdc_comm_setup+0x84>)
     58a:	785b      	ldrb	r3, [r3, #1]
     58c:	2b20      	cmp	r3, #32
     58e:	d003      	beq.n	598 <udi_cdc_comm_setup+0x50>
     590:	2b22      	cmp	r3, #34	; 0x22
     592:	d00f      	beq.n	5b4 <udi_cdc_comm_setup+0x6c>
	return false;  // request Not supported
     594:	2000      	movs	r0, #0
     596:	e7e2      	b.n	55e <udi_cdc_comm_setup+0x16>
						udd_g_ctrlreq.req.wLength)
     598:	4b0c      	ldr	r3, [pc, #48]	; (5cc <udi_cdc_comm_setup+0x84>)
				if (sizeof(usb_cdc_line_coding_t) !=
     59a:	88db      	ldrh	r3, [r3, #6]
					return false; // Error for USB host
     59c:	2000      	movs	r0, #0
				if (sizeof(usb_cdc_line_coding_t) !=
     59e:	2b07      	cmp	r3, #7
     5a0:	d1dd      	bne.n	55e <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.callback =
     5a2:	4b0a      	ldr	r3, [pc, #40]	; (5cc <udi_cdc_comm_setup+0x84>)
     5a4:	4a0b      	ldr	r2, [pc, #44]	; (5d4 <udi_cdc_comm_setup+0x8c>)
     5a6:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
     5a8:	4a09      	ldr	r2, [pc, #36]	; (5d0 <udi_cdc_comm_setup+0x88>)
     5aa:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     5ac:	2207      	movs	r2, #7
     5ae:	819a      	strh	r2, [r3, #12]
				return true;
     5b0:	3001      	adds	r0, #1
     5b2:	e7d4      	b.n	55e <udi_cdc_comm_setup+0x16>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <udi_cdc_comm_setup+0x84>)
     5b6:	885b      	ldrh	r3, [r3, #2]
     5b8:	2101      	movs	r1, #1
     5ba:	4019      	ands	r1, r3
     5bc:	2000      	movs	r0, #0
     5be:	4b06      	ldr	r3, [pc, #24]	; (5d8 <udi_cdc_comm_setup+0x90>)
     5c0:	4798      	blx	r3
				return true;
     5c2:	2001      	movs	r0, #1
     5c4:	e7cb      	b.n	55e <udi_cdc_comm_setup+0x16>
	return false;  // request Not supported
     5c6:	2000      	movs	r0, #0
     5c8:	e7c9      	b.n	55e <udi_cdc_comm_setup+0x16>
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	200005e8 	.word	0x200005e8
     5d0:	2000010c 	.word	0x2000010c
     5d4:	00000225 	.word	0x00000225
     5d8:	00004ea5 	.word	0x00004ea5

000005dc <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
     5dc:	b510      	push	{r4, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
     5de:	2240      	movs	r2, #64	; 0x40
     5e0:	2101      	movs	r1, #1
     5e2:	2000      	movs	r0, #0
     5e4:	4b01      	ldr	r3, [pc, #4]	; (5ec <udi_cdc_signal_overrun+0x10>)
     5e6:	4798      	blx	r3
}
     5e8:	bd10      	pop	{r4, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	00000491 	.word	0x00000491

000005f0 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     5f0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5f2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     5f6:	425a      	negs	r2, r3
     5f8:	4153      	adcs	r3, r2
     5fa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     5fc:	b672      	cpsid	i
     5fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     602:	2200      	movs	r2, #0
     604:	4b0a      	ldr	r3, [pc, #40]	; (630 <udi_cdc_multi_get_nb_received_data+0x40>)
     606:	701a      	strb	r2, [r3, #0]
	return flags;
     608:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     60a:	4b0a      	ldr	r3, [pc, #40]	; (634 <udi_cdc_multi_get_nb_received_data+0x44>)
     60c:	8819      	ldrh	r1, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     60e:	4b0a      	ldr	r3, [pc, #40]	; (638 <udi_cdc_multi_get_nb_received_data+0x48>)
     610:	781b      	ldrb	r3, [r3, #0]
     612:	005b      	lsls	r3, r3, #1
     614:	4809      	ldr	r0, [pc, #36]	; (63c <udi_cdc_multi_get_nb_received_data+0x4c>)
     616:	5a18      	ldrh	r0, [r3, r0]
     618:	1a40      	subs	r0, r0, r1
	if (cpu_irq_is_enabled_flags(flags))
     61a:	2a00      	cmp	r2, #0
     61c:	d005      	beq.n	62a <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
     61e:	2201      	movs	r2, #1
     620:	4b03      	ldr	r3, [pc, #12]	; (630 <udi_cdc_multi_get_nb_received_data+0x40>)
     622:	701a      	strb	r2, [r3, #0]
     624:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     628:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     62a:	b002      	add	sp, #8
     62c:	4770      	bx	lr
     62e:	46c0      	nop			; (mov r8, r8)
     630:	200000e8 	.word	0x200000e8
     634:	200001a0 	.word	0x200001a0
     638:	2000019c 	.word	0x2000019c
     63c:	20000198 	.word	0x20000198

00000640 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     640:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     642:	4b03      	ldr	r3, [pc, #12]	; (650 <udi_cdc_multi_is_rx_ready+0x10>)
     644:	4798      	blx	r3
     646:	1e43      	subs	r3, r0, #1
     648:	4198      	sbcs	r0, r3
     64a:	b2c0      	uxtb	r0, r0
}
     64c:	bd10      	pop	{r4, pc}
     64e:	46c0      	nop			; (mov r8, r8)
     650:	000005f1 	.word	0x000005f1

00000654 <udi_cdc_rx_start>:
{
     654:	b510      	push	{r4, lr}
     656:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     658:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     65c:	425a      	negs	r2, r3
     65e:	4153      	adcs	r3, r2
     660:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     662:	b672      	cpsid	i
     664:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     668:	2200      	movs	r2, #0
     66a:	4b22      	ldr	r3, [pc, #136]	; (6f4 <udi_cdc_rx_start+0xa0>)
     66c:	701a      	strb	r2, [r3, #0]
	return flags;
     66e:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     670:	4a21      	ldr	r2, [pc, #132]	; (6f8 <udi_cdc_rx_start+0xa4>)
     672:	7814      	ldrb	r4, [r2, #0]
     674:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     676:	4a21      	ldr	r2, [pc, #132]	; (6fc <udi_cdc_rx_start+0xa8>)
     678:	7812      	ldrb	r2, [r2, #0]
     67a:	2a00      	cmp	r2, #0
     67c:	d107      	bne.n	68e <udi_cdc_rx_start+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     67e:	4a20      	ldr	r2, [pc, #128]	; (700 <udi_cdc_rx_start+0xac>)
     680:	8812      	ldrh	r2, [r2, #0]
     682:	0061      	lsls	r1, r4, #1
     684:	481f      	ldr	r0, [pc, #124]	; (704 <udi_cdc_rx_start+0xb0>)
     686:	5a09      	ldrh	r1, [r1, r0]
     688:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
     68a:	428a      	cmp	r2, r1
     68c:	d20a      	bcs.n	6a4 <udi_cdc_rx_start+0x50>
		return false;
     68e:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     690:	2b00      	cmp	r3, #0
     692:	d005      	beq.n	6a0 <udi_cdc_rx_start+0x4c>
		cpu_irq_enable();
     694:	2201      	movs	r2, #1
     696:	4b17      	ldr	r3, [pc, #92]	; (6f4 <udi_cdc_rx_start+0xa0>)
     698:	701a      	strb	r2, [r3, #0]
     69a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     69e:	b662      	cpsie	i
}
     6a0:	b004      	add	sp, #16
     6a2:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
     6a4:	2100      	movs	r1, #0
     6a6:	4a16      	ldr	r2, [pc, #88]	; (700 <udi_cdc_rx_start+0xac>)
     6a8:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     6aa:	4262      	negs	r2, r4
     6ac:	4162      	adcs	r2, r4
     6ae:	b2d2      	uxtb	r2, r2
     6b0:	4911      	ldr	r1, [pc, #68]	; (6f8 <udi_cdc_rx_start+0xa4>)
     6b2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
     6b4:	2101      	movs	r1, #1
     6b6:	4a11      	ldr	r2, [pc, #68]	; (6fc <udi_cdc_rx_start+0xa8>)
     6b8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     6ba:	2b00      	cmp	r3, #0
     6bc:	d005      	beq.n	6ca <udi_cdc_rx_start+0x76>
		cpu_irq_enable();
     6be:	2201      	movs	r2, #1
     6c0:	4b0c      	ldr	r3, [pc, #48]	; (6f4 <udi_cdc_rx_start+0xa0>)
     6c2:	701a      	strb	r2, [r3, #0]
     6c4:	f3bf 8f5f 	dmb	sy
     6c8:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     6ca:	2000      	movs	r0, #0
     6cc:	4b0e      	ldr	r3, [pc, #56]	; (708 <udi_cdc_rx_start+0xb4>)
     6ce:	4798      	blx	r3
     6d0:	2800      	cmp	r0, #0
     6d2:	d10a      	bne.n	6ea <udi_cdc_rx_start+0x96>
			udi_cdc_rx_buf[port][buf_sel_trans],
     6d4:	01a4      	lsls	r4, r4, #6
     6d6:	4a0d      	ldr	r2, [pc, #52]	; (70c <udi_cdc_rx_start+0xb8>)
     6d8:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
     6da:	4b0d      	ldr	r3, [pc, #52]	; (710 <udi_cdc_rx_start+0xbc>)
     6dc:	9300      	str	r3, [sp, #0]
     6de:	2340      	movs	r3, #64	; 0x40
     6e0:	2101      	movs	r1, #1
     6e2:	2002      	movs	r0, #2
     6e4:	4c0b      	ldr	r4, [pc, #44]	; (714 <udi_cdc_rx_start+0xc0>)
     6e6:	47a0      	blx	r4
     6e8:	e7da      	b.n	6a0 <udi_cdc_rx_start+0x4c>
		UDI_CDC_RX_NOTIFY(port);
     6ea:	2000      	movs	r0, #0
     6ec:	4b0a      	ldr	r3, [pc, #40]	; (718 <udi_cdc_rx_start+0xc4>)
     6ee:	4798      	blx	r3
     6f0:	e7f0      	b.n	6d4 <udi_cdc_rx_start+0x80>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	200000e8 	.word	0x200000e8
     6f8:	2000019c 	.word	0x2000019c
     6fc:	200001a4 	.word	0x200001a4
     700:	200001a0 	.word	0x200001a0
     704:	20000198 	.word	0x20000198
     708:	00000641 	.word	0x00000641
     70c:	20000118 	.word	0x20000118
     710:	000007ad 	.word	0x000007ad
     714:	00003729 	.word	0x00003729
     718:	00004f75 	.word	0x00004f75

0000071c <udi_cdc_data_enable>:
{
     71c:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
     71e:	2400      	movs	r4, #0
     720:	4b15      	ldr	r3, [pc, #84]	; (778 <udi_cdc_data_enable+0x5c>)
     722:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     724:	4b15      	ldr	r3, [pc, #84]	; (77c <udi_cdc_data_enable+0x60>)
     726:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     728:	4b15      	ldr	r3, [pc, #84]	; (780 <udi_cdc_data_enable+0x64>)
     72a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     72c:	4b15      	ldr	r3, [pc, #84]	; (784 <udi_cdc_data_enable+0x68>)
     72e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     730:	4b15      	ldr	r3, [pc, #84]	; (788 <udi_cdc_data_enable+0x6c>)
     732:	2500      	movs	r5, #0
     734:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     736:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     738:	4b14      	ldr	r3, [pc, #80]	; (78c <udi_cdc_data_enable+0x70>)
     73a:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     73c:	2000      	movs	r0, #0
     73e:	4b14      	ldr	r3, [pc, #80]	; (790 <udi_cdc_data_enable+0x74>)
     740:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
     742:	4b14      	ldr	r3, [pc, #80]	; (794 <udi_cdc_data_enable+0x78>)
     744:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     746:	4b14      	ldr	r3, [pc, #80]	; (798 <udi_cdc_data_enable+0x7c>)
     748:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     74a:	4b14      	ldr	r3, [pc, #80]	; (79c <udi_cdc_data_enable+0x80>)
     74c:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     74e:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     750:	4b13      	ldr	r3, [pc, #76]	; (7a0 <udi_cdc_data_enable+0x84>)
     752:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     754:	2000      	movs	r0, #0
     756:	4b13      	ldr	r3, [pc, #76]	; (7a4 <udi_cdc_data_enable+0x88>)
     758:	4798      	blx	r3
     75a:	2800      	cmp	r0, #0
     75c:	d007      	beq.n	76e <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
     75e:	4a06      	ldr	r2, [pc, #24]	; (778 <udi_cdc_data_enable+0x5c>)
     760:	7813      	ldrb	r3, [r2, #0]
     762:	3301      	adds	r3, #1
     764:	b2db      	uxtb	r3, r3
     766:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     768:	7813      	ldrb	r3, [r2, #0]
     76a:	2b01      	cmp	r3, #1
     76c:	d000      	beq.n	770 <udi_cdc_data_enable+0x54>
}
     76e:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
     770:	2201      	movs	r2, #1
     772:	4b0d      	ldr	r3, [pc, #52]	; (7a8 <udi_cdc_data_enable+0x8c>)
     774:	701a      	strb	r2, [r3, #0]
     776:	e7fa      	b.n	76e <udi_cdc_data_enable+0x52>
     778:	20000114 	.word	0x20000114
     77c:	20000240 	.word	0x20000240
     780:	200001b0 	.word	0x200001b0
     784:	20000238 	.word	0x20000238
     788:	20000234 	.word	0x20000234
     78c:	2000023c 	.word	0x2000023c
     790:	000002a1 	.word	0x000002a1
     794:	200001a4 	.word	0x200001a4
     798:	2000019c 	.word	0x2000019c
     79c:	20000198 	.word	0x20000198
     7a0:	200001a0 	.word	0x200001a0
     7a4:	00000655 	.word	0x00000655
     7a8:	2000010a 	.word	0x2000010a

000007ac <udi_cdc_data_received>:
{
     7ac:	b510      	push	{r4, lr}
     7ae:	b082      	sub	sp, #8
     7b0:	0014      	movs	r4, r2
	if (UDD_EP_TRANSFER_OK != status) {
     7b2:	2800      	cmp	r0, #0
     7b4:	d110      	bne.n	7d8 <udi_cdc_data_received+0x2c>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     7b6:	4b0f      	ldr	r3, [pc, #60]	; (7f4 <udi_cdc_data_received+0x48>)
     7b8:	781a      	ldrb	r2, [r3, #0]
     7ba:	4253      	negs	r3, r2
     7bc:	415a      	adcs	r2, r3
     7be:	b2d2      	uxtb	r2, r2
	if (!n) {
     7c0:	2900      	cmp	r1, #0
     7c2:	d00b      	beq.n	7dc <udi_cdc_data_received+0x30>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     7c4:	b289      	uxth	r1, r1
     7c6:	0052      	lsls	r2, r2, #1
     7c8:	4b0b      	ldr	r3, [pc, #44]	; (7f8 <udi_cdc_data_received+0x4c>)
     7ca:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
     7cc:	2200      	movs	r2, #0
     7ce:	4b0b      	ldr	r3, [pc, #44]	; (7fc <udi_cdc_data_received+0x50>)
     7d0:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     7d2:	2000      	movs	r0, #0
     7d4:	4b0a      	ldr	r3, [pc, #40]	; (800 <udi_cdc_data_received+0x54>)
     7d6:	4798      	blx	r3
}
     7d8:	b002      	add	sp, #8
     7da:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
     7dc:	0192      	lsls	r2, r2, #6
     7de:	4b09      	ldr	r3, [pc, #36]	; (804 <udi_cdc_data_received+0x58>)
     7e0:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
     7e2:	4b09      	ldr	r3, [pc, #36]	; (808 <udi_cdc_data_received+0x5c>)
     7e4:	9300      	str	r3, [sp, #0]
     7e6:	2340      	movs	r3, #64	; 0x40
     7e8:	3101      	adds	r1, #1
     7ea:	0020      	movs	r0, r4
     7ec:	4c07      	ldr	r4, [pc, #28]	; (80c <udi_cdc_data_received+0x60>)
     7ee:	47a0      	blx	r4
		return;
     7f0:	e7f2      	b.n	7d8 <udi_cdc_data_received+0x2c>
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	2000019c 	.word	0x2000019c
     7f8:	20000198 	.word	0x20000198
     7fc:	200001a4 	.word	0x200001a4
     800:	00000655 	.word	0x00000655
     804:	20000118 	.word	0x20000118
     808:	000007ad 	.word	0x000007ad
     80c:	00003729 	.word	0x00003729

00000810 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
     810:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_rx_ready(0);
     812:	2000      	movs	r0, #0
     814:	4b01      	ldr	r3, [pc, #4]	; (81c <udi_cdc_is_rx_ready+0xc>)
     816:	4798      	blx	r3
}
     818:	bd10      	pop	{r4, pc}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	00000641 	.word	0x00000641

00000820 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     820:	b5f0      	push	{r4, r5, r6, r7, lr}
     822:	46d6      	mov	lr, sl
     824:	464f      	mov	r7, r9
     826:	4646      	mov	r6, r8
     828:	b5c0      	push	{r6, r7, lr}
     82a:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     82c:	4b27      	ldr	r3, [pc, #156]	; (8cc <udi_cdc_multi_getc+0xac>)
     82e:	799b      	ldrb	r3, [r3, #6]
     830:	3b09      	subs	r3, #9
     832:	425a      	negs	r2, r3
     834:	4153      	adcs	r3, r2
     836:	b2db      	uxtb	r3, r3
     838:	4699      	mov	r9, r3
	int rx_data = 0;
     83a:	2300      	movs	r3, #0
     83c:	469c      	mov	ip, r3
	cpu_irq_disable();
     83e:	4b24      	ldr	r3, [pc, #144]	; (8d0 <udi_cdc_multi_getc+0xb0>)
     840:	4698      	mov	r8, r3
     842:	2700      	movs	r7, #0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     844:	4e23      	ldr	r6, [pc, #140]	; (8d4 <udi_cdc_multi_getc+0xb4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
     846:	4c24      	ldr	r4, [pc, #144]	; (8d8 <udi_cdc_multi_getc+0xb8>)
     848:	e005      	b.n	856 <udi_cdc_multi_getc+0x36>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
     84a:	428b      	cmp	r3, r1
     84c:	d329      	bcc.n	8a2 <udi_cdc_multi_getc+0x82>
		if (!udi_cdc_data_running) {
     84e:	4b23      	ldr	r3, [pc, #140]	; (8dc <udi_cdc_multi_getc+0xbc>)
     850:	781b      	ldrb	r3, [r3, #0]
     852:	2b00      	cmp	r3, #0
     854:	d01d      	beq.n	892 <udi_cdc_multi_getc+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     856:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     85a:	425a      	negs	r2, r3
     85c:	4153      	adcs	r3, r2
     85e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     860:	b672      	cpsid	i
     862:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     866:	4643      	mov	r3, r8
     868:	701f      	strb	r7, [r3, #0]
	return flags;
     86a:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     86c:	8833      	ldrh	r3, [r6, #0]
     86e:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     870:	7822      	ldrb	r2, [r4, #0]
     872:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     874:	0055      	lsls	r5, r2, #1
     876:	491a      	ldr	r1, [pc, #104]	; (8e0 <udi_cdc_multi_getc+0xc0>)
     878:	5a69      	ldrh	r1, [r5, r1]
     87a:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
     87c:	2800      	cmp	r0, #0
     87e:	d0e4      	beq.n	84a <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
     880:	2001      	movs	r0, #1
     882:	4682      	mov	sl, r0
     884:	4812      	ldr	r0, [pc, #72]	; (8d0 <udi_cdc_multi_getc+0xb0>)
     886:	4655      	mov	r5, sl
     888:	7005      	strb	r5, [r0, #0]
     88a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     88e:	b662      	cpsie	i
     890:	e7db      	b.n	84a <udi_cdc_multi_getc+0x2a>
			return 0;
     892:	2500      	movs	r5, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     894:	0028      	movs	r0, r5
     896:	b002      	add	sp, #8
     898:	bc1c      	pop	{r2, r3, r4}
     89a:	4690      	mov	r8, r2
     89c:	4699      	mov	r9, r3
     89e:	46a2      	mov	sl, r4
     8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     8a2:	0192      	lsls	r2, r2, #6
     8a4:	490f      	ldr	r1, [pc, #60]	; (8e4 <udi_cdc_multi_getc+0xc4>)
     8a6:	188a      	adds	r2, r1, r2
     8a8:	5cd2      	ldrb	r2, [r2, r3]
     8aa:	4665      	mov	r5, ip
     8ac:	4315      	orrs	r5, r2
	udi_cdc_rx_pos[port] = pos+1;
     8ae:	3301      	adds	r3, #1
     8b0:	b29b      	uxth	r3, r3
     8b2:	4a08      	ldr	r2, [pc, #32]	; (8d4 <udi_cdc_multi_getc+0xb4>)
     8b4:	8013      	strh	r3, [r2, #0]
	udi_cdc_rx_start(port);
     8b6:	2000      	movs	r0, #0
     8b8:	4b0b      	ldr	r3, [pc, #44]	; (8e8 <udi_cdc_multi_getc+0xc8>)
     8ba:	4798      	blx	r3
	if (b_databit_9) {
     8bc:	464b      	mov	r3, r9
     8be:	2b00      	cmp	r3, #0
     8c0:	d0e8      	beq.n	894 <udi_cdc_multi_getc+0x74>
		rx_data = rx_data << 8;
     8c2:	022b      	lsls	r3, r5, #8
     8c4:	469c      	mov	ip, r3
		b_databit_9 = false;
     8c6:	2300      	movs	r3, #0
     8c8:	4699      	mov	r9, r3
		goto udi_cdc_getc_process_one_byte;
     8ca:	e7c4      	b.n	856 <udi_cdc_multi_getc+0x36>
     8cc:	2000010c 	.word	0x2000010c
     8d0:	200000e8 	.word	0x200000e8
     8d4:	200001a0 	.word	0x200001a0
     8d8:	2000019c 	.word	0x2000019c
     8dc:	2000010a 	.word	0x2000010a
     8e0:	20000198 	.word	0x20000198
     8e4:	20000118 	.word	0x20000118
     8e8:	00000655 	.word	0x00000655

000008ec <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     8ec:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
     8ee:	2000      	movs	r0, #0
     8f0:	4b01      	ldr	r3, [pc, #4]	; (8f8 <udi_cdc_getc+0xc>)
     8f2:	4798      	blx	r3
}
     8f4:	bd10      	pop	{r4, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	00000821 	.word	0x00000821

000008fc <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     8fc:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8fe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     902:	425a      	negs	r2, r3
     904:	4153      	adcs	r3, r2
     906:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     908:	b672      	cpsid	i
     90a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     90e:	2200      	movs	r2, #0
     910:	4b14      	ldr	r3, [pc, #80]	; (964 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     912:	701a      	strb	r2, [r3, #0]
	return flags;
     914:	9901      	ldr	r1, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     916:	4b14      	ldr	r3, [pc, #80]	; (968 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     91c:	0058      	lsls	r0, r3, #1
     91e:	4a13      	ldr	r2, [pc, #76]	; (96c <udi_cdc_multi_get_free_tx_buffer+0x70>)
     920:	5a82      	ldrh	r2, [r0, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     922:	2a40      	cmp	r2, #64	; 0x40
     924:	d00b      	beq.n	93e <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     926:	2040      	movs	r0, #64	; 0x40
     928:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
     92a:	2900      	cmp	r1, #0
     92c:	d005      	beq.n	93a <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
     92e:	2201      	movs	r2, #1
     930:	4b0c      	ldr	r3, [pc, #48]	; (964 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     932:	701a      	strb	r2, [r3, #0]
     934:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     938:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     93a:	b002      	add	sp, #8
     93c:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
     93e:	480c      	ldr	r0, [pc, #48]	; (970 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     940:	7800      	ldrb	r0, [r0, #0]
     942:	2800      	cmp	r0, #0
     944:	d1ef      	bne.n	926 <udi_cdc_multi_get_free_tx_buffer+0x2a>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     946:	480b      	ldr	r0, [pc, #44]	; (974 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     948:	7800      	ldrb	r0, [r0, #0]
     94a:	2800      	cmp	r0, #0
     94c:	d1eb      	bne.n	926 <udi_cdc_multi_get_free_tx_buffer+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
     94e:	3001      	adds	r0, #1
     950:	4a08      	ldr	r2, [pc, #32]	; (974 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     952:	7010      	strb	r0, [r2, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     954:	425a      	negs	r2, r3
     956:	4153      	adcs	r3, r2
     958:	b2db      	uxtb	r3, r3
     95a:	4a03      	ldr	r2, [pc, #12]	; (968 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     95c:	7013      	strb	r3, [r2, #0]
			buf_sel_nb = 0;
     95e:	2200      	movs	r2, #0
     960:	e7e1      	b.n	926 <udi_cdc_multi_get_free_tx_buffer+0x2a>
     962:	46c0      	nop			; (mov r8, r8)
     964:	200000e8 	.word	0x200000e8
     968:	20000238 	.word	0x20000238
     96c:	20000234 	.word	0x20000234
     970:	20000240 	.word	0x20000240
     974:	200001b0 	.word	0x200001b0

00000978 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     978:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     97a:	4b03      	ldr	r3, [pc, #12]	; (988 <udi_cdc_multi_is_tx_ready+0x10>)
     97c:	4798      	blx	r3
     97e:	1e43      	subs	r3, r0, #1
     980:	4198      	sbcs	r0, r3
     982:	b2c0      	uxtb	r0, r0
}
     984:	bd10      	pop	{r4, pc}
     986:	46c0      	nop			; (mov r8, r8)
     988:	000008fd 	.word	0x000008fd

0000098c <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
     98c:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_tx_ready(0);
     98e:	2000      	movs	r0, #0
     990:	4b01      	ldr	r3, [pc, #4]	; (998 <udi_cdc_is_tx_ready+0xc>)
     992:	4798      	blx	r3
}
     994:	bd10      	pop	{r4, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	00000979 	.word	0x00000979

0000099c <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
     99e:	46de      	mov	lr, fp
     9a0:	4657      	mov	r7, sl
     9a2:	464e      	mov	r6, r9
     9a4:	4645      	mov	r5, r8
     9a6:	b5e0      	push	{r5, r6, r7, lr}
     9a8:	b083      	sub	sp, #12
     9aa:	000c      	movs	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     9ac:	4b22      	ldr	r3, [pc, #136]	; (a38 <udi_cdc_multi_putc+0x9c>)
     9ae:	799d      	ldrb	r5, [r3, #6]
     9b0:	3d09      	subs	r5, #9
     9b2:	426b      	negs	r3, r5
     9b4:	415d      	adcs	r5, r3
     9b6:	b2ed      	uxtb	r5, r5

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     9b8:	4e20      	ldr	r6, [pc, #128]	; (a3c <udi_cdc_multi_putc+0xa0>)
	cpu_irq_disable();
     9ba:	4b21      	ldr	r3, [pc, #132]	; (a40 <udi_cdc_multi_putc+0xa4>)
     9bc:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     9be:	4b21      	ldr	r3, [pc, #132]	; (a44 <udi_cdc_multi_putc+0xa8>)
     9c0:	469a      	mov	sl, r3
     9c2:	e027      	b.n	a14 <udi_cdc_multi_putc+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9c4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     9c8:	425a      	negs	r2, r3
     9ca:	4153      	adcs	r3, r2
     9cc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     9ce:	b672      	cpsid	i
     9d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     9d4:	2300      	movs	r3, #0
     9d6:	4642      	mov	r2, r8
     9d8:	7013      	strb	r3, [r2, #0]
	return flags;
     9da:	9b01      	ldr	r3, [sp, #4]
     9dc:	469b      	mov	fp, r3
     9de:	4653      	mov	r3, sl
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     9e4:	4a18      	ldr	r2, [pc, #96]	; (a48 <udi_cdc_multi_putc+0xac>)
     9e6:	4694      	mov	ip, r2
     9e8:	005f      	lsls	r7, r3, #1
     9ea:	5ab9      	ldrh	r1, [r7, r2]
     9ec:	1c4a      	adds	r2, r1, #1
     9ee:	4660      	mov	r0, ip
     9f0:	523a      	strh	r2, [r7, r0]
     9f2:	019b      	lsls	r3, r3, #6
     9f4:	4a15      	ldr	r2, [pc, #84]	; (a4c <udi_cdc_multi_putc+0xb0>)
     9f6:	18d3      	adds	r3, r2, r3
     9f8:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
     9fa:	465b      	mov	r3, fp
     9fc:	2b00      	cmp	r3, #0
     9fe:	d005      	beq.n	a0c <udi_cdc_multi_putc+0x70>
		cpu_irq_enable();
     a00:	2201      	movs	r2, #1
     a02:	4b0f      	ldr	r3, [pc, #60]	; (a40 <udi_cdc_multi_putc+0xa4>)
     a04:	701a      	strb	r2, [r3, #0]
     a06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a0a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     a0c:	2d00      	cmp	r5, #0
     a0e:	d010      	beq.n	a32 <udi_cdc_multi_putc+0x96>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     a10:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
     a12:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
     a14:	2000      	movs	r0, #0
     a16:	47b0      	blx	r6
     a18:	2800      	cmp	r0, #0
     a1a:	d1d3      	bne.n	9c4 <udi_cdc_multi_putc+0x28>
		if (!udi_cdc_data_running) {
     a1c:	4b0c      	ldr	r3, [pc, #48]	; (a50 <udi_cdc_multi_putc+0xb4>)
     a1e:	781b      	ldrb	r3, [r3, #0]
     a20:	2b00      	cmp	r3, #0
     a22:	d1f7      	bne.n	a14 <udi_cdc_multi_putc+0x78>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
     a24:	b003      	add	sp, #12
     a26:	bc3c      	pop	{r2, r3, r4, r5}
     a28:	4690      	mov	r8, r2
     a2a:	4699      	mov	r9, r3
     a2c:	46a2      	mov	sl, r4
     a2e:	46ab      	mov	fp, r5
     a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
     a32:	2001      	movs	r0, #1
     a34:	e7f6      	b.n	a24 <udi_cdc_multi_putc+0x88>
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	2000010c 	.word	0x2000010c
     a3c:	00000979 	.word	0x00000979
     a40:	200000e8 	.word	0x200000e8
     a44:	20000238 	.word	0x20000238
     a48:	20000234 	.word	0x20000234
     a4c:	200001b4 	.word	0x200001b4
     a50:	2000010a 	.word	0x2000010a

00000a54 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     a54:	b510      	push	{r4, lr}
     a56:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     a58:	2000      	movs	r0, #0
     a5a:	4b01      	ldr	r3, [pc, #4]	; (a60 <udi_cdc_putc+0xc>)
     a5c:	4798      	blx	r3
}
     a5e:	bd10      	pop	{r4, pc}
     a60:	0000099d 	.word	0x0000099d

00000a64 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     a64:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     a66:	4b11      	ldr	r3, [pc, #68]	; (aac <udc_next_desc_in_iface+0x48>)
     a68:	681b      	ldr	r3, [r3, #0]
     a6a:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     a6c:	7894      	ldrb	r4, [r2, #2]
     a6e:	78d3      	ldrb	r3, [r2, #3]
     a70:	021b      	lsls	r3, r3, #8
     a72:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     a74:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     a76:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     a78:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     a7a:	4290      	cmp	r0, r2
     a7c:	d210      	bcs.n	aa0 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     a7e:	7843      	ldrb	r3, [r0, #1]
     a80:	2b04      	cmp	r3, #4
     a82:	d00f      	beq.n	aa4 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     a84:	428b      	cmp	r3, r1
     a86:	d00a      	beq.n	a9e <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     a88:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     a8a:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     a8c:	4290      	cmp	r0, r2
     a8e:	d205      	bcs.n	a9c <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     a90:	7843      	ldrb	r3, [r0, #1]
     a92:	2b04      	cmp	r3, #4
     a94:	d008      	beq.n	aa8 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     a96:	428b      	cmp	r3, r1
     a98:	d1f6      	bne.n	a88 <udc_next_desc_in_iface+0x24>
     a9a:	e000      	b.n	a9e <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     a9c:	2000      	movs	r0, #0
}
     a9e:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     aa0:	2000      	movs	r0, #0
     aa2:	e7fc      	b.n	a9e <udc_next_desc_in_iface+0x3a>
     aa4:	2000      	movs	r0, #0
     aa6:	e7fa      	b.n	a9e <udc_next_desc_in_iface+0x3a>
     aa8:	2000      	movs	r0, #0
     aaa:	e7f8      	b.n	a9e <udc_next_desc_in_iface+0x3a>
     aac:	2000025c 	.word	0x2000025c

00000ab0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     ab0:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     ab2:	4b03      	ldr	r3, [pc, #12]	; (ac0 <udc_valid_address+0x10>)
     ab4:	885b      	ldrh	r3, [r3, #2]
     ab6:	207f      	movs	r0, #127	; 0x7f
     ab8:	4018      	ands	r0, r3
     aba:	4b02      	ldr	r3, [pc, #8]	; (ac4 <udc_valid_address+0x14>)
     abc:	4798      	blx	r3
}
     abe:	bd10      	pop	{r4, pc}
     ac0:	200005e8 	.word	0x200005e8
     ac4:	00003901 	.word	0x00003901

00000ac8 <udc_update_iface_desc>:
{
     ac8:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     aca:	4b19      	ldr	r3, [pc, #100]	; (b30 <udc_update_iface_desc+0x68>)
     acc:	781b      	ldrb	r3, [r3, #0]
		return false;
     ace:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     ad0:	2b00      	cmp	r3, #0
     ad2:	d029      	beq.n	b28 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     ad4:	4b17      	ldr	r3, [pc, #92]	; (b34 <udc_update_iface_desc+0x6c>)
     ad6:	681b      	ldr	r3, [r3, #0]
     ad8:	681b      	ldr	r3, [r3, #0]
     ada:	791c      	ldrb	r4, [r3, #4]
     adc:	4284      	cmp	r4, r0
     ade:	d923      	bls.n	b28 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     ae0:	4a15      	ldr	r2, [pc, #84]	; (b38 <udc_update_iface_desc+0x70>)
     ae2:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     ae4:	789a      	ldrb	r2, [r3, #2]
     ae6:	78dc      	ldrb	r4, [r3, #3]
     ae8:	0224      	lsls	r4, r4, #8
     aea:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     aec:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     aee:	42a3      	cmp	r3, r4
     af0:	d21c      	bcs.n	b2c <udc_update_iface_desc+0x64>
     af2:	2500      	movs	r5, #0
     af4:	2601      	movs	r6, #1
     af6:	e007      	b.n	b08 <udc_update_iface_desc+0x40>
     af8:	4a0f      	ldr	r2, [pc, #60]	; (b38 <udc_update_iface_desc+0x70>)
     afa:	6013      	str	r3, [r2, #0]
     afc:	e00f      	b.n	b1e <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     afe:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     b00:	189b      	adds	r3, r3, r2
     b02:	0035      	movs	r5, r6
	while (ptr_end_desc >
     b04:	42a3      	cmp	r3, r4
     b06:	d20c      	bcs.n	b22 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     b08:	785a      	ldrb	r2, [r3, #1]
     b0a:	2a04      	cmp	r2, #4
     b0c:	d1f7      	bne.n	afe <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     b0e:	789a      	ldrb	r2, [r3, #2]
     b10:	4282      	cmp	r2, r0
     b12:	d1f4      	bne.n	afe <udc_update_iface_desc+0x36>
     b14:	78da      	ldrb	r2, [r3, #3]
     b16:	428a      	cmp	r2, r1
     b18:	d1f1      	bne.n	afe <udc_update_iface_desc+0x36>
     b1a:	2d00      	cmp	r5, #0
     b1c:	d1ec      	bne.n	af8 <udc_update_iface_desc+0x30>
				return true; // Interface found
     b1e:	2201      	movs	r2, #1
     b20:	e002      	b.n	b28 <udc_update_iface_desc+0x60>
     b22:	4a05      	ldr	r2, [pc, #20]	; (b38 <udc_update_iface_desc+0x70>)
     b24:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     b26:	2200      	movs	r2, #0
}
     b28:	0010      	movs	r0, r2
     b2a:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     b2c:	2200      	movs	r2, #0
     b2e:	e7fb      	b.n	b28 <udc_update_iface_desc+0x60>
     b30:	20000258 	.word	0x20000258
     b34:	2000025c 	.word	0x2000025c
     b38:	20000260 	.word	0x20000260

00000b3c <udc_iface_disable>:
{
     b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3e:	46c6      	mov	lr, r8
     b40:	b500      	push	{lr}
     b42:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     b44:	2100      	movs	r1, #0
     b46:	4b13      	ldr	r3, [pc, #76]	; (b94 <udc_iface_disable+0x58>)
     b48:	4798      	blx	r3
     b4a:	1e05      	subs	r5, r0, #0
     b4c:	d103      	bne.n	b56 <udc_iface_disable+0x1a>
}
     b4e:	0028      	movs	r0, r5
     b50:	bc04      	pop	{r2}
     b52:	4690      	mov	r8, r2
     b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b56:	4b10      	ldr	r3, [pc, #64]	; (b98 <udc_iface_disable+0x5c>)
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	685b      	ldr	r3, [r3, #4]
     b5c:	00a2      	lsls	r2, r4, #2
     b5e:	58d3      	ldr	r3, [r2, r3]
     b60:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b62:	68db      	ldr	r3, [r3, #12]
     b64:	4798      	blx	r3
     b66:	0001      	movs	r1, r0
     b68:	0020      	movs	r0, r4
     b6a:	4b0a      	ldr	r3, [pc, #40]	; (b94 <udc_iface_disable+0x58>)
     b6c:	4798      	blx	r3
     b6e:	1e05      	subs	r5, r0, #0
     b70:	d0ed      	beq.n	b4e <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     b72:	4b0a      	ldr	r3, [pc, #40]	; (b9c <udc_iface_disable+0x60>)
     b74:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b76:	4e0a      	ldr	r6, [pc, #40]	; (ba0 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     b78:	4f0a      	ldr	r7, [pc, #40]	; (ba4 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b7a:	2105      	movs	r1, #5
     b7c:	0020      	movs	r0, r4
     b7e:	47b0      	blx	r6
     b80:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     b82:	d002      	beq.n	b8a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     b84:	7880      	ldrb	r0, [r0, #2]
     b86:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b88:	e7f7      	b.n	b7a <udc_iface_disable+0x3e>
	udi_api->disable();
     b8a:	4643      	mov	r3, r8
     b8c:	685b      	ldr	r3, [r3, #4]
     b8e:	4798      	blx	r3
	return true;
     b90:	e7dd      	b.n	b4e <udc_iface_disable+0x12>
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	00000ac9 	.word	0x00000ac9
     b98:	2000025c 	.word	0x2000025c
     b9c:	20000260 	.word	0x20000260
     ba0:	00000a65 	.word	0x00000a65
     ba4:	00003441 	.word	0x00003441

00000ba8 <udc_iface_enable>:
{
     ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     baa:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     bac:	4b0f      	ldr	r3, [pc, #60]	; (bec <udc_iface_enable+0x44>)
     bae:	4798      	blx	r3
     bb0:	2800      	cmp	r0, #0
     bb2:	d019      	beq.n	be8 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     bb4:	4b0e      	ldr	r3, [pc, #56]	; (bf0 <udc_iface_enable+0x48>)
     bb6:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     bb8:	4e0e      	ldr	r6, [pc, #56]	; (bf4 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     bba:	4f0f      	ldr	r7, [pc, #60]	; (bf8 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     bbc:	2105      	movs	r1, #5
     bbe:	0020      	movs	r0, r4
     bc0:	47b0      	blx	r6
     bc2:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     bc4:	d009      	beq.n	bda <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     bc6:	7903      	ldrb	r3, [r0, #4]
     bc8:	7942      	ldrb	r2, [r0, #5]
     bca:	0212      	lsls	r2, r2, #8
     bcc:	431a      	orrs	r2, r3
     bce:	78c1      	ldrb	r1, [r0, #3]
     bd0:	7880      	ldrb	r0, [r0, #2]
     bd2:	47b8      	blx	r7
     bd4:	2800      	cmp	r0, #0
     bd6:	d1f1      	bne.n	bbc <udc_iface_enable+0x14>
     bd8:	e006      	b.n	be8 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     bda:	4b08      	ldr	r3, [pc, #32]	; (bfc <udc_iface_enable+0x54>)
     bdc:	681b      	ldr	r3, [r3, #0]
     bde:	685b      	ldr	r3, [r3, #4]
     be0:	00ad      	lsls	r5, r5, #2
     be2:	58eb      	ldr	r3, [r5, r3]
     be4:	681b      	ldr	r3, [r3, #0]
     be6:	4798      	blx	r3
}
     be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	00000ac9 	.word	0x00000ac9
     bf0:	20000260 	.word	0x20000260
     bf4:	00000a65 	.word	0x00000a65
     bf8:	00003499 	.word	0x00003499
     bfc:	2000025c 	.word	0x2000025c

00000c00 <udc_start>:
{
     c00:	b510      	push	{r4, lr}
	udd_enable();
     c02:	4b01      	ldr	r3, [pc, #4]	; (c08 <udc_start+0x8>)
     c04:	4798      	blx	r3
}
     c06:	bd10      	pop	{r4, pc}
     c08:	00003a65 	.word	0x00003a65

00000c0c <udc_reset>:
{
     c0c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     c0e:	4b0e      	ldr	r3, [pc, #56]	; (c48 <udc_reset+0x3c>)
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	2b00      	cmp	r3, #0
     c14:	d011      	beq.n	c3a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c16:	4b0d      	ldr	r3, [pc, #52]	; (c4c <udc_reset+0x40>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     c1c:	791b      	ldrb	r3, [r3, #4]
     c1e:	2b00      	cmp	r3, #0
     c20:	d00b      	beq.n	c3a <udc_reset+0x2e>
     c22:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     c24:	4e0a      	ldr	r6, [pc, #40]	; (c50 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c26:	4d09      	ldr	r5, [pc, #36]	; (c4c <udc_reset+0x40>)
			udc_iface_disable(iface_num);
     c28:	0020      	movs	r0, r4
     c2a:	47b0      	blx	r6
				iface_num++) {
     c2c:	3401      	adds	r4, #1
     c2e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c30:	682b      	ldr	r3, [r5, #0]
     c32:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     c34:	791b      	ldrb	r3, [r3, #4]
     c36:	42a3      	cmp	r3, r4
     c38:	d8f6      	bhi.n	c28 <udc_reset+0x1c>
	udc_num_configuration = 0;
     c3a:	2200      	movs	r2, #0
     c3c:	4b02      	ldr	r3, [pc, #8]	; (c48 <udc_reset+0x3c>)
     c3e:	701a      	strb	r2, [r3, #0]
	udc_device_status =
     c40:	3201      	adds	r2, #1
     c42:	4b04      	ldr	r3, [pc, #16]	; (c54 <udc_reset+0x48>)
     c44:	801a      	strh	r2, [r3, #0]
}
     c46:	bd70      	pop	{r4, r5, r6, pc}
     c48:	20000258 	.word	0x20000258
     c4c:	2000025c 	.word	0x2000025c
     c50:	00000b3d 	.word	0x00000b3d
     c54:	2000024e 	.word	0x2000024e

00000c58 <udc_sof_notify>:
{
     c58:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     c5a:	4b0e      	ldr	r3, [pc, #56]	; (c94 <udc_sof_notify+0x3c>)
     c5c:	781b      	ldrb	r3, [r3, #0]
     c5e:	2b00      	cmp	r3, #0
     c60:	d017      	beq.n	c92 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c62:	4b0d      	ldr	r3, [pc, #52]	; (c98 <udc_sof_notify+0x40>)
     c64:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     c66:	681a      	ldr	r2, [r3, #0]
     c68:	7912      	ldrb	r2, [r2, #4]
     c6a:	2a00      	cmp	r2, #0
     c6c:	d011      	beq.n	c92 <udc_sof_notify+0x3a>
     c6e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c70:	4d09      	ldr	r5, [pc, #36]	; (c98 <udc_sof_notify+0x40>)
     c72:	e006      	b.n	c82 <udc_sof_notify+0x2a>
				iface_num++) {
     c74:	3401      	adds	r4, #1
     c76:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c78:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     c7a:	681a      	ldr	r2, [r3, #0]
     c7c:	7912      	ldrb	r2, [r2, #4]
     c7e:	42a2      	cmp	r2, r4
     c80:	d907      	bls.n	c92 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     c82:	685b      	ldr	r3, [r3, #4]
     c84:	00a2      	lsls	r2, r4, #2
     c86:	58d3      	ldr	r3, [r2, r3]
     c88:	691b      	ldr	r3, [r3, #16]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d0f2      	beq.n	c74 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     c8e:	4798      	blx	r3
     c90:	e7f0      	b.n	c74 <udc_sof_notify+0x1c>
}
     c92:	bd70      	pop	{r4, r5, r6, pc}
     c94:	20000258 	.word	0x20000258
     c98:	2000025c 	.word	0x2000025c

00000c9c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     c9e:	4baa      	ldr	r3, [pc, #680]	; (f48 <udc_process_setup+0x2ac>)
     ca0:	2200      	movs	r2, #0
     ca2:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     ca4:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     ca6:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	b25a      	sxtb	r2, r3
     cac:	2a00      	cmp	r2, #0
     cae:	db13      	blt.n	cd8 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     cb0:	2260      	movs	r2, #96	; 0x60
     cb2:	421a      	tst	r2, r3
     cb4:	d100      	bne.n	cb8 <udc_process_setup+0x1c>
     cb6:	e0d6      	b.n	e66 <udc_process_setup+0x1ca>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     cb8:	4ba3      	ldr	r3, [pc, #652]	; (f48 <udc_process_setup+0x2ac>)
     cba:	781a      	ldrb	r2, [r3, #0]
     cbc:	231f      	movs	r3, #31
     cbe:	4013      	ands	r3, r2
     cc0:	2b01      	cmp	r3, #1
     cc2:	d100      	bne.n	cc6 <udc_process_setup+0x2a>
     cc4:	e172      	b.n	fac <udc_process_setup+0x310>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     cc6:	4ba0      	ldr	r3, [pc, #640]	; (f48 <udc_process_setup+0x2ac>)
     cc8:	781a      	ldrb	r2, [r3, #0]
     cca:	231f      	movs	r3, #31
     ccc:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     cce:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     cd0:	2b02      	cmp	r3, #2
     cd2:	d100      	bne.n	cd6 <udc_process_setup+0x3a>
     cd4:	e1c8      	b.n	1068 <udc_process_setup+0x3cc>
#endif
}
     cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     cd8:	4a9b      	ldr	r2, [pc, #620]	; (f48 <udc_process_setup+0x2ac>)
     cda:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     cdc:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     cde:	2a00      	cmp	r2, #0
     ce0:	d0f9      	beq.n	cd6 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     ce2:	2160      	movs	r1, #96	; 0x60
     ce4:	4219      	tst	r1, r3
     ce6:	d1e7      	bne.n	cb8 <udc_process_setup+0x1c>
     ce8:	211f      	movs	r1, #31
     cea:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     cec:	d108      	bne.n	d00 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     cee:	4996      	ldr	r1, [pc, #600]	; (f48 <udc_process_setup+0x2ac>)
     cf0:	7849      	ldrb	r1, [r1, #1]
     cf2:	2906      	cmp	r1, #6
     cf4:	d023      	beq.n	d3e <udc_process_setup+0xa2>
     cf6:	2908      	cmp	r1, #8
     cf8:	d100      	bne.n	cfc <udc_process_setup+0x60>
     cfa:	e083      	b.n	e04 <udc_process_setup+0x168>
     cfc:	2900      	cmp	r1, #0
     cfe:	d017      	beq.n	d30 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d00:	2b01      	cmp	r3, #1
     d02:	d100      	bne.n	d06 <udc_process_setup+0x6a>
     d04:	e086      	b.n	e14 <udc_process_setup+0x178>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d06:	2b02      	cmp	r3, #2
     d08:	d1d6      	bne.n	cb8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     d0a:	4b8f      	ldr	r3, [pc, #572]	; (f48 <udc_process_setup+0x2ac>)
     d0c:	785b      	ldrb	r3, [r3, #1]
	return false;
     d0e:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     d10:	2b00      	cmp	r3, #0
     d12:	d000      	beq.n	d16 <udc_process_setup+0x7a>
     d14:	e1a4      	b.n	1060 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     d16:	2a02      	cmp	r2, #2
     d18:	d1d5      	bne.n	cc6 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     d1a:	4b8b      	ldr	r3, [pc, #556]	; (f48 <udc_process_setup+0x2ac>)
     d1c:	7918      	ldrb	r0, [r3, #4]
     d1e:	4b8b      	ldr	r3, [pc, #556]	; (f4c <udc_process_setup+0x2b0>)
     d20:	4798      	blx	r3
     d22:	4b8b      	ldr	r3, [pc, #556]	; (f50 <udc_process_setup+0x2b4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     d24:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     d26:	2102      	movs	r1, #2
     d28:	0018      	movs	r0, r3
     d2a:	4b8a      	ldr	r3, [pc, #552]	; (f54 <udc_process_setup+0x2b8>)
     d2c:	4798      	blx	r3
     d2e:	e0fb      	b.n	f28 <udc_process_setup+0x28c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     d30:	2a02      	cmp	r2, #2
     d32:	d1c8      	bne.n	cc6 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     d34:	3102      	adds	r1, #2
     d36:	4888      	ldr	r0, [pc, #544]	; (f58 <udc_process_setup+0x2bc>)
     d38:	4b86      	ldr	r3, [pc, #536]	; (f54 <udc_process_setup+0x2b8>)
     d3a:	4798      	blx	r3
     d3c:	e0f4      	b.n	f28 <udc_process_setup+0x28c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     d3e:	4b82      	ldr	r3, [pc, #520]	; (f48 <udc_process_setup+0x2ac>)
     d40:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     d42:	0a13      	lsrs	r3, r2, #8
     d44:	2b02      	cmp	r3, #2
     d46:	d023      	beq.n	d90 <udc_process_setup+0xf4>
     d48:	b2d9      	uxtb	r1, r3
     d4a:	2902      	cmp	r1, #2
     d4c:	d90f      	bls.n	d6e <udc_process_setup+0xd2>
     d4e:	2b03      	cmp	r3, #3
     d50:	d034      	beq.n	dbc <udc_process_setup+0x120>
     d52:	2b0f      	cmp	r3, #15
     d54:	d000      	beq.n	d58 <udc_process_setup+0xbc>
     d56:	e180      	b.n	105a <udc_process_setup+0x3be>
		if (udc_config.conf_bos == NULL) {
     d58:	4b80      	ldr	r3, [pc, #512]	; (f5c <udc_process_setup+0x2c0>)
     d5a:	6898      	ldr	r0, [r3, #8]
     d5c:	2800      	cmp	r0, #0
     d5e:	d0b2      	beq.n	cc6 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     d60:	7883      	ldrb	r3, [r0, #2]
     d62:	78c1      	ldrb	r1, [r0, #3]
     d64:	0209      	lsls	r1, r1, #8
     d66:	4319      	orrs	r1, r3
     d68:	4b7a      	ldr	r3, [pc, #488]	; (f54 <udc_process_setup+0x2b8>)
     d6a:	4798      	blx	r3
     d6c:	e007      	b.n	d7e <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     d6e:	2b01      	cmp	r3, #1
     d70:	d000      	beq.n	d74 <udc_process_setup+0xd8>
     d72:	e172      	b.n	105a <udc_process_setup+0x3be>
				(uint8_t *) udc_config.confdev_lsfs,
     d74:	4b79      	ldr	r3, [pc, #484]	; (f5c <udc_process_setup+0x2c0>)
     d76:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     d78:	7801      	ldrb	r1, [r0, #0]
     d7a:	4b76      	ldr	r3, [pc, #472]	; (f54 <udc_process_setup+0x2b8>)
     d7c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d7e:	4b72      	ldr	r3, [pc, #456]	; (f48 <udc_process_setup+0x2ac>)
     d80:	88da      	ldrh	r2, [r3, #6]
     d82:	899b      	ldrh	r3, [r3, #12]
     d84:	4293      	cmp	r3, r2
     d86:	d800      	bhi.n	d8a <udc_process_setup+0xee>
     d88:	e0ce      	b.n	f28 <udc_process_setup+0x28c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d8a:	4b6f      	ldr	r3, [pc, #444]	; (f48 <udc_process_setup+0x2ac>)
     d8c:	819a      	strh	r2, [r3, #12]
     d8e:	e0cb      	b.n	f28 <udc_process_setup+0x28c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     d90:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     d92:	4b72      	ldr	r3, [pc, #456]	; (f5c <udc_process_setup+0x2c0>)
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	7c5b      	ldrb	r3, [r3, #17]
     d98:	4293      	cmp	r3, r2
     d9a:	d800      	bhi.n	d9e <udc_process_setup+0x102>
     d9c:	e793      	b.n	cc6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     d9e:	4b6f      	ldr	r3, [pc, #444]	; (f5c <udc_process_setup+0x2c0>)
     da0:	685b      	ldr	r3, [r3, #4]
     da2:	00d2      	lsls	r2, r2, #3
     da4:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     da6:	7883      	ldrb	r3, [r0, #2]
     da8:	78c1      	ldrb	r1, [r0, #3]
     daa:	0209      	lsls	r1, r1, #8
     dac:	4319      	orrs	r1, r3
     dae:	4b69      	ldr	r3, [pc, #420]	; (f54 <udc_process_setup+0x2b8>)
     db0:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     db2:	4b65      	ldr	r3, [pc, #404]	; (f48 <udc_process_setup+0x2ac>)
     db4:	689b      	ldr	r3, [r3, #8]
     db6:	2202      	movs	r2, #2
     db8:	705a      	strb	r2, [r3, #1]
     dba:	e7e0      	b.n	d7e <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     dbc:	23ff      	movs	r3, #255	; 0xff
     dbe:	401a      	ands	r2, r3
     dc0:	2a01      	cmp	r2, #1
     dc2:	d01c      	beq.n	dfe <udc_process_setup+0x162>
     dc4:	2a00      	cmp	r2, #0
     dc6:	d015      	beq.n	df4 <udc_process_setup+0x158>
     dc8:	2a02      	cmp	r2, #2
     dca:	d000      	beq.n	dce <udc_process_setup+0x132>
     dcc:	e774      	b.n	cb8 <udc_process_setup+0x1c>
		str = udc_string_product_name;
     dce:	4c64      	ldr	r4, [pc, #400]	; (f60 <udc_process_setup+0x2c4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     dd0:	210f      	movs	r1, #15
     dd2:	4a64      	ldr	r2, [pc, #400]	; (f64 <udc_process_setup+0x2c8>)
     dd4:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     dd6:	5ce0      	ldrb	r0, [r4, r3]
     dd8:	8050      	strh	r0, [r2, #2]
     dda:	3301      	adds	r3, #1
     ddc:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     dde:	b2d8      	uxtb	r0, r3
     de0:	4288      	cmp	r0, r1
     de2:	d3f8      	bcc.n	dd6 <udc_process_setup+0x13a>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     de4:	0049      	lsls	r1, r1, #1
     de6:	3102      	adds	r1, #2
     de8:	485e      	ldr	r0, [pc, #376]	; (f64 <udc_process_setup+0x2c8>)
     dea:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     dec:	b289      	uxth	r1, r1
     dee:	4b59      	ldr	r3, [pc, #356]	; (f54 <udc_process_setup+0x2b8>)
     df0:	4798      	blx	r3
     df2:	e7c4      	b.n	d7e <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     df4:	2104      	movs	r1, #4
     df6:	485c      	ldr	r0, [pc, #368]	; (f68 <udc_process_setup+0x2cc>)
     df8:	4b56      	ldr	r3, [pc, #344]	; (f54 <udc_process_setup+0x2b8>)
     dfa:	4798      	blx	r3
     dfc:	e7bf      	b.n	d7e <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     dfe:	4c5b      	ldr	r4, [pc, #364]	; (f6c <udc_process_setup+0x2d0>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     e00:	2109      	movs	r1, #9
     e02:	e7e6      	b.n	dd2 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
     e04:	2a01      	cmp	r2, #1
     e06:	d000      	beq.n	e0a <udc_process_setup+0x16e>
     e08:	e75d      	b.n	cc6 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     e0a:	2101      	movs	r1, #1
     e0c:	4858      	ldr	r0, [pc, #352]	; (f70 <udc_process_setup+0x2d4>)
     e0e:	4b51      	ldr	r3, [pc, #324]	; (f54 <udc_process_setup+0x2b8>)
     e10:	4798      	blx	r3
     e12:	e089      	b.n	f28 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
     e14:	494c      	ldr	r1, [pc, #304]	; (f48 <udc_process_setup+0x2ac>)
     e16:	7849      	ldrb	r1, [r1, #1]
     e18:	290a      	cmp	r1, #10
     e1a:	d000      	beq.n	e1e <udc_process_setup+0x182>
     e1c:	e773      	b.n	d06 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     e1e:	2a01      	cmp	r2, #1
     e20:	d000      	beq.n	e24 <udc_process_setup+0x188>
     e22:	e0c3      	b.n	fac <udc_process_setup+0x310>
	if (!udc_num_configuration) {
     e24:	4b52      	ldr	r3, [pc, #328]	; (f70 <udc_process_setup+0x2d4>)
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	2b00      	cmp	r3, #0
     e2a:	d100      	bne.n	e2e <udc_process_setup+0x192>
     e2c:	e0be      	b.n	fac <udc_process_setup+0x310>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e2e:	4b46      	ldr	r3, [pc, #280]	; (f48 <udc_process_setup+0x2ac>)
     e30:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     e32:	4b50      	ldr	r3, [pc, #320]	; (f74 <udc_process_setup+0x2d8>)
     e34:	681d      	ldr	r5, [r3, #0]
     e36:	682b      	ldr	r3, [r5, #0]
     e38:	791b      	ldrb	r3, [r3, #4]
     e3a:	42a3      	cmp	r3, r4
     e3c:	d800      	bhi.n	e40 <udc_process_setup+0x1a4>
     e3e:	e0b5      	b.n	fac <udc_process_setup+0x310>
	if (!udc_update_iface_desc(iface_num, 0)) {
     e40:	2100      	movs	r1, #0
     e42:	0020      	movs	r0, r4
     e44:	4b4c      	ldr	r3, [pc, #304]	; (f78 <udc_process_setup+0x2dc>)
     e46:	4798      	blx	r3
     e48:	2800      	cmp	r0, #0
     e4a:	d100      	bne.n	e4e <udc_process_setup+0x1b2>
     e4c:	e734      	b.n	cb8 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     e4e:	686b      	ldr	r3, [r5, #4]
     e50:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     e52:	58e3      	ldr	r3, [r4, r3]
     e54:	68db      	ldr	r3, [r3, #12]
     e56:	4798      	blx	r3
     e58:	4b48      	ldr	r3, [pc, #288]	; (f7c <udc_process_setup+0x2e0>)
     e5a:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     e5c:	2101      	movs	r1, #1
     e5e:	0018      	movs	r0, r3
     e60:	4b3c      	ldr	r3, [pc, #240]	; (f54 <udc_process_setup+0x2b8>)
     e62:	4798      	blx	r3
     e64:	e060      	b.n	f28 <udc_process_setup+0x28c>
     e66:	221f      	movs	r2, #31
     e68:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e6a:	d15f      	bne.n	f2c <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
     e6c:	4a36      	ldr	r2, [pc, #216]	; (f48 <udc_process_setup+0x2ac>)
     e6e:	7852      	ldrb	r2, [r2, #1]
     e70:	2a03      	cmp	r2, #3
     e72:	d100      	bne.n	e76 <udc_process_setup+0x1da>
     e74:	e0f3      	b.n	105e <udc_process_setup+0x3c2>
     e76:	b2d1      	uxtb	r1, r2
     e78:	2903      	cmp	r1, #3
     e7a:	d93b      	bls.n	ef4 <udc_process_setup+0x258>
     e7c:	2a05      	cmp	r2, #5
     e7e:	d04b      	beq.n	f18 <udc_process_setup+0x27c>
     e80:	2a09      	cmp	r2, #9
     e82:	d153      	bne.n	f2c <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
     e84:	4b30      	ldr	r3, [pc, #192]	; (f48 <udc_process_setup+0x2ac>)
     e86:	88db      	ldrh	r3, [r3, #6]
     e88:	2b00      	cmp	r3, #0
     e8a:	d000      	beq.n	e8e <udc_process_setup+0x1f2>
     e8c:	e71b      	b.n	cc6 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     e8e:	4b3c      	ldr	r3, [pc, #240]	; (f80 <udc_process_setup+0x2e4>)
     e90:	4798      	blx	r3
     e92:	2800      	cmp	r0, #0
     e94:	d100      	bne.n	e98 <udc_process_setup+0x1fc>
     e96:	e70f      	b.n	cb8 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e98:	4b2b      	ldr	r3, [pc, #172]	; (f48 <udc_process_setup+0x2ac>)
     e9a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     e9c:	4b2f      	ldr	r3, [pc, #188]	; (f5c <udc_process_setup+0x2c0>)
     e9e:	681b      	ldr	r3, [r3, #0]
     ea0:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     ea2:	429a      	cmp	r2, r3
     ea4:	dd00      	ble.n	ea8 <udc_process_setup+0x20c>
     ea6:	e707      	b.n	cb8 <udc_process_setup+0x1c>
	udc_reset();
     ea8:	4b36      	ldr	r3, [pc, #216]	; (f84 <udc_process_setup+0x2e8>)
     eaa:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     eac:	4b26      	ldr	r3, [pc, #152]	; (f48 <udc_process_setup+0x2ac>)
     eae:	789b      	ldrb	r3, [r3, #2]
     eb0:	4a2f      	ldr	r2, [pc, #188]	; (f70 <udc_process_setup+0x2d4>)
     eb2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     eb4:	2b00      	cmp	r3, #0
     eb6:	d037      	beq.n	f28 <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     eb8:	4a33      	ldr	r2, [pc, #204]	; (f88 <udc_process_setup+0x2ec>)
     eba:	4694      	mov	ip, r2
     ebc:	4463      	add	r3, ip
     ebe:	00db      	lsls	r3, r3, #3
     ec0:	4a26      	ldr	r2, [pc, #152]	; (f5c <udc_process_setup+0x2c0>)
     ec2:	6852      	ldr	r2, [r2, #4]
     ec4:	18d3      	adds	r3, r2, r3
     ec6:	4a2b      	ldr	r2, [pc, #172]	; (f74 <udc_process_setup+0x2d8>)
     ec8:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	791b      	ldrb	r3, [r3, #4]
     ece:	2b00      	cmp	r3, #0
     ed0:	d02a      	beq.n	f28 <udc_process_setup+0x28c>
     ed2:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     ed4:	4d2d      	ldr	r5, [pc, #180]	; (f8c <udc_process_setup+0x2f0>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ed6:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     ed8:	2100      	movs	r1, #0
     eda:	0020      	movs	r0, r4
     edc:	47a8      	blx	r5
     ede:	2800      	cmp	r0, #0
     ee0:	d100      	bne.n	ee4 <udc_process_setup+0x248>
     ee2:	e6e9      	b.n	cb8 <udc_process_setup+0x1c>
			iface_num++) {
     ee4:	3401      	adds	r4, #1
     ee6:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ee8:	6833      	ldr	r3, [r6, #0]
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	791b      	ldrb	r3, [r3, #4]
     eee:	42a3      	cmp	r3, r4
     ef0:	d8f2      	bhi.n	ed8 <udc_process_setup+0x23c>
     ef2:	e019      	b.n	f28 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
     ef4:	2a01      	cmp	r2, #1
     ef6:	d119      	bne.n	f2c <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
     ef8:	4b13      	ldr	r3, [pc, #76]	; (f48 <udc_process_setup+0x2ac>)
     efa:	88db      	ldrh	r3, [r3, #6]
     efc:	2b00      	cmp	r3, #0
     efe:	d000      	beq.n	f02 <udc_process_setup+0x266>
     f00:	e6e1      	b.n	cc6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     f02:	4b11      	ldr	r3, [pc, #68]	; (f48 <udc_process_setup+0x2ac>)
     f04:	885b      	ldrh	r3, [r3, #2]
     f06:	2b01      	cmp	r3, #1
     f08:	d000      	beq.n	f0c <udc_process_setup+0x270>
     f0a:	e6dc      	b.n	cc6 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     f0c:	4a12      	ldr	r2, [pc, #72]	; (f58 <udc_process_setup+0x2bc>)
     f0e:	8813      	ldrh	r3, [r2, #0]
     f10:	2102      	movs	r1, #2
     f12:	438b      	bics	r3, r1
     f14:	8013      	strh	r3, [r2, #0]
     f16:	e007      	b.n	f28 <udc_process_setup+0x28c>
	if (udd_g_ctrlreq.req.wLength) {
     f18:	4b0b      	ldr	r3, [pc, #44]	; (f48 <udc_process_setup+0x2ac>)
     f1a:	88db      	ldrh	r3, [r3, #6]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d000      	beq.n	f22 <udc_process_setup+0x286>
     f20:	e6d1      	b.n	cc6 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     f22:	4a1b      	ldr	r2, [pc, #108]	; (f90 <udc_process_setup+0x2f4>)
     f24:	4b08      	ldr	r3, [pc, #32]	; (f48 <udc_process_setup+0x2ac>)
     f26:	611a      	str	r2, [r3, #16]
			return true;
     f28:	2001      	movs	r0, #1
     f2a:	e6d4      	b.n	cd6 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f2c:	2b01      	cmp	r3, #1
     f2e:	d031      	beq.n	f94 <udc_process_setup+0x2f8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     f30:	2b02      	cmp	r3, #2
     f32:	d000      	beq.n	f36 <udc_process_setup+0x29a>
     f34:	e6c0      	b.n	cb8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     f36:	4b04      	ldr	r3, [pc, #16]	; (f48 <udc_process_setup+0x2ac>)
     f38:	785b      	ldrb	r3, [r3, #1]
     f3a:	2b01      	cmp	r3, #1
     f3c:	d06c      	beq.n	1018 <udc_process_setup+0x37c>
     f3e:	2b03      	cmp	r3, #3
     f40:	d100      	bne.n	f44 <udc_process_setup+0x2a8>
     f42:	e078      	b.n	1036 <udc_process_setup+0x39a>
	return false;
     f44:	2000      	movs	r0, #0
     f46:	e08b      	b.n	1060 <udc_process_setup+0x3c4>
     f48:	200005e8 	.word	0x200005e8
     f4c:	000035a1 	.word	0x000035a1
     f50:	20000250 	.word	0x20000250
     f54:	00003979 	.word	0x00003979
     f58:	2000024e 	.word	0x2000024e
     f5c:	20000028 	.word	0x20000028
     f60:	200000d8 	.word	0x200000d8
     f64:	200000a8 	.word	0x200000a8
     f68:	200000c8 	.word	0x200000c8
     f6c:	200000cc 	.word	0x200000cc
     f70:	20000258 	.word	0x20000258
     f74:	2000025c 	.word	0x2000025c
     f78:	00000ac9 	.word	0x00000ac9
     f7c:	20000254 	.word	0x20000254
     f80:	00003911 	.word	0x00003911
     f84:	00000c0d 	.word	0x00000c0d
     f88:	1fffffff 	.word	0x1fffffff
     f8c:	00000ba9 	.word	0x00000ba9
     f90:	00000ab1 	.word	0x00000ab1
			switch (udd_g_ctrlreq.req.bRequest) {
     f94:	4a48      	ldr	r2, [pc, #288]	; (10b8 <udc_process_setup+0x41c>)
     f96:	7852      	ldrb	r2, [r2, #1]
     f98:	2a0b      	cmp	r2, #11
     f9a:	d1c9      	bne.n	f30 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
     f9c:	4b46      	ldr	r3, [pc, #280]	; (10b8 <udc_process_setup+0x41c>)
     f9e:	88db      	ldrh	r3, [r3, #6]
     fa0:	2b00      	cmp	r3, #0
     fa2:	d103      	bne.n	fac <udc_process_setup+0x310>
	if (!udc_num_configuration) {
     fa4:	4b45      	ldr	r3, [pc, #276]	; (10bc <udc_process_setup+0x420>)
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	2b00      	cmp	r3, #0
     faa:	d127      	bne.n	ffc <udc_process_setup+0x360>
	if (0 == udc_num_configuration) {
     fac:	4b43      	ldr	r3, [pc, #268]	; (10bc <udc_process_setup+0x420>)
     fae:	781b      	ldrb	r3, [r3, #0]
	return false;
     fb0:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
     fb2:	2b00      	cmp	r3, #0
     fb4:	d100      	bne.n	fb8 <udc_process_setup+0x31c>
     fb6:	e68e      	b.n	cd6 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     fb8:	4b3f      	ldr	r3, [pc, #252]	; (10b8 <udc_process_setup+0x41c>)
     fba:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     fbc:	4b40      	ldr	r3, [pc, #256]	; (10c0 <udc_process_setup+0x424>)
     fbe:	681d      	ldr	r5, [r3, #0]
     fc0:	682b      	ldr	r3, [r5, #0]
     fc2:	791b      	ldrb	r3, [r3, #4]
     fc4:	42a3      	cmp	r3, r4
     fc6:	d800      	bhi.n	fca <udc_process_setup+0x32e>
     fc8:	e685      	b.n	cd6 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
     fca:	2100      	movs	r1, #0
     fcc:	0020      	movs	r0, r4
     fce:	4b3d      	ldr	r3, [pc, #244]	; (10c4 <udc_process_setup+0x428>)
     fd0:	4798      	blx	r3
     fd2:	2800      	cmp	r0, #0
     fd4:	d100      	bne.n	fd8 <udc_process_setup+0x33c>
     fd6:	e676      	b.n	cc6 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     fd8:	686b      	ldr	r3, [r5, #4]
     fda:	00a2      	lsls	r2, r4, #2
     fdc:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     fde:	68eb      	ldr	r3, [r5, #12]
     fe0:	4798      	blx	r3
     fe2:	0001      	movs	r1, r0
     fe4:	0020      	movs	r0, r4
     fe6:	4b37      	ldr	r3, [pc, #220]	; (10c4 <udc_process_setup+0x428>)
     fe8:	4798      	blx	r3
     fea:	2800      	cmp	r0, #0
     fec:	d100      	bne.n	ff0 <udc_process_setup+0x354>
     fee:	e66a      	b.n	cc6 <udc_process_setup+0x2a>
	return udi_api->setup();
     ff0:	68ab      	ldr	r3, [r5, #8]
     ff2:	4798      	blx	r3
		if (udc_req_iface()) {
     ff4:	2800      	cmp	r0, #0
     ff6:	d000      	beq.n	ffa <udc_process_setup+0x35e>
     ff8:	e66d      	b.n	cd6 <udc_process_setup+0x3a>
     ffa:	e664      	b.n	cc6 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     ffc:	4b2e      	ldr	r3, [pc, #184]	; (10b8 <udc_process_setup+0x41c>)
     ffe:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1000:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1002:	0028      	movs	r0, r5
    1004:	4b30      	ldr	r3, [pc, #192]	; (10c8 <udc_process_setup+0x42c>)
    1006:	4798      	blx	r3
    1008:	2800      	cmp	r0, #0
    100a:	d100      	bne.n	100e <udc_process_setup+0x372>
    100c:	e654      	b.n	cb8 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    100e:	b2e1      	uxtb	r1, r4
    1010:	0028      	movs	r0, r5
    1012:	4b2e      	ldr	r3, [pc, #184]	; (10cc <udc_process_setup+0x430>)
    1014:	4798      	blx	r3
    1016:	e023      	b.n	1060 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength) {
    1018:	4b27      	ldr	r3, [pc, #156]	; (10b8 <udc_process_setup+0x41c>)
    101a:	88db      	ldrh	r3, [r3, #6]
    101c:	2b00      	cmp	r3, #0
    101e:	d000      	beq.n	1022 <udc_process_setup+0x386>
    1020:	e651      	b.n	cc6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1022:	4b25      	ldr	r3, [pc, #148]	; (10b8 <udc_process_setup+0x41c>)
    1024:	885b      	ldrh	r3, [r3, #2]
    1026:	2b00      	cmp	r3, #0
    1028:	d000      	beq.n	102c <udc_process_setup+0x390>
    102a:	e64c      	b.n	cc6 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    102c:	4b22      	ldr	r3, [pc, #136]	; (10b8 <udc_process_setup+0x41c>)
    102e:	7918      	ldrb	r0, [r3, #4]
    1030:	4b27      	ldr	r3, [pc, #156]	; (10d0 <udc_process_setup+0x434>)
    1032:	4798      	blx	r3
    1034:	e014      	b.n	1060 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength) {
    1036:	4b20      	ldr	r3, [pc, #128]	; (10b8 <udc_process_setup+0x41c>)
    1038:	88db      	ldrh	r3, [r3, #6]
    103a:	2b00      	cmp	r3, #0
    103c:	d000      	beq.n	1040 <udc_process_setup+0x3a4>
    103e:	e642      	b.n	cc6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1040:	4b1d      	ldr	r3, [pc, #116]	; (10b8 <udc_process_setup+0x41c>)
    1042:	885b      	ldrh	r3, [r3, #2]
    1044:	2b00      	cmp	r3, #0
    1046:	d000      	beq.n	104a <udc_process_setup+0x3ae>
    1048:	e63d      	b.n	cc6 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    104a:	4c1b      	ldr	r4, [pc, #108]	; (10b8 <udc_process_setup+0x41c>)
    104c:	7920      	ldrb	r0, [r4, #4]
    104e:	4b21      	ldr	r3, [pc, #132]	; (10d4 <udc_process_setup+0x438>)
    1050:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1052:	7920      	ldrb	r0, [r4, #4]
    1054:	4b20      	ldr	r3, [pc, #128]	; (10d8 <udc_process_setup+0x43c>)
    1056:	4798      	blx	r3
    1058:	e002      	b.n	1060 <udc_process_setup+0x3c4>
		return false;
    105a:	2000      	movs	r0, #0
    105c:	e000      	b.n	1060 <udc_process_setup+0x3c4>
				return udc_req_std_dev_set_feature();
    105e:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1060:	2800      	cmp	r0, #0
    1062:	d000      	beq.n	1066 <udc_process_setup+0x3ca>
    1064:	e637      	b.n	cd6 <udc_process_setup+0x3a>
    1066:	e627      	b.n	cb8 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1068:	4b14      	ldr	r3, [pc, #80]	; (10bc <udc_process_setup+0x420>)
    106a:	781b      	ldrb	r3, [r3, #0]
    106c:	2b00      	cmp	r3, #0
    106e:	d100      	bne.n	1072 <udc_process_setup+0x3d6>
    1070:	e631      	b.n	cd6 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1072:	4b13      	ldr	r3, [pc, #76]	; (10c0 <udc_process_setup+0x424>)
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	681a      	ldr	r2, [r3, #0]
    1078:	7912      	ldrb	r2, [r2, #4]
    107a:	2a00      	cmp	r2, #0
    107c:	d01a      	beq.n	10b4 <udc_process_setup+0x418>
    107e:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1080:	4e10      	ldr	r6, [pc, #64]	; (10c4 <udc_process_setup+0x428>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1082:	4f0f      	ldr	r7, [pc, #60]	; (10c0 <udc_process_setup+0x424>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1084:	685b      	ldr	r3, [r3, #4]
    1086:	00aa      	lsls	r2, r5, #2
    1088:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    108a:	68e3      	ldr	r3, [r4, #12]
    108c:	4798      	blx	r3
    108e:	0001      	movs	r1, r0
    1090:	0028      	movs	r0, r5
    1092:	47b0      	blx	r6
    1094:	2800      	cmp	r0, #0
    1096:	d100      	bne.n	109a <udc_process_setup+0x3fe>
    1098:	e61d      	b.n	cd6 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    109a:	68a3      	ldr	r3, [r4, #8]
    109c:	4798      	blx	r3
    109e:	2800      	cmp	r0, #0
    10a0:	d000      	beq.n	10a4 <udc_process_setup+0x408>
    10a2:	e618      	b.n	cd6 <udc_process_setup+0x3a>
			iface_num++) {
    10a4:	3501      	adds	r5, #1
    10a6:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10a8:	683b      	ldr	r3, [r7, #0]
    10aa:	681a      	ldr	r2, [r3, #0]
    10ac:	7912      	ldrb	r2, [r2, #4]
    10ae:	42aa      	cmp	r2, r5
    10b0:	d8e8      	bhi.n	1084 <udc_process_setup+0x3e8>
    10b2:	e610      	b.n	cd6 <udc_process_setup+0x3a>
	return false;
    10b4:	2000      	movs	r0, #0
    10b6:	e60e      	b.n	cd6 <udc_process_setup+0x3a>
    10b8:	200005e8 	.word	0x200005e8
    10bc:	20000258 	.word	0x20000258
    10c0:	2000025c 	.word	0x2000025c
    10c4:	00000ac9 	.word	0x00000ac9
    10c8:	00000b3d 	.word	0x00000b3d
    10cc:	00000ba9 	.word	0x00000ba9
    10d0:	000036e5 	.word	0x000036e5
    10d4:	000033e1 	.word	0x000033e1
    10d8:	000035b5 	.word	0x000035b5

000010dc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    10dc:	4b0c      	ldr	r3, [pc, #48]	; (1110 <cpu_irq_enter_critical+0x34>)
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d106      	bne.n	10f2 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    10e4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    10e8:	2b00      	cmp	r3, #0
    10ea:	d007      	beq.n	10fc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    10ec:	2200      	movs	r2, #0
    10ee:	4b09      	ldr	r3, [pc, #36]	; (1114 <cpu_irq_enter_critical+0x38>)
    10f0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    10f2:	4a07      	ldr	r2, [pc, #28]	; (1110 <cpu_irq_enter_critical+0x34>)
    10f4:	6813      	ldr	r3, [r2, #0]
    10f6:	3301      	adds	r3, #1
    10f8:	6013      	str	r3, [r2, #0]
}
    10fa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    10fc:	b672      	cpsid	i
    10fe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1102:	2200      	movs	r2, #0
    1104:	4b04      	ldr	r3, [pc, #16]	; (1118 <cpu_irq_enter_critical+0x3c>)
    1106:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1108:	3201      	adds	r2, #1
    110a:	4b02      	ldr	r3, [pc, #8]	; (1114 <cpu_irq_enter_critical+0x38>)
    110c:	701a      	strb	r2, [r3, #0]
    110e:	e7f0      	b.n	10f2 <cpu_irq_enter_critical+0x16>
    1110:	20000264 	.word	0x20000264
    1114:	20000268 	.word	0x20000268
    1118:	200000e8 	.word	0x200000e8

0000111c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    111c:	4b08      	ldr	r3, [pc, #32]	; (1140 <cpu_irq_leave_critical+0x24>)
    111e:	681a      	ldr	r2, [r3, #0]
    1120:	3a01      	subs	r2, #1
    1122:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1124:	681b      	ldr	r3, [r3, #0]
    1126:	2b00      	cmp	r3, #0
    1128:	d109      	bne.n	113e <cpu_irq_leave_critical+0x22>
    112a:	4b06      	ldr	r3, [pc, #24]	; (1144 <cpu_irq_leave_critical+0x28>)
    112c:	781b      	ldrb	r3, [r3, #0]
    112e:	2b00      	cmp	r3, #0
    1130:	d005      	beq.n	113e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1132:	2201      	movs	r2, #1
    1134:	4b04      	ldr	r3, [pc, #16]	; (1148 <cpu_irq_leave_critical+0x2c>)
    1136:	701a      	strb	r2, [r3, #0]
    1138:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    113c:	b662      	cpsie	i
	}
}
    113e:	4770      	bx	lr
    1140:	20000264 	.word	0x20000264
    1144:	20000268 	.word	0x20000268
    1148:	200000e8 	.word	0x200000e8

0000114c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    114c:	b5f0      	push	{r4, r5, r6, r7, lr}
    114e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1150:	ac01      	add	r4, sp, #4
    1152:	2501      	movs	r5, #1
    1154:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1156:	2700      	movs	r7, #0
    1158:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    115a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    115c:	0021      	movs	r1, r4
    115e:	203e      	movs	r0, #62	; 0x3e
    1160:	4e06      	ldr	r6, [pc, #24]	; (117c <system_board_init+0x30>)
    1162:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1164:	2280      	movs	r2, #128	; 0x80
    1166:	05d2      	lsls	r2, r2, #23
    1168:	4b05      	ldr	r3, [pc, #20]	; (1180 <system_board_init+0x34>)
    116a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    116c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    116e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1170:	0021      	movs	r1, r4
    1172:	200f      	movs	r0, #15
    1174:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1176:	b003      	add	sp, #12
    1178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	000018c1 	.word	0x000018c1
    1180:	41004480 	.word	0x41004480

00001184 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1184:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1186:	2200      	movs	r2, #0
    1188:	2300      	movs	r3, #0
    118a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    118c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    118e:	2100      	movs	r1, #0
    1190:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1192:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1194:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1196:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1198:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    119a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    119c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    119e:	24c0      	movs	r4, #192	; 0xc0
    11a0:	0164      	lsls	r4, r4, #5
    11a2:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    11a4:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    11a6:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    11a8:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    11aa:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    11ac:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    11ae:	242a      	movs	r4, #42	; 0x2a
    11b0:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    11b2:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    11b4:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    11b6:	3c06      	subs	r4, #6
    11b8:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    11ba:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    11bc:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    11be:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    11c0:	232b      	movs	r3, #43	; 0x2b
    11c2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    11c4:	3301      	adds	r3, #1
    11c6:	54c1      	strb	r1, [r0, r3]
}
    11c8:	bd10      	pop	{r4, pc}
	...

000011cc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    11cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ce:	46d6      	mov	lr, sl
    11d0:	464f      	mov	r7, r9
    11d2:	4646      	mov	r6, r8
    11d4:	b5c0      	push	{r6, r7, lr}
    11d6:	b096      	sub	sp, #88	; 0x58
    11d8:	0007      	movs	r7, r0
    11da:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    11dc:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    11de:	4ac6      	ldr	r2, [pc, #792]	; (14f8 <adc_init+0x32c>)
    11e0:	6a10      	ldr	r0, [r2, #32]
    11e2:	2380      	movs	r3, #128	; 0x80
    11e4:	025b      	lsls	r3, r3, #9
    11e6:	4303      	orrs	r3, r0
    11e8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    11ea:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    11ec:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    11ee:	07db      	lsls	r3, r3, #31
    11f0:	d505      	bpl.n	11fe <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    11f2:	b016      	add	sp, #88	; 0x58
    11f4:	bc1c      	pop	{r2, r3, r4}
    11f6:	4690      	mov	r8, r2
    11f8:	4699      	mov	r9, r3
    11fa:	46a2      	mov	sl, r4
    11fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    11fe:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1200:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1202:	079b      	lsls	r3, r3, #30
    1204:	d4f5      	bmi.n	11f2 <adc_init+0x26>
	module_inst->reference = config->reference;
    1206:	7873      	ldrb	r3, [r6, #1]
    1208:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    120a:	2b00      	cmp	r3, #0
    120c:	d104      	bne.n	1218 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    120e:	4abb      	ldr	r2, [pc, #748]	; (14fc <adc_init+0x330>)
    1210:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1212:	2104      	movs	r1, #4
    1214:	430b      	orrs	r3, r1
    1216:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1218:	2300      	movs	r3, #0
    121a:	60bb      	str	r3, [r7, #8]
    121c:	60fb      	str	r3, [r7, #12]
    121e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1220:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1222:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1224:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1226:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1228:	4bb5      	ldr	r3, [pc, #724]	; (1500 <adc_init+0x334>)
    122a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    122c:	232a      	movs	r3, #42	; 0x2a
    122e:	5cf3      	ldrb	r3, [r6, r3]
    1230:	2b00      	cmp	r3, #0
    1232:	d105      	bne.n	1240 <adc_init+0x74>
    1234:	7d33      	ldrb	r3, [r6, #20]
    1236:	2b00      	cmp	r3, #0
    1238:	d102      	bne.n	1240 <adc_init+0x74>
		module_inst->software_trigger = true;
    123a:	3301      	adds	r3, #1
    123c:	777b      	strb	r3, [r7, #29]
    123e:	e001      	b.n	1244 <adc_init+0x78>
		module_inst->software_trigger = false;
    1240:	2300      	movs	r3, #0
    1242:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1244:	683b      	ldr	r3, [r7, #0]
    1246:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1248:	7833      	ldrb	r3, [r6, #0]
    124a:	466a      	mov	r2, sp
    124c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    124e:	4669      	mov	r1, sp
    1250:	201e      	movs	r0, #30
    1252:	4bac      	ldr	r3, [pc, #688]	; (1504 <adc_init+0x338>)
    1254:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1256:	201e      	movs	r0, #30
    1258:	4bab      	ldr	r3, [pc, #684]	; (1508 <adc_init+0x33c>)
    125a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    125c:	232c      	movs	r3, #44	; 0x2c
    125e:	5cf2      	ldrb	r2, [r6, r3]
    1260:	2a00      	cmp	r2, #0
    1262:	d054      	beq.n	130e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1264:	3b01      	subs	r3, #1
    1266:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1268:	7b33      	ldrb	r3, [r6, #12]
    126a:	18eb      	adds	r3, r5, r3
    126c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    126e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1270:	b2c9      	uxtb	r1, r1
    1272:	428b      	cmp	r3, r1
    1274:	d221      	bcs.n	12ba <adc_init+0xee>
    1276:	1952      	adds	r2, r2, r5
    1278:	b2d3      	uxtb	r3, r2
    127a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    127c:	4ba3      	ldr	r3, [pc, #652]	; (150c <adc_init+0x340>)
    127e:	469a      	mov	sl, r3
    1280:	e003      	b.n	128a <adc_init+0xbe>
			offset++;
    1282:	3501      	adds	r5, #1
    1284:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1286:	454d      	cmp	r5, r9
    1288:	d017      	beq.n	12ba <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    128a:	240f      	movs	r4, #15
    128c:	402c      	ands	r4, r5
    128e:	7b33      	ldrb	r3, [r6, #12]
    1290:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1292:	2250      	movs	r2, #80	; 0x50
    1294:	499e      	ldr	r1, [pc, #632]	; (1510 <adc_init+0x344>)
    1296:	a802      	add	r0, sp, #8
    1298:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    129a:	2c13      	cmp	r4, #19
    129c:	d8f1      	bhi.n	1282 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    129e:	00a4      	lsls	r4, r4, #2
    12a0:	ab02      	add	r3, sp, #8
    12a2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12a4:	a901      	add	r1, sp, #4
    12a6:	2300      	movs	r3, #0
    12a8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    12aa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    12ac:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    12ae:	3301      	adds	r3, #1
    12b0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    12b2:	b2c0      	uxtb	r0, r0
    12b4:	4b97      	ldr	r3, [pc, #604]	; (1514 <adc_init+0x348>)
    12b6:	4798      	blx	r3
    12b8:	e7e3      	b.n	1282 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    12ba:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    12bc:	2250      	movs	r2, #80	; 0x50
    12be:	4994      	ldr	r1, [pc, #592]	; (1510 <adc_init+0x344>)
    12c0:	a802      	add	r0, sp, #8
    12c2:	4b92      	ldr	r3, [pc, #584]	; (150c <adc_init+0x340>)
    12c4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    12c6:	2c13      	cmp	r4, #19
    12c8:	d913      	bls.n	12f2 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    12ca:	7d73      	ldrb	r3, [r6, #21]
    12cc:	009b      	lsls	r3, r3, #2
    12ce:	b2db      	uxtb	r3, r3
    12d0:	4642      	mov	r2, r8
    12d2:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    12d4:	7db3      	ldrb	r3, [r6, #22]
    12d6:	01db      	lsls	r3, r3, #7
    12d8:	7872      	ldrb	r2, [r6, #1]
    12da:	4313      	orrs	r3, r2
    12dc:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    12de:	4642      	mov	r2, r8
    12e0:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    12e2:	7933      	ldrb	r3, [r6, #4]
    12e4:	2b34      	cmp	r3, #52	; 0x34
    12e6:	d900      	bls.n	12ea <adc_init+0x11e>
    12e8:	e17b      	b.n	15e2 <adc_init+0x416>
    12ea:	009b      	lsls	r3, r3, #2
    12ec:	4a8a      	ldr	r2, [pc, #552]	; (1518 <adc_init+0x34c>)
    12ee:	58d3      	ldr	r3, [r2, r3]
    12f0:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    12f2:	00a4      	lsls	r4, r4, #2
    12f4:	ab02      	add	r3, sp, #8
    12f6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12f8:	a901      	add	r1, sp, #4
    12fa:	2300      	movs	r3, #0
    12fc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    12fe:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1300:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1302:	3301      	adds	r3, #1
    1304:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1306:	b2c0      	uxtb	r0, r0
    1308:	4b82      	ldr	r3, [pc, #520]	; (1514 <adc_init+0x348>)
    130a:	4798      	blx	r3
    130c:	e7dd      	b.n	12ca <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    130e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1310:	2250      	movs	r2, #80	; 0x50
    1312:	497f      	ldr	r1, [pc, #508]	; (1510 <adc_init+0x344>)
    1314:	a802      	add	r0, sp, #8
    1316:	4b7d      	ldr	r3, [pc, #500]	; (150c <adc_init+0x340>)
    1318:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    131a:	2c13      	cmp	r4, #19
    131c:	d915      	bls.n	134a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    131e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1320:	2250      	movs	r2, #80	; 0x50
    1322:	497b      	ldr	r1, [pc, #492]	; (1510 <adc_init+0x344>)
    1324:	a802      	add	r0, sp, #8
    1326:	4b79      	ldr	r3, [pc, #484]	; (150c <adc_init+0x340>)
    1328:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    132a:	2c13      	cmp	r4, #19
    132c:	d8cd      	bhi.n	12ca <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    132e:	00a4      	lsls	r4, r4, #2
    1330:	ab02      	add	r3, sp, #8
    1332:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1334:	a901      	add	r1, sp, #4
    1336:	2300      	movs	r3, #0
    1338:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    133a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    133c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    133e:	3301      	adds	r3, #1
    1340:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1342:	b2c0      	uxtb	r0, r0
    1344:	4b73      	ldr	r3, [pc, #460]	; (1514 <adc_init+0x348>)
    1346:	4798      	blx	r3
    1348:	e7bf      	b.n	12ca <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    134a:	00a4      	lsls	r4, r4, #2
    134c:	ab02      	add	r3, sp, #8
    134e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1350:	a901      	add	r1, sp, #4
    1352:	2300      	movs	r3, #0
    1354:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1356:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1358:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    135a:	3301      	adds	r3, #1
    135c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    135e:	b2c0      	uxtb	r0, r0
    1360:	4b6c      	ldr	r3, [pc, #432]	; (1514 <adc_init+0x348>)
    1362:	4798      	blx	r3
    1364:	e7db      	b.n	131e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1366:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1368:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    136a:	2102      	movs	r1, #2
    136c:	e01a      	b.n	13a4 <adc_init+0x1d8>
		adjres = config->divide_result;
    136e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1370:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1372:	2410      	movs	r4, #16
    1374:	e016      	b.n	13a4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1376:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1378:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    137a:	2101      	movs	r1, #1
    137c:	e012      	b.n	13a4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    137e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1380:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1382:	2100      	movs	r1, #0
    1384:	e00e      	b.n	13a4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1386:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1388:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    138a:	2100      	movs	r1, #0
    138c:	e00a      	b.n	13a4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    138e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1390:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1392:	2100      	movs	r1, #0
    1394:	e006      	b.n	13a4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1396:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1398:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    139a:	2100      	movs	r1, #0
    139c:	e002      	b.n	13a4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    139e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    13a0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    13a2:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    13a4:	0109      	lsls	r1, r1, #4
    13a6:	2270      	movs	r2, #112	; 0x70
    13a8:	400a      	ands	r2, r1
    13aa:	4313      	orrs	r3, r2
    13ac:	4642      	mov	r2, r8
    13ae:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    13b0:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    13b2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    13b4:	2b3f      	cmp	r3, #63	; 0x3f
    13b6:	d900      	bls.n	13ba <adc_init+0x1ee>
    13b8:	e71b      	b.n	11f2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    13ba:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    13bc:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    13be:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    13c0:	b25b      	sxtb	r3, r3
    13c2:	2b00      	cmp	r3, #0
    13c4:	dbfb      	blt.n	13be <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    13c6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    13c8:	8872      	ldrh	r2, [r6, #2]
    13ca:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    13cc:	2224      	movs	r2, #36	; 0x24
    13ce:	5cb2      	ldrb	r2, [r6, r2]
    13d0:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    13d2:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    13d4:	7d32      	ldrb	r2, [r6, #20]
    13d6:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    13d8:	4313      	orrs	r3, r2
    13da:	7cb2      	ldrb	r2, [r6, #18]
    13dc:	0052      	lsls	r2, r2, #1
    13de:	4313      	orrs	r3, r2
    13e0:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    13e2:	4642      	mov	r2, r8
    13e4:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    13e6:	7e33      	ldrb	r3, [r6, #24]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d020      	beq.n	142e <adc_init+0x262>
		switch (resolution) {
    13ec:	2c10      	cmp	r4, #16
    13ee:	d100      	bne.n	13f2 <adc_init+0x226>
    13f0:	e0d9      	b.n	15a6 <adc_init+0x3da>
    13f2:	d800      	bhi.n	13f6 <adc_init+0x22a>
    13f4:	e098      	b.n	1528 <adc_init+0x35c>
    13f6:	2c20      	cmp	r4, #32
    13f8:	d100      	bne.n	13fc <adc_init+0x230>
    13fa:	e0b6      	b.n	156a <adc_init+0x39e>
    13fc:	2c30      	cmp	r4, #48	; 0x30
    13fe:	d116      	bne.n	142e <adc_init+0x262>
			if (config->differential_mode &&
    1400:	7cf2      	ldrb	r2, [r6, #19]
    1402:	2a00      	cmp	r2, #0
    1404:	d00a      	beq.n	141c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1406:	69f2      	ldr	r2, [r6, #28]
    1408:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    140a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    140c:	2aff      	cmp	r2, #255	; 0xff
    140e:	d900      	bls.n	1412 <adc_init+0x246>
    1410:	e6ef      	b.n	11f2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1412:	6a32      	ldr	r2, [r6, #32]
    1414:	3280      	adds	r2, #128	; 0x80
    1416:	2aff      	cmp	r2, #255	; 0xff
    1418:	d900      	bls.n	141c <adc_init+0x250>
    141a:	e6ea      	b.n	11f2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    141c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    141e:	69f2      	ldr	r2, [r6, #28]
    1420:	2aff      	cmp	r2, #255	; 0xff
    1422:	dd00      	ble.n	1426 <adc_init+0x25a>
    1424:	e6e5      	b.n	11f2 <adc_init+0x26>
    1426:	6a32      	ldr	r2, [r6, #32]
    1428:	2aff      	cmp	r2, #255	; 0xff
    142a:	dd00      	ble.n	142e <adc_init+0x262>
    142c:	e6e1      	b.n	11f2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    142e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1430:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1432:	b252      	sxtb	r2, r2
    1434:	2a00      	cmp	r2, #0
    1436:	dbfb      	blt.n	1430 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1438:	4642      	mov	r2, r8
    143a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    143c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    143e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1440:	b25b      	sxtb	r3, r3
    1442:	2b00      	cmp	r3, #0
    1444:	dbfb      	blt.n	143e <adc_init+0x272>
	adc_module->WINLT.reg =
    1446:	8bb3      	ldrh	r3, [r6, #28]
    1448:	4642      	mov	r2, r8
    144a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    144c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    144e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1450:	b25b      	sxtb	r3, r3
    1452:	2b00      	cmp	r3, #0
    1454:	dbfb      	blt.n	144e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1456:	8c33      	ldrh	r3, [r6, #32]
    1458:	4642      	mov	r2, r8
    145a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    145c:	232c      	movs	r3, #44	; 0x2c
    145e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1460:	2b00      	cmp	r3, #0
    1462:	d005      	beq.n	1470 <adc_init+0x2a4>
		inputs_to_scan--;
    1464:	3b01      	subs	r3, #1
    1466:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1468:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    146a:	2b0f      	cmp	r3, #15
    146c:	d900      	bls.n	1470 <adc_init+0x2a4>
    146e:	e6c0      	b.n	11f2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1470:	222b      	movs	r2, #43	; 0x2b
    1472:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1474:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1476:	290f      	cmp	r1, #15
    1478:	d900      	bls.n	147c <adc_init+0x2b0>
    147a:	e6ba      	b.n	11f2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    147c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    147e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1480:	b252      	sxtb	r2, r2
    1482:	2a00      	cmp	r2, #0
    1484:	dbfb      	blt.n	147e <adc_init+0x2b2>
			config->negative_input |
    1486:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1488:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    148a:	4302      	orrs	r2, r0
    148c:	68b0      	ldr	r0, [r6, #8]
    148e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1490:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1492:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1494:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1496:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1498:	4642      	mov	r2, r8
    149a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    149c:	232a      	movs	r3, #42	; 0x2a
    149e:	5cf3      	ldrb	r3, [r6, r3]
    14a0:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    14a2:	230f      	movs	r3, #15
    14a4:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    14a6:	3315      	adds	r3, #21
    14a8:	5cf3      	ldrb	r3, [r6, r3]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d012      	beq.n	14d4 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    14ae:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    14b0:	4a1a      	ldr	r2, [pc, #104]	; (151c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    14b2:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    14b4:	4293      	cmp	r3, r2
    14b6:	d900      	bls.n	14ba <adc_init+0x2ee>
    14b8:	e69b      	b.n	11f2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    14ba:	4642      	mov	r2, r8
    14bc:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    14be:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    14c0:	2380      	movs	r3, #128	; 0x80
    14c2:	011b      	lsls	r3, r3, #4
    14c4:	18d3      	adds	r3, r2, r3
    14c6:	4915      	ldr	r1, [pc, #84]	; (151c <adc_init+0x350>)
    14c8:	b29b      	uxth	r3, r3
    14ca:	428b      	cmp	r3, r1
    14cc:	d900      	bls.n	14d0 <adc_init+0x304>
    14ce:	e690      	b.n	11f2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    14d0:	4643      	mov	r3, r8
    14d2:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    14d4:	4b12      	ldr	r3, [pc, #72]	; (1520 <adc_init+0x354>)
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	015b      	lsls	r3, r3, #5
    14da:	22e0      	movs	r2, #224	; 0xe0
    14dc:	00d2      	lsls	r2, r2, #3
    14de:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    14e0:	4a10      	ldr	r2, [pc, #64]	; (1524 <adc_init+0x358>)
    14e2:	6851      	ldr	r1, [r2, #4]
    14e4:	0149      	lsls	r1, r1, #5
    14e6:	6812      	ldr	r2, [r2, #0]
    14e8:	0ed2      	lsrs	r2, r2, #27
    14ea:	430a      	orrs	r2, r1
    14ec:	b2d2      	uxtb	r2, r2
			) |
    14ee:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    14f0:	4642      	mov	r2, r8
    14f2:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    14f4:	2000      	movs	r0, #0
    14f6:	e67c      	b.n	11f2 <adc_init+0x26>
    14f8:	40000400 	.word	0x40000400
    14fc:	40000800 	.word	0x40000800
    1500:	2000034c 	.word	0x2000034c
    1504:	00002829 	.word	0x00002829
    1508:	0000279d 	.word	0x0000279d
    150c:	00005589 	.word	0x00005589
    1510:	00005680 	.word	0x00005680
    1514:	00002979 	.word	0x00002979
    1518:	000055ac 	.word	0x000055ac
    151c:	00000fff 	.word	0x00000fff
    1520:	00806024 	.word	0x00806024
    1524:	00806020 	.word	0x00806020
		switch (resolution) {
    1528:	2c00      	cmp	r4, #0
    152a:	d000      	beq.n	152e <adc_init+0x362>
    152c:	e77f      	b.n	142e <adc_init+0x262>
			if (config->differential_mode &&
    152e:	7cf2      	ldrb	r2, [r6, #19]
    1530:	2a00      	cmp	r2, #0
    1532:	d00f      	beq.n	1554 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1534:	69f2      	ldr	r2, [r6, #28]
    1536:	2180      	movs	r1, #128	; 0x80
    1538:	0109      	lsls	r1, r1, #4
    153a:	468c      	mov	ip, r1
    153c:	4462      	add	r2, ip
			if (config->differential_mode &&
    153e:	492a      	ldr	r1, [pc, #168]	; (15e8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1540:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1542:	428a      	cmp	r2, r1
    1544:	d900      	bls.n	1548 <adc_init+0x37c>
    1546:	e654      	b.n	11f2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1548:	6a32      	ldr	r2, [r6, #32]
    154a:	4462      	add	r2, ip
    154c:	4926      	ldr	r1, [pc, #152]	; (15e8 <adc_init+0x41c>)
    154e:	428a      	cmp	r2, r1
    1550:	d900      	bls.n	1554 <adc_init+0x388>
    1552:	e64e      	b.n	11f2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1554:	4a24      	ldr	r2, [pc, #144]	; (15e8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1556:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1558:	69f1      	ldr	r1, [r6, #28]
    155a:	4291      	cmp	r1, r2
    155c:	dd00      	ble.n	1560 <adc_init+0x394>
    155e:	e648      	b.n	11f2 <adc_init+0x26>
    1560:	6a31      	ldr	r1, [r6, #32]
    1562:	4291      	cmp	r1, r2
    1564:	dd00      	ble.n	1568 <adc_init+0x39c>
    1566:	e644      	b.n	11f2 <adc_init+0x26>
    1568:	e761      	b.n	142e <adc_init+0x262>
			if (config->differential_mode &&
    156a:	7cf2      	ldrb	r2, [r6, #19]
    156c:	2a00      	cmp	r2, #0
    156e:	d00f      	beq.n	1590 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1570:	69f2      	ldr	r2, [r6, #28]
    1572:	2180      	movs	r1, #128	; 0x80
    1574:	0089      	lsls	r1, r1, #2
    1576:	468c      	mov	ip, r1
    1578:	4462      	add	r2, ip
			if (config->differential_mode &&
    157a:	491c      	ldr	r1, [pc, #112]	; (15ec <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    157c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    157e:	428a      	cmp	r2, r1
    1580:	d900      	bls.n	1584 <adc_init+0x3b8>
    1582:	e636      	b.n	11f2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1584:	6a32      	ldr	r2, [r6, #32]
    1586:	4462      	add	r2, ip
    1588:	4918      	ldr	r1, [pc, #96]	; (15ec <adc_init+0x420>)
    158a:	428a      	cmp	r2, r1
    158c:	d900      	bls.n	1590 <adc_init+0x3c4>
    158e:	e630      	b.n	11f2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1590:	4a16      	ldr	r2, [pc, #88]	; (15ec <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1592:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1594:	69f1      	ldr	r1, [r6, #28]
    1596:	4291      	cmp	r1, r2
    1598:	dd00      	ble.n	159c <adc_init+0x3d0>
    159a:	e62a      	b.n	11f2 <adc_init+0x26>
    159c:	6a31      	ldr	r1, [r6, #32]
    159e:	4291      	cmp	r1, r2
    15a0:	dd00      	ble.n	15a4 <adc_init+0x3d8>
    15a2:	e626      	b.n	11f2 <adc_init+0x26>
    15a4:	e743      	b.n	142e <adc_init+0x262>
			if (config->differential_mode &&
    15a6:	7cf2      	ldrb	r2, [r6, #19]
    15a8:	2a00      	cmp	r2, #0
    15aa:	d00f      	beq.n	15cc <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    15ac:	69f2      	ldr	r2, [r6, #28]
    15ae:	2180      	movs	r1, #128	; 0x80
    15b0:	0209      	lsls	r1, r1, #8
    15b2:	468c      	mov	ip, r1
    15b4:	4462      	add	r2, ip
			if (config->differential_mode &&
    15b6:	490e      	ldr	r1, [pc, #56]	; (15f0 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    15b8:	2017      	movs	r0, #23
			if (config->differential_mode &&
    15ba:	428a      	cmp	r2, r1
    15bc:	d900      	bls.n	15c0 <adc_init+0x3f4>
    15be:	e618      	b.n	11f2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    15c0:	6a32      	ldr	r2, [r6, #32]
    15c2:	4462      	add	r2, ip
    15c4:	490a      	ldr	r1, [pc, #40]	; (15f0 <adc_init+0x424>)
    15c6:	428a      	cmp	r2, r1
    15c8:	d900      	bls.n	15cc <adc_init+0x400>
    15ca:	e612      	b.n	11f2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    15cc:	4a08      	ldr	r2, [pc, #32]	; (15f0 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    15ce:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    15d0:	69f1      	ldr	r1, [r6, #28]
    15d2:	4291      	cmp	r1, r2
    15d4:	dd00      	ble.n	15d8 <adc_init+0x40c>
    15d6:	e60c      	b.n	11f2 <adc_init+0x26>
    15d8:	6a31      	ldr	r1, [r6, #32]
    15da:	4291      	cmp	r1, r2
    15dc:	dd00      	ble.n	15e0 <adc_init+0x414>
    15de:	e608      	b.n	11f2 <adc_init+0x26>
    15e0:	e725      	b.n	142e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    15e2:	2017      	movs	r0, #23
    15e4:	e605      	b.n	11f2 <adc_init+0x26>
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	00000fff 	.word	0x00000fff
    15ec:	000003ff 	.word	0x000003ff
    15f0:	0000ffff 	.word	0x0000ffff

000015f4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    15f4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    15f6:	4b25      	ldr	r3, [pc, #148]	; (168c <ADC_Handler+0x98>)
    15f8:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    15fa:	6823      	ldr	r3, [r4, #0]
    15fc:	7e1d      	ldrb	r5, [r3, #24]
    15fe:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    1600:	07ea      	lsls	r2, r5, #31
    1602:	d505      	bpl.n	1610 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1604:	7ee2      	ldrb	r2, [r4, #27]
    1606:	07d2      	lsls	r2, r2, #31
    1608:	d502      	bpl.n	1610 <ADC_Handler+0x1c>
    160a:	7ea2      	ldrb	r2, [r4, #26]
    160c:	07d2      	lsls	r2, r2, #31
    160e:	d416      	bmi.n	163e <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    1610:	076b      	lsls	r3, r5, #29
    1612:	d508      	bpl.n	1626 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1614:	2304      	movs	r3, #4
    1616:	6822      	ldr	r2, [r4, #0]
    1618:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    161a:	7ee3      	ldrb	r3, [r4, #27]
    161c:	079b      	lsls	r3, r3, #30
    161e:	d502      	bpl.n	1626 <ADC_Handler+0x32>
    1620:	7ea3      	ldrb	r3, [r4, #26]
    1622:	079b      	lsls	r3, r3, #30
    1624:	d42a      	bmi.n	167c <ADC_Handler+0x88>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1626:	07ab      	lsls	r3, r5, #30
    1628:	d508      	bpl.n	163c <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    162a:	2302      	movs	r3, #2
    162c:	6822      	ldr	r2, [r4, #0]
    162e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1630:	7ee3      	ldrb	r3, [r4, #27]
    1632:	075b      	lsls	r3, r3, #29
    1634:	d502      	bpl.n	163c <ADC_Handler+0x48>
    1636:	7ea3      	ldrb	r3, [r4, #26]
    1638:	075b      	lsls	r3, r3, #29
    163a:	d423      	bmi.n	1684 <ADC_Handler+0x90>
	_adc_interrupt_handler(0);
}
    163c:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    163e:	2201      	movs	r2, #1
    1640:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1642:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1644:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    1646:	b25b      	sxtb	r3, r3
    1648:	2b00      	cmp	r3, #0
    164a:	dbfb      	blt.n	1644 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    164c:	6961      	ldr	r1, [r4, #20]
    164e:	1c8b      	adds	r3, r1, #2
    1650:	6163      	str	r3, [r4, #20]
    1652:	8b53      	ldrh	r3, [r2, #26]
    1654:	b29b      	uxth	r3, r3
    1656:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    1658:	8b23      	ldrh	r3, [r4, #24]
    165a:	3b01      	subs	r3, #1
    165c:	b29b      	uxth	r3, r3
    165e:	8323      	strh	r3, [r4, #24]
    1660:	2b00      	cmp	r3, #0
    1662:	d1d5      	bne.n	1610 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    1664:	7f23      	ldrb	r3, [r4, #28]
    1666:	2b05      	cmp	r3, #5
    1668:	d1d2      	bne.n	1610 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    166a:	2300      	movs	r3, #0
    166c:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    166e:	3301      	adds	r3, #1
    1670:	6822      	ldr	r2, [r4, #0]
    1672:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1674:	0020      	movs	r0, r4
    1676:	68a3      	ldr	r3, [r4, #8]
    1678:	4798      	blx	r3
    167a:	e7c9      	b.n	1610 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    167c:	0020      	movs	r0, r4
    167e:	68e3      	ldr	r3, [r4, #12]
    1680:	4798      	blx	r3
    1682:	e7d0      	b.n	1626 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1684:	6923      	ldr	r3, [r4, #16]
    1686:	0020      	movs	r0, r4
    1688:	4798      	blx	r3
}
    168a:	e7d7      	b.n	163c <ADC_Handler+0x48>
    168c:	2000034c 	.word	0x2000034c

00001690 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1690:	1c93      	adds	r3, r2, #2
    1692:	009b      	lsls	r3, r3, #2
    1694:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    1696:	2301      	movs	r3, #1
    1698:	4093      	lsls	r3, r2
    169a:	001a      	movs	r2, r3
    169c:	7e83      	ldrb	r3, [r0, #26]
    169e:	4313      	orrs	r3, r2
    16a0:	7683      	strb	r3, [r0, #26]
}
    16a2:	4770      	bx	lr

000016a4 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    16a4:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    16a6:	8b03      	ldrh	r3, [r0, #24]
    16a8:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    16aa:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
    16ac:	2b00      	cmp	r3, #0
    16ae:	d001      	beq.n	16b4 <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
    16b0:	0020      	movs	r0, r4
    16b2:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
    16b4:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
    16b6:	2b05      	cmp	r3, #5
    16b8:	d0fa      	beq.n	16b0 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
    16ba:	2305      	movs	r3, #5
    16bc:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
    16be:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
    16c0:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
    16c2:	3b04      	subs	r3, #4
    16c4:	6802      	ldr	r2, [r0, #0]
    16c6:	75d3      	strb	r3, [r2, #23]
	if(module_inst->software_trigger == true) {
    16c8:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
    16ca:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
    16cc:	2b00      	cmp	r3, #0
    16ce:	d0ef      	beq.n	16b0 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
    16d0:	6802      	ldr	r2, [r0, #0]
    16d2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    16d4:	b25b      	sxtb	r3, r3
    16d6:	2b00      	cmp	r3, #0
    16d8:	dbfb      	blt.n	16d2 <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    16da:	7b13      	ldrb	r3, [r2, #12]
    16dc:	2102      	movs	r1, #2
    16de:	430b      	orrs	r3, r1
    16e0:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    16e2:	6802      	ldr	r2, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    16e4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    16e6:	b25b      	sxtb	r3, r3
    16e8:	2b00      	cmp	r3, #0
    16ea:	dbfb      	blt.n	16e4 <adc_read_buffer_job+0x40>
	return STATUS_OK;
    16ec:	2400      	movs	r4, #0
    16ee:	e7df      	b.n	16b0 <adc_read_buffer_job+0xc>

000016f0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    16f0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    16f2:	2a00      	cmp	r2, #0
    16f4:	d001      	beq.n	16fa <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    16f6:	0018      	movs	r0, r3
    16f8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    16fa:	008b      	lsls	r3, r1, #2
    16fc:	4a06      	ldr	r2, [pc, #24]	; (1718 <extint_register_callback+0x28>)
    16fe:	589b      	ldr	r3, [r3, r2]
    1700:	2b00      	cmp	r3, #0
    1702:	d003      	beq.n	170c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1704:	4283      	cmp	r3, r0
    1706:	d005      	beq.n	1714 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1708:	231d      	movs	r3, #29
    170a:	e7f4      	b.n	16f6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    170c:	0089      	lsls	r1, r1, #2
    170e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1710:	2300      	movs	r3, #0
    1712:	e7f0      	b.n	16f6 <extint_register_callback+0x6>
		return STATUS_OK;
    1714:	2300      	movs	r3, #0
    1716:	e7ee      	b.n	16f6 <extint_register_callback+0x6>
    1718:	20000354 	.word	0x20000354

0000171c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    171c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    171e:	2900      	cmp	r1, #0
    1720:	d001      	beq.n	1726 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1722:	0018      	movs	r0, r3
    1724:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1726:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1728:	281f      	cmp	r0, #31
    172a:	d800      	bhi.n	172e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    172c:	4a02      	ldr	r2, [pc, #8]	; (1738 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    172e:	2301      	movs	r3, #1
    1730:	4083      	lsls	r3, r0
    1732:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1734:	2300      	movs	r3, #0
    1736:	e7f4      	b.n	1722 <extint_chan_enable_callback+0x6>
    1738:	40001800 	.word	0x40001800

0000173c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    173c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    173e:	2900      	cmp	r1, #0
    1740:	d001      	beq.n	1746 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    1742:	0018      	movs	r0, r3
    1744:	4770      	bx	lr
		return NULL;
    1746:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1748:	281f      	cmp	r0, #31
    174a:	d800      	bhi.n	174e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    174c:	4a02      	ldr	r2, [pc, #8]	; (1758 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    174e:	2301      	movs	r3, #1
    1750:	4083      	lsls	r3, r0
    1752:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    1754:	2300      	movs	r3, #0
    1756:	e7f4      	b.n	1742 <extint_chan_disable_callback+0x6>
    1758:	40001800 	.word	0x40001800

0000175c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    175c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    175e:	2200      	movs	r2, #0
    1760:	4b10      	ldr	r3, [pc, #64]	; (17a4 <EIC_Handler+0x48>)
    1762:	701a      	strb	r2, [r3, #0]
    1764:	2300      	movs	r3, #0
    1766:	4910      	ldr	r1, [pc, #64]	; (17a8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1768:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    176a:	4e10      	ldr	r6, [pc, #64]	; (17ac <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    176c:	4c0d      	ldr	r4, [pc, #52]	; (17a4 <EIC_Handler+0x48>)
    176e:	e00a      	b.n	1786 <EIC_Handler+0x2a>
		return eics[eic_index];
    1770:	490d      	ldr	r1, [pc, #52]	; (17a8 <EIC_Handler+0x4c>)
    1772:	e008      	b.n	1786 <EIC_Handler+0x2a>
    1774:	7823      	ldrb	r3, [r4, #0]
    1776:	3301      	adds	r3, #1
    1778:	b2db      	uxtb	r3, r3
    177a:	7023      	strb	r3, [r4, #0]
    177c:	2b0f      	cmp	r3, #15
    177e:	d810      	bhi.n	17a2 <EIC_Handler+0x46>
		return NULL;
    1780:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1782:	2b1f      	cmp	r3, #31
    1784:	d9f4      	bls.n	1770 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1786:	0028      	movs	r0, r5
    1788:	4018      	ands	r0, r3
    178a:	2201      	movs	r2, #1
    178c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    178e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1790:	4210      	tst	r0, r2
    1792:	d0ef      	beq.n	1774 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1794:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1796:	009b      	lsls	r3, r3, #2
    1798:	599b      	ldr	r3, [r3, r6]
    179a:	2b00      	cmp	r3, #0
    179c:	d0ea      	beq.n	1774 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    179e:	4798      	blx	r3
    17a0:	e7e8      	b.n	1774 <EIC_Handler+0x18>
			}
		}
	}
}
    17a2:	bd70      	pop	{r4, r5, r6, pc}
    17a4:	20000350 	.word	0x20000350
    17a8:	40001800 	.word	0x40001800
    17ac:	20000354 	.word	0x20000354

000017b0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    17b0:	4a04      	ldr	r2, [pc, #16]	; (17c4 <_extint_enable+0x14>)
    17b2:	7813      	ldrb	r3, [r2, #0]
    17b4:	2102      	movs	r1, #2
    17b6:	430b      	orrs	r3, r1
    17b8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    17ba:	7853      	ldrb	r3, [r2, #1]
    17bc:	b25b      	sxtb	r3, r3
    17be:	2b00      	cmp	r3, #0
    17c0:	dbfb      	blt.n	17ba <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    17c2:	4770      	bx	lr
    17c4:	40001800 	.word	0x40001800

000017c8 <_system_extint_init>:
{
    17c8:	b500      	push	{lr}
    17ca:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    17cc:	4a12      	ldr	r2, [pc, #72]	; (1818 <_system_extint_init+0x50>)
    17ce:	6993      	ldr	r3, [r2, #24]
    17d0:	2140      	movs	r1, #64	; 0x40
    17d2:	430b      	orrs	r3, r1
    17d4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    17d6:	a901      	add	r1, sp, #4
    17d8:	2300      	movs	r3, #0
    17da:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    17dc:	2005      	movs	r0, #5
    17de:	4b0f      	ldr	r3, [pc, #60]	; (181c <_system_extint_init+0x54>)
    17e0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    17e2:	2005      	movs	r0, #5
    17e4:	4b0e      	ldr	r3, [pc, #56]	; (1820 <_system_extint_init+0x58>)
    17e6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    17e8:	4a0e      	ldr	r2, [pc, #56]	; (1824 <_system_extint_init+0x5c>)
    17ea:	7813      	ldrb	r3, [r2, #0]
    17ec:	2101      	movs	r1, #1
    17ee:	430b      	orrs	r3, r1
    17f0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    17f2:	7853      	ldrb	r3, [r2, #1]
    17f4:	b25b      	sxtb	r3, r3
    17f6:	2b00      	cmp	r3, #0
    17f8:	dbfb      	blt.n	17f2 <_system_extint_init+0x2a>
    17fa:	4b0b      	ldr	r3, [pc, #44]	; (1828 <_system_extint_init+0x60>)
    17fc:	0019      	movs	r1, r3
    17fe:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1800:	2200      	movs	r2, #0
    1802:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1804:	4299      	cmp	r1, r3
    1806:	d1fc      	bne.n	1802 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1808:	2210      	movs	r2, #16
    180a:	4b08      	ldr	r3, [pc, #32]	; (182c <_system_extint_init+0x64>)
    180c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    180e:	4b08      	ldr	r3, [pc, #32]	; (1830 <_system_extint_init+0x68>)
    1810:	4798      	blx	r3
}
    1812:	b003      	add	sp, #12
    1814:	bd00      	pop	{pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	40000400 	.word	0x40000400
    181c:	00002829 	.word	0x00002829
    1820:	0000279d 	.word	0x0000279d
    1824:	40001800 	.word	0x40001800
    1828:	20000354 	.word	0x20000354
    182c:	e000e100 	.word	0xe000e100
    1830:	000017b1 	.word	0x000017b1

00001834 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1834:	2300      	movs	r3, #0
    1836:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1838:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    183a:	2201      	movs	r2, #1
    183c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    183e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1840:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1842:	3302      	adds	r3, #2
    1844:	72c3      	strb	r3, [r0, #11]
}
    1846:	4770      	bx	lr

00001848 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1848:	b5f0      	push	{r4, r5, r6, r7, lr}
    184a:	b083      	sub	sp, #12
    184c:	0005      	movs	r5, r0
    184e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1850:	a901      	add	r1, sp, #4
    1852:	2300      	movs	r3, #0
    1854:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1856:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1858:	7923      	ldrb	r3, [r4, #4]
    185a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    185c:	7a23      	ldrb	r3, [r4, #8]
    185e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1860:	7820      	ldrb	r0, [r4, #0]
    1862:	4b15      	ldr	r3, [pc, #84]	; (18b8 <extint_chan_set_config+0x70>)
    1864:	4798      	blx	r3
		return NULL;
    1866:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1868:	2d1f      	cmp	r5, #31
    186a:	d800      	bhi.n	186e <extint_chan_set_config+0x26>
		return eics[eic_index];
    186c:	4813      	ldr	r0, [pc, #76]	; (18bc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    186e:	2207      	movs	r2, #7
    1870:	402a      	ands	r2, r5
    1872:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1874:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1876:	7aa3      	ldrb	r3, [r4, #10]
    1878:	2b00      	cmp	r3, #0
    187a:	d001      	beq.n	1880 <extint_chan_set_config+0x38>
    187c:	2308      	movs	r3, #8
    187e:	431f      	orrs	r7, r3
    1880:	08eb      	lsrs	r3, r5, #3
    1882:	009b      	lsls	r3, r3, #2
    1884:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1886:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1888:	260f      	movs	r6, #15
    188a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    188c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    188e:	4097      	lsls	r7, r2
    1890:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1892:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1894:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1896:	7a63      	ldrb	r3, [r4, #9]
    1898:	2b00      	cmp	r3, #0
    189a:	d106      	bne.n	18aa <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    189c:	6943      	ldr	r3, [r0, #20]
    189e:	2201      	movs	r2, #1
    18a0:	40aa      	lsls	r2, r5
    18a2:	4393      	bics	r3, r2
    18a4:	6143      	str	r3, [r0, #20]
	}
}
    18a6:	b003      	add	sp, #12
    18a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    18aa:	6942      	ldr	r2, [r0, #20]
    18ac:	2301      	movs	r3, #1
    18ae:	40ab      	lsls	r3, r5
    18b0:	4313      	orrs	r3, r2
    18b2:	6143      	str	r3, [r0, #20]
    18b4:	e7f7      	b.n	18a6 <extint_chan_set_config+0x5e>
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	00002979 	.word	0x00002979
    18bc:	40001800 	.word	0x40001800

000018c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    18c0:	b500      	push	{lr}
    18c2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    18c4:	ab01      	add	r3, sp, #4
    18c6:	2280      	movs	r2, #128	; 0x80
    18c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    18ca:	780a      	ldrb	r2, [r1, #0]
    18cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    18ce:	784a      	ldrb	r2, [r1, #1]
    18d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    18d2:	788a      	ldrb	r2, [r1, #2]
    18d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    18d6:	0019      	movs	r1, r3
    18d8:	4b01      	ldr	r3, [pc, #4]	; (18e0 <port_pin_set_config+0x20>)
    18da:	4798      	blx	r3
}
    18dc:	b003      	add	sp, #12
    18de:	bd00      	pop	{pc}
    18e0:	00002979 	.word	0x00002979

000018e4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    18e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e6:	46de      	mov	lr, fp
    18e8:	4657      	mov	r7, sl
    18ea:	464e      	mov	r6, r9
    18ec:	4645      	mov	r5, r8
    18ee:	b5e0      	push	{r5, r6, r7, lr}
    18f0:	b087      	sub	sp, #28
    18f2:	4680      	mov	r8, r0
    18f4:	9104      	str	r1, [sp, #16]
    18f6:	0016      	movs	r6, r2
    18f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    18fa:	2200      	movs	r2, #0
    18fc:	2300      	movs	r3, #0
    18fe:	2100      	movs	r1, #0
    1900:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1902:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1904:	2001      	movs	r0, #1
    1906:	0021      	movs	r1, r4
    1908:	9600      	str	r6, [sp, #0]
    190a:	9701      	str	r7, [sp, #4]
    190c:	465c      	mov	r4, fp
    190e:	9403      	str	r4, [sp, #12]
    1910:	4644      	mov	r4, r8
    1912:	9405      	str	r4, [sp, #20]
    1914:	e013      	b.n	193e <long_division+0x5a>
    1916:	2420      	movs	r4, #32
    1918:	1a64      	subs	r4, r4, r1
    191a:	0005      	movs	r5, r0
    191c:	40e5      	lsrs	r5, r4
    191e:	46a8      	mov	r8, r5
    1920:	e014      	b.n	194c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1922:	9c00      	ldr	r4, [sp, #0]
    1924:	9d01      	ldr	r5, [sp, #4]
    1926:	1b12      	subs	r2, r2, r4
    1928:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    192a:	465c      	mov	r4, fp
    192c:	464d      	mov	r5, r9
    192e:	432c      	orrs	r4, r5
    1930:	46a3      	mov	fp, r4
    1932:	9c03      	ldr	r4, [sp, #12]
    1934:	4645      	mov	r5, r8
    1936:	432c      	orrs	r4, r5
    1938:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    193a:	3901      	subs	r1, #1
    193c:	d325      	bcc.n	198a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    193e:	2420      	movs	r4, #32
    1940:	4264      	negs	r4, r4
    1942:	190c      	adds	r4, r1, r4
    1944:	d4e7      	bmi.n	1916 <long_division+0x32>
    1946:	0005      	movs	r5, r0
    1948:	40a5      	lsls	r5, r4
    194a:	46a8      	mov	r8, r5
    194c:	0004      	movs	r4, r0
    194e:	408c      	lsls	r4, r1
    1950:	46a1      	mov	r9, r4
		r = r << 1;
    1952:	1892      	adds	r2, r2, r2
    1954:	415b      	adcs	r3, r3
    1956:	0014      	movs	r4, r2
    1958:	001d      	movs	r5, r3
		if (n & bit_shift) {
    195a:	9e05      	ldr	r6, [sp, #20]
    195c:	464f      	mov	r7, r9
    195e:	403e      	ands	r6, r7
    1960:	46b4      	mov	ip, r6
    1962:	9e04      	ldr	r6, [sp, #16]
    1964:	4647      	mov	r7, r8
    1966:	403e      	ands	r6, r7
    1968:	46b2      	mov	sl, r6
    196a:	4666      	mov	r6, ip
    196c:	4657      	mov	r7, sl
    196e:	433e      	orrs	r6, r7
    1970:	d003      	beq.n	197a <long_division+0x96>
			r |= 0x01;
    1972:	0006      	movs	r6, r0
    1974:	4326      	orrs	r6, r4
    1976:	0032      	movs	r2, r6
    1978:	002b      	movs	r3, r5
		if (r >= d) {
    197a:	9c00      	ldr	r4, [sp, #0]
    197c:	9d01      	ldr	r5, [sp, #4]
    197e:	429d      	cmp	r5, r3
    1980:	d8db      	bhi.n	193a <long_division+0x56>
    1982:	d1ce      	bne.n	1922 <long_division+0x3e>
    1984:	4294      	cmp	r4, r2
    1986:	d8d8      	bhi.n	193a <long_division+0x56>
    1988:	e7cb      	b.n	1922 <long_division+0x3e>
    198a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    198c:	4658      	mov	r0, fp
    198e:	0019      	movs	r1, r3
    1990:	b007      	add	sp, #28
    1992:	bc3c      	pop	{r2, r3, r4, r5}
    1994:	4690      	mov	r8, r2
    1996:	4699      	mov	r9, r3
    1998:	46a2      	mov	sl, r4
    199a:	46ab      	mov	fp, r5
    199c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000199e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    199e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    19a0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19a2:	2340      	movs	r3, #64	; 0x40
    19a4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    19a6:	4281      	cmp	r1, r0
    19a8:	d202      	bcs.n	19b0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    19aa:	0018      	movs	r0, r3
    19ac:	bd10      	pop	{r4, pc}
		baud_calculated++;
    19ae:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    19b0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    19b2:	1c63      	adds	r3, r4, #1
    19b4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    19b6:	4288      	cmp	r0, r1
    19b8:	d9f9      	bls.n	19ae <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19ba:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    19bc:	2cff      	cmp	r4, #255	; 0xff
    19be:	d8f4      	bhi.n	19aa <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    19c0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    19c2:	2300      	movs	r3, #0
    19c4:	e7f1      	b.n	19aa <_sercom_get_sync_baud_val+0xc>
	...

000019c8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    19c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ca:	b083      	sub	sp, #12
    19cc:	000f      	movs	r7, r1
    19ce:	0016      	movs	r6, r2
    19d0:	aa08      	add	r2, sp, #32
    19d2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    19d4:	0004      	movs	r4, r0
    19d6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19d8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    19da:	42bc      	cmp	r4, r7
    19dc:	d902      	bls.n	19e4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    19de:	0010      	movs	r0, r2
    19e0:	b003      	add	sp, #12
    19e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    19e4:	2b00      	cmp	r3, #0
    19e6:	d114      	bne.n	1a12 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    19e8:	0002      	movs	r2, r0
    19ea:	0008      	movs	r0, r1
    19ec:	2100      	movs	r1, #0
    19ee:	4c19      	ldr	r4, [pc, #100]	; (1a54 <_sercom_get_async_baud_val+0x8c>)
    19f0:	47a0      	blx	r4
    19f2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    19f4:	003a      	movs	r2, r7
    19f6:	2300      	movs	r3, #0
    19f8:	2000      	movs	r0, #0
    19fa:	4c17      	ldr	r4, [pc, #92]	; (1a58 <_sercom_get_async_baud_val+0x90>)
    19fc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    19fe:	2200      	movs	r2, #0
    1a00:	2301      	movs	r3, #1
    1a02:	1a12      	subs	r2, r2, r0
    1a04:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1a06:	0c12      	lsrs	r2, r2, #16
    1a08:	041b      	lsls	r3, r3, #16
    1a0a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1a0c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1a0e:	2200      	movs	r2, #0
    1a10:	e7e5      	b.n	19de <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1a12:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1a14:	2b01      	cmp	r3, #1
    1a16:	d1f9      	bne.n	1a0c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1a18:	000a      	movs	r2, r1
    1a1a:	2300      	movs	r3, #0
    1a1c:	2100      	movs	r1, #0
    1a1e:	4c0d      	ldr	r4, [pc, #52]	; (1a54 <_sercom_get_async_baud_val+0x8c>)
    1a20:	47a0      	blx	r4
    1a22:	0002      	movs	r2, r0
    1a24:	000b      	movs	r3, r1
    1a26:	9200      	str	r2, [sp, #0]
    1a28:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1a2a:	0038      	movs	r0, r7
    1a2c:	2100      	movs	r1, #0
    1a2e:	4c0a      	ldr	r4, [pc, #40]	; (1a58 <_sercom_get_async_baud_val+0x90>)
    1a30:	47a0      	blx	r4
    1a32:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1a34:	2380      	movs	r3, #128	; 0x80
    1a36:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a38:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1a3a:	4298      	cmp	r0, r3
    1a3c:	d8cf      	bhi.n	19de <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1a3e:	0f79      	lsrs	r1, r7, #29
    1a40:	00f8      	lsls	r0, r7, #3
    1a42:	9a00      	ldr	r2, [sp, #0]
    1a44:	9b01      	ldr	r3, [sp, #4]
    1a46:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1a48:	00ea      	lsls	r2, r5, #3
    1a4a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1a4c:	b2d2      	uxtb	r2, r2
    1a4e:	0352      	lsls	r2, r2, #13
    1a50:	432a      	orrs	r2, r5
    1a52:	e7db      	b.n	1a0c <_sercom_get_async_baud_val+0x44>
    1a54:	000054ed 	.word	0x000054ed
    1a58:	000018e5 	.word	0x000018e5

00001a5c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1a5c:	b510      	push	{r4, lr}
    1a5e:	b082      	sub	sp, #8
    1a60:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1a62:	4b0e      	ldr	r3, [pc, #56]	; (1a9c <sercom_set_gclk_generator+0x40>)
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	2b00      	cmp	r3, #0
    1a68:	d007      	beq.n	1a7a <sercom_set_gclk_generator+0x1e>
    1a6a:	2900      	cmp	r1, #0
    1a6c:	d105      	bne.n	1a7a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1a6e:	4b0b      	ldr	r3, [pc, #44]	; (1a9c <sercom_set_gclk_generator+0x40>)
    1a70:	785b      	ldrb	r3, [r3, #1]
    1a72:	4283      	cmp	r3, r0
    1a74:	d010      	beq.n	1a98 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a76:	201d      	movs	r0, #29
    1a78:	e00c      	b.n	1a94 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1a7a:	a901      	add	r1, sp, #4
    1a7c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1a7e:	2013      	movs	r0, #19
    1a80:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <sercom_set_gclk_generator+0x44>)
    1a82:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1a84:	2013      	movs	r0, #19
    1a86:	4b07      	ldr	r3, [pc, #28]	; (1aa4 <sercom_set_gclk_generator+0x48>)
    1a88:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1a8a:	4b04      	ldr	r3, [pc, #16]	; (1a9c <sercom_set_gclk_generator+0x40>)
    1a8c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1a8e:	2201      	movs	r2, #1
    1a90:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1a92:	2000      	movs	r0, #0
}
    1a94:	b002      	add	sp, #8
    1a96:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1a98:	2000      	movs	r0, #0
    1a9a:	e7fb      	b.n	1a94 <sercom_set_gclk_generator+0x38>
    1a9c:	2000026c 	.word	0x2000026c
    1aa0:	00002829 	.word	0x00002829
    1aa4:	0000279d 	.word	0x0000279d

00001aa8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1aa8:	4b40      	ldr	r3, [pc, #256]	; (1bac <_sercom_get_default_pad+0x104>)
    1aaa:	4298      	cmp	r0, r3
    1aac:	d031      	beq.n	1b12 <_sercom_get_default_pad+0x6a>
    1aae:	d90a      	bls.n	1ac6 <_sercom_get_default_pad+0x1e>
    1ab0:	4b3f      	ldr	r3, [pc, #252]	; (1bb0 <_sercom_get_default_pad+0x108>)
    1ab2:	4298      	cmp	r0, r3
    1ab4:	d04d      	beq.n	1b52 <_sercom_get_default_pad+0xaa>
    1ab6:	4b3f      	ldr	r3, [pc, #252]	; (1bb4 <_sercom_get_default_pad+0x10c>)
    1ab8:	4298      	cmp	r0, r3
    1aba:	d05a      	beq.n	1b72 <_sercom_get_default_pad+0xca>
    1abc:	4b3e      	ldr	r3, [pc, #248]	; (1bb8 <_sercom_get_default_pad+0x110>)
    1abe:	4298      	cmp	r0, r3
    1ac0:	d037      	beq.n	1b32 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1ac2:	2000      	movs	r0, #0
}
    1ac4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1ac6:	4b3d      	ldr	r3, [pc, #244]	; (1bbc <_sercom_get_default_pad+0x114>)
    1ac8:	4298      	cmp	r0, r3
    1aca:	d00c      	beq.n	1ae6 <_sercom_get_default_pad+0x3e>
    1acc:	4b3c      	ldr	r3, [pc, #240]	; (1bc0 <_sercom_get_default_pad+0x118>)
    1ace:	4298      	cmp	r0, r3
    1ad0:	d1f7      	bne.n	1ac2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ad2:	2901      	cmp	r1, #1
    1ad4:	d017      	beq.n	1b06 <_sercom_get_default_pad+0x5e>
    1ad6:	2900      	cmp	r1, #0
    1ad8:	d05d      	beq.n	1b96 <_sercom_get_default_pad+0xee>
    1ada:	2902      	cmp	r1, #2
    1adc:	d015      	beq.n	1b0a <_sercom_get_default_pad+0x62>
    1ade:	2903      	cmp	r1, #3
    1ae0:	d015      	beq.n	1b0e <_sercom_get_default_pad+0x66>
	return 0;
    1ae2:	2000      	movs	r0, #0
    1ae4:	e7ee      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ae6:	2901      	cmp	r1, #1
    1ae8:	d007      	beq.n	1afa <_sercom_get_default_pad+0x52>
    1aea:	2900      	cmp	r1, #0
    1aec:	d051      	beq.n	1b92 <_sercom_get_default_pad+0xea>
    1aee:	2902      	cmp	r1, #2
    1af0:	d005      	beq.n	1afe <_sercom_get_default_pad+0x56>
    1af2:	2903      	cmp	r1, #3
    1af4:	d005      	beq.n	1b02 <_sercom_get_default_pad+0x5a>
	return 0;
    1af6:	2000      	movs	r0, #0
    1af8:	e7e4      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1afa:	4832      	ldr	r0, [pc, #200]	; (1bc4 <_sercom_get_default_pad+0x11c>)
    1afc:	e7e2      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1afe:	4832      	ldr	r0, [pc, #200]	; (1bc8 <_sercom_get_default_pad+0x120>)
    1b00:	e7e0      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b02:	4832      	ldr	r0, [pc, #200]	; (1bcc <_sercom_get_default_pad+0x124>)
    1b04:	e7de      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b06:	4832      	ldr	r0, [pc, #200]	; (1bd0 <_sercom_get_default_pad+0x128>)
    1b08:	e7dc      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b0a:	4832      	ldr	r0, [pc, #200]	; (1bd4 <_sercom_get_default_pad+0x12c>)
    1b0c:	e7da      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b0e:	4832      	ldr	r0, [pc, #200]	; (1bd8 <_sercom_get_default_pad+0x130>)
    1b10:	e7d8      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b12:	2901      	cmp	r1, #1
    1b14:	d007      	beq.n	1b26 <_sercom_get_default_pad+0x7e>
    1b16:	2900      	cmp	r1, #0
    1b18:	d03f      	beq.n	1b9a <_sercom_get_default_pad+0xf2>
    1b1a:	2902      	cmp	r1, #2
    1b1c:	d005      	beq.n	1b2a <_sercom_get_default_pad+0x82>
    1b1e:	2903      	cmp	r1, #3
    1b20:	d005      	beq.n	1b2e <_sercom_get_default_pad+0x86>
	return 0;
    1b22:	2000      	movs	r0, #0
    1b24:	e7ce      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b26:	482d      	ldr	r0, [pc, #180]	; (1bdc <_sercom_get_default_pad+0x134>)
    1b28:	e7cc      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b2a:	482d      	ldr	r0, [pc, #180]	; (1be0 <_sercom_get_default_pad+0x138>)
    1b2c:	e7ca      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b2e:	482d      	ldr	r0, [pc, #180]	; (1be4 <_sercom_get_default_pad+0x13c>)
    1b30:	e7c8      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b32:	2901      	cmp	r1, #1
    1b34:	d007      	beq.n	1b46 <_sercom_get_default_pad+0x9e>
    1b36:	2900      	cmp	r1, #0
    1b38:	d031      	beq.n	1b9e <_sercom_get_default_pad+0xf6>
    1b3a:	2902      	cmp	r1, #2
    1b3c:	d005      	beq.n	1b4a <_sercom_get_default_pad+0xa2>
    1b3e:	2903      	cmp	r1, #3
    1b40:	d005      	beq.n	1b4e <_sercom_get_default_pad+0xa6>
	return 0;
    1b42:	2000      	movs	r0, #0
    1b44:	e7be      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b46:	4828      	ldr	r0, [pc, #160]	; (1be8 <_sercom_get_default_pad+0x140>)
    1b48:	e7bc      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b4a:	4828      	ldr	r0, [pc, #160]	; (1bec <_sercom_get_default_pad+0x144>)
    1b4c:	e7ba      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b4e:	4828      	ldr	r0, [pc, #160]	; (1bf0 <_sercom_get_default_pad+0x148>)
    1b50:	e7b8      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b52:	2901      	cmp	r1, #1
    1b54:	d007      	beq.n	1b66 <_sercom_get_default_pad+0xbe>
    1b56:	2900      	cmp	r1, #0
    1b58:	d023      	beq.n	1ba2 <_sercom_get_default_pad+0xfa>
    1b5a:	2902      	cmp	r1, #2
    1b5c:	d005      	beq.n	1b6a <_sercom_get_default_pad+0xc2>
    1b5e:	2903      	cmp	r1, #3
    1b60:	d005      	beq.n	1b6e <_sercom_get_default_pad+0xc6>
	return 0;
    1b62:	2000      	movs	r0, #0
    1b64:	e7ae      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b66:	4823      	ldr	r0, [pc, #140]	; (1bf4 <_sercom_get_default_pad+0x14c>)
    1b68:	e7ac      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b6a:	4823      	ldr	r0, [pc, #140]	; (1bf8 <_sercom_get_default_pad+0x150>)
    1b6c:	e7aa      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b6e:	4823      	ldr	r0, [pc, #140]	; (1bfc <_sercom_get_default_pad+0x154>)
    1b70:	e7a8      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b72:	2901      	cmp	r1, #1
    1b74:	d007      	beq.n	1b86 <_sercom_get_default_pad+0xde>
    1b76:	2900      	cmp	r1, #0
    1b78:	d015      	beq.n	1ba6 <_sercom_get_default_pad+0xfe>
    1b7a:	2902      	cmp	r1, #2
    1b7c:	d005      	beq.n	1b8a <_sercom_get_default_pad+0xe2>
    1b7e:	2903      	cmp	r1, #3
    1b80:	d005      	beq.n	1b8e <_sercom_get_default_pad+0xe6>
	return 0;
    1b82:	2000      	movs	r0, #0
    1b84:	e79e      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b86:	481e      	ldr	r0, [pc, #120]	; (1c00 <_sercom_get_default_pad+0x158>)
    1b88:	e79c      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b8a:	481e      	ldr	r0, [pc, #120]	; (1c04 <_sercom_get_default_pad+0x15c>)
    1b8c:	e79a      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b8e:	481e      	ldr	r0, [pc, #120]	; (1c08 <_sercom_get_default_pad+0x160>)
    1b90:	e798      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b92:	481e      	ldr	r0, [pc, #120]	; (1c0c <_sercom_get_default_pad+0x164>)
    1b94:	e796      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b96:	2003      	movs	r0, #3
    1b98:	e794      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b9a:	481d      	ldr	r0, [pc, #116]	; (1c10 <_sercom_get_default_pad+0x168>)
    1b9c:	e792      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b9e:	481d      	ldr	r0, [pc, #116]	; (1c14 <_sercom_get_default_pad+0x16c>)
    1ba0:	e790      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1ba2:	481d      	ldr	r0, [pc, #116]	; (1c18 <_sercom_get_default_pad+0x170>)
    1ba4:	e78e      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1ba6:	481d      	ldr	r0, [pc, #116]	; (1c1c <_sercom_get_default_pad+0x174>)
    1ba8:	e78c      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	42001000 	.word	0x42001000
    1bb0:	42001800 	.word	0x42001800
    1bb4:	42001c00 	.word	0x42001c00
    1bb8:	42001400 	.word	0x42001400
    1bbc:	42000800 	.word	0x42000800
    1bc0:	42000c00 	.word	0x42000c00
    1bc4:	00050003 	.word	0x00050003
    1bc8:	00060003 	.word	0x00060003
    1bcc:	00070003 	.word	0x00070003
    1bd0:	00010003 	.word	0x00010003
    1bd4:	001e0003 	.word	0x001e0003
    1bd8:	001f0003 	.word	0x001f0003
    1bdc:	00090003 	.word	0x00090003
    1be0:	000a0003 	.word	0x000a0003
    1be4:	000b0003 	.word	0x000b0003
    1be8:	00110003 	.word	0x00110003
    1bec:	00120003 	.word	0x00120003
    1bf0:	00130003 	.word	0x00130003
    1bf4:	000d0003 	.word	0x000d0003
    1bf8:	000e0003 	.word	0x000e0003
    1bfc:	000f0003 	.word	0x000f0003
    1c00:	00170003 	.word	0x00170003
    1c04:	00180003 	.word	0x00180003
    1c08:	00190003 	.word	0x00190003
    1c0c:	00040003 	.word	0x00040003
    1c10:	00080003 	.word	0x00080003
    1c14:	00100003 	.word	0x00100003
    1c18:	000c0003 	.word	0x000c0003
    1c1c:	00160003 	.word	0x00160003

00001c20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1c20:	b530      	push	{r4, r5, lr}
    1c22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1c24:	4b0b      	ldr	r3, [pc, #44]	; (1c54 <_sercom_get_sercom_inst_index+0x34>)
    1c26:	466a      	mov	r2, sp
    1c28:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c2a:	c232      	stmia	r2!, {r1, r4, r5}
    1c2c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c2e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1c30:	9b00      	ldr	r3, [sp, #0]
    1c32:	4283      	cmp	r3, r0
    1c34:	d00b      	beq.n	1c4e <_sercom_get_sercom_inst_index+0x2e>
    1c36:	2301      	movs	r3, #1
    1c38:	009a      	lsls	r2, r3, #2
    1c3a:	4669      	mov	r1, sp
    1c3c:	5852      	ldr	r2, [r2, r1]
    1c3e:	4282      	cmp	r2, r0
    1c40:	d006      	beq.n	1c50 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c42:	3301      	adds	r3, #1
    1c44:	2b06      	cmp	r3, #6
    1c46:	d1f7      	bne.n	1c38 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1c48:	2000      	movs	r0, #0
}
    1c4a:	b007      	add	sp, #28
    1c4c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c4e:	2300      	movs	r3, #0
			return i;
    1c50:	b2d8      	uxtb	r0, r3
    1c52:	e7fa      	b.n	1c4a <_sercom_get_sercom_inst_index+0x2a>
    1c54:	000056d0 	.word	0x000056d0

00001c58 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1c58:	4770      	bx	lr
	...

00001c5c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1c5e:	4b0a      	ldr	r3, [pc, #40]	; (1c88 <_sercom_set_handler+0x2c>)
    1c60:	781b      	ldrb	r3, [r3, #0]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d10c      	bne.n	1c80 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c66:	4f09      	ldr	r7, [pc, #36]	; (1c8c <_sercom_set_handler+0x30>)
    1c68:	4e09      	ldr	r6, [pc, #36]	; (1c90 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1c6a:	4d0a      	ldr	r5, [pc, #40]	; (1c94 <_sercom_set_handler+0x38>)
    1c6c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c6e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1c70:	195a      	adds	r2, r3, r5
    1c72:	6014      	str	r4, [r2, #0]
    1c74:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c76:	2b18      	cmp	r3, #24
    1c78:	d1f9      	bne.n	1c6e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1c7a:	2201      	movs	r2, #1
    1c7c:	4b02      	ldr	r3, [pc, #8]	; (1c88 <_sercom_set_handler+0x2c>)
    1c7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1c80:	0080      	lsls	r0, r0, #2
    1c82:	4b02      	ldr	r3, [pc, #8]	; (1c8c <_sercom_set_handler+0x30>)
    1c84:	50c1      	str	r1, [r0, r3]
}
    1c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c88:	2000026e 	.word	0x2000026e
    1c8c:	20000270 	.word	0x20000270
    1c90:	00001c59 	.word	0x00001c59
    1c94:	20000394 	.word	0x20000394

00001c98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1c98:	b500      	push	{lr}
    1c9a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1c9c:	2309      	movs	r3, #9
    1c9e:	466a      	mov	r2, sp
    1ca0:	7013      	strb	r3, [r2, #0]
    1ca2:	3301      	adds	r3, #1
    1ca4:	7053      	strb	r3, [r2, #1]
    1ca6:	3301      	adds	r3, #1
    1ca8:	7093      	strb	r3, [r2, #2]
    1caa:	3301      	adds	r3, #1
    1cac:	70d3      	strb	r3, [r2, #3]
    1cae:	3301      	adds	r3, #1
    1cb0:	7113      	strb	r3, [r2, #4]
    1cb2:	3301      	adds	r3, #1
    1cb4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1cb6:	4b03      	ldr	r3, [pc, #12]	; (1cc4 <_sercom_get_interrupt_vector+0x2c>)
    1cb8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1cba:	466b      	mov	r3, sp
    1cbc:	5618      	ldrsb	r0, [r3, r0]
}
    1cbe:	b003      	add	sp, #12
    1cc0:	bd00      	pop	{pc}
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	00001c21 	.word	0x00001c21

00001cc8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1cc8:	b510      	push	{r4, lr}
    1cca:	4b02      	ldr	r3, [pc, #8]	; (1cd4 <SERCOM0_Handler+0xc>)
    1ccc:	681b      	ldr	r3, [r3, #0]
    1cce:	2000      	movs	r0, #0
    1cd0:	4798      	blx	r3
    1cd2:	bd10      	pop	{r4, pc}
    1cd4:	20000270 	.word	0x20000270

00001cd8 <SERCOM1_Handler>:
    1cd8:	b510      	push	{r4, lr}
    1cda:	4b02      	ldr	r3, [pc, #8]	; (1ce4 <SERCOM1_Handler+0xc>)
    1cdc:	685b      	ldr	r3, [r3, #4]
    1cde:	2001      	movs	r0, #1
    1ce0:	4798      	blx	r3
    1ce2:	bd10      	pop	{r4, pc}
    1ce4:	20000270 	.word	0x20000270

00001ce8 <SERCOM2_Handler>:
    1ce8:	b510      	push	{r4, lr}
    1cea:	4b02      	ldr	r3, [pc, #8]	; (1cf4 <SERCOM2_Handler+0xc>)
    1cec:	689b      	ldr	r3, [r3, #8]
    1cee:	2002      	movs	r0, #2
    1cf0:	4798      	blx	r3
    1cf2:	bd10      	pop	{r4, pc}
    1cf4:	20000270 	.word	0x20000270

00001cf8 <SERCOM3_Handler>:
    1cf8:	b510      	push	{r4, lr}
    1cfa:	4b02      	ldr	r3, [pc, #8]	; (1d04 <SERCOM3_Handler+0xc>)
    1cfc:	68db      	ldr	r3, [r3, #12]
    1cfe:	2003      	movs	r0, #3
    1d00:	4798      	blx	r3
    1d02:	bd10      	pop	{r4, pc}
    1d04:	20000270 	.word	0x20000270

00001d08 <SERCOM4_Handler>:
    1d08:	b510      	push	{r4, lr}
    1d0a:	4b02      	ldr	r3, [pc, #8]	; (1d14 <SERCOM4_Handler+0xc>)
    1d0c:	691b      	ldr	r3, [r3, #16]
    1d0e:	2004      	movs	r0, #4
    1d10:	4798      	blx	r3
    1d12:	bd10      	pop	{r4, pc}
    1d14:	20000270 	.word	0x20000270

00001d18 <SERCOM5_Handler>:
    1d18:	b510      	push	{r4, lr}
    1d1a:	4b02      	ldr	r3, [pc, #8]	; (1d24 <SERCOM5_Handler+0xc>)
    1d1c:	695b      	ldr	r3, [r3, #20]
    1d1e:	2005      	movs	r0, #5
    1d20:	4798      	blx	r3
    1d22:	bd10      	pop	{r4, pc}
    1d24:	20000270 	.word	0x20000270

00001d28 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d2a:	46de      	mov	lr, fp
    1d2c:	4657      	mov	r7, sl
    1d2e:	464e      	mov	r6, r9
    1d30:	4645      	mov	r5, r8
    1d32:	b5e0      	push	{r5, r6, r7, lr}
    1d34:	b091      	sub	sp, #68	; 0x44
    1d36:	0005      	movs	r5, r0
    1d38:	000c      	movs	r4, r1
    1d3a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1d3c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1d3e:	0008      	movs	r0, r1
    1d40:	4bbc      	ldr	r3, [pc, #752]	; (2034 <STACK_SIZE+0x34>)
    1d42:	4798      	blx	r3
    1d44:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1d46:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1d48:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1d4a:	07db      	lsls	r3, r3, #31
    1d4c:	d506      	bpl.n	1d5c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1d4e:	b011      	add	sp, #68	; 0x44
    1d50:	bc3c      	pop	{r2, r3, r4, r5}
    1d52:	4690      	mov	r8, r2
    1d54:	4699      	mov	r9, r3
    1d56:	46a2      	mov	sl, r4
    1d58:	46ab      	mov	fp, r5
    1d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1d5c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1d5e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1d60:	079b      	lsls	r3, r3, #30
    1d62:	d4f4      	bmi.n	1d4e <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    1d64:	49b4      	ldr	r1, [pc, #720]	; (2038 <STACK_SIZE+0x38>)
    1d66:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1d68:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1d6a:	2301      	movs	r3, #1
    1d6c:	40bb      	lsls	r3, r7
    1d6e:	4303      	orrs	r3, r0
    1d70:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1d72:	a90f      	add	r1, sp, #60	; 0x3c
    1d74:	272d      	movs	r7, #45	; 0x2d
    1d76:	5df3      	ldrb	r3, [r6, r7]
    1d78:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1d7a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1d7c:	b2d3      	uxtb	r3, r2
    1d7e:	9302      	str	r3, [sp, #8]
    1d80:	0018      	movs	r0, r3
    1d82:	4bae      	ldr	r3, [pc, #696]	; (203c <STACK_SIZE+0x3c>)
    1d84:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1d86:	9802      	ldr	r0, [sp, #8]
    1d88:	4bad      	ldr	r3, [pc, #692]	; (2040 <STACK_SIZE+0x40>)
    1d8a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1d8c:	5df0      	ldrb	r0, [r6, r7]
    1d8e:	2100      	movs	r1, #0
    1d90:	4bac      	ldr	r3, [pc, #688]	; (2044 <STACK_SIZE+0x44>)
    1d92:	4798      	blx	r3
	module->character_size = config->character_size;
    1d94:	7af3      	ldrb	r3, [r6, #11]
    1d96:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1d98:	2324      	movs	r3, #36	; 0x24
    1d9a:	5cf3      	ldrb	r3, [r6, r3]
    1d9c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1d9e:	2325      	movs	r3, #37	; 0x25
    1da0:	5cf3      	ldrb	r3, [r6, r3]
    1da2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1da4:	7ef3      	ldrb	r3, [r6, #27]
    1da6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1da8:	7f33      	ldrb	r3, [r6, #28]
    1daa:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dac:	682b      	ldr	r3, [r5, #0]
    1dae:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1db0:	0018      	movs	r0, r3
    1db2:	4ba0      	ldr	r3, [pc, #640]	; (2034 <STACK_SIZE+0x34>)
    1db4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1db6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1db8:	2200      	movs	r2, #0
    1dba:	230e      	movs	r3, #14
    1dbc:	a906      	add	r1, sp, #24
    1dbe:	468c      	mov	ip, r1
    1dc0:	4463      	add	r3, ip
    1dc2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1dc4:	8a32      	ldrh	r2, [r6, #16]
    1dc6:	9202      	str	r2, [sp, #8]
    1dc8:	2380      	movs	r3, #128	; 0x80
    1dca:	01db      	lsls	r3, r3, #7
    1dcc:	429a      	cmp	r2, r3
    1dce:	d100      	bne.n	1dd2 <usart_init+0xaa>
    1dd0:	e09e      	b.n	1f10 <usart_init+0x1e8>
    1dd2:	d90f      	bls.n	1df4 <usart_init+0xcc>
    1dd4:	23c0      	movs	r3, #192	; 0xc0
    1dd6:	01db      	lsls	r3, r3, #7
    1dd8:	9a02      	ldr	r2, [sp, #8]
    1dda:	429a      	cmp	r2, r3
    1ddc:	d100      	bne.n	1de0 <usart_init+0xb8>
    1dde:	e092      	b.n	1f06 <usart_init+0x1de>
    1de0:	2380      	movs	r3, #128	; 0x80
    1de2:	021b      	lsls	r3, r3, #8
    1de4:	429a      	cmp	r2, r3
    1de6:	d000      	beq.n	1dea <usart_init+0xc2>
    1de8:	e11f      	b.n	202a <STACK_SIZE+0x2a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1dea:	2303      	movs	r3, #3
    1dec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1dee:	2300      	movs	r3, #0
    1df0:	9307      	str	r3, [sp, #28]
    1df2:	e008      	b.n	1e06 <usart_init+0xde>
	switch (config->sample_rate) {
    1df4:	2380      	movs	r3, #128	; 0x80
    1df6:	019b      	lsls	r3, r3, #6
    1df8:	429a      	cmp	r2, r3
    1dfa:	d000      	beq.n	1dfe <usart_init+0xd6>
    1dfc:	e115      	b.n	202a <STACK_SIZE+0x2a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1dfe:	2310      	movs	r3, #16
    1e00:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1e02:	3b0f      	subs	r3, #15
    1e04:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1e06:	6833      	ldr	r3, [r6, #0]
    1e08:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1e0a:	68f3      	ldr	r3, [r6, #12]
    1e0c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1e0e:	6973      	ldr	r3, [r6, #20]
    1e10:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e12:	7e33      	ldrb	r3, [r6, #24]
    1e14:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e16:	2326      	movs	r3, #38	; 0x26
    1e18:	5cf3      	ldrb	r3, [r6, r3]
    1e1a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1e1c:	6873      	ldr	r3, [r6, #4]
    1e1e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1e20:	2b00      	cmp	r3, #0
    1e22:	d100      	bne.n	1e26 <usart_init+0xfe>
    1e24:	e0a0      	b.n	1f68 <usart_init+0x240>
    1e26:	2380      	movs	r3, #128	; 0x80
    1e28:	055b      	lsls	r3, r3, #21
    1e2a:	4599      	cmp	r9, r3
    1e2c:	d100      	bne.n	1e30 <usart_init+0x108>
    1e2e:	e084      	b.n	1f3a <usart_init+0x212>
	if(config->encoding_format_enable) {
    1e30:	7e73      	ldrb	r3, [r6, #25]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d002      	beq.n	1e3c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1e36:	7eb3      	ldrb	r3, [r6, #26]
    1e38:	4642      	mov	r2, r8
    1e3a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1e3c:	682a      	ldr	r2, [r5, #0]
    1e3e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1e40:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1e42:	2b00      	cmp	r3, #0
    1e44:	d1fc      	bne.n	1e40 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1e46:	330e      	adds	r3, #14
    1e48:	aa06      	add	r2, sp, #24
    1e4a:	4694      	mov	ip, r2
    1e4c:	4463      	add	r3, ip
    1e4e:	881b      	ldrh	r3, [r3, #0]
    1e50:	4642      	mov	r2, r8
    1e52:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1e54:	9b05      	ldr	r3, [sp, #20]
    1e56:	9a03      	ldr	r2, [sp, #12]
    1e58:	4313      	orrs	r3, r2
    1e5a:	9a04      	ldr	r2, [sp, #16]
    1e5c:	4313      	orrs	r3, r2
    1e5e:	464a      	mov	r2, r9
    1e60:	4313      	orrs	r3, r2
    1e62:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e64:	465b      	mov	r3, fp
    1e66:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1e68:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e6a:	4653      	mov	r3, sl
    1e6c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1e6e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1e70:	2327      	movs	r3, #39	; 0x27
    1e72:	5cf3      	ldrb	r3, [r6, r3]
    1e74:	2b00      	cmp	r3, #0
    1e76:	d101      	bne.n	1e7c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1e78:	3304      	adds	r3, #4
    1e7a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e7c:	7e73      	ldrb	r3, [r6, #25]
    1e7e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e80:	7f32      	ldrb	r2, [r6, #28]
    1e82:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e84:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e86:	7f72      	ldrb	r2, [r6, #29]
    1e88:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e8a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e8c:	2224      	movs	r2, #36	; 0x24
    1e8e:	5cb2      	ldrb	r2, [r6, r2]
    1e90:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e92:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1e94:	2225      	movs	r2, #37	; 0x25
    1e96:	5cb2      	ldrb	r2, [r6, r2]
    1e98:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e9a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1e9c:	7ab1      	ldrb	r1, [r6, #10]
    1e9e:	7af2      	ldrb	r2, [r6, #11]
    1ea0:	4311      	orrs	r1, r2
    1ea2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1ea4:	8933      	ldrh	r3, [r6, #8]
    1ea6:	2bff      	cmp	r3, #255	; 0xff
    1ea8:	d100      	bne.n	1eac <usart_init+0x184>
    1eaa:	e081      	b.n	1fb0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1eac:	2280      	movs	r2, #128	; 0x80
    1eae:	0452      	lsls	r2, r2, #17
    1eb0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1eb2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1eb4:	232c      	movs	r3, #44	; 0x2c
    1eb6:	5cf3      	ldrb	r3, [r6, r3]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d103      	bne.n	1ec4 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1ebc:	4b62      	ldr	r3, [pc, #392]	; (2048 <STACK_SIZE+0x48>)
    1ebe:	789b      	ldrb	r3, [r3, #2]
    1ec0:	079b      	lsls	r3, r3, #30
    1ec2:	d501      	bpl.n	1ec8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1ec4:	2380      	movs	r3, #128	; 0x80
    1ec6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ec8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1eca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d1fc      	bne.n	1eca <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1ed0:	4643      	mov	r3, r8
    1ed2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ed4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ed6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d1fc      	bne.n	1ed6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1edc:	4643      	mov	r3, r8
    1ede:	601f      	str	r7, [r3, #0]
    1ee0:	ab0e      	add	r3, sp, #56	; 0x38
    1ee2:	2280      	movs	r2, #128	; 0x80
    1ee4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ee6:	2200      	movs	r2, #0
    1ee8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1eea:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1eec:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1eee:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1ef0:	930a      	str	r3, [sp, #40]	; 0x28
    1ef2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1ef4:	930b      	str	r3, [sp, #44]	; 0x2c
    1ef6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1ef8:	930c      	str	r3, [sp, #48]	; 0x30
    1efa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1efc:	9302      	str	r3, [sp, #8]
    1efe:	930d      	str	r3, [sp, #52]	; 0x34
    1f00:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f02:	ae0a      	add	r6, sp, #40	; 0x28
    1f04:	e063      	b.n	1fce <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f06:	2308      	movs	r3, #8
    1f08:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1f0a:	3b07      	subs	r3, #7
    1f0c:	9307      	str	r3, [sp, #28]
    1f0e:	e77a      	b.n	1e06 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1f10:	6833      	ldr	r3, [r6, #0]
    1f12:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1f14:	68f3      	ldr	r3, [r6, #12]
    1f16:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1f18:	6973      	ldr	r3, [r6, #20]
    1f1a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f1c:	7e33      	ldrb	r3, [r6, #24]
    1f1e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f20:	2326      	movs	r3, #38	; 0x26
    1f22:	5cf3      	ldrb	r3, [r6, r3]
    1f24:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1f26:	6873      	ldr	r3, [r6, #4]
    1f28:	4699      	mov	r9, r3
	switch (transfer_mode)
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d018      	beq.n	1f60 <usart_init+0x238>
    1f2e:	2380      	movs	r3, #128	; 0x80
    1f30:	055b      	lsls	r3, r3, #21
    1f32:	4599      	cmp	r9, r3
    1f34:	d001      	beq.n	1f3a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1f36:	2000      	movs	r0, #0
    1f38:	e025      	b.n	1f86 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1f3a:	2327      	movs	r3, #39	; 0x27
    1f3c:	5cf3      	ldrb	r3, [r6, r3]
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d000      	beq.n	1f44 <usart_init+0x21c>
    1f42:	e775      	b.n	1e30 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1f44:	6a33      	ldr	r3, [r6, #32]
    1f46:	001f      	movs	r7, r3
    1f48:	b2c0      	uxtb	r0, r0
    1f4a:	4b40      	ldr	r3, [pc, #256]	; (204c <STACK_SIZE+0x4c>)
    1f4c:	4798      	blx	r3
    1f4e:	0001      	movs	r1, r0
    1f50:	220e      	movs	r2, #14
    1f52:	ab06      	add	r3, sp, #24
    1f54:	469c      	mov	ip, r3
    1f56:	4462      	add	r2, ip
    1f58:	0038      	movs	r0, r7
    1f5a:	4b3d      	ldr	r3, [pc, #244]	; (2050 <STACK_SIZE+0x50>)
    1f5c:	4798      	blx	r3
    1f5e:	e012      	b.n	1f86 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f60:	2308      	movs	r3, #8
    1f62:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1f64:	2300      	movs	r3, #0
    1f66:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1f68:	2327      	movs	r3, #39	; 0x27
    1f6a:	5cf3      	ldrb	r3, [r6, r3]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d00e      	beq.n	1f8e <usart_init+0x266>
				status_code =
    1f70:	9b06      	ldr	r3, [sp, #24]
    1f72:	9300      	str	r3, [sp, #0]
    1f74:	9b07      	ldr	r3, [sp, #28]
    1f76:	220e      	movs	r2, #14
    1f78:	a906      	add	r1, sp, #24
    1f7a:	468c      	mov	ip, r1
    1f7c:	4462      	add	r2, ip
    1f7e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1f80:	6a30      	ldr	r0, [r6, #32]
    1f82:	4f34      	ldr	r7, [pc, #208]	; (2054 <STACK_SIZE+0x54>)
    1f84:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1f86:	2800      	cmp	r0, #0
    1f88:	d000      	beq.n	1f8c <usart_init+0x264>
    1f8a:	e6e0      	b.n	1d4e <usart_init+0x26>
    1f8c:	e750      	b.n	1e30 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1f8e:	6a33      	ldr	r3, [r6, #32]
    1f90:	001f      	movs	r7, r3
    1f92:	b2c0      	uxtb	r0, r0
    1f94:	4b2d      	ldr	r3, [pc, #180]	; (204c <STACK_SIZE+0x4c>)
    1f96:	4798      	blx	r3
    1f98:	0001      	movs	r1, r0
				status_code =
    1f9a:	9b06      	ldr	r3, [sp, #24]
    1f9c:	9300      	str	r3, [sp, #0]
    1f9e:	9b07      	ldr	r3, [sp, #28]
    1fa0:	220e      	movs	r2, #14
    1fa2:	a806      	add	r0, sp, #24
    1fa4:	4684      	mov	ip, r0
    1fa6:	4462      	add	r2, ip
    1fa8:	0038      	movs	r0, r7
    1faa:	4f2a      	ldr	r7, [pc, #168]	; (2054 <STACK_SIZE+0x54>)
    1fac:	47b8      	blx	r7
    1fae:	e7ea      	b.n	1f86 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1fb0:	7ef3      	ldrb	r3, [r6, #27]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d100      	bne.n	1fb8 <usart_init+0x290>
    1fb6:	e77d      	b.n	1eb4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1fb8:	2380      	movs	r3, #128	; 0x80
    1fba:	04db      	lsls	r3, r3, #19
    1fbc:	431f      	orrs	r7, r3
    1fbe:	e779      	b.n	1eb4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1fc0:	0020      	movs	r0, r4
    1fc2:	4b25      	ldr	r3, [pc, #148]	; (2058 <STACK_SIZE+0x58>)
    1fc4:	4798      	blx	r3
    1fc6:	e007      	b.n	1fd8 <usart_init+0x2b0>
    1fc8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1fca:	2f04      	cmp	r7, #4
    1fcc:	d00d      	beq.n	1fea <usart_init+0x2c2>
    1fce:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1fd0:	00bb      	lsls	r3, r7, #2
    1fd2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1fd4:	2800      	cmp	r0, #0
    1fd6:	d0f3      	beq.n	1fc0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1fd8:	1c43      	adds	r3, r0, #1
    1fda:	d0f5      	beq.n	1fc8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1fdc:	a90e      	add	r1, sp, #56	; 0x38
    1fde:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1fe0:	0c00      	lsrs	r0, r0, #16
    1fe2:	b2c0      	uxtb	r0, r0
    1fe4:	4b1d      	ldr	r3, [pc, #116]	; (205c <STACK_SIZE+0x5c>)
    1fe6:	4798      	blx	r3
    1fe8:	e7ee      	b.n	1fc8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1fea:	2300      	movs	r3, #0
    1fec:	60eb      	str	r3, [r5, #12]
    1fee:	612b      	str	r3, [r5, #16]
    1ff0:	616b      	str	r3, [r5, #20]
    1ff2:	61ab      	str	r3, [r5, #24]
    1ff4:	61eb      	str	r3, [r5, #28]
    1ff6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1ff8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1ffa:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1ffc:	2200      	movs	r2, #0
    1ffe:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2000:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2002:	3330      	adds	r3, #48	; 0x30
    2004:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2006:	3301      	adds	r3, #1
    2008:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    200a:	3301      	adds	r3, #1
    200c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    200e:	3301      	adds	r3, #1
    2010:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2012:	6828      	ldr	r0, [r5, #0]
    2014:	4b07      	ldr	r3, [pc, #28]	; (2034 <STACK_SIZE+0x34>)
    2016:	4798      	blx	r3
    2018:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    201a:	4911      	ldr	r1, [pc, #68]	; (2060 <STACK_SIZE+0x60>)
    201c:	4b11      	ldr	r3, [pc, #68]	; (2064 <STACK_SIZE+0x64>)
    201e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2020:	00a4      	lsls	r4, r4, #2
    2022:	4b11      	ldr	r3, [pc, #68]	; (2068 <STACK_SIZE+0x68>)
    2024:	50e5      	str	r5, [r4, r3]
	return status_code;
    2026:	2000      	movs	r0, #0
    2028:	e691      	b.n	1d4e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    202a:	2310      	movs	r3, #16
    202c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    202e:	2300      	movs	r3, #0
    2030:	9307      	str	r3, [sp, #28]
    2032:	e6e8      	b.n	1e06 <usart_init+0xde>
    2034:	00001c21 	.word	0x00001c21
    2038:	40000400 	.word	0x40000400
    203c:	00002829 	.word	0x00002829
    2040:	0000279d 	.word	0x0000279d
    2044:	00001a5d 	.word	0x00001a5d
    2048:	41002000 	.word	0x41002000
    204c:	00002845 	.word	0x00002845
    2050:	0000199f 	.word	0x0000199f
    2054:	000019c9 	.word	0x000019c9
    2058:	00001aa9 	.word	0x00001aa9
    205c:	00002979 	.word	0x00002979
    2060:	00002151 	.word	0x00002151
    2064:	00001c5d 	.word	0x00001c5d
    2068:	20000394 	.word	0x20000394

0000206c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    206e:	0006      	movs	r6, r0
    2070:	000c      	movs	r4, r1
    2072:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2074:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2076:	4b0a      	ldr	r3, [pc, #40]	; (20a0 <_usart_write_buffer+0x34>)
    2078:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    207a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    207c:	b29b      	uxth	r3, r3
    207e:	2b00      	cmp	r3, #0
    2080:	d003      	beq.n	208a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2082:	4b08      	ldr	r3, [pc, #32]	; (20a4 <_usart_write_buffer+0x38>)
    2084:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2086:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    208a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    208c:	4b05      	ldr	r3, [pc, #20]	; (20a4 <_usart_write_buffer+0x38>)
    208e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2090:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2092:	2205      	movs	r2, #5
    2094:	2333      	movs	r3, #51	; 0x33
    2096:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2098:	3b32      	subs	r3, #50	; 0x32
    209a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    209c:	2000      	movs	r0, #0
    209e:	e7f3      	b.n	2088 <_usart_write_buffer+0x1c>
    20a0:	000010dd 	.word	0x000010dd
    20a4:	0000111d 	.word	0x0000111d

000020a8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    20a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20aa:	0004      	movs	r4, r0
    20ac:	000d      	movs	r5, r1
    20ae:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    20b0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    20b2:	4b0f      	ldr	r3, [pc, #60]	; (20f0 <_usart_read_buffer+0x48>)
    20b4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    20b6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    20b8:	b29b      	uxth	r3, r3
    20ba:	2b00      	cmp	r3, #0
    20bc:	d003      	beq.n	20c6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    20be:	4b0d      	ldr	r3, [pc, #52]	; (20f4 <_usart_read_buffer+0x4c>)
    20c0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    20c2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    20c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    20c6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    20c8:	4b0a      	ldr	r3, [pc, #40]	; (20f4 <_usart_read_buffer+0x4c>)
    20ca:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    20cc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    20ce:	2205      	movs	r2, #5
    20d0:	2332      	movs	r3, #50	; 0x32
    20d2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    20d4:	3b2e      	subs	r3, #46	; 0x2e
    20d6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    20d8:	7a23      	ldrb	r3, [r4, #8]
    20da:	2b00      	cmp	r3, #0
    20dc:	d001      	beq.n	20e2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    20de:	2320      	movs	r3, #32
    20e0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    20e2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    20e4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    20e6:	2b00      	cmp	r3, #0
    20e8:	d0ec      	beq.n	20c4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    20ea:	2308      	movs	r3, #8
    20ec:	75bb      	strb	r3, [r7, #22]
    20ee:	e7e9      	b.n	20c4 <_usart_read_buffer+0x1c>
    20f0:	000010dd 	.word	0x000010dd
    20f4:	0000111d 	.word	0x0000111d

000020f8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    20f8:	1c93      	adds	r3, r2, #2
    20fa:	009b      	lsls	r3, r3, #2
    20fc:	18c3      	adds	r3, r0, r3
    20fe:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2100:	2130      	movs	r1, #48	; 0x30
    2102:	2301      	movs	r3, #1
    2104:	4093      	lsls	r3, r2
    2106:	001a      	movs	r2, r3
    2108:	5c43      	ldrb	r3, [r0, r1]
    210a:	4313      	orrs	r3, r2
    210c:	5443      	strb	r3, [r0, r1]
}
    210e:	4770      	bx	lr

00002110 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2110:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2112:	2317      	movs	r3, #23
	if (length == 0) {
    2114:	2a00      	cmp	r2, #0
    2116:	d101      	bne.n	211c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2118:	0018      	movs	r0, r3
    211a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    211c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    211e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2120:	2c00      	cmp	r4, #0
    2122:	d0f9      	beq.n	2118 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2124:	4b01      	ldr	r3, [pc, #4]	; (212c <usart_write_buffer_job+0x1c>)
    2126:	4798      	blx	r3
    2128:	0003      	movs	r3, r0
    212a:	e7f5      	b.n	2118 <usart_write_buffer_job+0x8>
    212c:	0000206d 	.word	0x0000206d

00002130 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2130:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2132:	2317      	movs	r3, #23
	if (length == 0) {
    2134:	2a00      	cmp	r2, #0
    2136:	d101      	bne.n	213c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2138:	0018      	movs	r0, r3
    213a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    213c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    213e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2140:	2c00      	cmp	r4, #0
    2142:	d0f9      	beq.n	2138 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2144:	4b01      	ldr	r3, [pc, #4]	; (214c <usart_read_buffer_job+0x1c>)
    2146:	4798      	blx	r3
    2148:	0003      	movs	r3, r0
    214a:	e7f5      	b.n	2138 <usart_read_buffer_job+0x8>
    214c:	000020a9 	.word	0x000020a9

00002150 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2152:	0080      	lsls	r0, r0, #2
    2154:	4b62      	ldr	r3, [pc, #392]	; (22e0 <_usart_interrupt_handler+0x190>)
    2156:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2158:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    215a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    215c:	2b00      	cmp	r3, #0
    215e:	d1fc      	bne.n	215a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2160:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2162:	7da6      	ldrb	r6, [r4, #22]
    2164:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2166:	2330      	movs	r3, #48	; 0x30
    2168:	5ceb      	ldrb	r3, [r5, r3]
    216a:	2231      	movs	r2, #49	; 0x31
    216c:	5caf      	ldrb	r7, [r5, r2]
    216e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2170:	07f3      	lsls	r3, r6, #31
    2172:	d522      	bpl.n	21ba <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2174:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2176:	b29b      	uxth	r3, r3
    2178:	2b00      	cmp	r3, #0
    217a:	d01c      	beq.n	21b6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    217c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    217e:	7813      	ldrb	r3, [r2, #0]
    2180:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2182:	1c51      	adds	r1, r2, #1
    2184:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2186:	7969      	ldrb	r1, [r5, #5]
    2188:	2901      	cmp	r1, #1
    218a:	d00e      	beq.n	21aa <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    218c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    218e:	05db      	lsls	r3, r3, #23
    2190:	0ddb      	lsrs	r3, r3, #23
    2192:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2194:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2196:	3b01      	subs	r3, #1
    2198:	b29b      	uxth	r3, r3
    219a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    219c:	2b00      	cmp	r3, #0
    219e:	d10c      	bne.n	21ba <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    21a0:	3301      	adds	r3, #1
    21a2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    21a4:	3301      	adds	r3, #1
    21a6:	75a3      	strb	r3, [r4, #22]
    21a8:	e007      	b.n	21ba <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    21aa:	7851      	ldrb	r1, [r2, #1]
    21ac:	0209      	lsls	r1, r1, #8
    21ae:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    21b0:	3202      	adds	r2, #2
    21b2:	62aa      	str	r2, [r5, #40]	; 0x28
    21b4:	e7eb      	b.n	218e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    21b6:	2301      	movs	r3, #1
    21b8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    21ba:	07b3      	lsls	r3, r6, #30
    21bc:	d506      	bpl.n	21cc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    21be:	2302      	movs	r3, #2
    21c0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    21c2:	2200      	movs	r2, #0
    21c4:	3331      	adds	r3, #49	; 0x31
    21c6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    21c8:	07fb      	lsls	r3, r7, #31
    21ca:	d41a      	bmi.n	2202 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    21cc:	0773      	lsls	r3, r6, #29
    21ce:	d565      	bpl.n	229c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    21d0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    21d2:	b29b      	uxth	r3, r3
    21d4:	2b00      	cmp	r3, #0
    21d6:	d05f      	beq.n	2298 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    21d8:	8b63      	ldrh	r3, [r4, #26]
    21da:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    21dc:	071a      	lsls	r2, r3, #28
    21de:	d414      	bmi.n	220a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    21e0:	223f      	movs	r2, #63	; 0x3f
    21e2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    21e4:	2b00      	cmp	r3, #0
    21e6:	d034      	beq.n	2252 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    21e8:	079a      	lsls	r2, r3, #30
    21ea:	d511      	bpl.n	2210 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    21ec:	221a      	movs	r2, #26
    21ee:	2332      	movs	r3, #50	; 0x32
    21f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    21f2:	3b30      	subs	r3, #48	; 0x30
    21f4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    21f6:	077b      	lsls	r3, r7, #29
    21f8:	d550      	bpl.n	229c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    21fa:	0028      	movs	r0, r5
    21fc:	696b      	ldr	r3, [r5, #20]
    21fe:	4798      	blx	r3
    2200:	e04c      	b.n	229c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2202:	0028      	movs	r0, r5
    2204:	68eb      	ldr	r3, [r5, #12]
    2206:	4798      	blx	r3
    2208:	e7e0      	b.n	21cc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    220a:	2237      	movs	r2, #55	; 0x37
    220c:	4013      	ands	r3, r2
    220e:	e7e9      	b.n	21e4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2210:	075a      	lsls	r2, r3, #29
    2212:	d505      	bpl.n	2220 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2214:	221e      	movs	r2, #30
    2216:	2332      	movs	r3, #50	; 0x32
    2218:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    221a:	3b2e      	subs	r3, #46	; 0x2e
    221c:	8363      	strh	r3, [r4, #26]
    221e:	e7ea      	b.n	21f6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2220:	07da      	lsls	r2, r3, #31
    2222:	d505      	bpl.n	2230 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2224:	2213      	movs	r2, #19
    2226:	2332      	movs	r3, #50	; 0x32
    2228:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    222a:	3b31      	subs	r3, #49	; 0x31
    222c:	8363      	strh	r3, [r4, #26]
    222e:	e7e2      	b.n	21f6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2230:	06da      	lsls	r2, r3, #27
    2232:	d505      	bpl.n	2240 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2234:	2242      	movs	r2, #66	; 0x42
    2236:	2332      	movs	r3, #50	; 0x32
    2238:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    223a:	3b22      	subs	r3, #34	; 0x22
    223c:	8363      	strh	r3, [r4, #26]
    223e:	e7da      	b.n	21f6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2240:	2220      	movs	r2, #32
    2242:	421a      	tst	r2, r3
    2244:	d0d7      	beq.n	21f6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2246:	3221      	adds	r2, #33	; 0x21
    2248:	2332      	movs	r3, #50	; 0x32
    224a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    224c:	3b12      	subs	r3, #18
    224e:	8363      	strh	r3, [r4, #26]
    2250:	e7d1      	b.n	21f6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2252:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2254:	05db      	lsls	r3, r3, #23
    2256:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2258:	b2da      	uxtb	r2, r3
    225a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    225c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    225e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2260:	1c51      	adds	r1, r2, #1
    2262:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2264:	7969      	ldrb	r1, [r5, #5]
    2266:	2901      	cmp	r1, #1
    2268:	d010      	beq.n	228c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    226a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    226c:	3b01      	subs	r3, #1
    226e:	b29b      	uxth	r3, r3
    2270:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2272:	2b00      	cmp	r3, #0
    2274:	d112      	bne.n	229c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2276:	3304      	adds	r3, #4
    2278:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    227a:	2200      	movs	r2, #0
    227c:	332e      	adds	r3, #46	; 0x2e
    227e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2280:	07bb      	lsls	r3, r7, #30
    2282:	d50b      	bpl.n	229c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2284:	0028      	movs	r0, r5
    2286:	692b      	ldr	r3, [r5, #16]
    2288:	4798      	blx	r3
    228a:	e007      	b.n	229c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    228c:	0a1b      	lsrs	r3, r3, #8
    228e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2290:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2292:	3301      	adds	r3, #1
    2294:	626b      	str	r3, [r5, #36]	; 0x24
    2296:	e7e8      	b.n	226a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2298:	2304      	movs	r3, #4
    229a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    229c:	06f3      	lsls	r3, r6, #27
    229e:	d504      	bpl.n	22aa <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    22a0:	2310      	movs	r3, #16
    22a2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    22a4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    22a6:	06fb      	lsls	r3, r7, #27
    22a8:	d40e      	bmi.n	22c8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    22aa:	06b3      	lsls	r3, r6, #26
    22ac:	d504      	bpl.n	22b8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    22ae:	2320      	movs	r3, #32
    22b0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    22b2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    22b4:	073b      	lsls	r3, r7, #28
    22b6:	d40b      	bmi.n	22d0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    22b8:	0733      	lsls	r3, r6, #28
    22ba:	d504      	bpl.n	22c6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    22bc:	2308      	movs	r3, #8
    22be:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    22c0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    22c2:	06bb      	lsls	r3, r7, #26
    22c4:	d408      	bmi.n	22d8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    22c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    22c8:	0028      	movs	r0, r5
    22ca:	69eb      	ldr	r3, [r5, #28]
    22cc:	4798      	blx	r3
    22ce:	e7ec      	b.n	22aa <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    22d0:	0028      	movs	r0, r5
    22d2:	69ab      	ldr	r3, [r5, #24]
    22d4:	4798      	blx	r3
    22d6:	e7ef      	b.n	22b8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    22d8:	6a2b      	ldr	r3, [r5, #32]
    22da:	0028      	movs	r0, r5
    22dc:	4798      	blx	r3
}
    22de:	e7f2      	b.n	22c6 <_usart_interrupt_handler+0x176>
    22e0:	20000394 	.word	0x20000394

000022e4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    22e4:	b510      	push	{r4, lr}
	switch (clock_source) {
    22e6:	2808      	cmp	r0, #8
    22e8:	d803      	bhi.n	22f2 <system_clock_source_get_hz+0xe>
    22ea:	0080      	lsls	r0, r0, #2
    22ec:	4b1b      	ldr	r3, [pc, #108]	; (235c <system_clock_source_get_hz+0x78>)
    22ee:	581b      	ldr	r3, [r3, r0]
    22f0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    22f2:	2000      	movs	r0, #0
    22f4:	e030      	b.n	2358 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    22f6:	4b1a      	ldr	r3, [pc, #104]	; (2360 <system_clock_source_get_hz+0x7c>)
    22f8:	6918      	ldr	r0, [r3, #16]
    22fa:	e02d      	b.n	2358 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    22fc:	4b19      	ldr	r3, [pc, #100]	; (2364 <system_clock_source_get_hz+0x80>)
    22fe:	6a1b      	ldr	r3, [r3, #32]
    2300:	059b      	lsls	r3, r3, #22
    2302:	0f9b      	lsrs	r3, r3, #30
    2304:	4818      	ldr	r0, [pc, #96]	; (2368 <system_clock_source_get_hz+0x84>)
    2306:	40d8      	lsrs	r0, r3
    2308:	e026      	b.n	2358 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    230a:	4b15      	ldr	r3, [pc, #84]	; (2360 <system_clock_source_get_hz+0x7c>)
    230c:	6958      	ldr	r0, [r3, #20]
    230e:	e023      	b.n	2358 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2310:	4b13      	ldr	r3, [pc, #76]	; (2360 <system_clock_source_get_hz+0x7c>)
    2312:	681b      	ldr	r3, [r3, #0]
			return 0;
    2314:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2316:	079b      	lsls	r3, r3, #30
    2318:	d51e      	bpl.n	2358 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    231a:	4912      	ldr	r1, [pc, #72]	; (2364 <system_clock_source_get_hz+0x80>)
    231c:	2210      	movs	r2, #16
    231e:	68cb      	ldr	r3, [r1, #12]
    2320:	421a      	tst	r2, r3
    2322:	d0fc      	beq.n	231e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2324:	4b0e      	ldr	r3, [pc, #56]	; (2360 <system_clock_source_get_hz+0x7c>)
    2326:	681b      	ldr	r3, [r3, #0]
    2328:	075b      	lsls	r3, r3, #29
    232a:	d401      	bmi.n	2330 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    232c:	480f      	ldr	r0, [pc, #60]	; (236c <system_clock_source_get_hz+0x88>)
    232e:	e013      	b.n	2358 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2330:	2000      	movs	r0, #0
    2332:	4b0f      	ldr	r3, [pc, #60]	; (2370 <system_clock_source_get_hz+0x8c>)
    2334:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2336:	4b0a      	ldr	r3, [pc, #40]	; (2360 <system_clock_source_get_hz+0x7c>)
    2338:	689b      	ldr	r3, [r3, #8]
    233a:	041b      	lsls	r3, r3, #16
    233c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    233e:	4358      	muls	r0, r3
    2340:	e00a      	b.n	2358 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2342:	2350      	movs	r3, #80	; 0x50
    2344:	4a07      	ldr	r2, [pc, #28]	; (2364 <system_clock_source_get_hz+0x80>)
    2346:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2348:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    234a:	075b      	lsls	r3, r3, #29
    234c:	d504      	bpl.n	2358 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    234e:	4b04      	ldr	r3, [pc, #16]	; (2360 <system_clock_source_get_hz+0x7c>)
    2350:	68d8      	ldr	r0, [r3, #12]
    2352:	e001      	b.n	2358 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2354:	2080      	movs	r0, #128	; 0x80
    2356:	0200      	lsls	r0, r0, #8
	}
}
    2358:	bd10      	pop	{r4, pc}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	000056e8 	.word	0x000056e8
    2360:	20000288 	.word	0x20000288
    2364:	40000800 	.word	0x40000800
    2368:	007a1200 	.word	0x007a1200
    236c:	02dc6c00 	.word	0x02dc6c00
    2370:	00002845 	.word	0x00002845

00002374 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2374:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2376:	490c      	ldr	r1, [pc, #48]	; (23a8 <system_clock_source_osc8m_set_config+0x34>)
    2378:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    237a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    237c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    237e:	7840      	ldrb	r0, [r0, #1]
    2380:	2201      	movs	r2, #1
    2382:	4010      	ands	r0, r2
    2384:	0180      	lsls	r0, r0, #6
    2386:	2640      	movs	r6, #64	; 0x40
    2388:	43b3      	bics	r3, r6
    238a:	4303      	orrs	r3, r0
    238c:	402a      	ands	r2, r5
    238e:	01d2      	lsls	r2, r2, #7
    2390:	2080      	movs	r0, #128	; 0x80
    2392:	4383      	bics	r3, r0
    2394:	4313      	orrs	r3, r2
    2396:	2203      	movs	r2, #3
    2398:	4022      	ands	r2, r4
    239a:	0212      	lsls	r2, r2, #8
    239c:	4803      	ldr	r0, [pc, #12]	; (23ac <system_clock_source_osc8m_set_config+0x38>)
    239e:	4003      	ands	r3, r0
    23a0:	4313      	orrs	r3, r2
    23a2:	620b      	str	r3, [r1, #32]
}
    23a4:	bd70      	pop	{r4, r5, r6, pc}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	40000800 	.word	0x40000800
    23ac:	fffffcff 	.word	0xfffffcff

000023b0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    23b0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    23b2:	7a03      	ldrb	r3, [r0, #8]
    23b4:	069b      	lsls	r3, r3, #26
    23b6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    23b8:	8942      	ldrh	r2, [r0, #10]
    23ba:	0592      	lsls	r2, r2, #22
    23bc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    23be:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    23c0:	4918      	ldr	r1, [pc, #96]	; (2424 <system_clock_source_dfll_set_config+0x74>)
    23c2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    23c4:	7983      	ldrb	r3, [r0, #6]
    23c6:	79c2      	ldrb	r2, [r0, #7]
    23c8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    23ca:	8842      	ldrh	r2, [r0, #2]
    23cc:	8884      	ldrh	r4, [r0, #4]
    23ce:	4322      	orrs	r2, r4
    23d0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    23d2:	7842      	ldrb	r2, [r0, #1]
    23d4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    23d6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    23d8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    23da:	7803      	ldrb	r3, [r0, #0]
    23dc:	2b04      	cmp	r3, #4
    23de:	d011      	beq.n	2404 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    23e0:	2b20      	cmp	r3, #32
    23e2:	d10e      	bne.n	2402 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    23e4:	7b03      	ldrb	r3, [r0, #12]
    23e6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    23e8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    23ea:	4313      	orrs	r3, r2
    23ec:	89c2      	ldrh	r2, [r0, #14]
    23ee:	0412      	lsls	r2, r2, #16
    23f0:	490d      	ldr	r1, [pc, #52]	; (2428 <system_clock_source_dfll_set_config+0x78>)
    23f2:	400a      	ands	r2, r1
    23f4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    23f6:	4a0b      	ldr	r2, [pc, #44]	; (2424 <system_clock_source_dfll_set_config+0x74>)
    23f8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    23fa:	6811      	ldr	r1, [r2, #0]
    23fc:	4b0b      	ldr	r3, [pc, #44]	; (242c <system_clock_source_dfll_set_config+0x7c>)
    23fe:	430b      	orrs	r3, r1
    2400:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2402:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2404:	7b03      	ldrb	r3, [r0, #12]
    2406:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2408:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    240a:	4313      	orrs	r3, r2
    240c:	89c2      	ldrh	r2, [r0, #14]
    240e:	0412      	lsls	r2, r2, #16
    2410:	4905      	ldr	r1, [pc, #20]	; (2428 <system_clock_source_dfll_set_config+0x78>)
    2412:	400a      	ands	r2, r1
    2414:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2416:	4a03      	ldr	r2, [pc, #12]	; (2424 <system_clock_source_dfll_set_config+0x74>)
    2418:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    241a:	6813      	ldr	r3, [r2, #0]
    241c:	2104      	movs	r1, #4
    241e:	430b      	orrs	r3, r1
    2420:	6013      	str	r3, [r2, #0]
    2422:	e7ee      	b.n	2402 <system_clock_source_dfll_set_config+0x52>
    2424:	20000288 	.word	0x20000288
    2428:	03ff0000 	.word	0x03ff0000
    242c:	00000424 	.word	0x00000424

00002430 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2430:	2808      	cmp	r0, #8
    2432:	d803      	bhi.n	243c <system_clock_source_enable+0xc>
    2434:	0080      	lsls	r0, r0, #2
    2436:	4b25      	ldr	r3, [pc, #148]	; (24cc <system_clock_source_enable+0x9c>)
    2438:	581b      	ldr	r3, [r3, r0]
    243a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    243c:	2017      	movs	r0, #23
    243e:	e044      	b.n	24ca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2440:	4a23      	ldr	r2, [pc, #140]	; (24d0 <system_clock_source_enable+0xa0>)
    2442:	6a13      	ldr	r3, [r2, #32]
    2444:	2102      	movs	r1, #2
    2446:	430b      	orrs	r3, r1
    2448:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    244a:	2000      	movs	r0, #0
    244c:	e03d      	b.n	24ca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    244e:	4a20      	ldr	r2, [pc, #128]	; (24d0 <system_clock_source_enable+0xa0>)
    2450:	6993      	ldr	r3, [r2, #24]
    2452:	2102      	movs	r1, #2
    2454:	430b      	orrs	r3, r1
    2456:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2458:	2000      	movs	r0, #0
		break;
    245a:	e036      	b.n	24ca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    245c:	4a1c      	ldr	r2, [pc, #112]	; (24d0 <system_clock_source_enable+0xa0>)
    245e:	8a13      	ldrh	r3, [r2, #16]
    2460:	2102      	movs	r1, #2
    2462:	430b      	orrs	r3, r1
    2464:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2466:	2000      	movs	r0, #0
		break;
    2468:	e02f      	b.n	24ca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    246a:	4a19      	ldr	r2, [pc, #100]	; (24d0 <system_clock_source_enable+0xa0>)
    246c:	8a93      	ldrh	r3, [r2, #20]
    246e:	2102      	movs	r1, #2
    2470:	430b      	orrs	r3, r1
    2472:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2474:	2000      	movs	r0, #0
		break;
    2476:	e028      	b.n	24ca <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2478:	4916      	ldr	r1, [pc, #88]	; (24d4 <system_clock_source_enable+0xa4>)
    247a:	680b      	ldr	r3, [r1, #0]
    247c:	2202      	movs	r2, #2
    247e:	4313      	orrs	r3, r2
    2480:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2482:	4b13      	ldr	r3, [pc, #76]	; (24d0 <system_clock_source_enable+0xa0>)
    2484:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2486:	0019      	movs	r1, r3
    2488:	320e      	adds	r2, #14
    248a:	68cb      	ldr	r3, [r1, #12]
    248c:	421a      	tst	r2, r3
    248e:	d0fc      	beq.n	248a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2490:	4a10      	ldr	r2, [pc, #64]	; (24d4 <system_clock_source_enable+0xa4>)
    2492:	6891      	ldr	r1, [r2, #8]
    2494:	4b0e      	ldr	r3, [pc, #56]	; (24d0 <system_clock_source_enable+0xa0>)
    2496:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2498:	6852      	ldr	r2, [r2, #4]
    249a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    249c:	2200      	movs	r2, #0
    249e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    24a0:	0019      	movs	r1, r3
    24a2:	3210      	adds	r2, #16
    24a4:	68cb      	ldr	r3, [r1, #12]
    24a6:	421a      	tst	r2, r3
    24a8:	d0fc      	beq.n	24a4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    24aa:	4b0a      	ldr	r3, [pc, #40]	; (24d4 <system_clock_source_enable+0xa4>)
    24ac:	681b      	ldr	r3, [r3, #0]
    24ae:	b29b      	uxth	r3, r3
    24b0:	4a07      	ldr	r2, [pc, #28]	; (24d0 <system_clock_source_enable+0xa0>)
    24b2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    24b4:	2000      	movs	r0, #0
    24b6:	e008      	b.n	24ca <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    24b8:	4905      	ldr	r1, [pc, #20]	; (24d0 <system_clock_source_enable+0xa0>)
    24ba:	2244      	movs	r2, #68	; 0x44
    24bc:	5c8b      	ldrb	r3, [r1, r2]
    24be:	2002      	movs	r0, #2
    24c0:	4303      	orrs	r3, r0
    24c2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    24c4:	2000      	movs	r0, #0
		break;
    24c6:	e000      	b.n	24ca <system_clock_source_enable+0x9a>
		return STATUS_OK;
    24c8:	2000      	movs	r0, #0
}
    24ca:	4770      	bx	lr
    24cc:	0000570c 	.word	0x0000570c
    24d0:	40000800 	.word	0x40000800
    24d4:	20000288 	.word	0x20000288

000024d8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    24d8:	b570      	push	{r4, r5, r6, lr}
    24da:	b08a      	sub	sp, #40	; 0x28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    24dc:	22c2      	movs	r2, #194	; 0xc2
    24de:	00d2      	lsls	r2, r2, #3
    24e0:	4b36      	ldr	r3, [pc, #216]	; (25bc <system_clock_init+0xe4>)
    24e2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    24e4:	4a36      	ldr	r2, [pc, #216]	; (25c0 <system_clock_init+0xe8>)
    24e6:	6853      	ldr	r3, [r2, #4]
    24e8:	211e      	movs	r1, #30
    24ea:	438b      	bics	r3, r1
    24ec:	391a      	subs	r1, #26
    24ee:	430b      	orrs	r3, r1
    24f0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    24f2:	2201      	movs	r2, #1
    24f4:	ab01      	add	r3, sp, #4
    24f6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    24f8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    24fa:	4d32      	ldr	r5, [pc, #200]	; (25c4 <system_clock_init+0xec>)
    24fc:	b2e0      	uxtb	r0, r4
    24fe:	a901      	add	r1, sp, #4
    2500:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2502:	3401      	adds	r4, #1
    2504:	2c25      	cmp	r4, #37	; 0x25
    2506:	d1f9      	bne.n	24fc <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2508:	ab05      	add	r3, sp, #20
    250a:	2200      	movs	r2, #0
    250c:	2100      	movs	r1, #0
    250e:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2510:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2512:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2514:	3120      	adds	r1, #32
    2516:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2518:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    251a:	4b2b      	ldr	r3, [pc, #172]	; (25c8 <system_clock_init+0xf0>)
    251c:	681b      	ldr	r3, [r3, #0]
    251e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2520:	2b3f      	cmp	r3, #63	; 0x3f
    2522:	d049      	beq.n	25b8 <system_clock_init+0xe0>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2524:	a805      	add	r0, sp, #20
    2526:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2528:	2307      	movs	r3, #7
    252a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    252c:	3303      	adds	r3, #3
    252e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2530:	4b26      	ldr	r3, [pc, #152]	; (25cc <system_clock_init+0xf4>)
    2532:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2534:	3bff      	subs	r3, #255	; 0xff
    2536:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2538:	4b25      	ldr	r3, [pc, #148]	; (25d0 <system_clock_init+0xf8>)
    253a:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    253c:	4b25      	ldr	r3, [pc, #148]	; (25d4 <system_clock_init+0xfc>)
    253e:	4798      	blx	r3
	config->run_in_standby  = false;
    2540:	a804      	add	r0, sp, #16
    2542:	2400      	movs	r4, #0
    2544:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2546:	2601      	movs	r6, #1
    2548:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    254a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    254c:	4b22      	ldr	r3, [pc, #136]	; (25d8 <system_clock_init+0x100>)
    254e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2550:	2006      	movs	r0, #6
    2552:	4d22      	ldr	r5, [pc, #136]	; (25dc <system_clock_init+0x104>)
    2554:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2556:	4b22      	ldr	r3, [pc, #136]	; (25e0 <system_clock_init+0x108>)
    2558:	4798      	blx	r3
	config->division_factor    = 1;
    255a:	a901      	add	r1, sp, #4
    255c:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    255e:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2560:	2306      	movs	r3, #6
    2562:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    2564:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2566:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2568:	2003      	movs	r0, #3
    256a:	4b1e      	ldr	r3, [pc, #120]	; (25e4 <system_clock_init+0x10c>)
    256c:	4798      	blx	r3
    256e:	2003      	movs	r0, #3
    2570:	4b1d      	ldr	r3, [pc, #116]	; (25e8 <system_clock_init+0x110>)
    2572:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2574:	2007      	movs	r0, #7
    2576:	47a8      	blx	r5
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2578:	4910      	ldr	r1, [pc, #64]	; (25bc <system_clock_init+0xe4>)
    257a:	2210      	movs	r2, #16
    257c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    257e:	421a      	tst	r2, r3
    2580:	d0fc      	beq.n	257c <system_clock_init+0xa4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2582:	4a0e      	ldr	r2, [pc, #56]	; (25bc <system_clock_init+0xe4>)
    2584:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2586:	2180      	movs	r1, #128	; 0x80
    2588:	430b      	orrs	r3, r1
    258a:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    258c:	4a17      	ldr	r2, [pc, #92]	; (25ec <system_clock_init+0x114>)
    258e:	2300      	movs	r3, #0
    2590:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2592:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2594:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2596:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2598:	a901      	add	r1, sp, #4
    259a:	2201      	movs	r2, #1
    259c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    259e:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    25a0:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    25a2:	3307      	adds	r3, #7
    25a4:	700b      	strb	r3, [r1, #0]
    25a6:	720a      	strb	r2, [r1, #8]
    25a8:	2000      	movs	r0, #0
    25aa:	4b0e      	ldr	r3, [pc, #56]	; (25e4 <system_clock_init+0x10c>)
    25ac:	4798      	blx	r3
    25ae:	2000      	movs	r0, #0
    25b0:	4b0d      	ldr	r3, [pc, #52]	; (25e8 <system_clock_init+0x110>)
    25b2:	4798      	blx	r3
#endif
}
    25b4:	b00a      	add	sp, #40	; 0x28
    25b6:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    25b8:	3b20      	subs	r3, #32
    25ba:	e7b3      	b.n	2524 <system_clock_init+0x4c>
    25bc:	40000800 	.word	0x40000800
    25c0:	41004000 	.word	0x41004000
    25c4:	00002829 	.word	0x00002829
    25c8:	00806024 	.word	0x00806024
    25cc:	000001ff 	.word	0x000001ff
    25d0:	ffffbb80 	.word	0xffffbb80
    25d4:	000023b1 	.word	0x000023b1
    25d8:	00002375 	.word	0x00002375
    25dc:	00002431 	.word	0x00002431
    25e0:	000025f1 	.word	0x000025f1
    25e4:	00002615 	.word	0x00002615
    25e8:	000026cd 	.word	0x000026cd
    25ec:	40000400 	.word	0x40000400

000025f0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    25f0:	4a06      	ldr	r2, [pc, #24]	; (260c <system_gclk_init+0x1c>)
    25f2:	6993      	ldr	r3, [r2, #24]
    25f4:	2108      	movs	r1, #8
    25f6:	430b      	orrs	r3, r1
    25f8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    25fa:	2201      	movs	r2, #1
    25fc:	4b04      	ldr	r3, [pc, #16]	; (2610 <system_gclk_init+0x20>)
    25fe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2600:	0019      	movs	r1, r3
    2602:	780b      	ldrb	r3, [r1, #0]
    2604:	4213      	tst	r3, r2
    2606:	d1fc      	bne.n	2602 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2608:	4770      	bx	lr
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	40000400 	.word	0x40000400
    2610:	40000c00 	.word	0x40000c00

00002614 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2618:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    261a:	780d      	ldrb	r5, [r1, #0]
    261c:	022d      	lsls	r5, r5, #8
    261e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2620:	784b      	ldrb	r3, [r1, #1]
    2622:	2b00      	cmp	r3, #0
    2624:	d002      	beq.n	262c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2626:	2380      	movs	r3, #128	; 0x80
    2628:	02db      	lsls	r3, r3, #11
    262a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    262c:	7a4b      	ldrb	r3, [r1, #9]
    262e:	2b00      	cmp	r3, #0
    2630:	d002      	beq.n	2638 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2632:	2380      	movs	r3, #128	; 0x80
    2634:	031b      	lsls	r3, r3, #12
    2636:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2638:	6848      	ldr	r0, [r1, #4]
    263a:	2801      	cmp	r0, #1
    263c:	d910      	bls.n	2660 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    263e:	1e43      	subs	r3, r0, #1
    2640:	4218      	tst	r0, r3
    2642:	d134      	bne.n	26ae <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2644:	2802      	cmp	r0, #2
    2646:	d930      	bls.n	26aa <system_gclk_gen_set_config+0x96>
    2648:	2302      	movs	r3, #2
    264a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    264c:	3201      	adds	r2, #1
						mask <<= 1) {
    264e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2650:	4298      	cmp	r0, r3
    2652:	d8fb      	bhi.n	264c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2654:	0212      	lsls	r2, r2, #8
    2656:	4332      	orrs	r2, r6
    2658:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    265a:	2380      	movs	r3, #128	; 0x80
    265c:	035b      	lsls	r3, r3, #13
    265e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2660:	7a0b      	ldrb	r3, [r1, #8]
    2662:	2b00      	cmp	r3, #0
    2664:	d002      	beq.n	266c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2666:	2380      	movs	r3, #128	; 0x80
    2668:	039b      	lsls	r3, r3, #14
    266a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    266c:	4a13      	ldr	r2, [pc, #76]	; (26bc <system_gclk_gen_set_config+0xa8>)
    266e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2670:	b25b      	sxtb	r3, r3
    2672:	2b00      	cmp	r3, #0
    2674:	dbfb      	blt.n	266e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2676:	4b12      	ldr	r3, [pc, #72]	; (26c0 <system_gclk_gen_set_config+0xac>)
    2678:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    267a:	4b12      	ldr	r3, [pc, #72]	; (26c4 <system_gclk_gen_set_config+0xb0>)
    267c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    267e:	4a0f      	ldr	r2, [pc, #60]	; (26bc <system_gclk_gen_set_config+0xa8>)
    2680:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2682:	b25b      	sxtb	r3, r3
    2684:	2b00      	cmp	r3, #0
    2686:	dbfb      	blt.n	2680 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2688:	4b0c      	ldr	r3, [pc, #48]	; (26bc <system_gclk_gen_set_config+0xa8>)
    268a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    268c:	001a      	movs	r2, r3
    268e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2690:	b25b      	sxtb	r3, r3
    2692:	2b00      	cmp	r3, #0
    2694:	dbfb      	blt.n	268e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2696:	4a09      	ldr	r2, [pc, #36]	; (26bc <system_gclk_gen_set_config+0xa8>)
    2698:	6853      	ldr	r3, [r2, #4]
    269a:	2180      	movs	r1, #128	; 0x80
    269c:	0249      	lsls	r1, r1, #9
    269e:	400b      	ands	r3, r1
    26a0:	431d      	orrs	r5, r3
    26a2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    26a4:	4b08      	ldr	r3, [pc, #32]	; (26c8 <system_gclk_gen_set_config+0xb4>)
    26a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26a8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    26aa:	2200      	movs	r2, #0
    26ac:	e7d2      	b.n	2654 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    26ae:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    26b0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    26b2:	2380      	movs	r3, #128	; 0x80
    26b4:	029b      	lsls	r3, r3, #10
    26b6:	431d      	orrs	r5, r3
    26b8:	e7d2      	b.n	2660 <system_gclk_gen_set_config+0x4c>
    26ba:	46c0      	nop			; (mov r8, r8)
    26bc:	40000c00 	.word	0x40000c00
    26c0:	000010dd 	.word	0x000010dd
    26c4:	40000c08 	.word	0x40000c08
    26c8:	0000111d 	.word	0x0000111d

000026cc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    26cc:	b510      	push	{r4, lr}
    26ce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26d0:	4a0b      	ldr	r2, [pc, #44]	; (2700 <system_gclk_gen_enable+0x34>)
    26d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26d4:	b25b      	sxtb	r3, r3
    26d6:	2b00      	cmp	r3, #0
    26d8:	dbfb      	blt.n	26d2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    26da:	4b0a      	ldr	r3, [pc, #40]	; (2704 <system_gclk_gen_enable+0x38>)
    26dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26de:	4b0a      	ldr	r3, [pc, #40]	; (2708 <system_gclk_gen_enable+0x3c>)
    26e0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26e2:	4a07      	ldr	r2, [pc, #28]	; (2700 <system_gclk_gen_enable+0x34>)
    26e4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26e6:	b25b      	sxtb	r3, r3
    26e8:	2b00      	cmp	r3, #0
    26ea:	dbfb      	blt.n	26e4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    26ec:	4a04      	ldr	r2, [pc, #16]	; (2700 <system_gclk_gen_enable+0x34>)
    26ee:	6851      	ldr	r1, [r2, #4]
    26f0:	2380      	movs	r3, #128	; 0x80
    26f2:	025b      	lsls	r3, r3, #9
    26f4:	430b      	orrs	r3, r1
    26f6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    26f8:	4b04      	ldr	r3, [pc, #16]	; (270c <system_gclk_gen_enable+0x40>)
    26fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26fc:	bd10      	pop	{r4, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	40000c00 	.word	0x40000c00
    2704:	000010dd 	.word	0x000010dd
    2708:	40000c04 	.word	0x40000c04
    270c:	0000111d 	.word	0x0000111d

00002710 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2710:	b570      	push	{r4, r5, r6, lr}
    2712:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2714:	4a1a      	ldr	r2, [pc, #104]	; (2780 <system_gclk_gen_get_hz+0x70>)
    2716:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2718:	b25b      	sxtb	r3, r3
    271a:	2b00      	cmp	r3, #0
    271c:	dbfb      	blt.n	2716 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    271e:	4b19      	ldr	r3, [pc, #100]	; (2784 <system_gclk_gen_get_hz+0x74>)
    2720:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2722:	4b19      	ldr	r3, [pc, #100]	; (2788 <system_gclk_gen_get_hz+0x78>)
    2724:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2726:	4a16      	ldr	r2, [pc, #88]	; (2780 <system_gclk_gen_get_hz+0x70>)
    2728:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    272a:	b25b      	sxtb	r3, r3
    272c:	2b00      	cmp	r3, #0
    272e:	dbfb      	blt.n	2728 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2730:	4e13      	ldr	r6, [pc, #76]	; (2780 <system_gclk_gen_get_hz+0x70>)
    2732:	6870      	ldr	r0, [r6, #4]
    2734:	04c0      	lsls	r0, r0, #19
    2736:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2738:	4b14      	ldr	r3, [pc, #80]	; (278c <system_gclk_gen_get_hz+0x7c>)
    273a:	4798      	blx	r3
    273c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    273e:	4b12      	ldr	r3, [pc, #72]	; (2788 <system_gclk_gen_get_hz+0x78>)
    2740:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2742:	6876      	ldr	r6, [r6, #4]
    2744:	02f6      	lsls	r6, r6, #11
    2746:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2748:	4b11      	ldr	r3, [pc, #68]	; (2790 <system_gclk_gen_get_hz+0x80>)
    274a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    274c:	4a0c      	ldr	r2, [pc, #48]	; (2780 <system_gclk_gen_get_hz+0x70>)
    274e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2750:	b25b      	sxtb	r3, r3
    2752:	2b00      	cmp	r3, #0
    2754:	dbfb      	blt.n	274e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2756:	4b0a      	ldr	r3, [pc, #40]	; (2780 <system_gclk_gen_get_hz+0x70>)
    2758:	689c      	ldr	r4, [r3, #8]
    275a:	0224      	lsls	r4, r4, #8
    275c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    275e:	4b0d      	ldr	r3, [pc, #52]	; (2794 <system_gclk_gen_get_hz+0x84>)
    2760:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2762:	2e00      	cmp	r6, #0
    2764:	d107      	bne.n	2776 <system_gclk_gen_get_hz+0x66>
    2766:	2c01      	cmp	r4, #1
    2768:	d907      	bls.n	277a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    276a:	0021      	movs	r1, r4
    276c:	0028      	movs	r0, r5
    276e:	4b0a      	ldr	r3, [pc, #40]	; (2798 <system_gclk_gen_get_hz+0x88>)
    2770:	4798      	blx	r3
    2772:	0005      	movs	r5, r0
    2774:	e001      	b.n	277a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2776:	3401      	adds	r4, #1
    2778:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    277a:	0028      	movs	r0, r5
    277c:	bd70      	pop	{r4, r5, r6, pc}
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	40000c00 	.word	0x40000c00
    2784:	000010dd 	.word	0x000010dd
    2788:	40000c04 	.word	0x40000c04
    278c:	000022e5 	.word	0x000022e5
    2790:	40000c08 	.word	0x40000c08
    2794:	0000111d 	.word	0x0000111d
    2798:	000051c1 	.word	0x000051c1

0000279c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    279c:	b510      	push	{r4, lr}
    279e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27a0:	4b06      	ldr	r3, [pc, #24]	; (27bc <system_gclk_chan_enable+0x20>)
    27a2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27a4:	4b06      	ldr	r3, [pc, #24]	; (27c0 <system_gclk_chan_enable+0x24>)
    27a6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    27a8:	4a06      	ldr	r2, [pc, #24]	; (27c4 <system_gclk_chan_enable+0x28>)
    27aa:	8853      	ldrh	r3, [r2, #2]
    27ac:	2180      	movs	r1, #128	; 0x80
    27ae:	01c9      	lsls	r1, r1, #7
    27b0:	430b      	orrs	r3, r1
    27b2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    27b4:	4b04      	ldr	r3, [pc, #16]	; (27c8 <system_gclk_chan_enable+0x2c>)
    27b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27b8:	bd10      	pop	{r4, pc}
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	000010dd 	.word	0x000010dd
    27c0:	40000c02 	.word	0x40000c02
    27c4:	40000c00 	.word	0x40000c00
    27c8:	0000111d 	.word	0x0000111d

000027cc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    27cc:	b510      	push	{r4, lr}
    27ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27d0:	4b0f      	ldr	r3, [pc, #60]	; (2810 <system_gclk_chan_disable+0x44>)
    27d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27d4:	4b0f      	ldr	r3, [pc, #60]	; (2814 <system_gclk_chan_disable+0x48>)
    27d6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    27d8:	4a0f      	ldr	r2, [pc, #60]	; (2818 <system_gclk_chan_disable+0x4c>)
    27da:	8853      	ldrh	r3, [r2, #2]
    27dc:	051b      	lsls	r3, r3, #20
    27de:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    27e0:	8853      	ldrh	r3, [r2, #2]
    27e2:	490e      	ldr	r1, [pc, #56]	; (281c <system_gclk_chan_disable+0x50>)
    27e4:	400b      	ands	r3, r1
    27e6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    27e8:	8853      	ldrh	r3, [r2, #2]
    27ea:	490d      	ldr	r1, [pc, #52]	; (2820 <system_gclk_chan_disable+0x54>)
    27ec:	400b      	ands	r3, r1
    27ee:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    27f0:	0011      	movs	r1, r2
    27f2:	2280      	movs	r2, #128	; 0x80
    27f4:	01d2      	lsls	r2, r2, #7
    27f6:	884b      	ldrh	r3, [r1, #2]
    27f8:	4213      	tst	r3, r2
    27fa:	d1fc      	bne.n	27f6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    27fc:	4906      	ldr	r1, [pc, #24]	; (2818 <system_gclk_chan_disable+0x4c>)
    27fe:	884a      	ldrh	r2, [r1, #2]
    2800:	0203      	lsls	r3, r0, #8
    2802:	4806      	ldr	r0, [pc, #24]	; (281c <system_gclk_chan_disable+0x50>)
    2804:	4002      	ands	r2, r0
    2806:	4313      	orrs	r3, r2
    2808:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    280a:	4b06      	ldr	r3, [pc, #24]	; (2824 <system_gclk_chan_disable+0x58>)
    280c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    280e:	bd10      	pop	{r4, pc}
    2810:	000010dd 	.word	0x000010dd
    2814:	40000c02 	.word	0x40000c02
    2818:	40000c00 	.word	0x40000c00
    281c:	fffff0ff 	.word	0xfffff0ff
    2820:	ffffbfff 	.word	0xffffbfff
    2824:	0000111d 	.word	0x0000111d

00002828 <system_gclk_chan_set_config>:
{
    2828:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    282a:	780c      	ldrb	r4, [r1, #0]
    282c:	0224      	lsls	r4, r4, #8
    282e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2830:	4b02      	ldr	r3, [pc, #8]	; (283c <system_gclk_chan_set_config+0x14>)
    2832:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2834:	b2a4      	uxth	r4, r4
    2836:	4b02      	ldr	r3, [pc, #8]	; (2840 <system_gclk_chan_set_config+0x18>)
    2838:	805c      	strh	r4, [r3, #2]
}
    283a:	bd10      	pop	{r4, pc}
    283c:	000027cd 	.word	0x000027cd
    2840:	40000c00 	.word	0x40000c00

00002844 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2844:	b510      	push	{r4, lr}
    2846:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2848:	4b06      	ldr	r3, [pc, #24]	; (2864 <system_gclk_chan_get_hz+0x20>)
    284a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    284c:	4b06      	ldr	r3, [pc, #24]	; (2868 <system_gclk_chan_get_hz+0x24>)
    284e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2850:	4b06      	ldr	r3, [pc, #24]	; (286c <system_gclk_chan_get_hz+0x28>)
    2852:	885c      	ldrh	r4, [r3, #2]
    2854:	0524      	lsls	r4, r4, #20
    2856:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2858:	4b05      	ldr	r3, [pc, #20]	; (2870 <system_gclk_chan_get_hz+0x2c>)
    285a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    285c:	0020      	movs	r0, r4
    285e:	4b05      	ldr	r3, [pc, #20]	; (2874 <system_gclk_chan_get_hz+0x30>)
    2860:	4798      	blx	r3
}
    2862:	bd10      	pop	{r4, pc}
    2864:	000010dd 	.word	0x000010dd
    2868:	40000c02 	.word	0x40000c02
    286c:	40000c00 	.word	0x40000c00
    2870:	0000111d 	.word	0x0000111d
    2874:	00002711 	.word	0x00002711

00002878 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    2878:	b570      	push	{r4, r5, r6, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    287a:	2800      	cmp	r0, #0
    287c:	db1c      	blt.n	28b8 <system_interrupt_set_priority+0x40>
		uint8_t register_num = vector / 4;
    287e:	17c3      	asrs	r3, r0, #31
    2880:	2603      	movs	r6, #3
    2882:	0032      	movs	r2, r6
    2884:	401a      	ands	r2, r3
    2886:	1812      	adds	r2, r2, r0
    2888:	24ff      	movs	r4, #255	; 0xff
    288a:	00a4      	lsls	r4, r4, #2
    288c:	4022      	ands	r2, r4
    288e:	4c0e      	ldr	r4, [pc, #56]	; (28c8 <system_interrupt_set_priority+0x50>)
    2890:	46a4      	mov	ip, r4
    2892:	4462      	add	r2, ip
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    2894:	25c0      	movs	r5, #192	; 0xc0
    2896:	00ad      	lsls	r5, r5, #2
    2898:	5954      	ldr	r4, [r2, r5]
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    289a:	0f9b      	lsrs	r3, r3, #30
    289c:	18c0      	adds	r0, r0, r3
    289e:	4030      	ands	r0, r6
    28a0:	1ac3      	subs	r3, r0, r3
    28a2:	00db      	lsls	r3, r3, #3
    28a4:	3306      	adds	r3, #6
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    28a6:	b2db      	uxtb	r3, r3
    28a8:	409e      	lsls	r6, r3
    28aa:	43b4      	bics	r4, r6
				(priority_level << priority_pos);
    28ac:	4099      	lsls	r1, r3
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    28ae:	4321      	orrs	r1, r4
		NVIC->IP[register_num] =
    28b0:	5151      	str	r1, [r2, r5]
	enum status_code status = STATUS_OK;
    28b2:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    28b4:	0018      	movs	r0, r3
    28b6:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_ERR_INVALID_ARG;
    28b8:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    28ba:	1c42      	adds	r2, r0, #1
    28bc:	d1fa      	bne.n	28b4 <system_interrupt_set_priority+0x3c>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    28be:	0789      	lsls	r1, r1, #30
    28c0:	4b02      	ldr	r3, [pc, #8]	; (28cc <system_interrupt_set_priority+0x54>)
    28c2:	6219      	str	r1, [r3, #32]
	enum status_code status = STATUS_OK;
    28c4:	2300      	movs	r3, #0
    28c6:	e7f5      	b.n	28b4 <system_interrupt_set_priority+0x3c>
    28c8:	e000e100 	.word	0xe000e100
    28cc:	e000ed00 	.word	0xe000ed00

000028d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    28d0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    28d2:	78d3      	ldrb	r3, [r2, #3]
    28d4:	2b00      	cmp	r3, #0
    28d6:	d135      	bne.n	2944 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    28d8:	7813      	ldrb	r3, [r2, #0]
    28da:	2b80      	cmp	r3, #128	; 0x80
    28dc:	d029      	beq.n	2932 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    28de:	061b      	lsls	r3, r3, #24
    28e0:	2480      	movs	r4, #128	; 0x80
    28e2:	0264      	lsls	r4, r4, #9
    28e4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    28e6:	7854      	ldrb	r4, [r2, #1]
    28e8:	2502      	movs	r5, #2
    28ea:	43ac      	bics	r4, r5
    28ec:	d106      	bne.n	28fc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    28ee:	7894      	ldrb	r4, [r2, #2]
    28f0:	2c00      	cmp	r4, #0
    28f2:	d120      	bne.n	2936 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    28f4:	2480      	movs	r4, #128	; 0x80
    28f6:	02a4      	lsls	r4, r4, #10
    28f8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    28fa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    28fc:	7854      	ldrb	r4, [r2, #1]
    28fe:	3c01      	subs	r4, #1
    2900:	2c01      	cmp	r4, #1
    2902:	d91c      	bls.n	293e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2904:	040d      	lsls	r5, r1, #16
    2906:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2908:	24a0      	movs	r4, #160	; 0xa0
    290a:	05e4      	lsls	r4, r4, #23
    290c:	432c      	orrs	r4, r5
    290e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2910:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2912:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2914:	24d0      	movs	r4, #208	; 0xd0
    2916:	0624      	lsls	r4, r4, #24
    2918:	432c      	orrs	r4, r5
    291a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    291c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    291e:	78d4      	ldrb	r4, [r2, #3]
    2920:	2c00      	cmp	r4, #0
    2922:	d122      	bne.n	296a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2924:	035b      	lsls	r3, r3, #13
    2926:	d51c      	bpl.n	2962 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2928:	7893      	ldrb	r3, [r2, #2]
    292a:	2b01      	cmp	r3, #1
    292c:	d01e      	beq.n	296c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    292e:	6141      	str	r1, [r0, #20]
    2930:	e017      	b.n	2962 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2932:	2300      	movs	r3, #0
    2934:	e7d7      	b.n	28e6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2936:	24c0      	movs	r4, #192	; 0xc0
    2938:	02e4      	lsls	r4, r4, #11
    293a:	4323      	orrs	r3, r4
    293c:	e7dd      	b.n	28fa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    293e:	4c0d      	ldr	r4, [pc, #52]	; (2974 <_system_pinmux_config+0xa4>)
    2940:	4023      	ands	r3, r4
    2942:	e7df      	b.n	2904 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2944:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2946:	040c      	lsls	r4, r1, #16
    2948:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    294a:	23a0      	movs	r3, #160	; 0xa0
    294c:	05db      	lsls	r3, r3, #23
    294e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2950:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2952:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2954:	23d0      	movs	r3, #208	; 0xd0
    2956:	061b      	lsls	r3, r3, #24
    2958:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    295a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    295c:	78d3      	ldrb	r3, [r2, #3]
    295e:	2b00      	cmp	r3, #0
    2960:	d103      	bne.n	296a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2962:	7853      	ldrb	r3, [r2, #1]
    2964:	3b01      	subs	r3, #1
    2966:	2b01      	cmp	r3, #1
    2968:	d902      	bls.n	2970 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    296a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    296c:	6181      	str	r1, [r0, #24]
    296e:	e7f8      	b.n	2962 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2970:	6081      	str	r1, [r0, #8]
}
    2972:	e7fa      	b.n	296a <_system_pinmux_config+0x9a>
    2974:	fffbffff 	.word	0xfffbffff

00002978 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2978:	b510      	push	{r4, lr}
    297a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    297c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    297e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2980:	2900      	cmp	r1, #0
    2982:	d104      	bne.n	298e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2984:	0943      	lsrs	r3, r0, #5
    2986:	01db      	lsls	r3, r3, #7
    2988:	4905      	ldr	r1, [pc, #20]	; (29a0 <system_pinmux_pin_set_config+0x28>)
    298a:	468c      	mov	ip, r1
    298c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    298e:	241f      	movs	r4, #31
    2990:	4020      	ands	r0, r4
    2992:	2101      	movs	r1, #1
    2994:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2996:	0018      	movs	r0, r3
    2998:	4b02      	ldr	r3, [pc, #8]	; (29a4 <system_pinmux_pin_set_config+0x2c>)
    299a:	4798      	blx	r3
}
    299c:	bd10      	pop	{r4, pc}
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	41004400 	.word	0x41004400
    29a4:	000028d1 	.word	0x000028d1

000029a8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    29a8:	4770      	bx	lr
	...

000029ac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    29ac:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    29ae:	4b05      	ldr	r3, [pc, #20]	; (29c4 <system_init+0x18>)
    29b0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    29b2:	4b05      	ldr	r3, [pc, #20]	; (29c8 <system_init+0x1c>)
    29b4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    29b6:	4b05      	ldr	r3, [pc, #20]	; (29cc <system_init+0x20>)
    29b8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    29ba:	4b05      	ldr	r3, [pc, #20]	; (29d0 <system_init+0x24>)
    29bc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    29be:	4b05      	ldr	r3, [pc, #20]	; (29d4 <system_init+0x28>)
    29c0:	4798      	blx	r3
}
    29c2:	bd10      	pop	{r4, pc}
    29c4:	000024d9 	.word	0x000024d9
    29c8:	0000114d 	.word	0x0000114d
    29cc:	000029a9 	.word	0x000029a9
    29d0:	000017c9 	.word	0x000017c9
    29d4:	000029a9 	.word	0x000029a9

000029d8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    29d8:	1c93      	adds	r3, r2, #2
    29da:	009b      	lsls	r3, r3, #2
    29dc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    29de:	2a02      	cmp	r2, #2
    29e0:	d009      	beq.n	29f6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    29e2:	2a03      	cmp	r2, #3
    29e4:	d00c      	beq.n	2a00 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    29e6:	2301      	movs	r3, #1
    29e8:	4093      	lsls	r3, r2
    29ea:	001a      	movs	r2, r3
    29ec:	7e03      	ldrb	r3, [r0, #24]
    29ee:	4313      	orrs	r3, r2
    29f0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    29f2:	2000      	movs	r0, #0
    29f4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    29f6:	7e03      	ldrb	r3, [r0, #24]
    29f8:	2210      	movs	r2, #16
    29fa:	4313      	orrs	r3, r2
    29fc:	7603      	strb	r3, [r0, #24]
    29fe:	e7f8      	b.n	29f2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2a00:	7e03      	ldrb	r3, [r0, #24]
    2a02:	2220      	movs	r2, #32
    2a04:	4313      	orrs	r3, r2
    2a06:	7603      	strb	r3, [r0, #24]
    2a08:	e7f3      	b.n	29f2 <tc_register_callback+0x1a>
	...

00002a0c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2a0c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2a0e:	0080      	lsls	r0, r0, #2
    2a10:	4b16      	ldr	r3, [pc, #88]	; (2a6c <_tc_interrupt_handler+0x60>)
    2a12:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2a14:	6823      	ldr	r3, [r4, #0]
    2a16:	7b9d      	ldrb	r5, [r3, #14]
    2a18:	7e22      	ldrb	r2, [r4, #24]
    2a1a:	7e63      	ldrb	r3, [r4, #25]
    2a1c:	4013      	ands	r3, r2
    2a1e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2a20:	07eb      	lsls	r3, r5, #31
    2a22:	d406      	bmi.n	2a32 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2a24:	07ab      	lsls	r3, r5, #30
    2a26:	d40b      	bmi.n	2a40 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2a28:	06eb      	lsls	r3, r5, #27
    2a2a:	d410      	bmi.n	2a4e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2a2c:	06ab      	lsls	r3, r5, #26
    2a2e:	d415      	bmi.n	2a5c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2a30:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2a32:	0020      	movs	r0, r4
    2a34:	68a3      	ldr	r3, [r4, #8]
    2a36:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2a38:	2301      	movs	r3, #1
    2a3a:	6822      	ldr	r2, [r4, #0]
    2a3c:	7393      	strb	r3, [r2, #14]
    2a3e:	e7f1      	b.n	2a24 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2a40:	0020      	movs	r0, r4
    2a42:	68e3      	ldr	r3, [r4, #12]
    2a44:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2a46:	2302      	movs	r3, #2
    2a48:	6822      	ldr	r2, [r4, #0]
    2a4a:	7393      	strb	r3, [r2, #14]
    2a4c:	e7ec      	b.n	2a28 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2a4e:	0020      	movs	r0, r4
    2a50:	6923      	ldr	r3, [r4, #16]
    2a52:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2a54:	2310      	movs	r3, #16
    2a56:	6822      	ldr	r2, [r4, #0]
    2a58:	7393      	strb	r3, [r2, #14]
    2a5a:	e7e7      	b.n	2a2c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2a5c:	0020      	movs	r0, r4
    2a5e:	6963      	ldr	r3, [r4, #20]
    2a60:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2a62:	6823      	ldr	r3, [r4, #0]
    2a64:	2220      	movs	r2, #32
    2a66:	739a      	strb	r2, [r3, #14]
}
    2a68:	e7e2      	b.n	2a30 <_tc_interrupt_handler+0x24>
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	200003ac 	.word	0x200003ac

00002a70 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2a70:	b510      	push	{r4, lr}
    2a72:	2000      	movs	r0, #0
    2a74:	4b01      	ldr	r3, [pc, #4]	; (2a7c <TC3_Handler+0xc>)
    2a76:	4798      	blx	r3
    2a78:	bd10      	pop	{r4, pc}
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	00002a0d 	.word	0x00002a0d

00002a80 <TC4_Handler>:
    2a80:	b510      	push	{r4, lr}
    2a82:	2001      	movs	r0, #1
    2a84:	4b01      	ldr	r3, [pc, #4]	; (2a8c <TC4_Handler+0xc>)
    2a86:	4798      	blx	r3
    2a88:	bd10      	pop	{r4, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	00002a0d 	.word	0x00002a0d

00002a90 <TC5_Handler>:
    2a90:	b510      	push	{r4, lr}
    2a92:	2002      	movs	r0, #2
    2a94:	4b01      	ldr	r3, [pc, #4]	; (2a9c <TC5_Handler+0xc>)
    2a96:	4798      	blx	r3
    2a98:	bd10      	pop	{r4, pc}
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	00002a0d 	.word	0x00002a0d

00002aa0 <TC6_Handler>:
    2aa0:	b510      	push	{r4, lr}
    2aa2:	2003      	movs	r0, #3
    2aa4:	4b01      	ldr	r3, [pc, #4]	; (2aac <TC6_Handler+0xc>)
    2aa6:	4798      	blx	r3
    2aa8:	bd10      	pop	{r4, pc}
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	00002a0d 	.word	0x00002a0d

00002ab0 <TC7_Handler>:
    2ab0:	b510      	push	{r4, lr}
    2ab2:	2004      	movs	r0, #4
    2ab4:	4b01      	ldr	r3, [pc, #4]	; (2abc <TC7_Handler+0xc>)
    2ab6:	4798      	blx	r3
    2ab8:	bd10      	pop	{r4, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	00002a0d 	.word	0x00002a0d

00002ac0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2ac0:	b530      	push	{r4, r5, lr}
    2ac2:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2ac4:	a901      	add	r1, sp, #4
    2ac6:	4b0c      	ldr	r3, [pc, #48]	; (2af8 <_tc_get_inst_index+0x38>)
    2ac8:	000a      	movs	r2, r1
    2aca:	cb32      	ldmia	r3!, {r1, r4, r5}
    2acc:	c232      	stmia	r2!, {r1, r4, r5}
    2ace:	cb12      	ldmia	r3!, {r1, r4}
    2ad0:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    2ad2:	9b01      	ldr	r3, [sp, #4]
    2ad4:	4298      	cmp	r0, r3
    2ad6:	d00b      	beq.n	2af0 <_tc_get_inst_index+0x30>
    2ad8:	2301      	movs	r3, #1
    2ada:	a901      	add	r1, sp, #4
    2adc:	009a      	lsls	r2, r3, #2
    2ade:	5852      	ldr	r2, [r2, r1]
    2ae0:	4282      	cmp	r2, r0
    2ae2:	d006      	beq.n	2af2 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2ae4:	3301      	adds	r3, #1
    2ae6:	2b05      	cmp	r3, #5
    2ae8:	d1f8      	bne.n	2adc <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2aea:	2000      	movs	r0, #0
}
    2aec:	b007      	add	sp, #28
    2aee:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2af0:	2300      	movs	r3, #0
			return i;
    2af2:	b2d8      	uxtb	r0, r3
    2af4:	e7fa      	b.n	2aec <_tc_get_inst_index+0x2c>
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00005730 	.word	0x00005730

00002afc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2afe:	b089      	sub	sp, #36	; 0x24
    2b00:	0004      	movs	r4, r0
    2b02:	000d      	movs	r5, r1
    2b04:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2b06:	0008      	movs	r0, r1
    2b08:	4b85      	ldr	r3, [pc, #532]	; (2d20 <tc_init+0x224>)
    2b0a:	4798      	blx	r3
    2b0c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2b0e:	ab06      	add	r3, sp, #24
    2b10:	221b      	movs	r2, #27
    2b12:	701a      	strb	r2, [r3, #0]
    2b14:	3201      	adds	r2, #1
    2b16:	705a      	strb	r2, [r3, #1]
    2b18:	709a      	strb	r2, [r3, #2]
    2b1a:	3201      	adds	r2, #1
    2b1c:	70da      	strb	r2, [r3, #3]
    2b1e:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2b20:	aa03      	add	r2, sp, #12
    2b22:	4b80      	ldr	r3, [pc, #512]	; (2d24 <tc_init+0x228>)
    2b24:	3314      	adds	r3, #20
    2b26:	cb03      	ldmia	r3!, {r0, r1}
    2b28:	c203      	stmia	r2!, {r0, r1}
    2b2a:	881b      	ldrh	r3, [r3, #0]
    2b2c:	8013      	strh	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2b2e:	2300      	movs	r3, #0
    2b30:	60a3      	str	r3, [r4, #8]
    2b32:	60e3      	str	r3, [r4, #12]
    2b34:	6123      	str	r3, [r4, #16]
    2b36:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2b38:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2b3a:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2b3c:	00ba      	lsls	r2, r7, #2
    2b3e:	4b7a      	ldr	r3, [pc, #488]	; (2d28 <tc_init+0x22c>)
    2b40:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2b42:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2b44:	78b3      	ldrb	r3, [r6, #2]
    2b46:	2b08      	cmp	r3, #8
    2b48:	d006      	beq.n	2b58 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2b4a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2b4c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2b4e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2b50:	07db      	lsls	r3, r3, #31
    2b52:	d505      	bpl.n	2b60 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2b54:	b009      	add	sp, #36	; 0x24
    2b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2b58:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2b5a:	07fa      	lsls	r2, r7, #31
    2b5c:	d5fa      	bpl.n	2b54 <tc_init+0x58>
    2b5e:	e7f4      	b.n	2b4a <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2b60:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    2b62:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2b64:	06db      	lsls	r3, r3, #27
    2b66:	d4f5      	bmi.n	2b54 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2b68:	882b      	ldrh	r3, [r5, #0]
    2b6a:	079b      	lsls	r3, r3, #30
    2b6c:	d4f2      	bmi.n	2b54 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    2b6e:	7c33      	ldrb	r3, [r6, #16]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d179      	bne.n	2c68 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    2b74:	7f33      	ldrb	r3, [r6, #28]
    2b76:	2b00      	cmp	r3, #0
    2b78:	d000      	beq.n	2b7c <tc_init+0x80>
    2b7a:	e081      	b.n	2c80 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    2b7c:	496b      	ldr	r1, [pc, #428]	; (2d2c <tc_init+0x230>)
    2b7e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2b80:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2b82:	ab03      	add	r3, sp, #12
    2b84:	5ad3      	ldrh	r3, [r2, r3]
    2b86:	4303      	orrs	r3, r0
    2b88:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2b8a:	78b3      	ldrb	r3, [r6, #2]
    2b8c:	2b08      	cmp	r3, #8
    2b8e:	d100      	bne.n	2b92 <tc_init+0x96>
    2b90:	e086      	b.n	2ca0 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    2b92:	a901      	add	r1, sp, #4
    2b94:	7833      	ldrb	r3, [r6, #0]
    2b96:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2b98:	ab06      	add	r3, sp, #24
    2b9a:	5ddf      	ldrb	r7, [r3, r7]
    2b9c:	0038      	movs	r0, r7
    2b9e:	4b64      	ldr	r3, [pc, #400]	; (2d30 <tc_init+0x234>)
    2ba0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2ba2:	0038      	movs	r0, r7
    2ba4:	4b63      	ldr	r3, [pc, #396]	; (2d34 <tc_init+0x238>)
    2ba6:	4798      	blx	r3
	ctrla_tmp =
    2ba8:	8931      	ldrh	r1, [r6, #8]
    2baa:	88b3      	ldrh	r3, [r6, #4]
    2bac:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    2bae:	78b1      	ldrb	r1, [r6, #2]
    2bb0:	79b2      	ldrb	r2, [r6, #6]
    2bb2:	4311      	orrs	r1, r2
	ctrla_tmp =
    2bb4:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2bb6:	7873      	ldrb	r3, [r6, #1]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d002      	beq.n	2bc2 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2bbc:	2380      	movs	r3, #128	; 0x80
    2bbe:	011b      	lsls	r3, r3, #4
    2bc0:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2bc2:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2bc4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2bc6:	b25b      	sxtb	r3, r3
    2bc8:	2b00      	cmp	r3, #0
    2bca:	dbfb      	blt.n	2bc4 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2bcc:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    2bce:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2bd0:	1e4b      	subs	r3, r1, #1
    2bd2:	4199      	sbcs	r1, r3
    2bd4:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    2bd6:	7bb3      	ldrb	r3, [r6, #14]
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d001      	beq.n	2be0 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2bdc:	2301      	movs	r3, #1
    2bde:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2be0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2be2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2be4:	b25b      	sxtb	r3, r3
    2be6:	2b00      	cmp	r3, #0
    2be8:	dbfb      	blt.n	2be2 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2bea:	23ff      	movs	r3, #255	; 0xff
    2bec:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    2bee:	2900      	cmp	r1, #0
    2bf0:	d005      	beq.n	2bfe <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2bf2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2bf4:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    2bf6:	b25b      	sxtb	r3, r3
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	dbfb      	blt.n	2bf4 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2bfc:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    2bfe:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2c00:	7af3      	ldrb	r3, [r6, #11]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d001      	beq.n	2c0a <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2c06:	2310      	movs	r3, #16
    2c08:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    2c0a:	7b33      	ldrb	r3, [r6, #12]
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d001      	beq.n	2c14 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2c10:	2320      	movs	r3, #32
    2c12:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2c14:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2c16:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2c18:	b25b      	sxtb	r3, r3
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	dbfb      	blt.n	2c16 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2c1e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2c20:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2c22:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2c24:	b25b      	sxtb	r3, r3
    2c26:	2b00      	cmp	r3, #0
    2c28:	dbfb      	blt.n	2c22 <tc_init+0x126>
	switch (module_inst->counter_size) {
    2c2a:	7923      	ldrb	r3, [r4, #4]
    2c2c:	2b04      	cmp	r3, #4
    2c2e:	d03f      	beq.n	2cb0 <tc_init+0x1b4>
    2c30:	2b08      	cmp	r3, #8
    2c32:	d05e      	beq.n	2cf2 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2c34:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2c36:	2b00      	cmp	r3, #0
    2c38:	d000      	beq.n	2c3c <tc_init+0x140>
    2c3a:	e78b      	b.n	2b54 <tc_init+0x58>
    2c3c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2c3e:	b25b      	sxtb	r3, r3
    2c40:	2b00      	cmp	r3, #0
    2c42:	dbfb      	blt.n	2c3c <tc_init+0x140>
				= config->counter_16_bit.value;
    2c44:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2c46:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2c48:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2c4a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2c4c:	b25b      	sxtb	r3, r3
    2c4e:	2b00      	cmp	r3, #0
    2c50:	dbfb      	blt.n	2c4a <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    2c52:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2c54:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2c56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2c58:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2c5a:	b25b      	sxtb	r3, r3
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	dbfb      	blt.n	2c58 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    2c60:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2c62:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2c64:	2000      	movs	r0, #0
    2c66:	e775      	b.n	2b54 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2c68:	a902      	add	r1, sp, #8
    2c6a:	2301      	movs	r3, #1
    2c6c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2c6e:	2200      	movs	r2, #0
    2c70:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2c72:	7e32      	ldrb	r2, [r6, #24]
    2c74:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2c76:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2c78:	7d30      	ldrb	r0, [r6, #20]
    2c7a:	4b2f      	ldr	r3, [pc, #188]	; (2d38 <tc_init+0x23c>)
    2c7c:	4798      	blx	r3
    2c7e:	e779      	b.n	2b74 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2c80:	a902      	add	r1, sp, #8
    2c82:	2301      	movs	r3, #1
    2c84:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2c86:	2200      	movs	r2, #0
    2c88:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2c8a:	3224      	adds	r2, #36	; 0x24
    2c8c:	18b2      	adds	r2, r6, r2
    2c8e:	7812      	ldrb	r2, [r2, #0]
    2c90:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2c92:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2c94:	331f      	adds	r3, #31
    2c96:	18f3      	adds	r3, r6, r3
    2c98:	7818      	ldrb	r0, [r3, #0]
    2c9a:	4b27      	ldr	r3, [pc, #156]	; (2d38 <tc_init+0x23c>)
    2c9c:	4798      	blx	r3
    2c9e:	e76d      	b.n	2b7c <tc_init+0x80>
    2ca0:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    2ca2:	1c7a      	adds	r2, r7, #1
    2ca4:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2ca6:	ab03      	add	r3, sp, #12
    2ca8:	5ad3      	ldrh	r3, [r2, r3]
    2caa:	4303      	orrs	r3, r0
    2cac:	620b      	str	r3, [r1, #32]
    2cae:	e770      	b.n	2b92 <tc_init+0x96>
    2cb0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2cb2:	b25b      	sxtb	r3, r3
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	dbfb      	blt.n	2cb0 <tc_init+0x1b4>
					config->counter_8_bit.value;
    2cb8:	2328      	movs	r3, #40	; 0x28
    2cba:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    2cbc:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2cbe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2cc0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2cc2:	b25b      	sxtb	r3, r3
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	dbfb      	blt.n	2cc0 <tc_init+0x1c4>
					config->counter_8_bit.period;
    2cc8:	2329      	movs	r3, #41	; 0x29
    2cca:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    2ccc:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2cce:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2cd0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2cd2:	b25b      	sxtb	r3, r3
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	dbfb      	blt.n	2cd0 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    2cd8:	232a      	movs	r3, #42	; 0x2a
    2cda:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    2cdc:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2cde:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2ce0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2ce2:	b25b      	sxtb	r3, r3
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	dbfb      	blt.n	2ce0 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    2ce8:	232b      	movs	r3, #43	; 0x2b
    2cea:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    2cec:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    2cee:	2000      	movs	r0, #0
    2cf0:	e730      	b.n	2b54 <tc_init+0x58>
    2cf2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2cf4:	b25b      	sxtb	r3, r3
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	dbfb      	blt.n	2cf2 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    2cfa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2cfc:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2cfe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2d00:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2d02:	b25b      	sxtb	r3, r3
    2d04:	2b00      	cmp	r3, #0
    2d06:	dbfb      	blt.n	2d00 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    2d08:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2d0a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2d0c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2d0e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2d10:	b25b      	sxtb	r3, r3
    2d12:	2b00      	cmp	r3, #0
    2d14:	dbfb      	blt.n	2d0e <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    2d16:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2d18:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    2d1a:	2000      	movs	r0, #0
    2d1c:	e71a      	b.n	2b54 <tc_init+0x58>
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	00002ac1 	.word	0x00002ac1
    2d24:	00005730 	.word	0x00005730
    2d28:	200003ac 	.word	0x200003ac
    2d2c:	40000400 	.word	0x40000400
    2d30:	00002829 	.word	0x00002829
    2d34:	0000279d 	.word	0x0000279d
    2d38:	00002979 	.word	0x00002979

00002d3c <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2d3c:	b510      	push	{r4, lr}
    2d3e:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2d40:	ab03      	add	r3, sp, #12
    2d42:	2200      	movs	r2, #0
    2d44:	701a      	strb	r2, [r3, #0]
    2d46:	3203      	adds	r2, #3
    2d48:	705a      	strb	r2, [r3, #1]
    2d4a:	3a01      	subs	r2, #1
    2d4c:	709a      	strb	r2, [r3, #2]
    2d4e:	3a01      	subs	r2, #1
    2d50:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2d52:	4b27      	ldr	r3, [pc, #156]	; (2df0 <udd_sleep_mode+0xb4>)
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	4283      	cmp	r3, r0
    2d58:	d007      	beq.n	2d6a <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d107      	bne.n	2d6e <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2d5e:	4b24      	ldr	r3, [pc, #144]	; (2df0 <udd_sleep_mode+0xb4>)
    2d60:	781b      	ldrb	r3, [r3, #0]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d123      	bne.n	2dae <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2d66:	4b22      	ldr	r3, [pc, #136]	; (2df0 <udd_sleep_mode+0xb4>)
    2d68:	7018      	strb	r0, [r3, #0]
}
    2d6a:	b004      	add	sp, #16
    2d6c:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2d6e:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2d70:	5c1b      	ldrb	r3, [r3, r0]
    2d72:	4a20      	ldr	r2, [pc, #128]	; (2df4 <udd_sleep_mode+0xb8>)
    2d74:	5cd2      	ldrb	r2, [r2, r3]
    2d76:	2aff      	cmp	r2, #255	; 0xff
    2d78:	d100      	bne.n	2d7c <udd_sleep_mode+0x40>
    2d7a:	e7fe      	b.n	2d7a <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d7c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2d80:	4251      	negs	r1, r2
    2d82:	414a      	adcs	r2, r1
    2d84:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2d86:	b672      	cpsid	i
    2d88:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d8c:	2100      	movs	r1, #0
    2d8e:	4a1a      	ldr	r2, [pc, #104]	; (2df8 <udd_sleep_mode+0xbc>)
    2d90:	7011      	strb	r1, [r2, #0]
	return flags;
    2d92:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2d94:	4917      	ldr	r1, [pc, #92]	; (2df4 <udd_sleep_mode+0xb8>)
    2d96:	5cca      	ldrb	r2, [r1, r3]
    2d98:	3201      	adds	r2, #1
    2d9a:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2d9c:	2c00      	cmp	r4, #0
    2d9e:	d0de      	beq.n	2d5e <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2da0:	2201      	movs	r2, #1
    2da2:	4b15      	ldr	r3, [pc, #84]	; (2df8 <udd_sleep_mode+0xbc>)
    2da4:	701a      	strb	r2, [r3, #0]
    2da6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2daa:	b662      	cpsie	i
    2dac:	e7d7      	b.n	2d5e <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2dae:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2db0:	5cd3      	ldrb	r3, [r2, r3]
    2db2:	4a10      	ldr	r2, [pc, #64]	; (2df4 <udd_sleep_mode+0xb8>)
    2db4:	5cd2      	ldrb	r2, [r2, r3]
    2db6:	2a00      	cmp	r2, #0
    2db8:	d100      	bne.n	2dbc <udd_sleep_mode+0x80>
    2dba:	e7fe      	b.n	2dba <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2dbc:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2dc0:	4251      	negs	r1, r2
    2dc2:	414a      	adcs	r2, r1
    2dc4:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2dc6:	b672      	cpsid	i
    2dc8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2dcc:	2100      	movs	r1, #0
    2dce:	4a0a      	ldr	r2, [pc, #40]	; (2df8 <udd_sleep_mode+0xbc>)
    2dd0:	7011      	strb	r1, [r2, #0]
	return flags;
    2dd2:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2dd4:	4907      	ldr	r1, [pc, #28]	; (2df4 <udd_sleep_mode+0xb8>)
    2dd6:	5cca      	ldrb	r2, [r1, r3]
    2dd8:	3a01      	subs	r2, #1
    2dda:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2ddc:	2c00      	cmp	r4, #0
    2dde:	d0c2      	beq.n	2d66 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2de0:	2201      	movs	r2, #1
    2de2:	4b05      	ldr	r3, [pc, #20]	; (2df8 <udd_sleep_mode+0xbc>)
    2de4:	701a      	strb	r2, [r3, #0]
    2de6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2dea:	b662      	cpsie	i
    2dec:	e7bb      	b.n	2d66 <udd_sleep_mode+0x2a>
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	20000320 	.word	0x20000320
    2df4:	20000344 	.word	0x20000344
    2df8:	200000e8 	.word	0x200000e8

00002dfc <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2dfc:	0643      	lsls	r3, r0, #25
    2dfe:	d00b      	beq.n	2e18 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2e00:	230f      	movs	r3, #15
    2e02:	4003      	ands	r3, r0
    2e04:	005b      	lsls	r3, r3, #1
    2e06:	09c0      	lsrs	r0, r0, #7
    2e08:	1818      	adds	r0, r3, r0
    2e0a:	3802      	subs	r0, #2
    2e0c:	0083      	lsls	r3, r0, #2
    2e0e:	1818      	adds	r0, r3, r0
    2e10:	0080      	lsls	r0, r0, #2
    2e12:	4b02      	ldr	r3, [pc, #8]	; (2e1c <udd_ep_get_job+0x20>)
    2e14:	1818      	adds	r0, r3, r0
	}
}
    2e16:	4770      	bx	lr
		return NULL;
    2e18:	2000      	movs	r0, #0
    2e1a:	e7fc      	b.n	2e16 <udd_ep_get_job+0x1a>
    2e1c:	200002a8 	.word	0x200002a8

00002e20 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e22:	46d6      	mov	lr, sl
    2e24:	464f      	mov	r7, r9
    2e26:	4646      	mov	r6, r8
    2e28:	b5c0      	push	{r6, r7, lr}
    2e2a:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2e2c:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2e2e:	b26b      	sxtb	r3, r5
    2e30:	2b00      	cmp	r3, #0
    2e32:	db26      	blt.n	2e82 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2e34:	0028      	movs	r0, r5
    2e36:	4b5e      	ldr	r3, [pc, #376]	; (2fb0 <udd_ep_transfer_process+0x190>)
    2e38:	4798      	blx	r3
    2e3a:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2e3c:	270f      	movs	r7, #15
    2e3e:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2e40:	8a03      	ldrh	r3, [r0, #16]
    2e42:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2e44:	464b      	mov	r3, r9
    2e46:	881b      	ldrh	r3, [r3, #0]
    2e48:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2e4a:	7c83      	ldrb	r3, [r0, #18]
    2e4c:	075b      	lsls	r3, r3, #29
    2e4e:	d46a      	bmi.n	2f26 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2e50:	68e3      	ldr	r3, [r4, #12]
    2e52:	4453      	add	r3, sl
    2e54:	001e      	movs	r6, r3
    2e56:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2e58:	68a3      	ldr	r3, [r4, #8]
    2e5a:	429e      	cmp	r6, r3
    2e5c:	d800      	bhi.n	2e60 <udd_ep_transfer_process+0x40>
    2e5e:	e074      	b.n	2f4a <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2e60:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    2e62:	7ca3      	ldrb	r3, [r4, #18]
    2e64:	2201      	movs	r2, #1
    2e66:	4393      	bics	r3, r2
    2e68:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2e6a:	6823      	ldr	r3, [r4, #0]
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d003      	beq.n	2e78 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2e70:	68e1      	ldr	r1, [r4, #12]
    2e72:	002a      	movs	r2, r5
    2e74:	2000      	movs	r0, #0
    2e76:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2e78:	bc1c      	pop	{r2, r3, r4}
    2e7a:	4690      	mov	r8, r2
    2e7c:	4699      	mov	r9, r3
    2e7e:	46a2      	mov	sl, r4
    2e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    2e82:	0028      	movs	r0, r5
    2e84:	4b4a      	ldr	r3, [pc, #296]	; (2fb0 <udd_ep_transfer_process+0x190>)
    2e86:	4798      	blx	r3
    2e88:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2e8a:	270f      	movs	r7, #15
    2e8c:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2e8e:	8a03      	ldrh	r3, [r0, #16]
    2e90:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    2e92:	464b      	mov	r3, r9
    2e94:	885e      	ldrh	r6, [r3, #2]
    2e96:	68c3      	ldr	r3, [r0, #12]
    2e98:	469c      	mov	ip, r3
    2e9a:	4466      	add	r6, ip
    2e9c:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    2e9e:	6881      	ldr	r1, [r0, #8]
    2ea0:	428e      	cmp	r6, r1
    2ea2:	d025      	beq.n	2ef0 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2ea4:	1b8d      	subs	r5, r1, r6
    2ea6:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2ea8:	4b42      	ldr	r3, [pc, #264]	; (2fb4 <udd_ep_transfer_process+0x194>)
    2eaa:	429d      	cmp	r5, r3
    2eac:	d906      	bls.n	2ebc <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2eae:	001d      	movs	r5, r3
    2eb0:	4641      	mov	r1, r8
    2eb2:	0018      	movs	r0, r3
    2eb4:	4b40      	ldr	r3, [pc, #256]	; (2fb8 <udd_ep_transfer_process+0x198>)
    2eb6:	4798      	blx	r3
    2eb8:	1a6d      	subs	r5, r5, r1
    2eba:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2ebc:	7ca2      	ldrb	r2, [r4, #18]
    2ebe:	2300      	movs	r3, #0
    2ec0:	0792      	lsls	r2, r2, #30
    2ec2:	d507      	bpl.n	2ed4 <udd_ep_transfer_process+0xb4>
    2ec4:	4641      	mov	r1, r8
    2ec6:	0028      	movs	r0, r5
    2ec8:	4b3c      	ldr	r3, [pc, #240]	; (2fbc <udd_ep_transfer_process+0x19c>)
    2eca:	4798      	blx	r3
    2ecc:	b289      	uxth	r1, r1
    2ece:	424b      	negs	r3, r1
    2ed0:	414b      	adcs	r3, r1
    2ed2:	b2db      	uxtb	r3, r3
    2ed4:	005b      	lsls	r3, r3, #1
    2ed6:	7ca2      	ldrb	r2, [r4, #18]
    2ed8:	2102      	movs	r1, #2
    2eda:	438a      	bics	r2, r1
    2edc:	4313      	orrs	r3, r2
    2ede:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2ee0:	6862      	ldr	r2, [r4, #4]
    2ee2:	1992      	adds	r2, r2, r6
    2ee4:	002b      	movs	r3, r5
    2ee6:	0039      	movs	r1, r7
    2ee8:	4835      	ldr	r0, [pc, #212]	; (2fc0 <udd_ep_transfer_process+0x1a0>)
    2eea:	4c36      	ldr	r4, [pc, #216]	; (2fc4 <udd_ep_transfer_process+0x1a4>)
    2eec:	47a0      	blx	r4
    2eee:	e7c3      	b.n	2e78 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2ef0:	7c83      	ldrb	r3, [r0, #18]
    2ef2:	079b      	lsls	r3, r3, #30
    2ef4:	d40b      	bmi.n	2f0e <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2ef6:	7c83      	ldrb	r3, [r0, #18]
    2ef8:	2201      	movs	r2, #1
    2efa:	4393      	bics	r3, r2
    2efc:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2efe:	6803      	ldr	r3, [r0, #0]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d0b9      	beq.n	2e78 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2f04:	002a      	movs	r2, r5
    2f06:	0031      	movs	r1, r6
    2f08:	2000      	movs	r0, #0
    2f0a:	4798      	blx	r3
    2f0c:	e7b4      	b.n	2e78 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2f0e:	7c83      	ldrb	r3, [r0, #18]
    2f10:	2202      	movs	r2, #2
    2f12:	4393      	bics	r3, r2
    2f14:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2f16:	6842      	ldr	r2, [r0, #4]
    2f18:	1992      	adds	r2, r2, r6
    2f1a:	2300      	movs	r3, #0
    2f1c:	0039      	movs	r1, r7
    2f1e:	4828      	ldr	r0, [pc, #160]	; (2fc0 <udd_ep_transfer_process+0x1a0>)
    2f20:	4c28      	ldr	r4, [pc, #160]	; (2fc4 <udd_ep_transfer_process+0x1a4>)
    2f22:	47a0      	blx	r4
    2f24:	e7a8      	b.n	2e78 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2f26:	6843      	ldr	r3, [r0, #4]
    2f28:	68c2      	ldr	r2, [r0, #12]
    2f2a:	4694      	mov	ip, r2
    2f2c:	4463      	add	r3, ip
    2f2e:	001e      	movs	r6, r3
    2f30:	4641      	mov	r1, r8
    2f32:	6880      	ldr	r0, [r0, #8]
    2f34:	4b21      	ldr	r3, [pc, #132]	; (2fbc <udd_ep_transfer_process+0x19c>)
    2f36:	4798      	blx	r3
    2f38:	000a      	movs	r2, r1
    2f3a:	1e7b      	subs	r3, r7, #1
    2f3c:	019b      	lsls	r3, r3, #6
    2f3e:	4922      	ldr	r1, [pc, #136]	; (2fc8 <udd_ep_transfer_process+0x1a8>)
    2f40:	1859      	adds	r1, r3, r1
    2f42:	0030      	movs	r0, r6
    2f44:	4b21      	ldr	r3, [pc, #132]	; (2fcc <udd_ep_transfer_process+0x1ac>)
    2f46:	4798      	blx	r3
    2f48:	e782      	b.n	2e50 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2f4a:	464a      	mov	r2, r9
    2f4c:	8892      	ldrh	r2, [r2, #4]
    2f4e:	4552      	cmp	r2, sl
    2f50:	d000      	beq.n	2f54 <udd_ep_transfer_process+0x134>
    2f52:	e786      	b.n	2e62 <udd_ep_transfer_process+0x42>
    2f54:	429e      	cmp	r6, r3
    2f56:	d100      	bne.n	2f5a <udd_ep_transfer_process+0x13a>
    2f58:	e783      	b.n	2e62 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2f5a:	1b9b      	subs	r3, r3, r6
    2f5c:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2f5e:	4b15      	ldr	r3, [pc, #84]	; (2fb4 <udd_ep_transfer_process+0x194>)
    2f60:	429d      	cmp	r5, r3
    2f62:	d916      	bls.n	2f92 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2f64:	001d      	movs	r5, r3
    2f66:	4641      	mov	r1, r8
    2f68:	0018      	movs	r0, r3
    2f6a:	4b13      	ldr	r3, [pc, #76]	; (2fb8 <udd_ep_transfer_process+0x198>)
    2f6c:	4798      	blx	r3
    2f6e:	1a6b      	subs	r3, r5, r1
    2f70:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2f72:	4598      	cmp	r8, r3
    2f74:	d914      	bls.n	2fa0 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2f76:	7ca3      	ldrb	r3, [r4, #18]
    2f78:	2204      	movs	r2, #4
    2f7a:	4313      	orrs	r3, r2
    2f7c:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2f7e:	1e7a      	subs	r2, r7, #1
    2f80:	0192      	lsls	r2, r2, #6
    2f82:	4b11      	ldr	r3, [pc, #68]	; (2fc8 <udd_ep_transfer_process+0x1a8>)
    2f84:	18d2      	adds	r2, r2, r3
    2f86:	4643      	mov	r3, r8
    2f88:	0039      	movs	r1, r7
    2f8a:	480d      	ldr	r0, [pc, #52]	; (2fc0 <udd_ep_transfer_process+0x1a0>)
    2f8c:	4c10      	ldr	r4, [pc, #64]	; (2fd0 <udd_ep_transfer_process+0x1b0>)
    2f8e:	47a0      	blx	r4
    2f90:	e772      	b.n	2e78 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2f92:	4641      	mov	r1, r8
    2f94:	0028      	movs	r0, r5
    2f96:	4b09      	ldr	r3, [pc, #36]	; (2fbc <udd_ep_transfer_process+0x19c>)
    2f98:	4798      	blx	r3
    2f9a:	1a6b      	subs	r3, r5, r1
    2f9c:	b29b      	uxth	r3, r3
    2f9e:	e7e8      	b.n	2f72 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2fa0:	6862      	ldr	r2, [r4, #4]
    2fa2:	1992      	adds	r2, r2, r6
    2fa4:	0039      	movs	r1, r7
    2fa6:	4806      	ldr	r0, [pc, #24]	; (2fc0 <udd_ep_transfer_process+0x1a0>)
    2fa8:	4c09      	ldr	r4, [pc, #36]	; (2fd0 <udd_ep_transfer_process+0x1b0>)
    2faa:	47a0      	blx	r4
    2fac:	e764      	b.n	2e78 <udd_ep_transfer_process+0x58>
    2fae:	46c0      	nop			; (mov r8, r8)
    2fb0:	00002dfd 	.word	0x00002dfd
    2fb4:	00001fff 	.word	0x00001fff
    2fb8:	000054a1 	.word	0x000054a1
    2fbc:	000052cd 	.word	0x000052cd
    2fc0:	20000480 	.word	0x20000480
    2fc4:	0000410d 	.word	0x0000410d
    2fc8:	200003c0 	.word	0x200003c0
    2fcc:	00005589 	.word	0x00005589
    2fd0:	00004161 	.word	0x00004161

00002fd4 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2fd4:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2fd6:	2205      	movs	r2, #5
    2fd8:	4b05      	ldr	r3, [pc, #20]	; (2ff0 <udd_ctrl_stall_data+0x1c>)
    2fda:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2fdc:	4c05      	ldr	r4, [pc, #20]	; (2ff4 <udd_ctrl_stall_data+0x20>)
    2fde:	2180      	movs	r1, #128	; 0x80
    2fe0:	0020      	movs	r0, r4
    2fe2:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <udd_ctrl_stall_data+0x24>)
    2fe4:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2fe6:	2100      	movs	r1, #0
    2fe8:	0020      	movs	r0, r4
    2fea:	4b04      	ldr	r3, [pc, #16]	; (2ffc <udd_ctrl_stall_data+0x28>)
    2fec:	4798      	blx	r3
}
    2fee:	bd10      	pop	{r4, pc}
    2ff0:	200002a6 	.word	0x200002a6
    2ff4:	20000480 	.word	0x20000480
    2ff8:	00004061 	.word	0x00004061
    2ffc:	00004087 	.word	0x00004087

00003000 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    3000:	b570      	push	{r4, r5, r6, lr}
    3002:	000e      	movs	r6, r1
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3004:	4c0e      	ldr	r4, [pc, #56]	; (3040 <_usb_device_lpm_suspend+0x40>)
    3006:	2106      	movs	r1, #6
    3008:	0020      	movs	r0, r4
    300a:	4d0e      	ldr	r5, [pc, #56]	; (3044 <_usb_device_lpm_suspend+0x44>)
    300c:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    300e:	2104      	movs	r1, #4
    3010:	0020      	movs	r0, r4
    3012:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3014:	2102      	movs	r1, #2
    3016:	0020      	movs	r0, r4
    3018:	4b0b      	ldr	r3, [pc, #44]	; (3048 <_usb_device_lpm_suspend+0x48>)
    301a:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    301c:	2002      	movs	r0, #2
    301e:	4b0b      	ldr	r3, [pc, #44]	; (304c <_usb_device_lpm_suspend+0x4c>)
    3020:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    3022:	6833      	ldr	r3, [r6, #0]
    3024:	2b00      	cmp	r3, #0
    3026:	d104      	bne.n	3032 <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    3028:	4b09      	ldr	r3, [pc, #36]	; (3050 <_usb_device_lpm_suspend+0x50>)
    302a:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    302c:	4b09      	ldr	r3, [pc, #36]	; (3054 <_usb_device_lpm_suspend+0x54>)
    302e:	4798      	blx	r3
}
    3030:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    3032:	4b09      	ldr	r3, [pc, #36]	; (3058 <_usb_device_lpm_suspend+0x58>)
    3034:	4798      	blx	r3
	if (!(*lpm_wakeup_enable)) {
    3036:	6833      	ldr	r3, [r6, #0]
    3038:	2b00      	cmp	r3, #0
    303a:	d1f7      	bne.n	302c <_usb_device_lpm_suspend+0x2c>
    303c:	e7f4      	b.n	3028 <_usb_device_lpm_suspend+0x28>
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	20000480 	.word	0x20000480
    3044:	00003ba1 	.word	0x00003ba1
    3048:	00003b81 	.word	0x00003b81
    304c:	00002d3d 	.word	0x00002d3d
    3050:	00004e5d 	.word	0x00004e5d
    3054:	00004e51 	.word	0x00004e51
    3058:	00004e69 	.word	0x00004e69

0000305c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    305c:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    305e:	4b13      	ldr	r3, [pc, #76]	; (30ac <_usb_on_wakeup+0x50>)
    3060:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3062:	069b      	lsls	r3, r3, #26
    3064:	d41c      	bmi.n	30a0 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3066:	4911      	ldr	r1, [pc, #68]	; (30ac <_usb_on_wakeup+0x50>)
    3068:	22d0      	movs	r2, #208	; 0xd0
    306a:	68cb      	ldr	r3, [r1, #12]
    306c:	4013      	ands	r3, r2
    306e:	2bd0      	cmp	r3, #208	; 0xd0
    3070:	d1fb      	bne.n	306a <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3072:	4c0f      	ldr	r4, [pc, #60]	; (30b0 <_usb_on_wakeup+0x54>)
    3074:	2102      	movs	r1, #2
    3076:	0020      	movs	r0, r4
    3078:	4b0e      	ldr	r3, [pc, #56]	; (30b4 <_usb_on_wakeup+0x58>)
    307a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    307c:	2104      	movs	r1, #4
    307e:	0020      	movs	r0, r4
    3080:	4d0d      	ldr	r5, [pc, #52]	; (30b8 <_usb_on_wakeup+0x5c>)
    3082:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3084:	4a0d      	ldr	r2, [pc, #52]	; (30bc <_usb_on_wakeup+0x60>)
    3086:	2106      	movs	r1, #6
    3088:	0020      	movs	r0, r4
    308a:	4b0d      	ldr	r3, [pc, #52]	; (30c0 <_usb_on_wakeup+0x64>)
    308c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    308e:	2106      	movs	r1, #6
    3090:	0020      	movs	r0, r4
    3092:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3094:	2003      	movs	r0, #3
    3096:	4b0b      	ldr	r3, [pc, #44]	; (30c4 <_usb_on_wakeup+0x68>)
    3098:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    309a:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <_usb_on_wakeup+0x6c>)
    309c:	4798      	blx	r3
#endif
}
    309e:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    30a0:	4902      	ldr	r1, [pc, #8]	; (30ac <_usb_on_wakeup+0x50>)
    30a2:	2210      	movs	r2, #16
    30a4:	68cb      	ldr	r3, [r1, #12]
    30a6:	421a      	tst	r2, r3
    30a8:	d0fc      	beq.n	30a4 <_usb_on_wakeup+0x48>
    30aa:	e7e2      	b.n	3072 <_usb_on_wakeup+0x16>
    30ac:	40000800 	.word	0x40000800
    30b0:	20000480 	.word	0x20000480
    30b4:	00003ba1 	.word	0x00003ba1
    30b8:	00003b81 	.word	0x00003b81
    30bc:	00003001 	.word	0x00003001
    30c0:	00003b5d 	.word	0x00003b5d
    30c4:	00002d3d 	.word	0x00002d3d
    30c8:	00004e21 	.word	0x00004e21

000030cc <_usb_on_bus_reset>:
{
    30cc:	b530      	push	{r4, r5, lr}
    30ce:	b083      	sub	sp, #12
    30d0:	0004      	movs	r4, r0
	udc_reset();
    30d2:	4b1e      	ldr	r3, [pc, #120]	; (314c <_usb_on_bus_reset+0x80>)
    30d4:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    30d6:	2380      	movs	r3, #128	; 0x80
    30d8:	6822      	ldr	r2, [r4, #0]
    30da:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    30dc:	ad01      	add	r5, sp, #4
    30de:	0028      	movs	r0, r5
    30e0:	4b1b      	ldr	r3, [pc, #108]	; (3150 <_usb_on_bus_reset+0x84>)
    30e2:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    30e4:	2303      	movs	r3, #3
    30e6:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    30e8:	0029      	movs	r1, r5
    30ea:	0020      	movs	r0, r4
    30ec:	4b19      	ldr	r3, [pc, #100]	; (3154 <_usb_on_bus_reset+0x88>)
    30ee:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    30f0:	4919      	ldr	r1, [pc, #100]	; (3158 <_usb_on_bus_reset+0x8c>)
    30f2:	0020      	movs	r0, r4
    30f4:	4b19      	ldr	r3, [pc, #100]	; (315c <_usb_on_bus_reset+0x90>)
    30f6:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    30f8:	4b19      	ldr	r3, [pc, #100]	; (3160 <_usb_on_bus_reset+0x94>)
    30fa:	2202      	movs	r2, #2
    30fc:	2100      	movs	r1, #0
    30fe:	0020      	movs	r0, r4
    3100:	4d18      	ldr	r5, [pc, #96]	; (3164 <_usb_on_bus_reset+0x98>)
    3102:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3104:	4b18      	ldr	r3, [pc, #96]	; (3168 <_usb_on_bus_reset+0x9c>)
    3106:	2200      	movs	r2, #0
    3108:	2100      	movs	r1, #0
    310a:	0020      	movs	r0, r4
    310c:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    310e:	4b17      	ldr	r3, [pc, #92]	; (316c <_usb_on_bus_reset+0xa0>)
    3110:	2201      	movs	r2, #1
    3112:	2100      	movs	r1, #0
    3114:	0020      	movs	r0, r4
    3116:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    3118:	2202      	movs	r2, #2
    311a:	2100      	movs	r1, #0
    311c:	0020      	movs	r0, r4
    311e:	4d14      	ldr	r5, [pc, #80]	; (3170 <_usb_on_bus_reset+0xa4>)
    3120:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3122:	2200      	movs	r2, #0
    3124:	2100      	movs	r1, #0
    3126:	0020      	movs	r0, r4
    3128:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    312a:	2201      	movs	r2, #1
    312c:	2100      	movs	r1, #0
    312e:	0020      	movs	r0, r4
    3130:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3132:	6821      	ldr	r1, [r4, #0]
    3134:	890b      	ldrh	r3, [r1, #8]
    3136:	4a0f      	ldr	r2, [pc, #60]	; (3174 <_usb_on_bus_reset+0xa8>)
    3138:	401a      	ands	r2, r3
    313a:	2380      	movs	r3, #128	; 0x80
    313c:	00db      	lsls	r3, r3, #3
    313e:	4313      	orrs	r3, r2
    3140:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3142:	2200      	movs	r2, #0
    3144:	4b0c      	ldr	r3, [pc, #48]	; (3178 <_usb_on_bus_reset+0xac>)
    3146:	701a      	strb	r2, [r3, #0]
}
    3148:	b003      	add	sp, #12
    314a:	bd30      	pop	{r4, r5, pc}
    314c:	00000c0d 	.word	0x00000c0d
    3150:	00003dad 	.word	0x00003dad
    3154:	00003dbd 	.word	0x00003dbd
    3158:	20000600 	.word	0x20000600
    315c:	000041b1 	.word	0x000041b1
    3160:	000032b5 	.word	0x000032b5
    3164:	00003bbd 	.word	0x00003bbd
    3168:	000035e5 	.word	0x000035e5
    316c:	000031b9 	.word	0x000031b9
    3170:	00003c0d 	.word	0x00003c0d
    3174:	fffff3ff 	.word	0xfffff3ff
    3178:	200002a6 	.word	0x200002a6

0000317c <udd_ctrl_send_zlp_in>:
{
    317c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    317e:	2203      	movs	r2, #3
    3180:	4b07      	ldr	r3, [pc, #28]	; (31a0 <udd_ctrl_send_zlp_in+0x24>)
    3182:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3184:	4c07      	ldr	r4, [pc, #28]	; (31a4 <udd_ctrl_send_zlp_in+0x28>)
    3186:	4908      	ldr	r1, [pc, #32]	; (31a8 <udd_ctrl_send_zlp_in+0x2c>)
    3188:	0020      	movs	r0, r4
    318a:	4b08      	ldr	r3, [pc, #32]	; (31ac <udd_ctrl_send_zlp_in+0x30>)
    318c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    318e:	4b08      	ldr	r3, [pc, #32]	; (31b0 <udd_ctrl_send_zlp_in+0x34>)
    3190:	689a      	ldr	r2, [r3, #8]
    3192:	2300      	movs	r3, #0
    3194:	2100      	movs	r1, #0
    3196:	0020      	movs	r0, r4
    3198:	4c06      	ldr	r4, [pc, #24]	; (31b4 <udd_ctrl_send_zlp_in+0x38>)
    319a:	47a0      	blx	r4
}
    319c:	bd10      	pop	{r4, pc}
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	200002a6 	.word	0x200002a6
    31a4:	20000480 	.word	0x20000480
    31a8:	20000600 	.word	0x20000600
    31ac:	000041b1 	.word	0x000041b1
    31b0:	200005e8 	.word	0x200005e8
    31b4:	0000410d 	.word	0x0000410d

000031b8 <_usb_ep0_on_tansfer_fail>:
{
    31b8:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    31ba:	7989      	ldrb	r1, [r1, #6]
    31bc:	b24b      	sxtb	r3, r1
    31be:	2b00      	cmp	r3, #0
    31c0:	db06      	blt.n	31d0 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    31c2:	4b0e      	ldr	r3, [pc, #56]	; (31fc <_usb_ep0_on_tansfer_fail+0x44>)
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2b02      	cmp	r3, #2
    31c8:	d00f      	beq.n	31ea <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    31ca:	2b03      	cmp	r3, #3
    31cc:	d011      	beq.n	31f2 <_usb_ep0_on_tansfer_fail+0x3a>
}
    31ce:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    31d0:	4b0a      	ldr	r3, [pc, #40]	; (31fc <_usb_ep0_on_tansfer_fail+0x44>)
    31d2:	781b      	ldrb	r3, [r3, #0]
    31d4:	2b01      	cmp	r3, #1
    31d6:	d005      	beq.n	31e4 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    31d8:	2b04      	cmp	r3, #4
    31da:	d1f8      	bne.n	31ce <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    31dc:	4808      	ldr	r0, [pc, #32]	; (3200 <_usb_ep0_on_tansfer_fail+0x48>)
    31de:	4b09      	ldr	r3, [pc, #36]	; (3204 <_usb_ep0_on_tansfer_fail+0x4c>)
    31e0:	4798      	blx	r3
    31e2:	e7f4      	b.n	31ce <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    31e4:	4b08      	ldr	r3, [pc, #32]	; (3208 <_usb_ep0_on_tansfer_fail+0x50>)
    31e6:	4798      	blx	r3
    31e8:	e7f1      	b.n	31ce <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    31ea:	2204      	movs	r2, #4
    31ec:	4b03      	ldr	r3, [pc, #12]	; (31fc <_usb_ep0_on_tansfer_fail+0x44>)
    31ee:	701a      	strb	r2, [r3, #0]
    31f0:	e7ed      	b.n	31ce <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    31f2:	4803      	ldr	r0, [pc, #12]	; (3200 <_usb_ep0_on_tansfer_fail+0x48>)
    31f4:	4b03      	ldr	r3, [pc, #12]	; (3204 <_usb_ep0_on_tansfer_fail+0x4c>)
    31f6:	4798      	blx	r3
}
    31f8:	e7e9      	b.n	31ce <_usb_ep0_on_tansfer_fail+0x16>
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	200002a6 	.word	0x200002a6
    3200:	20000480 	.word	0x20000480
    3204:	00004061 	.word	0x00004061
    3208:	0000317d 	.word	0x0000317d

0000320c <udd_ctrl_in_sent>:
{
    320c:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    320e:	4b20      	ldr	r3, [pc, #128]	; (3290 <udd_ctrl_in_sent+0x84>)
    3210:	881b      	ldrh	r3, [r3, #0]
    3212:	4a20      	ldr	r2, [pc, #128]	; (3294 <udd_ctrl_in_sent+0x88>)
    3214:	8994      	ldrh	r4, [r2, #12]
    3216:	1ae4      	subs	r4, r4, r3
    3218:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    321a:	2c00      	cmp	r4, #0
    321c:	d118      	bne.n	3250 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    321e:	4a1e      	ldr	r2, [pc, #120]	; (3298 <udd_ctrl_in_sent+0x8c>)
    3220:	8811      	ldrh	r1, [r2, #0]
    3222:	185b      	adds	r3, r3, r1
    3224:	b29b      	uxth	r3, r3
    3226:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    3228:	4a1a      	ldr	r2, [pc, #104]	; (3294 <udd_ctrl_in_sent+0x88>)
    322a:	88d2      	ldrh	r2, [r2, #6]
    322c:	429a      	cmp	r2, r3
    322e:	d023      	beq.n	3278 <udd_ctrl_in_sent+0x6c>
    3230:	4b1a      	ldr	r3, [pc, #104]	; (329c <udd_ctrl_in_sent+0x90>)
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	2b00      	cmp	r3, #0
    3236:	d11f      	bne.n	3278 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3238:	4b16      	ldr	r3, [pc, #88]	; (3294 <udd_ctrl_in_sent+0x88>)
    323a:	695b      	ldr	r3, [r3, #20]
    323c:	2b00      	cmp	r3, #0
    323e:	d023      	beq.n	3288 <udd_ctrl_in_sent+0x7c>
    3240:	4798      	blx	r3
    3242:	2800      	cmp	r0, #0
    3244:	d020      	beq.n	3288 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    3246:	2200      	movs	r2, #0
    3248:	4b11      	ldr	r3, [pc, #68]	; (3290 <udd_ctrl_in_sent+0x84>)
    324a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    324c:	4b11      	ldr	r3, [pc, #68]	; (3294 <udd_ctrl_in_sent+0x88>)
    324e:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3250:	2c3f      	cmp	r4, #63	; 0x3f
    3252:	d919      	bls.n	3288 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3254:	2200      	movs	r2, #0
    3256:	4b11      	ldr	r3, [pc, #68]	; (329c <udd_ctrl_in_sent+0x90>)
    3258:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    325a:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    325c:	4d0c      	ldr	r5, [pc, #48]	; (3290 <udd_ctrl_in_sent+0x84>)
    325e:	882b      	ldrh	r3, [r5, #0]
    3260:	4a0c      	ldr	r2, [pc, #48]	; (3294 <udd_ctrl_in_sent+0x88>)
    3262:	6892      	ldr	r2, [r2, #8]
    3264:	18d2      	adds	r2, r2, r3
    3266:	0023      	movs	r3, r4
    3268:	2100      	movs	r1, #0
    326a:	480d      	ldr	r0, [pc, #52]	; (32a0 <udd_ctrl_in_sent+0x94>)
    326c:	4e0d      	ldr	r6, [pc, #52]	; (32a4 <udd_ctrl_in_sent+0x98>)
    326e:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3270:	882b      	ldrh	r3, [r5, #0]
    3272:	18e4      	adds	r4, r4, r3
    3274:	802c      	strh	r4, [r5, #0]
}
    3276:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3278:	2204      	movs	r2, #4
    327a:	4b0b      	ldr	r3, [pc, #44]	; (32a8 <udd_ctrl_in_sent+0x9c>)
    327c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    327e:	490b      	ldr	r1, [pc, #44]	; (32ac <udd_ctrl_in_sent+0xa0>)
    3280:	4807      	ldr	r0, [pc, #28]	; (32a0 <udd_ctrl_in_sent+0x94>)
    3282:	4b0b      	ldr	r3, [pc, #44]	; (32b0 <udd_ctrl_in_sent+0xa4>)
    3284:	4798      	blx	r3
			return;
    3286:	e7f6      	b.n	3276 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    3288:	2201      	movs	r2, #1
    328a:	4b04      	ldr	r3, [pc, #16]	; (329c <udd_ctrl_in_sent+0x90>)
    328c:	701a      	strb	r2, [r3, #0]
    328e:	e7e5      	b.n	325c <udd_ctrl_in_sent+0x50>
    3290:	200002a2 	.word	0x200002a2
    3294:	200005e8 	.word	0x200005e8
    3298:	200002a4 	.word	0x200002a4
    329c:	200002a0 	.word	0x200002a0
    32a0:	20000480 	.word	0x20000480
    32a4:	0000410d 	.word	0x0000410d
    32a8:	200002a6 	.word	0x200002a6
    32ac:	20000600 	.word	0x20000600
    32b0:	000041b1 	.word	0x000041b1

000032b4 <_usb_ep0_on_setup>:
{
    32b4:	b510      	push	{r4, lr}
    32b6:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    32b8:	4b2c      	ldr	r3, [pc, #176]	; (336c <_usb_ep0_on_setup+0xb8>)
    32ba:	781b      	ldrb	r3, [r3, #0]
    32bc:	2b00      	cmp	r3, #0
    32be:	d007      	beq.n	32d0 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    32c0:	4b2b      	ldr	r3, [pc, #172]	; (3370 <_usb_ep0_on_setup+0xbc>)
    32c2:	691b      	ldr	r3, [r3, #16]
    32c4:	2b00      	cmp	r3, #0
    32c6:	d000      	beq.n	32ca <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    32c8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    32ca:	2200      	movs	r2, #0
    32cc:	4b27      	ldr	r3, [pc, #156]	; (336c <_usb_ep0_on_setup+0xb8>)
    32ce:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    32d0:	8823      	ldrh	r3, [r4, #0]
    32d2:	2b08      	cmp	r3, #8
    32d4:	d002      	beq.n	32dc <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    32d6:	4b27      	ldr	r3, [pc, #156]	; (3374 <_usb_ep0_on_setup+0xc0>)
    32d8:	4798      	blx	r3
}
    32da:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    32dc:	4a24      	ldr	r2, [pc, #144]	; (3370 <_usb_ep0_on_setup+0xbc>)
    32de:	4b26      	ldr	r3, [pc, #152]	; (3378 <_usb_ep0_on_setup+0xc4>)
    32e0:	7819      	ldrb	r1, [r3, #0]
    32e2:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    32e4:	7859      	ldrb	r1, [r3, #1]
    32e6:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    32e8:	78d8      	ldrb	r0, [r3, #3]
    32ea:	0200      	lsls	r0, r0, #8
    32ec:	7899      	ldrb	r1, [r3, #2]
    32ee:	1809      	adds	r1, r1, r0
    32f0:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    32f2:	7958      	ldrb	r0, [r3, #5]
    32f4:	0200      	lsls	r0, r0, #8
    32f6:	7919      	ldrb	r1, [r3, #4]
    32f8:	1809      	adds	r1, r1, r0
    32fa:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    32fc:	79d9      	ldrb	r1, [r3, #7]
    32fe:	0209      	lsls	r1, r1, #8
    3300:	799b      	ldrb	r3, [r3, #6]
    3302:	185b      	adds	r3, r3, r1
    3304:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    3306:	4b1d      	ldr	r3, [pc, #116]	; (337c <_usb_ep0_on_setup+0xc8>)
    3308:	4798      	blx	r3
    330a:	2800      	cmp	r0, #0
    330c:	d016      	beq.n	333c <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    330e:	4b18      	ldr	r3, [pc, #96]	; (3370 <_usb_ep0_on_setup+0xbc>)
    3310:	781b      	ldrb	r3, [r3, #0]
    3312:	2b7f      	cmp	r3, #127	; 0x7f
    3314:	d815      	bhi.n	3342 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    3316:	4b16      	ldr	r3, [pc, #88]	; (3370 <_usb_ep0_on_setup+0xbc>)
    3318:	88db      	ldrh	r3, [r3, #6]
    331a:	2b00      	cmp	r3, #0
    331c:	d022      	beq.n	3364 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    331e:	2300      	movs	r3, #0
    3320:	4a17      	ldr	r2, [pc, #92]	; (3380 <_usb_ep0_on_setup+0xcc>)
    3322:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3324:	4a17      	ldr	r2, [pc, #92]	; (3384 <_usb_ep0_on_setup+0xd0>)
    3326:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    3328:	2201      	movs	r2, #1
    332a:	4b10      	ldr	r3, [pc, #64]	; (336c <_usb_ep0_on_setup+0xb8>)
    332c:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    332e:	2340      	movs	r3, #64	; 0x40
    3330:	4a11      	ldr	r2, [pc, #68]	; (3378 <_usb_ep0_on_setup+0xc4>)
    3332:	2100      	movs	r1, #0
    3334:	4814      	ldr	r0, [pc, #80]	; (3388 <_usb_ep0_on_setup+0xd4>)
    3336:	4c15      	ldr	r4, [pc, #84]	; (338c <_usb_ep0_on_setup+0xd8>)
    3338:	47a0      	blx	r4
    333a:	e7ce      	b.n	32da <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    333c:	4b0d      	ldr	r3, [pc, #52]	; (3374 <_usb_ep0_on_setup+0xc0>)
    333e:	4798      	blx	r3
			return;
    3340:	e7cb      	b.n	32da <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    3342:	2300      	movs	r3, #0
    3344:	4a0e      	ldr	r2, [pc, #56]	; (3380 <_usb_ep0_on_setup+0xcc>)
    3346:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3348:	4a0e      	ldr	r2, [pc, #56]	; (3384 <_usb_ep0_on_setup+0xd0>)
    334a:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    334c:	2202      	movs	r2, #2
    334e:	4b07      	ldr	r3, [pc, #28]	; (336c <_usb_ep0_on_setup+0xb8>)
    3350:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3352:	2340      	movs	r3, #64	; 0x40
    3354:	4a08      	ldr	r2, [pc, #32]	; (3378 <_usb_ep0_on_setup+0xc4>)
    3356:	2100      	movs	r1, #0
    3358:	480b      	ldr	r0, [pc, #44]	; (3388 <_usb_ep0_on_setup+0xd4>)
    335a:	4c0c      	ldr	r4, [pc, #48]	; (338c <_usb_ep0_on_setup+0xd8>)
    335c:	47a0      	blx	r4
			udd_ctrl_in_sent();
    335e:	4b0c      	ldr	r3, [pc, #48]	; (3390 <_usb_ep0_on_setup+0xdc>)
    3360:	4798      	blx	r3
    3362:	e7ba      	b.n	32da <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    3364:	4b0b      	ldr	r3, [pc, #44]	; (3394 <_usb_ep0_on_setup+0xe0>)
    3366:	4798      	blx	r3
				return;
    3368:	e7b7      	b.n	32da <_usb_ep0_on_setup+0x26>
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	200002a6 	.word	0x200002a6
    3370:	200005e8 	.word	0x200005e8
    3374:	00002fd5 	.word	0x00002fd5
    3378:	20000600 	.word	0x20000600
    337c:	00000c9d 	.word	0x00000c9d
    3380:	200002a4 	.word	0x200002a4
    3384:	200002a2 	.word	0x200002a2
    3388:	20000480 	.word	0x20000480
    338c:	00004161 	.word	0x00004161
    3390:	0000320d 	.word	0x0000320d
    3394:	0000317d 	.word	0x0000317d

00003398 <_usb_on_sof_notify>:
{
    3398:	b510      	push	{r4, lr}
	udc_sof_notify();
    339a:	4b02      	ldr	r3, [pc, #8]	; (33a4 <_usb_on_sof_notify+0xc>)
    339c:	4798      	blx	r3
	UDC_SOF_EVENT();
    339e:	4b02      	ldr	r3, [pc, #8]	; (33a8 <_usb_on_sof_notify+0x10>)
    33a0:	4798      	blx	r3
}
    33a2:	bd10      	pop	{r4, pc}
    33a4:	00000c59 	.word	0x00000c59
    33a8:	00004e2d 	.word	0x00004e2d

000033ac <_usb_on_suspend>:
{
    33ac:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    33ae:	4c07      	ldr	r4, [pc, #28]	; (33cc <_usb_on_suspend+0x20>)
    33b0:	2104      	movs	r1, #4
    33b2:	0020      	movs	r0, r4
    33b4:	4b06      	ldr	r3, [pc, #24]	; (33d0 <_usb_on_suspend+0x24>)
    33b6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    33b8:	2102      	movs	r1, #2
    33ba:	0020      	movs	r0, r4
    33bc:	4b05      	ldr	r3, [pc, #20]	; (33d4 <_usb_on_suspend+0x28>)
    33be:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    33c0:	2001      	movs	r0, #1
    33c2:	4b05      	ldr	r3, [pc, #20]	; (33d8 <_usb_on_suspend+0x2c>)
    33c4:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    33c6:	4b05      	ldr	r3, [pc, #20]	; (33dc <_usb_on_suspend+0x30>)
    33c8:	4798      	blx	r3
}
    33ca:	bd10      	pop	{r4, pc}
    33cc:	20000480 	.word	0x20000480
    33d0:	00003ba1 	.word	0x00003ba1
    33d4:	00003b81 	.word	0x00003b81
    33d8:	00002d3d 	.word	0x00002d3d
    33dc:	00004e15 	.word	0x00004e15

000033e0 <udd_ep_abort>:
{
    33e0:	b510      	push	{r4, lr}
    33e2:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    33e4:	0001      	movs	r1, r0
    33e6:	480a      	ldr	r0, [pc, #40]	; (3410 <udd_ep_abort+0x30>)
    33e8:	4b0a      	ldr	r3, [pc, #40]	; (3414 <udd_ep_abort+0x34>)
    33ea:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    33ec:	0020      	movs	r0, r4
    33ee:	4b0a      	ldr	r3, [pc, #40]	; (3418 <udd_ep_abort+0x38>)
    33f0:	4798      	blx	r3
	if (!ptr_job->busy) {
    33f2:	7c83      	ldrb	r3, [r0, #18]
    33f4:	07db      	lsls	r3, r3, #31
    33f6:	d50a      	bpl.n	340e <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    33f8:	7c83      	ldrb	r3, [r0, #18]
    33fa:	2201      	movs	r2, #1
    33fc:	4393      	bics	r3, r2
    33fe:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3400:	6803      	ldr	r3, [r0, #0]
    3402:	2b00      	cmp	r3, #0
    3404:	d003      	beq.n	340e <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    3406:	68c1      	ldr	r1, [r0, #12]
    3408:	0022      	movs	r2, r4
    340a:	2001      	movs	r0, #1
    340c:	4798      	blx	r3
}
    340e:	bd10      	pop	{r4, pc}
    3410:	20000480 	.word	0x20000480
    3414:	00004001 	.word	0x00004001
    3418:	00002dfd 	.word	0x00002dfd

0000341c <udd_is_high_speed>:
}
    341c:	2000      	movs	r0, #0
    341e:	4770      	bx	lr

00003420 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3420:	4b02      	ldr	r3, [pc, #8]	; (342c <udd_get_frame_number+0xc>)
    3422:	681b      	ldr	r3, [r3, #0]
    3424:	8a18      	ldrh	r0, [r3, #16]
    3426:	0480      	lsls	r0, r0, #18
    3428:	0d40      	lsrs	r0, r0, #21
}
    342a:	4770      	bx	lr
    342c:	20000480 	.word	0x20000480

00003430 <udd_get_micro_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    3430:	4b02      	ldr	r3, [pc, #8]	; (343c <udd_get_micro_frame_number+0xc>)
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	8a18      	ldrh	r0, [r3, #16]
    3436:	b280      	uxth	r0, r0
}
    3438:	4770      	bx	lr
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	20000480 	.word	0x20000480

00003440 <udd_ep_free>:
{
    3440:	b570      	push	{r4, r5, r6, lr}
    3442:	b082      	sub	sp, #8
    3444:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    3446:	ad01      	add	r5, sp, #4
    3448:	0028      	movs	r0, r5
    344a:	4b0d      	ldr	r3, [pc, #52]	; (3480 <udd_ep_free+0x40>)
    344c:	4798      	blx	r3
	udd_ep_abort(ep);
    344e:	0020      	movs	r0, r4
    3450:	4b0c      	ldr	r3, [pc, #48]	; (3484 <udd_ep_free+0x44>)
    3452:	4798      	blx	r3
	config_ep.ep_address = ep;
    3454:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3456:	2300      	movs	r3, #0
    3458:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    345a:	4e0b      	ldr	r6, [pc, #44]	; (3488 <udd_ep_free+0x48>)
    345c:	0029      	movs	r1, r5
    345e:	0030      	movs	r0, r6
    3460:	4b0a      	ldr	r3, [pc, #40]	; (348c <udd_ep_free+0x4c>)
    3462:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3464:	210f      	movs	r1, #15
    3466:	4021      	ands	r1, r4
    3468:	2200      	movs	r2, #0
    346a:	0030      	movs	r0, r6
    346c:	4b08      	ldr	r3, [pc, #32]	; (3490 <udd_ep_free+0x50>)
    346e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3470:	2200      	movs	r2, #0
    3472:	0021      	movs	r1, r4
    3474:	0030      	movs	r0, r6
    3476:	4b07      	ldr	r3, [pc, #28]	; (3494 <udd_ep_free+0x54>)
    3478:	4798      	blx	r3
}
    347a:	b002      	add	sp, #8
    347c:	bd70      	pop	{r4, r5, r6, pc}
    347e:	46c0      	nop			; (mov r8, r8)
    3480:	00003dad 	.word	0x00003dad
    3484:	000033e1 	.word	0x000033e1
    3488:	20000480 	.word	0x20000480
    348c:	00003dbd 	.word	0x00003dbd
    3490:	00003be5 	.word	0x00003be5
    3494:	00003cdd 	.word	0x00003cdd

00003498 <udd_ep_alloc>:
{
    3498:	b5f0      	push	{r4, r5, r6, r7, lr}
    349a:	b083      	sub	sp, #12
    349c:	0005      	movs	r5, r0
    349e:	000f      	movs	r7, r1
    34a0:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    34a2:	ae01      	add	r6, sp, #4
    34a4:	0030      	movs	r0, r6
    34a6:	4b36      	ldr	r3, [pc, #216]	; (3580 <udd_ep_alloc+0xe8>)
    34a8:	4798      	blx	r3
	config_ep.ep_address = ep;
    34aa:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    34ac:	2c08      	cmp	r4, #8
    34ae:	d813      	bhi.n	34d8 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    34b0:	2200      	movs	r2, #0
    34b2:	ab01      	add	r3, sp, #4
    34b4:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    34b6:	0028      	movs	r0, r5
    34b8:	4b32      	ldr	r3, [pc, #200]	; (3584 <udd_ep_alloc+0xec>)
    34ba:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    34bc:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    34be:	2103      	movs	r1, #3
    34c0:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    34c2:	2901      	cmp	r1, #1
    34c4:	d038      	beq.n	3538 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    34c6:	2902      	cmp	r1, #2
    34c8:	d043      	beq.n	3552 <udd_ep_alloc+0xba>
		return false;
    34ca:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    34cc:	2903      	cmp	r1, #3
    34ce:	d13d      	bne.n	354c <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    34d0:	2204      	movs	r2, #4
    34d2:	ab01      	add	r3, sp, #4
    34d4:	70da      	strb	r2, [r3, #3]
    34d6:	e032      	b.n	353e <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    34d8:	2c10      	cmp	r4, #16
    34da:	d803      	bhi.n	34e4 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    34dc:	2201      	movs	r2, #1
    34de:	ab01      	add	r3, sp, #4
    34e0:	705a      	strb	r2, [r3, #1]
    34e2:	e7e8      	b.n	34b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    34e4:	2c20      	cmp	r4, #32
    34e6:	d803      	bhi.n	34f0 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    34e8:	2202      	movs	r2, #2
    34ea:	ab01      	add	r3, sp, #4
    34ec:	705a      	strb	r2, [r3, #1]
    34ee:	e7e2      	b.n	34b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    34f0:	2c40      	cmp	r4, #64	; 0x40
    34f2:	d803      	bhi.n	34fc <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    34f4:	2203      	movs	r2, #3
    34f6:	ab01      	add	r3, sp, #4
    34f8:	705a      	strb	r2, [r3, #1]
    34fa:	e7dc      	b.n	34b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    34fc:	2c80      	cmp	r4, #128	; 0x80
    34fe:	d803      	bhi.n	3508 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    3500:	2204      	movs	r2, #4
    3502:	ab01      	add	r3, sp, #4
    3504:	705a      	strb	r2, [r3, #1]
    3506:	e7d6      	b.n	34b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    3508:	2380      	movs	r3, #128	; 0x80
    350a:	005b      	lsls	r3, r3, #1
    350c:	429c      	cmp	r4, r3
    350e:	d803      	bhi.n	3518 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    3510:	2205      	movs	r2, #5
    3512:	ab01      	add	r3, sp, #4
    3514:	705a      	strb	r2, [r3, #1]
    3516:	e7ce      	b.n	34b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3518:	2380      	movs	r3, #128	; 0x80
    351a:	009b      	lsls	r3, r3, #2
    351c:	429c      	cmp	r4, r3
    351e:	d803      	bhi.n	3528 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    3520:	2206      	movs	r2, #6
    3522:	ab01      	add	r3, sp, #4
    3524:	705a      	strb	r2, [r3, #1]
    3526:	e7c6      	b.n	34b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3528:	4a17      	ldr	r2, [pc, #92]	; (3588 <udd_ep_alloc+0xf0>)
		return false;
    352a:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    352c:	4294      	cmp	r4, r2
    352e:	d80d      	bhi.n	354c <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    3530:	2207      	movs	r2, #7
    3532:	ab01      	add	r3, sp, #4
    3534:	705a      	strb	r2, [r3, #1]
    3536:	e7be      	b.n	34b6 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3538:	2202      	movs	r2, #2
    353a:	ab01      	add	r3, sp, #4
    353c:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    353e:	a901      	add	r1, sp, #4
    3540:	4812      	ldr	r0, [pc, #72]	; (358c <udd_ep_alloc+0xf4>)
    3542:	4b13      	ldr	r3, [pc, #76]	; (3590 <udd_ep_alloc+0xf8>)
    3544:	4798      	blx	r3
		return false;
    3546:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3548:	2800      	cmp	r0, #0
    354a:	d006      	beq.n	355a <udd_ep_alloc+0xc2>
}
    354c:	0018      	movs	r0, r3
    354e:	b003      	add	sp, #12
    3550:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    3552:	2203      	movs	r2, #3
    3554:	ab01      	add	r3, sp, #4
    3556:	70da      	strb	r2, [r3, #3]
    3558:	e7f1      	b.n	353e <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    355a:	210f      	movs	r1, #15
    355c:	4029      	ands	r1, r5
    355e:	4c0b      	ldr	r4, [pc, #44]	; (358c <udd_ep_alloc+0xf4>)
    3560:	4b0c      	ldr	r3, [pc, #48]	; (3594 <udd_ep_alloc+0xfc>)
    3562:	2200      	movs	r2, #0
    3564:	0020      	movs	r0, r4
    3566:	4e0c      	ldr	r6, [pc, #48]	; (3598 <udd_ep_alloc+0x100>)
    3568:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    356a:	2200      	movs	r2, #0
    356c:	0029      	movs	r1, r5
    356e:	0020      	movs	r0, r4
    3570:	4e0a      	ldr	r6, [pc, #40]	; (359c <udd_ep_alloc+0x104>)
    3572:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3574:	2201      	movs	r2, #1
    3576:	0029      	movs	r1, r5
    3578:	0020      	movs	r0, r4
    357a:	47b0      	blx	r6
	return true;
    357c:	2301      	movs	r3, #1
    357e:	e7e5      	b.n	354c <udd_ep_alloc+0xb4>
    3580:	00003dad 	.word	0x00003dad
    3584:	00002dfd 	.word	0x00002dfd
    3588:	000003ff 	.word	0x000003ff
    358c:	20000480 	.word	0x20000480
    3590:	00003dbd 	.word	0x00003dbd
    3594:	00002e21 	.word	0x00002e21
    3598:	00003bbd 	.word	0x00003bbd
    359c:	00003c0d 	.word	0x00003c0d

000035a0 <udd_ep_is_halted>:
{
    35a0:	b510      	push	{r4, lr}
    35a2:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    35a4:	4801      	ldr	r0, [pc, #4]	; (35ac <udd_ep_is_halted+0xc>)
    35a6:	4b02      	ldr	r3, [pc, #8]	; (35b0 <udd_ep_is_halted+0x10>)
    35a8:	4798      	blx	r3
}
    35aa:	bd10      	pop	{r4, pc}
    35ac:	20000480 	.word	0x20000480
    35b0:	00004037 	.word	0x00004037

000035b4 <udd_ep_set_halt>:
{
    35b4:	b510      	push	{r4, lr}
    35b6:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    35b8:	230f      	movs	r3, #15
    35ba:	4003      	ands	r3, r0
		return false;
    35bc:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    35be:	2b03      	cmp	r3, #3
    35c0:	d900      	bls.n	35c4 <udd_ep_set_halt+0x10>
}
    35c2:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    35c4:	0021      	movs	r1, r4
    35c6:	4804      	ldr	r0, [pc, #16]	; (35d8 <udd_ep_set_halt+0x24>)
    35c8:	4b04      	ldr	r3, [pc, #16]	; (35dc <udd_ep_set_halt+0x28>)
    35ca:	4798      	blx	r3
	udd_ep_abort(ep);
    35cc:	0020      	movs	r0, r4
    35ce:	4b04      	ldr	r3, [pc, #16]	; (35e0 <udd_ep_set_halt+0x2c>)
    35d0:	4798      	blx	r3
	return true;
    35d2:	2001      	movs	r0, #1
    35d4:	e7f5      	b.n	35c2 <udd_ep_set_halt+0xe>
    35d6:	46c0      	nop			; (mov r8, r8)
    35d8:	20000480 	.word	0x20000480
    35dc:	00004061 	.word	0x00004061
    35e0:	000033e1 	.word	0x000033e1

000035e4 <_usb_ep0_on_tansfer_ok>:
{
    35e4:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    35e6:	4b34      	ldr	r3, [pc, #208]	; (36b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    35e8:	781b      	ldrb	r3, [r3, #0]
    35ea:	2b01      	cmp	r3, #1
    35ec:	d00a      	beq.n	3604 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    35ee:	2b02      	cmp	r3, #2
    35f0:	d05f      	beq.n	36b2 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    35f2:	4b32      	ldr	r3, [pc, #200]	; (36bc <_usb_ep0_on_tansfer_ok+0xd8>)
    35f4:	691b      	ldr	r3, [r3, #16]
    35f6:	2b00      	cmp	r3, #0
    35f8:	d000      	beq.n	35fc <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    35fa:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    35fc:	2200      	movs	r2, #0
    35fe:	4b2e      	ldr	r3, [pc, #184]	; (36b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3600:	701a      	strb	r2, [r3, #0]
}
    3602:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3604:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3606:	4b2d      	ldr	r3, [pc, #180]	; (36bc <_usb_ep0_on_tansfer_ok+0xd8>)
    3608:	899b      	ldrh	r3, [r3, #12]
    360a:	4a2d      	ldr	r2, [pc, #180]	; (36c0 <_usb_ep0_on_tansfer_ok+0xdc>)
    360c:	8814      	ldrh	r4, [r2, #0]
    360e:	1962      	adds	r2, r4, r5
    3610:	4293      	cmp	r3, r2
    3612:	da01      	bge.n	3618 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3614:	1b1d      	subs	r5, r3, r4
    3616:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3618:	4b28      	ldr	r3, [pc, #160]	; (36bc <_usb_ep0_on_tansfer_ok+0xd8>)
    361a:	6898      	ldr	r0, [r3, #8]
    361c:	1900      	adds	r0, r0, r4
    361e:	002a      	movs	r2, r5
    3620:	4928      	ldr	r1, [pc, #160]	; (36c4 <_usb_ep0_on_tansfer_ok+0xe0>)
    3622:	4b29      	ldr	r3, [pc, #164]	; (36c8 <_usb_ep0_on_tansfer_ok+0xe4>)
    3624:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3626:	1964      	adds	r4, r4, r5
    3628:	b2a4      	uxth	r4, r4
    362a:	4b25      	ldr	r3, [pc, #148]	; (36c0 <_usb_ep0_on_tansfer_ok+0xdc>)
    362c:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    362e:	2d40      	cmp	r5, #64	; 0x40
    3630:	d00a      	beq.n	3648 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3632:	4b22      	ldr	r3, [pc, #136]	; (36bc <_usb_ep0_on_tansfer_ok+0xd8>)
    3634:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3636:	695b      	ldr	r3, [r3, #20]
    3638:	2b00      	cmp	r3, #0
    363a:	d002      	beq.n	3642 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    363c:	4798      	blx	r3
    363e:	2800      	cmp	r0, #0
    3640:	d014      	beq.n	366c <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    3642:	4b22      	ldr	r3, [pc, #136]	; (36cc <_usb_ep0_on_tansfer_ok+0xe8>)
    3644:	4798      	blx	r3
    3646:	e7dc      	b.n	3602 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3648:	4b1c      	ldr	r3, [pc, #112]	; (36bc <_usb_ep0_on_tansfer_ok+0xd8>)
    364a:	88da      	ldrh	r2, [r3, #6]
    364c:	4b20      	ldr	r3, [pc, #128]	; (36d0 <_usb_ep0_on_tansfer_ok+0xec>)
    364e:	881b      	ldrh	r3, [r3, #0]
    3650:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3652:	429a      	cmp	r2, r3
    3654:	dded      	ble.n	3632 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3656:	4b19      	ldr	r3, [pc, #100]	; (36bc <_usb_ep0_on_tansfer_ok+0xd8>)
    3658:	899b      	ldrh	r3, [r3, #12]
    365a:	42a3      	cmp	r3, r4
    365c:	d00c      	beq.n	3678 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    365e:	2340      	movs	r3, #64	; 0x40
    3660:	4a18      	ldr	r2, [pc, #96]	; (36c4 <_usb_ep0_on_tansfer_ok+0xe0>)
    3662:	2100      	movs	r1, #0
    3664:	481b      	ldr	r0, [pc, #108]	; (36d4 <_usb_ep0_on_tansfer_ok+0xf0>)
    3666:	4c1c      	ldr	r4, [pc, #112]	; (36d8 <_usb_ep0_on_tansfer_ok+0xf4>)
    3668:	47a0      	blx	r4
    366a:	e7ca      	b.n	3602 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    366c:	2205      	movs	r2, #5
    366e:	4b12      	ldr	r3, [pc, #72]	; (36b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3670:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    3672:	4b1a      	ldr	r3, [pc, #104]	; (36dc <_usb_ep0_on_tansfer_ok+0xf8>)
    3674:	4798      	blx	r3
    3676:	e7c4      	b.n	3602 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3678:	4b10      	ldr	r3, [pc, #64]	; (36bc <_usb_ep0_on_tansfer_ok+0xd8>)
    367a:	695b      	ldr	r3, [r3, #20]
    367c:	2b00      	cmp	r3, #0
    367e:	d00b      	beq.n	3698 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3680:	4798      	blx	r3
    3682:	2800      	cmp	r0, #0
    3684:	d00f      	beq.n	36a6 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3686:	4912      	ldr	r1, [pc, #72]	; (36d0 <_usb_ep0_on_tansfer_ok+0xec>)
    3688:	4a0d      	ldr	r2, [pc, #52]	; (36c0 <_usb_ep0_on_tansfer_ok+0xdc>)
    368a:	880b      	ldrh	r3, [r1, #0]
    368c:	8810      	ldrh	r0, [r2, #0]
    368e:	181b      	adds	r3, r3, r0
    3690:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    3692:	2300      	movs	r3, #0
    3694:	8013      	strh	r3, [r2, #0]
    3696:	e7e2      	b.n	365e <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3698:	2205      	movs	r2, #5
    369a:	4b07      	ldr	r3, [pc, #28]	; (36b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    369c:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    369e:	2000      	movs	r0, #0
    36a0:	4b0e      	ldr	r3, [pc, #56]	; (36dc <_usb_ep0_on_tansfer_ok+0xf8>)
    36a2:	4798      	blx	r3
    36a4:	e7ad      	b.n	3602 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    36a6:	2205      	movs	r2, #5
    36a8:	4b03      	ldr	r3, [pc, #12]	; (36b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    36aa:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    36ac:	4b0b      	ldr	r3, [pc, #44]	; (36dc <_usb_ep0_on_tansfer_ok+0xf8>)
    36ae:	4798      	blx	r3
    36b0:	e7a7      	b.n	3602 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    36b2:	4b0b      	ldr	r3, [pc, #44]	; (36e0 <_usb_ep0_on_tansfer_ok+0xfc>)
    36b4:	4798      	blx	r3
    36b6:	e7a4      	b.n	3602 <_usb_ep0_on_tansfer_ok+0x1e>
    36b8:	200002a6 	.word	0x200002a6
    36bc:	200005e8 	.word	0x200005e8
    36c0:	200002a2 	.word	0x200002a2
    36c4:	20000600 	.word	0x20000600
    36c8:	00005589 	.word	0x00005589
    36cc:	0000317d 	.word	0x0000317d
    36d0:	200002a4 	.word	0x200002a4
    36d4:	20000480 	.word	0x20000480
    36d8:	00004161 	.word	0x00004161
    36dc:	000035b5 	.word	0x000035b5
    36e0:	0000320d 	.word	0x0000320d

000036e4 <udd_ep_clear_halt>:
{
    36e4:	b570      	push	{r4, r5, r6, lr}
    36e6:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36e8:	230f      	movs	r3, #15
    36ea:	4003      	ands	r3, r0
		return false;
    36ec:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36ee:	2b03      	cmp	r3, #3
    36f0:	d900      	bls.n	36f4 <udd_ep_clear_halt+0x10>
}
    36f2:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    36f4:	0020      	movs	r0, r4
    36f6:	4b09      	ldr	r3, [pc, #36]	; (371c <udd_ep_clear_halt+0x38>)
    36f8:	4798      	blx	r3
    36fa:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    36fc:	0021      	movs	r1, r4
    36fe:	4808      	ldr	r0, [pc, #32]	; (3720 <udd_ep_clear_halt+0x3c>)
    3700:	4b08      	ldr	r3, [pc, #32]	; (3724 <udd_ep_clear_halt+0x40>)
    3702:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3704:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3706:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3708:	07db      	lsls	r3, r3, #31
    370a:	d5f2      	bpl.n	36f2 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    370c:	7cab      	ldrb	r3, [r5, #18]
    370e:	2201      	movs	r2, #1
    3710:	4393      	bics	r3, r2
    3712:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3714:	682b      	ldr	r3, [r5, #0]
    3716:	4798      	blx	r3
	return true;
    3718:	2001      	movs	r0, #1
    371a:	e7ea      	b.n	36f2 <udd_ep_clear_halt+0xe>
    371c:	00002dfd 	.word	0x00002dfd
    3720:	20000480 	.word	0x20000480
    3724:	00004087 	.word	0x00004087

00003728 <udd_ep_run>:
{
    3728:	b5f0      	push	{r4, r5, r6, r7, lr}
    372a:	b087      	sub	sp, #28
    372c:	0005      	movs	r5, r0
    372e:	9103      	str	r1, [sp, #12]
    3730:	9202      	str	r2, [sp, #8]
    3732:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3734:	260f      	movs	r6, #15
    3736:	4006      	ands	r6, r0
		return false;
    3738:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    373a:	2e03      	cmp	r6, #3
    373c:	d902      	bls.n	3744 <udd_ep_run+0x1c>
}
    373e:	0020      	movs	r0, r4
    3740:	b007      	add	sp, #28
    3742:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3744:	4b64      	ldr	r3, [pc, #400]	; (38d8 <udd_ep_run+0x1b0>)
    3746:	4798      	blx	r3
    3748:	1e04      	subs	r4, r0, #0
    374a:	d000      	beq.n	374e <udd_ep_run+0x26>
    374c:	e0bd      	b.n	38ca <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    374e:	0028      	movs	r0, r5
    3750:	4b62      	ldr	r3, [pc, #392]	; (38dc <udd_ep_run+0x1b4>)
    3752:	4798      	blx	r3
    3754:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3756:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    375a:	425a      	negs	r2, r3
    375c:	4153      	adcs	r3, r2
    375e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3760:	b672      	cpsid	i
    3762:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3766:	2200      	movs	r2, #0
    3768:	4b5d      	ldr	r3, [pc, #372]	; (38e0 <udd_ep_run+0x1b8>)
    376a:	701a      	strb	r2, [r3, #0]
	return flags;
    376c:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    376e:	7c83      	ldrb	r3, [r0, #18]
    3770:	07db      	lsls	r3, r3, #31
    3772:	d508      	bpl.n	3786 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3774:	2a00      	cmp	r2, #0
    3776:	d0e2      	beq.n	373e <udd_ep_run+0x16>
		cpu_irq_enable();
    3778:	2201      	movs	r2, #1
    377a:	4b59      	ldr	r3, [pc, #356]	; (38e0 <udd_ep_run+0x1b8>)
    377c:	701a      	strb	r2, [r3, #0]
    377e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3782:	b662      	cpsie	i
    3784:	e7db      	b.n	373e <udd_ep_run+0x16>
	ptr_job->busy = true;
    3786:	7c83      	ldrb	r3, [r0, #18]
    3788:	2101      	movs	r1, #1
    378a:	430b      	orrs	r3, r1
    378c:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    378e:	2a00      	cmp	r2, #0
    3790:	d005      	beq.n	379e <udd_ep_run+0x76>
		cpu_irq_enable();
    3792:	2201      	movs	r2, #1
    3794:	4b52      	ldr	r3, [pc, #328]	; (38e0 <udd_ep_run+0x1b8>)
    3796:	701a      	strb	r2, [r3, #0]
    3798:	f3bf 8f5f 	dmb	sy
    379c:	b662      	cpsie	i
	ptr_job->buf = buf;
    379e:	9b02      	ldr	r3, [sp, #8]
    37a0:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    37a2:	9b01      	ldr	r3, [sp, #4]
    37a4:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    37a6:	2300      	movs	r3, #0
    37a8:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    37aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    37ac:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    37ae:	2301      	movs	r3, #1
    37b0:	9a03      	ldr	r2, [sp, #12]
    37b2:	4013      	ands	r3, r2
    37b4:	005a      	lsls	r2, r3, #1
    37b6:	7cbb      	ldrb	r3, [r7, #18]
    37b8:	2102      	movs	r1, #2
    37ba:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    37bc:	4313      	orrs	r3, r2
    37be:	2204      	movs	r2, #4
    37c0:	4393      	bics	r3, r2
    37c2:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    37c4:	b26b      	sxtb	r3, r5
    37c6:	2b00      	cmp	r3, #0
    37c8:	db20      	blt.n	380c <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    37ca:	9b01      	ldr	r3, [sp, #4]
    37cc:	2b00      	cmp	r3, #0
    37ce:	d06f      	beq.n	38b0 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    37d0:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    37d2:	4b44      	ldr	r3, [pc, #272]	; (38e4 <udd_ep_run+0x1bc>)
    37d4:	429c      	cmp	r4, r3
    37d6:	d95a      	bls.n	388e <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    37d8:	8a39      	ldrh	r1, [r7, #16]
    37da:	001c      	movs	r4, r3
    37dc:	0018      	movs	r0, r3
    37de:	4b42      	ldr	r3, [pc, #264]	; (38e8 <udd_ep_run+0x1c0>)
    37e0:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    37e2:	1a63      	subs	r3, r4, r1
    37e4:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    37e6:	8a3b      	ldrh	r3, [r7, #16]
    37e8:	429a      	cmp	r2, r3
    37ea:	d257      	bcs.n	389c <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    37ec:	7cba      	ldrb	r2, [r7, #18]
    37ee:	2104      	movs	r1, #4
    37f0:	430a      	orrs	r2, r1
    37f2:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    37f4:	1e72      	subs	r2, r6, #1
    37f6:	0192      	lsls	r2, r2, #6
    37f8:	493c      	ldr	r1, [pc, #240]	; (38ec <udd_ep_run+0x1c4>)
    37fa:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    37fc:	0031      	movs	r1, r6
    37fe:	483c      	ldr	r0, [pc, #240]	; (38f0 <udd_ep_run+0x1c8>)
    3800:	4c3c      	ldr	r4, [pc, #240]	; (38f4 <udd_ep_run+0x1cc>)
    3802:	47a0      	blx	r4
				return (STATUS_OK ==
    3804:	4244      	negs	r4, r0
    3806:	4144      	adcs	r4, r0
    3808:	b2e4      	uxtb	r4, r4
    380a:	e798      	b.n	373e <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    380c:	9b01      	ldr	r3, [sp, #4]
    380e:	2b00      	cmp	r3, #0
    3810:	d027      	beq.n	3862 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3812:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3814:	4b33      	ldr	r3, [pc, #204]	; (38e4 <udd_ep_run+0x1bc>)
    3816:	429d      	cmp	r5, r3
    3818:	d906      	bls.n	3828 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    381a:	8a39      	ldrh	r1, [r7, #16]
    381c:	001d      	movs	r5, r3
    381e:	0018      	movs	r0, r3
    3820:	4b31      	ldr	r3, [pc, #196]	; (38e8 <udd_ep_run+0x1c0>)
    3822:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3824:	1a6b      	subs	r3, r5, r1
    3826:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3828:	7cbb      	ldrb	r3, [r7, #18]
    382a:	079b      	lsls	r3, r3, #30
    382c:	d507      	bpl.n	383e <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    382e:	8a39      	ldrh	r1, [r7, #16]
    3830:	0028      	movs	r0, r5
    3832:	4b31      	ldr	r3, [pc, #196]	; (38f8 <udd_ep_run+0x1d0>)
    3834:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3836:	b289      	uxth	r1, r1
    3838:	424c      	negs	r4, r1
    383a:	414c      	adcs	r4, r1
    383c:	b2e4      	uxtb	r4, r4
    383e:	2001      	movs	r0, #1
    3840:	4020      	ands	r0, r4
    3842:	0040      	lsls	r0, r0, #1
    3844:	7cbc      	ldrb	r4, [r7, #18]
    3846:	2302      	movs	r3, #2
    3848:	439c      	bics	r4, r3
    384a:	4304      	orrs	r4, r0
    384c:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    384e:	002b      	movs	r3, r5
    3850:	9a02      	ldr	r2, [sp, #8]
    3852:	0031      	movs	r1, r6
    3854:	4826      	ldr	r0, [pc, #152]	; (38f0 <udd_ep_run+0x1c8>)
    3856:	4c29      	ldr	r4, [pc, #164]	; (38fc <udd_ep_run+0x1d4>)
    3858:	47a0      	blx	r4
		return (STATUS_OK ==
    385a:	4244      	negs	r4, r0
    385c:	4144      	adcs	r4, r0
    385e:	b2e4      	uxtb	r4, r4
    3860:	e76d      	b.n	373e <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3862:	7cbb      	ldrb	r3, [r7, #18]
    3864:	079b      	lsls	r3, r3, #30
    3866:	d505      	bpl.n	3874 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3868:	7cbb      	ldrb	r3, [r7, #18]
    386a:	2202      	movs	r2, #2
    386c:	4393      	bics	r3, r2
    386e:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3870:	2500      	movs	r5, #0
    3872:	e7ec      	b.n	384e <udd_ep_run+0x126>
			ptr_job->busy = false;
    3874:	7cbb      	ldrb	r3, [r7, #18]
    3876:	2201      	movs	r2, #1
    3878:	4393      	bics	r3, r2
    387a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    387c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    387e:	2b00      	cmp	r3, #0
    3880:	d025      	beq.n	38ce <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3882:	002a      	movs	r2, r5
    3884:	2100      	movs	r1, #0
    3886:	2000      	movs	r0, #0
    3888:	4798      	blx	r3
			return true;
    388a:	2401      	movs	r4, #1
    388c:	e757      	b.n	373e <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    388e:	8a39      	ldrh	r1, [r7, #16]
    3890:	0020      	movs	r0, r4
    3892:	4b19      	ldr	r3, [pc, #100]	; (38f8 <udd_ep_run+0x1d0>)
    3894:	4798      	blx	r3
    3896:	1a63      	subs	r3, r4, r1
    3898:	b29a      	uxth	r2, r3
    389a:	e7a4      	b.n	37e6 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    389c:	0013      	movs	r3, r2
    389e:	9a02      	ldr	r2, [sp, #8]
    38a0:	0031      	movs	r1, r6
    38a2:	4813      	ldr	r0, [pc, #76]	; (38f0 <udd_ep_run+0x1c8>)
    38a4:	4c13      	ldr	r4, [pc, #76]	; (38f4 <udd_ep_run+0x1cc>)
    38a6:	47a0      	blx	r4
				return (STATUS_OK ==
    38a8:	4244      	negs	r4, r0
    38aa:	4144      	adcs	r4, r0
    38ac:	b2e4      	uxtb	r4, r4
    38ae:	e746      	b.n	373e <udd_ep_run+0x16>
			ptr_job->busy = false;
    38b0:	7cbb      	ldrb	r3, [r7, #18]
    38b2:	2201      	movs	r2, #1
    38b4:	4393      	bics	r3, r2
    38b6:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    38b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    38ba:	2b00      	cmp	r3, #0
    38bc:	d009      	beq.n	38d2 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    38be:	002a      	movs	r2, r5
    38c0:	2100      	movs	r1, #0
    38c2:	2000      	movs	r0, #0
    38c4:	4798      	blx	r3
			return true;
    38c6:	2401      	movs	r4, #1
    38c8:	e739      	b.n	373e <udd_ep_run+0x16>
		return false;
    38ca:	2400      	movs	r4, #0
    38cc:	e737      	b.n	373e <udd_ep_run+0x16>
			return true;
    38ce:	2401      	movs	r4, #1
    38d0:	e735      	b.n	373e <udd_ep_run+0x16>
			return true;
    38d2:	2401      	movs	r4, #1
    38d4:	e733      	b.n	373e <udd_ep_run+0x16>
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	000035a1 	.word	0x000035a1
    38dc:	00002dfd 	.word	0x00002dfd
    38e0:	200000e8 	.word	0x200000e8
    38e4:	00001fff 	.word	0x00001fff
    38e8:	000054a1 	.word	0x000054a1
    38ec:	200003c0 	.word	0x200003c0
    38f0:	20000480 	.word	0x20000480
    38f4:	00004161 	.word	0x00004161
    38f8:	000052cd 	.word	0x000052cd
    38fc:	0000410d 	.word	0x0000410d

00003900 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3900:	4b02      	ldr	r3, [pc, #8]	; (390c <udd_set_address+0xc>)
    3902:	681b      	ldr	r3, [r3, #0]
    3904:	2280      	movs	r2, #128	; 0x80
    3906:	4310      	orrs	r0, r2
    3908:	7298      	strb	r0, [r3, #10]
}
    390a:	4770      	bx	lr
    390c:	20000480 	.word	0x20000480

00003910 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3910:	4b02      	ldr	r3, [pc, #8]	; (391c <udd_getaddress+0xc>)
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	7a98      	ldrb	r0, [r3, #10]
    3916:	0640      	lsls	r0, r0, #25
    3918:	0e40      	lsrs	r0, r0, #25
}
    391a:	4770      	bx	lr
    391c:	20000480 	.word	0x20000480

00003920 <udd_send_remotewakeup>:
{
    3920:	b510      	push	{r4, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3922:	4b12      	ldr	r3, [pc, #72]	; (396c <udd_send_remotewakeup+0x4c>)
    3924:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3926:	069b      	lsls	r3, r3, #26
    3928:	d41a      	bmi.n	3960 <udd_send_remotewakeup+0x40>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    392a:	4910      	ldr	r1, [pc, #64]	; (396c <udd_send_remotewakeup+0x4c>)
    392c:	22d0      	movs	r2, #208	; 0xd0
    392e:	68cb      	ldr	r3, [r1, #12]
    3930:	4013      	ands	r3, r2
    3932:	2bd0      	cmp	r3, #208	; 0xd0
    3934:	d1fb      	bne.n	392e <udd_send_remotewakeup+0xe>
	udd_sleep_mode(UDD_STATE_IDLE);
    3936:	2003      	movs	r0, #3
    3938:	4b0d      	ldr	r3, [pc, #52]	; (3970 <udd_send_remotewakeup+0x50>)
    393a:	4798      	blx	r3
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    393c:	4b0d      	ldr	r3, [pc, #52]	; (3974 <udd_send_remotewakeup+0x54>)
    393e:	681a      	ldr	r2, [r3, #0]
    3940:	7b53      	ldrb	r3, [r2, #13]
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    3942:	2b02      	cmp	r3, #2
    3944:	d00b      	beq.n	395e <udd_send_remotewakeup+0x3e>
    3946:	2105      	movs	r1, #5
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    3948:	2002      	movs	r0, #2
    394a:	8913      	ldrh	r3, [r2, #8]
    394c:	4303      	orrs	r3, r0
    394e:	b29b      	uxth	r3, r3
    3950:	8113      	strh	r3, [r2, #8]
	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    3952:	7b53      	ldrb	r3, [r2, #13]
    3954:	2b02      	cmp	r3, #2
    3956:	d002      	beq.n	395e <udd_send_remotewakeup+0x3e>
    3958:	3901      	subs	r1, #1
    395a:	2900      	cmp	r1, #0
    395c:	d1f5      	bne.n	394a <udd_send_remotewakeup+0x2a>
}
    395e:	bd10      	pop	{r4, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3960:	4902      	ldr	r1, [pc, #8]	; (396c <udd_send_remotewakeup+0x4c>)
    3962:	2210      	movs	r2, #16
    3964:	68cb      	ldr	r3, [r1, #12]
    3966:	421a      	tst	r2, r3
    3968:	d0fc      	beq.n	3964 <udd_send_remotewakeup+0x44>
    396a:	e7e4      	b.n	3936 <udd_send_remotewakeup+0x16>
    396c:	40000800 	.word	0x40000800
    3970:	00002d3d 	.word	0x00002d3d
    3974:	20000480 	.word	0x20000480

00003978 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3978:	4b01      	ldr	r3, [pc, #4]	; (3980 <udd_set_setup_payload+0x8>)
    397a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    397c:	8199      	strh	r1, [r3, #12]
}
    397e:	4770      	bx	lr
    3980:	200005e8 	.word	0x200005e8

00003984 <udd_detach>:

void udd_detach(void)
{
    3984:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3986:	4b05      	ldr	r3, [pc, #20]	; (399c <udd_detach+0x18>)
    3988:	681a      	ldr	r2, [r3, #0]
    398a:	8913      	ldrh	r3, [r2, #8]
    398c:	2101      	movs	r1, #1
    398e:	430b      	orrs	r3, r1
    3990:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3992:	2001      	movs	r0, #1
    3994:	4b02      	ldr	r3, [pc, #8]	; (39a0 <udd_detach+0x1c>)
    3996:	4798      	blx	r3
}
    3998:	bd10      	pop	{r4, pc}
    399a:	46c0      	nop			; (mov r8, r8)
    399c:	20000480 	.word	0x20000480
    39a0:	00002d3d 	.word	0x00002d3d

000039a4 <udd_attach>:

void udd_attach(void)
{
    39a4:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    39a6:	2003      	movs	r0, #3
    39a8:	4b16      	ldr	r3, [pc, #88]	; (3a04 <udd_attach+0x60>)
    39aa:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    39ac:	4c16      	ldr	r4, [pc, #88]	; (3a08 <udd_attach+0x64>)
    39ae:	6822      	ldr	r2, [r4, #0]
    39b0:	8913      	ldrh	r3, [r2, #8]
    39b2:	2101      	movs	r1, #1
    39b4:	438b      	bics	r3, r1
    39b6:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    39b8:	4a14      	ldr	r2, [pc, #80]	; (3a0c <udd_attach+0x68>)
    39ba:	3103      	adds	r1, #3
    39bc:	0020      	movs	r0, r4
    39be:	4e14      	ldr	r6, [pc, #80]	; (3a10 <udd_attach+0x6c>)
    39c0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    39c2:	4a14      	ldr	r2, [pc, #80]	; (3a14 <udd_attach+0x70>)
    39c4:	2100      	movs	r1, #0
    39c6:	0020      	movs	r0, r4
    39c8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    39ca:	4a13      	ldr	r2, [pc, #76]	; (3a18 <udd_attach+0x74>)
    39cc:	2101      	movs	r1, #1
    39ce:	0020      	movs	r0, r4
    39d0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    39d2:	4a12      	ldr	r2, [pc, #72]	; (3a1c <udd_attach+0x78>)
    39d4:	2102      	movs	r1, #2
    39d6:	0020      	movs	r0, r4
    39d8:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    39da:	2104      	movs	r1, #4
    39dc:	0020      	movs	r0, r4
    39de:	4d10      	ldr	r5, [pc, #64]	; (3a20 <udd_attach+0x7c>)
    39e0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    39e2:	2100      	movs	r1, #0
    39e4:	0020      	movs	r0, r4
    39e6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    39e8:	2101      	movs	r1, #1
    39ea:	0020      	movs	r0, r4
    39ec:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    39ee:	2102      	movs	r1, #2
    39f0:	0020      	movs	r0, r4
    39f2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    39f4:	4a0b      	ldr	r2, [pc, #44]	; (3a24 <udd_attach+0x80>)
    39f6:	2106      	movs	r1, #6
    39f8:	0020      	movs	r0, r4
    39fa:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    39fc:	2106      	movs	r1, #6
    39fe:	0020      	movs	r0, r4
    3a00:	47a8      	blx	r5
#endif
}
    3a02:	bd70      	pop	{r4, r5, r6, pc}
    3a04:	00002d3d 	.word	0x00002d3d
    3a08:	20000480 	.word	0x20000480
    3a0c:	000033ad 	.word	0x000033ad
    3a10:	00003b5d 	.word	0x00003b5d
    3a14:	00003399 	.word	0x00003399
    3a18:	000030cd 	.word	0x000030cd
    3a1c:	0000305d 	.word	0x0000305d
    3a20:	00003b81 	.word	0x00003b81
    3a24:	00003001 	.word	0x00003001

00003a28 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3a28:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3a2a:	2100      	movs	r1, #0
    3a2c:	200e      	movs	r0, #14
    3a2e:	4b08      	ldr	r3, [pc, #32]	; (3a50 <_uhd_vbus_handler+0x28>)
    3a30:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3a32:	4b08      	ldr	r3, [pc, #32]	; (3a54 <_uhd_vbus_handler+0x2c>)
    3a34:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3a36:	045b      	lsls	r3, r3, #17
    3a38:	d406      	bmi.n	3a48 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3a3a:	4b07      	ldr	r3, [pc, #28]	; (3a58 <_uhd_vbus_handler+0x30>)
    3a3c:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3a3e:	2100      	movs	r1, #0
    3a40:	200e      	movs	r0, #14
    3a42:	4b06      	ldr	r3, [pc, #24]	; (3a5c <_uhd_vbus_handler+0x34>)
    3a44:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3a46:	bd10      	pop	{r4, pc}
		udd_attach();
    3a48:	4b05      	ldr	r3, [pc, #20]	; (3a60 <_uhd_vbus_handler+0x38>)
    3a4a:	4798      	blx	r3
    3a4c:	e7f7      	b.n	3a3e <_uhd_vbus_handler+0x16>
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	0000173d 	.word	0x0000173d
    3a54:	41004400 	.word	0x41004400
    3a58:	00003985 	.word	0x00003985
    3a5c:	0000171d 	.word	0x0000171d
    3a60:	000039a5 	.word	0x000039a5

00003a64 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3a64:	b570      	push	{r4, r5, r6, lr}
    3a66:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a68:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3a6c:	425a      	negs	r2, r3
    3a6e:	4153      	adcs	r3, r2
    3a70:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3a72:	b672      	cpsid	i
    3a74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3a78:	2600      	movs	r6, #0
    3a7a:	4b29      	ldr	r3, [pc, #164]	; (3b20 <udd_enable+0xbc>)
    3a7c:	701e      	strb	r6, [r3, #0]
	return flags;
    3a7e:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3a80:	ac05      	add	r4, sp, #20
    3a82:	0020      	movs	r0, r4
    3a84:	4b27      	ldr	r3, [pc, #156]	; (3b24 <udd_enable+0xc0>)
    3a86:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3a88:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3a8a:	4e27      	ldr	r6, [pc, #156]	; (3b28 <udd_enable+0xc4>)
    3a8c:	0022      	movs	r2, r4
    3a8e:	4927      	ldr	r1, [pc, #156]	; (3b2c <udd_enable+0xc8>)
    3a90:	0030      	movs	r0, r6
    3a92:	4b27      	ldr	r3, [pc, #156]	; (3b30 <udd_enable+0xcc>)
    3a94:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3a96:	0030      	movs	r0, r6
    3a98:	4b26      	ldr	r3, [pc, #152]	; (3b34 <udd_enable+0xd0>)
    3a9a:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3a9c:	4b26      	ldr	r3, [pc, #152]	; (3b38 <udd_enable+0xd4>)
    3a9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3aa0:	069b      	lsls	r3, r3, #26
    3aa2:	d434      	bmi.n	3b0e <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3aa4:	4924      	ldr	r1, [pc, #144]	; (3b38 <udd_enable+0xd4>)
    3aa6:	22d0      	movs	r2, #208	; 0xd0
    3aa8:	68cb      	ldr	r3, [r1, #12]
    3aaa:	4013      	ands	r3, r2
    3aac:	2bd0      	cmp	r3, #208	; 0xd0
    3aae:	d1fb      	bne.n	3aa8 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3ab0:	2001      	movs	r0, #1
    3ab2:	4b22      	ldr	r3, [pc, #136]	; (3b3c <udd_enable+0xd8>)
    3ab4:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3ab6:	ac02      	add	r4, sp, #8
    3ab8:	0020      	movs	r0, r4
    3aba:	4b21      	ldr	r3, [pc, #132]	; (3b40 <udd_enable+0xdc>)
    3abc:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3abe:	230e      	movs	r3, #14
    3ac0:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3ac2:	2300      	movs	r3, #0
    3ac4:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3ac6:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3ac8:	3303      	adds	r3, #3
    3aca:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3acc:	3b02      	subs	r3, #2
    3ace:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3ad0:	2100      	movs	r1, #0
    3ad2:	200e      	movs	r0, #14
    3ad4:	4b1b      	ldr	r3, [pc, #108]	; (3b44 <udd_enable+0xe0>)
    3ad6:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3ad8:	0021      	movs	r1, r4
    3ada:	200e      	movs	r0, #14
    3adc:	4b1a      	ldr	r3, [pc, #104]	; (3b48 <udd_enable+0xe4>)
    3ade:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3ae0:	2200      	movs	r2, #0
    3ae2:	210e      	movs	r1, #14
    3ae4:	4819      	ldr	r0, [pc, #100]	; (3b4c <udd_enable+0xe8>)
    3ae6:	4b1a      	ldr	r3, [pc, #104]	; (3b50 <udd_enable+0xec>)
    3ae8:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3aea:	2100      	movs	r1, #0
    3aec:	200e      	movs	r0, #14
    3aee:	4b19      	ldr	r3, [pc, #100]	; (3b54 <udd_enable+0xf0>)
    3af0:	4798      	blx	r3
    3af2:	4b19      	ldr	r3, [pc, #100]	; (3b58 <udd_enable+0xf4>)
    3af4:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3af6:	045b      	lsls	r3, r3, #17
    3af8:	d40f      	bmi.n	3b1a <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3afa:	2d00      	cmp	r5, #0
    3afc:	d005      	beq.n	3b0a <udd_enable+0xa6>
		cpu_irq_enable();
    3afe:	2201      	movs	r2, #1
    3b00:	4b07      	ldr	r3, [pc, #28]	; (3b20 <udd_enable+0xbc>)
    3b02:	701a      	strb	r2, [r3, #0]
    3b04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b08:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3b0a:	b006      	add	sp, #24
    3b0c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3b0e:	490a      	ldr	r1, [pc, #40]	; (3b38 <udd_enable+0xd4>)
    3b10:	2210      	movs	r2, #16
    3b12:	68cb      	ldr	r3, [r1, #12]
    3b14:	421a      	tst	r2, r3
    3b16:	d0fc      	beq.n	3b12 <udd_enable+0xae>
    3b18:	e7ca      	b.n	3ab0 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3b1a:	4b0c      	ldr	r3, [pc, #48]	; (3b4c <udd_enable+0xe8>)
    3b1c:	4798      	blx	r3
    3b1e:	e7ec      	b.n	3afa <udd_enable+0x96>
    3b20:	200000e8 	.word	0x200000e8
    3b24:	000047bd 	.word	0x000047bd
    3b28:	20000480 	.word	0x20000480
    3b2c:	41005000 	.word	0x41005000
    3b30:	000047cd 	.word	0x000047cd
    3b34:	000041e1 	.word	0x000041e1
    3b38:	40000800 	.word	0x40000800
    3b3c:	00002d3d 	.word	0x00002d3d
    3b40:	00001835 	.word	0x00001835
    3b44:	0000173d 	.word	0x0000173d
    3b48:	00001849 	.word	0x00001849
    3b4c:	00003a29 	.word	0x00003a29
    3b50:	000016f1 	.word	0x000016f1
    3b54:	0000171d 	.word	0x0000171d
    3b58:	41004400 	.word	0x41004400

00003b5c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3b5c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3b5e:	000b      	movs	r3, r1
    3b60:	332e      	adds	r3, #46	; 0x2e
    3b62:	009b      	lsls	r3, r3, #2
    3b64:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3b66:	22aa      	movs	r2, #170	; 0xaa
    3b68:	0052      	lsls	r2, r2, #1
    3b6a:	0049      	lsls	r1, r1, #1
    3b6c:	5a83      	ldrh	r3, [r0, r2]
    3b6e:	4c03      	ldr	r4, [pc, #12]	; (3b7c <usb_device_register_callback+0x20>)
    3b70:	5b09      	ldrh	r1, [r1, r4]
    3b72:	430b      	orrs	r3, r1
    3b74:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    3b76:	2000      	movs	r0, #0
    3b78:	bd10      	pop	{r4, pc}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	00005764 	.word	0x00005764

00003b80 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    3b80:	0049      	lsls	r1, r1, #1
    3b82:	4b06      	ldr	r3, [pc, #24]	; (3b9c <usb_device_enable_callback+0x1c>)
    3b84:	5acb      	ldrh	r3, [r1, r3]
    3b86:	6802      	ldr	r2, [r0, #0]
    3b88:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3b8a:	21ab      	movs	r1, #171	; 0xab
    3b8c:	0049      	lsls	r1, r1, #1
    3b8e:	5a42      	ldrh	r2, [r0, r1]
    3b90:	431a      	orrs	r2, r3
    3b92:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3b94:	6802      	ldr	r2, [r0, #0]
    3b96:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    3b98:	2000      	movs	r0, #0
    3b9a:	4770      	bx	lr
    3b9c:	00005764 	.word	0x00005764

00003ba0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    3ba0:	0049      	lsls	r1, r1, #1
    3ba2:	4b05      	ldr	r3, [pc, #20]	; (3bb8 <usb_device_disable_callback+0x18>)
    3ba4:	5aca      	ldrh	r2, [r1, r3]
    3ba6:	21ab      	movs	r1, #171	; 0xab
    3ba8:	0049      	lsls	r1, r1, #1
    3baa:	5a43      	ldrh	r3, [r0, r1]
    3bac:	4393      	bics	r3, r2
    3bae:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3bb0:	6803      	ldr	r3, [r0, #0]
    3bb2:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3bb4:	2000      	movs	r0, #0
    3bb6:	4770      	bx	lr
    3bb8:	00005764 	.word	0x00005764

00003bbc <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3bbc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3bbe:	008c      	lsls	r4, r1, #2
    3bc0:	18a4      	adds	r4, r4, r2
    3bc2:	3434      	adds	r4, #52	; 0x34
    3bc4:	00a4      	lsls	r4, r4, #2
    3bc6:	1904      	adds	r4, r0, r4
    3bc8:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3bca:	1840      	adds	r0, r0, r1
    3bcc:	3059      	adds	r0, #89	; 0x59
    3bce:	30ff      	adds	r0, #255	; 0xff
    3bd0:	7803      	ldrb	r3, [r0, #0]
    3bd2:	4903      	ldr	r1, [pc, #12]	; (3be0 <usb_device_endpoint_register_callback+0x24>)
    3bd4:	5c8a      	ldrb	r2, [r1, r2]
    3bd6:	4313      	orrs	r3, r2
    3bd8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3bda:	2000      	movs	r0, #0
    3bdc:	bd10      	pop	{r4, pc}
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	00005774 	.word	0x00005774

00003be4 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3be4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3be6:	008b      	lsls	r3, r1, #2
    3be8:	189b      	adds	r3, r3, r2
    3bea:	3334      	adds	r3, #52	; 0x34
    3bec:	009b      	lsls	r3, r3, #2
    3bee:	18c3      	adds	r3, r0, r3
    3bf0:	2400      	movs	r4, #0
    3bf2:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3bf4:	1840      	adds	r0, r0, r1
    3bf6:	3059      	adds	r0, #89	; 0x59
    3bf8:	30ff      	adds	r0, #255	; 0xff
    3bfa:	4b03      	ldr	r3, [pc, #12]	; (3c08 <usb_device_endpoint_unregister_callback+0x24>)
    3bfc:	5c9a      	ldrb	r2, [r3, r2]
    3bfe:	7803      	ldrb	r3, [r0, #0]
    3c00:	4393      	bics	r3, r2
    3c02:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3c04:	2000      	movs	r0, #0
    3c06:	bd10      	pop	{r4, pc}
    3c08:	00005774 	.word	0x00005774

00003c0c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3c0c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c0e:	230f      	movs	r3, #15
    3c10:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3c12:	18c4      	adds	r4, r0, r3
    3c14:	3461      	adds	r4, #97	; 0x61
    3c16:	34ff      	adds	r4, #255	; 0xff
    3c18:	7825      	ldrb	r5, [r4, #0]
    3c1a:	4e2f      	ldr	r6, [pc, #188]	; (3cd8 <usb_device_endpoint_enable_callback+0xcc>)
    3c1c:	5cb6      	ldrb	r6, [r6, r2]
    3c1e:	4335      	orrs	r5, r6
    3c20:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3c22:	2a00      	cmp	r2, #0
    3c24:	d129      	bne.n	3c7a <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3c26:	2b00      	cmp	r3, #0
    3c28:	d112      	bne.n	3c50 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3c2a:	2503      	movs	r5, #3
    3c2c:	240a      	movs	r4, #10
    3c2e:	34ff      	adds	r4, #255	; 0xff
    3c30:	6806      	ldr	r6, [r0, #0]
    3c32:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3c34:	2a03      	cmp	r2, #3
    3c36:	d109      	bne.n	3c4c <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3c38:	b249      	sxtb	r1, r1
    3c3a:	2900      	cmp	r1, #0
    3c3c:	db44      	blt.n	3cc8 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3c3e:	6802      	ldr	r2, [r0, #0]
    3c40:	015b      	lsls	r3, r3, #5
    3c42:	18d3      	adds	r3, r2, r3
    3c44:	330a      	adds	r3, #10
    3c46:	33ff      	adds	r3, #255	; 0xff
    3c48:	2220      	movs	r2, #32
    3c4a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3c4c:	2000      	movs	r0, #0
    3c4e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3c50:	b24c      	sxtb	r4, r1
    3c52:	2c00      	cmp	r4, #0
    3c54:	db08      	blt.n	3c68 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3c56:	015c      	lsls	r4, r3, #5
    3c58:	6805      	ldr	r5, [r0, #0]
    3c5a:	46ac      	mov	ip, r5
    3c5c:	4464      	add	r4, ip
    3c5e:	340a      	adds	r4, #10
    3c60:	34ff      	adds	r4, #255	; 0xff
    3c62:	2501      	movs	r5, #1
    3c64:	7025      	strb	r5, [r4, #0]
    3c66:	e7e5      	b.n	3c34 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3c68:	015c      	lsls	r4, r3, #5
    3c6a:	6805      	ldr	r5, [r0, #0]
    3c6c:	46ac      	mov	ip, r5
    3c6e:	4464      	add	r4, ip
    3c70:	340a      	adds	r4, #10
    3c72:	34ff      	adds	r4, #255	; 0xff
    3c74:	2502      	movs	r5, #2
    3c76:	7025      	strb	r5, [r4, #0]
    3c78:	e7dc      	b.n	3c34 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3c7a:	2a01      	cmp	r2, #1
    3c7c:	d11a      	bne.n	3cb4 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d105      	bne.n	3c8e <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    3c82:	6802      	ldr	r2, [r0, #0]
    3c84:	210c      	movs	r1, #12
    3c86:	230a      	movs	r3, #10
    3c88:	33ff      	adds	r3, #255	; 0xff
    3c8a:	54d1      	strb	r1, [r2, r3]
    3c8c:	e7de      	b.n	3c4c <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3c8e:	b249      	sxtb	r1, r1
    3c90:	2900      	cmp	r1, #0
    3c92:	db07      	blt.n	3ca4 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3c94:	6802      	ldr	r2, [r0, #0]
    3c96:	015b      	lsls	r3, r3, #5
    3c98:	18d3      	adds	r3, r2, r3
    3c9a:	330a      	adds	r3, #10
    3c9c:	33ff      	adds	r3, #255	; 0xff
    3c9e:	2204      	movs	r2, #4
    3ca0:	701a      	strb	r2, [r3, #0]
    3ca2:	e7d3      	b.n	3c4c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3ca4:	6802      	ldr	r2, [r0, #0]
    3ca6:	015b      	lsls	r3, r3, #5
    3ca8:	18d3      	adds	r3, r2, r3
    3caa:	330a      	adds	r3, #10
    3cac:	33ff      	adds	r3, #255	; 0xff
    3cae:	2208      	movs	r2, #8
    3cb0:	701a      	strb	r2, [r3, #0]
    3cb2:	e7cb      	b.n	3c4c <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3cb4:	2a02      	cmp	r2, #2
    3cb6:	d1bd      	bne.n	3c34 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3cb8:	6802      	ldr	r2, [r0, #0]
    3cba:	015b      	lsls	r3, r3, #5
    3cbc:	18d3      	adds	r3, r2, r3
    3cbe:	330a      	adds	r3, #10
    3cc0:	33ff      	adds	r3, #255	; 0xff
    3cc2:	2210      	movs	r2, #16
    3cc4:	701a      	strb	r2, [r3, #0]
    3cc6:	e7c1      	b.n	3c4c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3cc8:	6802      	ldr	r2, [r0, #0]
    3cca:	015b      	lsls	r3, r3, #5
    3ccc:	18d3      	adds	r3, r2, r3
    3cce:	330a      	adds	r3, #10
    3cd0:	33ff      	adds	r3, #255	; 0xff
    3cd2:	2240      	movs	r2, #64	; 0x40
    3cd4:	701a      	strb	r2, [r3, #0]
    3cd6:	e7b9      	b.n	3c4c <usb_device_endpoint_enable_callback+0x40>
    3cd8:	00005774 	.word	0x00005774

00003cdc <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3cdc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3cde:	230f      	movs	r3, #15
    3ce0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3ce2:	18c4      	adds	r4, r0, r3
    3ce4:	3461      	adds	r4, #97	; 0x61
    3ce6:	34ff      	adds	r4, #255	; 0xff
    3ce8:	4d2f      	ldr	r5, [pc, #188]	; (3da8 <usb_device_endpoint_disable_callback+0xcc>)
    3cea:	5cae      	ldrb	r6, [r5, r2]
    3cec:	7825      	ldrb	r5, [r4, #0]
    3cee:	43b5      	bics	r5, r6
    3cf0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3cf2:	2a00      	cmp	r2, #0
    3cf4:	d129      	bne.n	3d4a <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d112      	bne.n	3d20 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3cfa:	2503      	movs	r5, #3
    3cfc:	2484      	movs	r4, #132	; 0x84
    3cfe:	0064      	lsls	r4, r4, #1
    3d00:	6806      	ldr	r6, [r0, #0]
    3d02:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3d04:	2a03      	cmp	r2, #3
    3d06:	d109      	bne.n	3d1c <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3d08:	b249      	sxtb	r1, r1
    3d0a:	2900      	cmp	r1, #0
    3d0c:	db44      	blt.n	3d98 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3d0e:	6802      	ldr	r2, [r0, #0]
    3d10:	015b      	lsls	r3, r3, #5
    3d12:	18d3      	adds	r3, r2, r3
    3d14:	3309      	adds	r3, #9
    3d16:	33ff      	adds	r3, #255	; 0xff
    3d18:	2220      	movs	r2, #32
    3d1a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3d1c:	2000      	movs	r0, #0
    3d1e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3d20:	b24c      	sxtb	r4, r1
    3d22:	2c00      	cmp	r4, #0
    3d24:	db08      	blt.n	3d38 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3d26:	015c      	lsls	r4, r3, #5
    3d28:	6805      	ldr	r5, [r0, #0]
    3d2a:	46ac      	mov	ip, r5
    3d2c:	4464      	add	r4, ip
    3d2e:	3409      	adds	r4, #9
    3d30:	34ff      	adds	r4, #255	; 0xff
    3d32:	2501      	movs	r5, #1
    3d34:	7025      	strb	r5, [r4, #0]
    3d36:	e7e5      	b.n	3d04 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3d38:	015c      	lsls	r4, r3, #5
    3d3a:	6805      	ldr	r5, [r0, #0]
    3d3c:	46ac      	mov	ip, r5
    3d3e:	4464      	add	r4, ip
    3d40:	3409      	adds	r4, #9
    3d42:	34ff      	adds	r4, #255	; 0xff
    3d44:	2502      	movs	r5, #2
    3d46:	7025      	strb	r5, [r4, #0]
    3d48:	e7dc      	b.n	3d04 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3d4a:	2a01      	cmp	r2, #1
    3d4c:	d11a      	bne.n	3d84 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d105      	bne.n	3d5e <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3d52:	6802      	ldr	r2, [r0, #0]
    3d54:	210c      	movs	r1, #12
    3d56:	3309      	adds	r3, #9
    3d58:	33ff      	adds	r3, #255	; 0xff
    3d5a:	54d1      	strb	r1, [r2, r3]
    3d5c:	e7de      	b.n	3d1c <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3d5e:	b249      	sxtb	r1, r1
    3d60:	2900      	cmp	r1, #0
    3d62:	db07      	blt.n	3d74 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3d64:	6802      	ldr	r2, [r0, #0]
    3d66:	015b      	lsls	r3, r3, #5
    3d68:	18d3      	adds	r3, r2, r3
    3d6a:	3309      	adds	r3, #9
    3d6c:	33ff      	adds	r3, #255	; 0xff
    3d6e:	2204      	movs	r2, #4
    3d70:	701a      	strb	r2, [r3, #0]
    3d72:	e7d3      	b.n	3d1c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3d74:	6802      	ldr	r2, [r0, #0]
    3d76:	015b      	lsls	r3, r3, #5
    3d78:	18d3      	adds	r3, r2, r3
    3d7a:	3309      	adds	r3, #9
    3d7c:	33ff      	adds	r3, #255	; 0xff
    3d7e:	2208      	movs	r2, #8
    3d80:	701a      	strb	r2, [r3, #0]
    3d82:	e7cb      	b.n	3d1c <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3d84:	2a02      	cmp	r2, #2
    3d86:	d1bd      	bne.n	3d04 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3d88:	6802      	ldr	r2, [r0, #0]
    3d8a:	015b      	lsls	r3, r3, #5
    3d8c:	18d3      	adds	r3, r2, r3
    3d8e:	3309      	adds	r3, #9
    3d90:	33ff      	adds	r3, #255	; 0xff
    3d92:	2210      	movs	r2, #16
    3d94:	701a      	strb	r2, [r3, #0]
    3d96:	e7c1      	b.n	3d1c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    3d98:	6802      	ldr	r2, [r0, #0]
    3d9a:	015b      	lsls	r3, r3, #5
    3d9c:	18d3      	adds	r3, r2, r3
    3d9e:	3309      	adds	r3, #9
    3da0:	33ff      	adds	r3, #255	; 0xff
    3da2:	2240      	movs	r2, #64	; 0x40
    3da4:	701a      	strb	r2, [r3, #0]
    3da6:	e7b9      	b.n	3d1c <usb_device_endpoint_disable_callback+0x40>
    3da8:	00005774 	.word	0x00005774

00003dac <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3dac:	2300      	movs	r3, #0
    3dae:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3db0:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    3db2:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3db4:	3301      	adds	r3, #1
    3db6:	70c3      	strb	r3, [r0, #3]
}
    3db8:	4770      	bx	lr
	...

00003dbc <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3dbe:	780c      	ldrb	r4, [r1, #0]
    3dc0:	230f      	movs	r3, #15
    3dc2:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3dc4:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3dc6:	78ca      	ldrb	r2, [r1, #3]
    3dc8:	2a04      	cmp	r2, #4
    3dca:	d870      	bhi.n	3eae <usb_device_endpoint_set_config+0xf2>
    3dcc:	0092      	lsls	r2, r2, #2
    3dce:	4d89      	ldr	r5, [pc, #548]	; (3ff4 <usb_device_endpoint_set_config+0x238>)
    3dd0:	58aa      	ldr	r2, [r5, r2]
    3dd2:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3dd4:	6802      	ldr	r2, [r0, #0]
    3dd6:	3308      	adds	r3, #8
    3dd8:	015b      	lsls	r3, r3, #5
    3dda:	2100      	movs	r1, #0
    3ddc:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    3dde:	2200      	movs	r2, #0
    3de0:	e082      	b.n	3ee8 <usb_device_endpoint_set_config+0x12c>
    3de2:	015c      	lsls	r4, r3, #5
    3de4:	6802      	ldr	r2, [r0, #0]
    3de6:	4694      	mov	ip, r2
    3de8:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3dea:	2280      	movs	r2, #128	; 0x80
    3dec:	0052      	lsls	r2, r2, #1
    3dee:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3df0:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3df2:	076d      	lsls	r5, r5, #29
    3df4:	d178      	bne.n	3ee8 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3df6:	32e4      	adds	r2, #228	; 0xe4
    3df8:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3dfa:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3dfc:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3dfe:	422e      	tst	r6, r5
    3e00:	d172      	bne.n	3ee8 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3e02:	3d5f      	subs	r5, #95	; 0x5f
    3e04:	32e4      	adds	r2, #228	; 0xe4
    3e06:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3e08:	001a      	movs	r2, r3
    3e0a:	3208      	adds	r2, #8
    3e0c:	0152      	lsls	r2, r2, #5
    3e0e:	6804      	ldr	r4, [r0, #0]
    3e10:	18a4      	adds	r4, r4, r2
    3e12:	352f      	adds	r5, #47	; 0x2f
    3e14:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3e16:	6800      	ldr	r0, [r0, #0]
    3e18:	1882      	adds	r2, r0, r2
    3e1a:	2080      	movs	r0, #128	; 0x80
    3e1c:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    3e1e:	788a      	ldrb	r2, [r1, #2]
    3e20:	2a00      	cmp	r2, #0
    3e22:	d01f      	beq.n	3e64 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3e24:	0158      	lsls	r0, r3, #5
    3e26:	4a74      	ldr	r2, [pc, #464]	; (3ff8 <usb_device_endpoint_set_config+0x23c>)
    3e28:	1812      	adds	r2, r2, r0
    3e2a:	6854      	ldr	r4, [r2, #4]
    3e2c:	2080      	movs	r0, #128	; 0x80
    3e2e:	0600      	lsls	r0, r0, #24
    3e30:	4304      	orrs	r4, r0
    3e32:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3e34:	6954      	ldr	r4, [r2, #20]
    3e36:	4320      	orrs	r0, r4
    3e38:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3e3a:	2507      	movs	r5, #7
    3e3c:	784c      	ldrb	r4, [r1, #1]
    3e3e:	015a      	lsls	r2, r3, #5
    3e40:	4b6d      	ldr	r3, [pc, #436]	; (3ff8 <usb_device_endpoint_set_config+0x23c>)
    3e42:	189b      	adds	r3, r3, r2
    3e44:	6858      	ldr	r0, [r3, #4]
    3e46:	402c      	ands	r4, r5
    3e48:	0724      	lsls	r4, r4, #28
    3e4a:	4e6c      	ldr	r6, [pc, #432]	; (3ffc <usb_device_endpoint_set_config+0x240>)
    3e4c:	4030      	ands	r0, r6
    3e4e:	4320      	orrs	r0, r4
    3e50:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3e52:	7849      	ldrb	r1, [r1, #1]
    3e54:	695a      	ldr	r2, [r3, #20]
    3e56:	4029      	ands	r1, r5
    3e58:	0709      	lsls	r1, r1, #28
    3e5a:	4032      	ands	r2, r6
    3e5c:	430a      	orrs	r2, r1
    3e5e:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    3e60:	2200      	movs	r2, #0
    3e62:	e041      	b.n	3ee8 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3e64:	0158      	lsls	r0, r3, #5
    3e66:	4a64      	ldr	r2, [pc, #400]	; (3ff8 <usb_device_endpoint_set_config+0x23c>)
    3e68:	1812      	adds	r2, r2, r0
    3e6a:	6850      	ldr	r0, [r2, #4]
    3e6c:	0040      	lsls	r0, r0, #1
    3e6e:	0840      	lsrs	r0, r0, #1
    3e70:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3e72:	6950      	ldr	r0, [r2, #20]
    3e74:	0040      	lsls	r0, r0, #1
    3e76:	0840      	lsrs	r0, r0, #1
    3e78:	6150      	str	r0, [r2, #20]
    3e7a:	e7de      	b.n	3e3a <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3e7c:	2c00      	cmp	r4, #0
    3e7e:	db35      	blt.n	3eec <usb_device_endpoint_set_config+0x130>
    3e80:	015d      	lsls	r5, r3, #5
    3e82:	6802      	ldr	r2, [r0, #0]
    3e84:	4694      	mov	ip, r2
    3e86:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3e88:	2280      	movs	r2, #128	; 0x80
    3e8a:	0052      	lsls	r2, r2, #1
    3e8c:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    3e8e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3e90:	0776      	lsls	r6, r6, #29
    3e92:	d129      	bne.n	3ee8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3e94:	2680      	movs	r6, #128	; 0x80
    3e96:	0076      	lsls	r6, r6, #1
    3e98:	5daa      	ldrb	r2, [r5, r6]
    3e9a:	2702      	movs	r7, #2
    3e9c:	433a      	orrs	r2, r7
    3e9e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3ea0:	6802      	ldr	r2, [r0, #0]
    3ea2:	0018      	movs	r0, r3
    3ea4:	3008      	adds	r0, #8
    3ea6:	0140      	lsls	r0, r0, #5
    3ea8:	1812      	adds	r2, r2, r0
    3eaa:	2040      	movs	r0, #64	; 0x40
    3eac:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3eae:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3eb0:	784f      	ldrb	r7, [r1, #1]
    3eb2:	005d      	lsls	r5, r3, #1
    3eb4:	18ad      	adds	r5, r5, r2
    3eb6:	012d      	lsls	r5, r5, #4
    3eb8:	4e4f      	ldr	r6, [pc, #316]	; (3ff8 <usb_device_endpoint_set_config+0x23c>)
    3eba:	1975      	adds	r5, r6, r5
    3ebc:	6868      	ldr	r0, [r5, #4]
    3ebe:	2407      	movs	r4, #7
    3ec0:	403c      	ands	r4, r7
    3ec2:	0724      	lsls	r4, r4, #28
    3ec4:	4e4d      	ldr	r6, [pc, #308]	; (3ffc <usb_device_endpoint_set_config+0x240>)
    3ec6:	4030      	ands	r0, r6
    3ec8:	4320      	orrs	r0, r4
    3eca:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    3ecc:	7889      	ldrb	r1, [r1, #2]
    3ece:	2900      	cmp	r1, #0
    3ed0:	d000      	beq.n	3ed4 <usb_device_endpoint_set_config+0x118>
    3ed2:	e088      	b.n	3fe6 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3ed4:	005b      	lsls	r3, r3, #1
    3ed6:	189b      	adds	r3, r3, r2
    3ed8:	011b      	lsls	r3, r3, #4
    3eda:	4a47      	ldr	r2, [pc, #284]	; (3ff8 <usb_device_endpoint_set_config+0x23c>)
    3edc:	18d3      	adds	r3, r2, r3
    3ede:	685a      	ldr	r2, [r3, #4]
    3ee0:	0052      	lsls	r2, r2, #1
    3ee2:	0852      	lsrs	r2, r2, #1
    3ee4:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3ee6:	2200      	movs	r2, #0
}
    3ee8:	0010      	movs	r0, r2
    3eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3eec:	015d      	lsls	r5, r3, #5
    3eee:	6802      	ldr	r2, [r0, #0]
    3ef0:	4694      	mov	ip, r2
    3ef2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3ef4:	2280      	movs	r2, #128	; 0x80
    3ef6:	0052      	lsls	r2, r2, #1
    3ef8:	5caf      	ldrb	r7, [r5, r2]
    3efa:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3efc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3efe:	4237      	tst	r7, r6
    3f00:	d1f2      	bne.n	3ee8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3f02:	3690      	adds	r6, #144	; 0x90
    3f04:	5daa      	ldrb	r2, [r5, r6]
    3f06:	2720      	movs	r7, #32
    3f08:	433a      	orrs	r2, r7
    3f0a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3f0c:	6802      	ldr	r2, [r0, #0]
    3f0e:	0018      	movs	r0, r3
    3f10:	3008      	adds	r0, #8
    3f12:	0140      	lsls	r0, r0, #5
    3f14:	1812      	adds	r2, r2, r0
    3f16:	2080      	movs	r0, #128	; 0x80
    3f18:	7110      	strb	r0, [r2, #4]
    3f1a:	e7c8      	b.n	3eae <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3f1c:	2c00      	cmp	r4, #0
    3f1e:	db17      	blt.n	3f50 <usb_device_endpoint_set_config+0x194>
    3f20:	015d      	lsls	r5, r3, #5
    3f22:	6802      	ldr	r2, [r0, #0]
    3f24:	4694      	mov	ip, r2
    3f26:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3f28:	2280      	movs	r2, #128	; 0x80
    3f2a:	0052      	lsls	r2, r2, #1
    3f2c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3f2e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3f30:	0776      	lsls	r6, r6, #29
    3f32:	d1d9      	bne.n	3ee8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3f34:	2680      	movs	r6, #128	; 0x80
    3f36:	0076      	lsls	r6, r6, #1
    3f38:	5daa      	ldrb	r2, [r5, r6]
    3f3a:	2703      	movs	r7, #3
    3f3c:	433a      	orrs	r2, r7
    3f3e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3f40:	6802      	ldr	r2, [r0, #0]
    3f42:	0018      	movs	r0, r3
    3f44:	3008      	adds	r0, #8
    3f46:	0140      	lsls	r0, r0, #5
    3f48:	1812      	adds	r2, r2, r0
    3f4a:	2040      	movs	r0, #64	; 0x40
    3f4c:	7150      	strb	r0, [r2, #5]
    3f4e:	e7ae      	b.n	3eae <usb_device_endpoint_set_config+0xf2>
    3f50:	015d      	lsls	r5, r3, #5
    3f52:	6802      	ldr	r2, [r0, #0]
    3f54:	4694      	mov	ip, r2
    3f56:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3f58:	2280      	movs	r2, #128	; 0x80
    3f5a:	0052      	lsls	r2, r2, #1
    3f5c:	5caf      	ldrb	r7, [r5, r2]
    3f5e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3f60:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3f62:	4237      	tst	r7, r6
    3f64:	d1c0      	bne.n	3ee8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3f66:	3690      	adds	r6, #144	; 0x90
    3f68:	5daa      	ldrb	r2, [r5, r6]
    3f6a:	2730      	movs	r7, #48	; 0x30
    3f6c:	433a      	orrs	r2, r7
    3f6e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3f70:	6802      	ldr	r2, [r0, #0]
    3f72:	0018      	movs	r0, r3
    3f74:	3008      	adds	r0, #8
    3f76:	0140      	lsls	r0, r0, #5
    3f78:	1812      	adds	r2, r2, r0
    3f7a:	2080      	movs	r0, #128	; 0x80
    3f7c:	7110      	strb	r0, [r2, #4]
    3f7e:	e796      	b.n	3eae <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3f80:	2c00      	cmp	r4, #0
    3f82:	db17      	blt.n	3fb4 <usb_device_endpoint_set_config+0x1f8>
    3f84:	015d      	lsls	r5, r3, #5
    3f86:	6802      	ldr	r2, [r0, #0]
    3f88:	4694      	mov	ip, r2
    3f8a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3f8c:	2280      	movs	r2, #128	; 0x80
    3f8e:	0052      	lsls	r2, r2, #1
    3f90:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3f92:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3f94:	0776      	lsls	r6, r6, #29
    3f96:	d1a7      	bne.n	3ee8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    3f98:	2680      	movs	r6, #128	; 0x80
    3f9a:	0076      	lsls	r6, r6, #1
    3f9c:	5daa      	ldrb	r2, [r5, r6]
    3f9e:	2704      	movs	r7, #4
    3fa0:	433a      	orrs	r2, r7
    3fa2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3fa4:	6802      	ldr	r2, [r0, #0]
    3fa6:	0018      	movs	r0, r3
    3fa8:	3008      	adds	r0, #8
    3faa:	0140      	lsls	r0, r0, #5
    3fac:	1812      	adds	r2, r2, r0
    3fae:	2040      	movs	r0, #64	; 0x40
    3fb0:	7150      	strb	r0, [r2, #5]
    3fb2:	e77c      	b.n	3eae <usb_device_endpoint_set_config+0xf2>
    3fb4:	015d      	lsls	r5, r3, #5
    3fb6:	6802      	ldr	r2, [r0, #0]
    3fb8:	4694      	mov	ip, r2
    3fba:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3fbc:	2280      	movs	r2, #128	; 0x80
    3fbe:	0052      	lsls	r2, r2, #1
    3fc0:	5caf      	ldrb	r7, [r5, r2]
    3fc2:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3fc4:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3fc6:	4237      	tst	r7, r6
    3fc8:	d000      	beq.n	3fcc <usb_device_endpoint_set_config+0x210>
    3fca:	e78d      	b.n	3ee8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    3fcc:	3690      	adds	r6, #144	; 0x90
    3fce:	5daa      	ldrb	r2, [r5, r6]
    3fd0:	2740      	movs	r7, #64	; 0x40
    3fd2:	433a      	orrs	r2, r7
    3fd4:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3fd6:	6802      	ldr	r2, [r0, #0]
    3fd8:	0018      	movs	r0, r3
    3fda:	3008      	adds	r0, #8
    3fdc:	0140      	lsls	r0, r0, #5
    3fde:	1812      	adds	r2, r2, r0
    3fe0:	2080      	movs	r0, #128	; 0x80
    3fe2:	7110      	strb	r0, [r2, #4]
    3fe4:	e763      	b.n	3eae <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3fe6:	6869      	ldr	r1, [r5, #4]
    3fe8:	2380      	movs	r3, #128	; 0x80
    3fea:	061b      	lsls	r3, r3, #24
    3fec:	430b      	orrs	r3, r1
    3fee:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    3ff0:	2200      	movs	r2, #0
    3ff2:	e779      	b.n	3ee8 <usb_device_endpoint_set_config+0x12c>
    3ff4:	00005750 	.word	0x00005750
    3ff8:	20000640 	.word	0x20000640
    3ffc:	8fffffff 	.word	0x8fffffff

00004000 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4000:	230f      	movs	r3, #15
    4002:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4004:	b249      	sxtb	r1, r1
    4006:	2900      	cmp	r1, #0
    4008:	db0a      	blt.n	4020 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    400a:	3308      	adds	r3, #8
    400c:	015b      	lsls	r3, r3, #5
    400e:	6802      	ldr	r2, [r0, #0]
    4010:	18d2      	adds	r2, r2, r3
    4012:	2140      	movs	r1, #64	; 0x40
    4014:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4016:	6802      	ldr	r2, [r0, #0]
    4018:	18d3      	adds	r3, r2, r3
    401a:	2201      	movs	r2, #1
    401c:	71da      	strb	r2, [r3, #7]
	}
}
    401e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4020:	3308      	adds	r3, #8
    4022:	015b      	lsls	r3, r3, #5
    4024:	6802      	ldr	r2, [r0, #0]
    4026:	18d2      	adds	r2, r2, r3
    4028:	2180      	movs	r1, #128	; 0x80
    402a:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    402c:	6802      	ldr	r2, [r0, #0]
    402e:	18d3      	adds	r3, r2, r3
    4030:	2202      	movs	r2, #2
    4032:	71da      	strb	r2, [r3, #7]
    4034:	e7f3      	b.n	401e <usb_device_endpoint_abort_job+0x1e>

00004036 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4036:	230f      	movs	r3, #15
    4038:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    403a:	b249      	sxtb	r1, r1
    403c:	2900      	cmp	r1, #0
    403e:	db07      	blt.n	4050 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    4040:	6802      	ldr	r2, [r0, #0]
    4042:	3308      	adds	r3, #8
    4044:	015b      	lsls	r3, r3, #5
    4046:	18d3      	adds	r3, r2, r3
    4048:	7998      	ldrb	r0, [r3, #6]
    404a:	06c0      	lsls	r0, r0, #27
    404c:	0fc0      	lsrs	r0, r0, #31
	}
}
    404e:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4050:	6802      	ldr	r2, [r0, #0]
    4052:	3308      	adds	r3, #8
    4054:	015b      	lsls	r3, r3, #5
    4056:	18d3      	adds	r3, r2, r3
    4058:	7998      	ldrb	r0, [r3, #6]
    405a:	0680      	lsls	r0, r0, #26
    405c:	0fc0      	lsrs	r0, r0, #31
    405e:	e7f6      	b.n	404e <usb_device_endpoint_is_halted+0x18>

00004060 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4060:	230f      	movs	r3, #15
    4062:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4064:	b249      	sxtb	r1, r1
    4066:	2900      	cmp	r1, #0
    4068:	db06      	blt.n	4078 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    406a:	6802      	ldr	r2, [r0, #0]
    406c:	3308      	adds	r3, #8
    406e:	015b      	lsls	r3, r3, #5
    4070:	18d3      	adds	r3, r2, r3
    4072:	2210      	movs	r2, #16
    4074:	715a      	strb	r2, [r3, #5]
	}
}
    4076:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4078:	6802      	ldr	r2, [r0, #0]
    407a:	3308      	adds	r3, #8
    407c:	015b      	lsls	r3, r3, #5
    407e:	18d3      	adds	r3, r2, r3
    4080:	2220      	movs	r2, #32
    4082:	715a      	strb	r2, [r3, #5]
    4084:	e7f7      	b.n	4076 <usb_device_endpoint_set_halt+0x16>

00004086 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    4086:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4088:	230f      	movs	r3, #15
    408a:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    408c:	b249      	sxtb	r1, r1
    408e:	2900      	cmp	r1, #0
    4090:	db1d      	blt.n	40ce <usb_device_endpoint_clear_halt+0x48>
    4092:	0159      	lsls	r1, r3, #5
    4094:	6802      	ldr	r2, [r0, #0]
    4096:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    4098:	2483      	movs	r4, #131	; 0x83
    409a:	0064      	lsls	r4, r4, #1
    409c:	5d14      	ldrb	r4, [r2, r4]
    409e:	06e4      	lsls	r4, r4, #27
    40a0:	d514      	bpl.n	40cc <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    40a2:	2510      	movs	r5, #16
    40a4:	2482      	movs	r4, #130	; 0x82
    40a6:	0064      	lsls	r4, r4, #1
    40a8:	5515      	strb	r5, [r2, r4]
    40aa:	6802      	ldr	r2, [r0, #0]
    40ac:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    40ae:	2108      	movs	r1, #8
    40b0:	31ff      	adds	r1, #255	; 0xff
    40b2:	5c51      	ldrb	r1, [r2, r1]
    40b4:	0689      	lsls	r1, r1, #26
    40b6:	d509      	bpl.n	40cc <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    40b8:	3ce4      	subs	r4, #228	; 0xe4
    40ba:	2108      	movs	r1, #8
    40bc:	31ff      	adds	r1, #255	; 0xff
    40be:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    40c0:	6802      	ldr	r2, [r0, #0]
    40c2:	3308      	adds	r3, #8
    40c4:	015b      	lsls	r3, r3, #5
    40c6:	18d3      	adds	r3, r2, r3
    40c8:	2201      	movs	r2, #1
    40ca:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    40cc:	bd30      	pop	{r4, r5, pc}
    40ce:	0159      	lsls	r1, r3, #5
    40d0:	6802      	ldr	r2, [r0, #0]
    40d2:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    40d4:	2483      	movs	r4, #131	; 0x83
    40d6:	0064      	lsls	r4, r4, #1
    40d8:	5d14      	ldrb	r4, [r2, r4]
    40da:	06a4      	lsls	r4, r4, #26
    40dc:	d5f6      	bpl.n	40cc <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    40de:	2520      	movs	r5, #32
    40e0:	2482      	movs	r4, #130	; 0x82
    40e2:	0064      	lsls	r4, r4, #1
    40e4:	5515      	strb	r5, [r2, r4]
    40e6:	6802      	ldr	r2, [r0, #0]
    40e8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    40ea:	2108      	movs	r1, #8
    40ec:	31ff      	adds	r1, #255	; 0xff
    40ee:	5c51      	ldrb	r1, [r2, r1]
    40f0:	0649      	lsls	r1, r1, #25
    40f2:	d5eb      	bpl.n	40cc <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    40f4:	3cc4      	subs	r4, #196	; 0xc4
    40f6:	2108      	movs	r1, #8
    40f8:	31ff      	adds	r1, #255	; 0xff
    40fa:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    40fc:	6802      	ldr	r2, [r0, #0]
    40fe:	3308      	adds	r3, #8
    4100:	015b      	lsls	r3, r3, #5
    4102:	18d3      	adds	r3, r2, r3
    4104:	2202      	movs	r2, #2
    4106:	711a      	strb	r2, [r3, #4]
    4108:	e7e0      	b.n	40cc <usb_device_endpoint_clear_halt+0x46>
	...

0000410c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    410c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    410e:	000c      	movs	r4, r1
    4110:	3408      	adds	r4, #8
    4112:	0164      	lsls	r4, r4, #5
    4114:	6805      	ldr	r5, [r0, #0]
    4116:	5d64      	ldrb	r4, [r4, r5]
    4118:	0664      	lsls	r4, r4, #25
    411a:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    411c:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    411e:	2c00      	cmp	r4, #0
    4120:	d101      	bne.n	4126 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    4122:	0028      	movs	r0, r5
    4124:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4126:	014c      	lsls	r4, r1, #5
    4128:	4d0b      	ldr	r5, [pc, #44]	; (4158 <usb_device_endpoint_write_buffer_job+0x4c>)
    412a:	192d      	adds	r5, r5, r4
    412c:	002c      	movs	r4, r5
    412e:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4130:	696a      	ldr	r2, [r5, #20]
    4132:	4d0a      	ldr	r5, [pc, #40]	; (415c <usb_device_endpoint_write_buffer_job+0x50>)
    4134:	402a      	ands	r2, r5
    4136:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4138:	6962      	ldr	r2, [r4, #20]
    413a:	049b      	lsls	r3, r3, #18
    413c:	0c9b      	lsrs	r3, r3, #18
    413e:	0b92      	lsrs	r2, r2, #14
    4140:	0392      	lsls	r2, r2, #14
    4142:	4313      	orrs	r3, r2
    4144:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4146:	6803      	ldr	r3, [r0, #0]
    4148:	3108      	adds	r1, #8
    414a:	0149      	lsls	r1, r1, #5
    414c:	1859      	adds	r1, r3, r1
    414e:	2380      	movs	r3, #128	; 0x80
    4150:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    4152:	2500      	movs	r5, #0
    4154:	e7e5      	b.n	4122 <usb_device_endpoint_write_buffer_job+0x16>
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	20000640 	.word	0x20000640
    415c:	f0003fff 	.word	0xf0003fff

00004160 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4160:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4162:	000c      	movs	r4, r1
    4164:	3408      	adds	r4, #8
    4166:	0164      	lsls	r4, r4, #5
    4168:	6805      	ldr	r5, [r0, #0]
    416a:	5d64      	ldrb	r4, [r4, r5]
    416c:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    416e:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4170:	2c00      	cmp	r4, #0
    4172:	d101      	bne.n	4178 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    4174:	0028      	movs	r0, r5
    4176:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4178:	4c0b      	ldr	r4, [pc, #44]	; (41a8 <usb_device_endpoint_read_buffer_job+0x48>)
    417a:	014d      	lsls	r5, r1, #5
    417c:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    417e:	1962      	adds	r2, r4, r5
    4180:	6854      	ldr	r4, [r2, #4]
    4182:	049b      	lsls	r3, r3, #18
    4184:	091b      	lsrs	r3, r3, #4
    4186:	4d09      	ldr	r5, [pc, #36]	; (41ac <usb_device_endpoint_read_buffer_job+0x4c>)
    4188:	402c      	ands	r4, r5
    418a:	4323      	orrs	r3, r4
    418c:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    418e:	6853      	ldr	r3, [r2, #4]
    4190:	0b9b      	lsrs	r3, r3, #14
    4192:	039b      	lsls	r3, r3, #14
    4194:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4196:	6803      	ldr	r3, [r0, #0]
    4198:	3108      	adds	r1, #8
    419a:	0149      	lsls	r1, r1, #5
    419c:	1859      	adds	r1, r3, r1
    419e:	2340      	movs	r3, #64	; 0x40
    41a0:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    41a2:	2500      	movs	r5, #0
    41a4:	e7e6      	b.n	4174 <usb_device_endpoint_read_buffer_job+0x14>
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	20000640 	.word	0x20000640
    41ac:	f0003fff 	.word	0xf0003fff

000041b0 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    41b0:	4b09      	ldr	r3, [pc, #36]	; (41d8 <usb_device_endpoint_setup_buffer_job+0x28>)
    41b2:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    41b4:	685a      	ldr	r2, [r3, #4]
    41b6:	4909      	ldr	r1, [pc, #36]	; (41dc <usb_device_endpoint_setup_buffer_job+0x2c>)
    41b8:	4011      	ands	r1, r2
    41ba:	2280      	movs	r2, #128	; 0x80
    41bc:	0292      	lsls	r2, r2, #10
    41be:	430a      	orrs	r2, r1
    41c0:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    41c2:	685a      	ldr	r2, [r3, #4]
    41c4:	0b92      	lsrs	r2, r2, #14
    41c6:	0392      	lsls	r2, r2, #14
    41c8:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    41ca:	6802      	ldr	r2, [r0, #0]
    41cc:	2140      	movs	r1, #64	; 0x40
    41ce:	2382      	movs	r3, #130	; 0x82
    41d0:	005b      	lsls	r3, r3, #1
    41d2:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    41d4:	2000      	movs	r0, #0
    41d6:	4770      	bx	lr
    41d8:	20000640 	.word	0x20000640
    41dc:	f0003fff 	.word	0xf0003fff

000041e0 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    41e0:	6802      	ldr	r2, [r0, #0]
    41e2:	7813      	ldrb	r3, [r2, #0]
    41e4:	2102      	movs	r1, #2
    41e6:	430b      	orrs	r3, r1
    41e8:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    41ea:	6802      	ldr	r2, [r0, #0]
    41ec:	7893      	ldrb	r3, [r2, #2]
    41ee:	2b02      	cmp	r3, #2
    41f0:	d0fc      	beq.n	41ec <usb_enable+0xc>
}
    41f2:	4770      	bx	lr

000041f4 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    41f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41f6:	46de      	mov	lr, fp
    41f8:	4657      	mov	r7, sl
    41fa:	464e      	mov	r6, r9
    41fc:	4645      	mov	r5, r8
    41fe:	b5e0      	push	{r5, r6, r7, lr}
    4200:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4202:	4bc2      	ldr	r3, [pc, #776]	; (450c <USB_Handler+0x318>)
    4204:	681f      	ldr	r7, [r3, #0]
    4206:	683d      	ldr	r5, [r7, #0]
    4208:	782b      	ldrb	r3, [r5, #0]
    420a:	09db      	lsrs	r3, r3, #7
    420c:	d114      	bne.n	4238 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    420e:	8c2e      	ldrh	r6, [r5, #32]
    4210:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    4212:	2e00      	cmp	r6, #0
    4214:	d000      	beq.n	4218 <USB_Handler+0x24>
    4216:	e1a9      	b.n	456c <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4218:	8bae      	ldrh	r6, [r5, #28]
    421a:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    421c:	23ab      	movs	r3, #171	; 0xab
    421e:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    4220:	5afb      	ldrh	r3, [r7, r3]
    4222:	22aa      	movs	r2, #170	; 0xaa
    4224:	0052      	lsls	r2, r2, #1
    4226:	5abd      	ldrh	r5, [r7, r2]
    4228:	401d      	ands	r5, r3
    422a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    422c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    422e:	4fb8      	ldr	r7, [pc, #736]	; (4510 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4230:	4bb6      	ldr	r3, [pc, #728]	; (450c <USB_Handler+0x318>)
    4232:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4234:	4698      	mov	r8, r3
    4236:	e184      	b.n	4542 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4238:	8c2b      	ldrh	r3, [r5, #32]
    423a:	b29b      	uxth	r3, r3
    423c:	2b00      	cmp	r3, #0
    423e:	d100      	bne.n	4242 <USB_Handler+0x4e>
    4240:	e0de      	b.n	4400 <USB_Handler+0x20c>
    4242:	8c28      	ldrh	r0, [r5, #32]
    4244:	b280      	uxth	r0, r0
    4246:	4bb3      	ldr	r3, [pc, #716]	; (4514 <USB_Handler+0x320>)
    4248:	4798      	blx	r3
    424a:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    424c:	281f      	cmp	r0, #31
    424e:	d900      	bls.n	4252 <USB_Handler+0x5e>
    4250:	e0d6      	b.n	4400 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4252:	0003      	movs	r3, r0
    4254:	3308      	adds	r3, #8
    4256:	015b      	lsls	r3, r3, #5
    4258:	18ed      	adds	r5, r5, r3
    425a:	79ed      	ldrb	r5, [r5, #7]
    425c:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    425e:	07ab      	lsls	r3, r5, #30
    4260:	d041      	beq.n	42e6 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4262:	4aad      	ldr	r2, [pc, #692]	; (4518 <USB_Handler+0x324>)
    4264:	2301      	movs	r3, #1
    4266:	4083      	lsls	r3, r0
    4268:	6811      	ldr	r1, [r2, #0]
    426a:	4399      	bics	r1, r3
    426c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    426e:	0003      	movs	r3, r0
    4270:	3308      	adds	r3, #8
    4272:	015b      	lsls	r3, r3, #5
    4274:	683a      	ldr	r2, [r7, #0]
    4276:	4694      	mov	ip, r2
    4278:	4463      	add	r3, ip
    427a:	2203      	movs	r2, #3
    427c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    427e:	183b      	adds	r3, r7, r0
    4280:	33ae      	adds	r3, #174	; 0xae
    4282:	781b      	ldrb	r3, [r3, #0]
    4284:	07db      	lsls	r3, r3, #31
    4286:	d52e      	bpl.n	42e6 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    4288:	4ba4      	ldr	r3, [pc, #656]	; (451c <USB_Handler+0x328>)
    428a:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    428c:	683a      	ldr	r2, [r7, #0]
    428e:	0003      	movs	r3, r0
    4290:	3308      	adds	r3, #8
    4292:	015b      	lsls	r3, r3, #5
    4294:	5c9b      	ldrb	r3, [r3, r2]
    4296:	079b      	lsls	r3, r3, #30
    4298:	0f9b      	lsrs	r3, r3, #30
    429a:	2b01      	cmp	r3, #1
    429c:	d100      	bne.n	42a0 <USB_Handler+0xac>
    429e:	e081      	b.n	43a4 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    42a0:	0142      	lsls	r2, r0, #5
    42a2:	4b9f      	ldr	r3, [pc, #636]	; (4520 <USB_Handler+0x32c>)
    42a4:	189b      	adds	r3, r3, r2
    42a6:	685a      	ldr	r2, [r3, #4]
    42a8:	0112      	lsls	r2, r2, #4
    42aa:	0c92      	lsrs	r2, r2, #18
    42ac:	b290      	uxth	r0, r2
    42ae:	499b      	ldr	r1, [pc, #620]	; (451c <USB_Handler+0x328>)
    42b0:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    42b2:	685a      	ldr	r2, [r3, #4]
    42b4:	0492      	lsls	r2, r2, #18
    42b6:	0c92      	lsrs	r2, r2, #18
    42b8:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    42ba:	685a      	ldr	r2, [r3, #4]
    42bc:	4999      	ldr	r1, [pc, #612]	; (4524 <USB_Handler+0x330>)
    42be:	400a      	ands	r2, r1
    42c0:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    42c2:	2800      	cmp	r0, #0
    42c4:	d107      	bne.n	42d6 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    42c6:	0162      	lsls	r2, r4, #5
    42c8:	4b95      	ldr	r3, [pc, #596]	; (4520 <USB_Handler+0x32c>)
    42ca:	189b      	adds	r3, r3, r2
    42cc:	685b      	ldr	r3, [r3, #4]
    42ce:	049b      	lsls	r3, r3, #18
    42d0:	0c9b      	lsrs	r3, r3, #18
    42d2:	4a92      	ldr	r2, [pc, #584]	; (451c <USB_Handler+0x328>)
    42d4:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    42d6:	4b8d      	ldr	r3, [pc, #564]	; (450c <USB_Handler+0x318>)
    42d8:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    42da:	1ca3      	adds	r3, r4, #2
    42dc:	011b      	lsls	r3, r3, #4
    42de:	18c3      	adds	r3, r0, r3
    42e0:	685b      	ldr	r3, [r3, #4]
    42e2:	498e      	ldr	r1, [pc, #568]	; (451c <USB_Handler+0x328>)
    42e4:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    42e6:	076b      	lsls	r3, r5, #29
    42e8:	d50e      	bpl.n	4308 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    42ea:	4a8b      	ldr	r2, [pc, #556]	; (4518 <USB_Handler+0x324>)
    42ec:	2301      	movs	r3, #1
    42ee:	40a3      	lsls	r3, r4
    42f0:	6811      	ldr	r1, [r2, #0]
    42f2:	4399      	bics	r1, r3
    42f4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    42f6:	4b85      	ldr	r3, [pc, #532]	; (450c <USB_Handler+0x318>)
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	681b      	ldr	r3, [r3, #0]
    42fc:	0022      	movs	r2, r4
    42fe:	3208      	adds	r2, #8
    4300:	0152      	lsls	r2, r2, #5
    4302:	189b      	adds	r3, r3, r2
    4304:	2204      	movs	r2, #4
    4306:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4308:	072b      	lsls	r3, r5, #28
    430a:	d514      	bpl.n	4336 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    430c:	4a82      	ldr	r2, [pc, #520]	; (4518 <USB_Handler+0x324>)
    430e:	2301      	movs	r3, #1
    4310:	40a3      	lsls	r3, r4
    4312:	6811      	ldr	r1, [r2, #0]
    4314:	4399      	bics	r1, r3
    4316:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4318:	4b7c      	ldr	r3, [pc, #496]	; (450c <USB_Handler+0x318>)
    431a:	6818      	ldr	r0, [r3, #0]
    431c:	0023      	movs	r3, r4
    431e:	3308      	adds	r3, #8
    4320:	015b      	lsls	r3, r3, #5
    4322:	6802      	ldr	r2, [r0, #0]
    4324:	4694      	mov	ip, r2
    4326:	4463      	add	r3, ip
    4328:	2208      	movs	r2, #8
    432a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    432c:	1903      	adds	r3, r0, r4
    432e:	33ae      	adds	r3, #174	; 0xae
    4330:	781b      	ldrb	r3, [r3, #0]
    4332:	079b      	lsls	r3, r3, #30
    4334:	d447      	bmi.n	43c6 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4336:	06eb      	lsls	r3, r5, #27
    4338:	d514      	bpl.n	4364 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    433a:	4a77      	ldr	r2, [pc, #476]	; (4518 <USB_Handler+0x324>)
    433c:	2301      	movs	r3, #1
    433e:	40a3      	lsls	r3, r4
    4340:	6811      	ldr	r1, [r2, #0]
    4342:	4399      	bics	r1, r3
    4344:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4346:	4b71      	ldr	r3, [pc, #452]	; (450c <USB_Handler+0x318>)
    4348:	6818      	ldr	r0, [r3, #0]
    434a:	0023      	movs	r3, r4
    434c:	3308      	adds	r3, #8
    434e:	015b      	lsls	r3, r3, #5
    4350:	6802      	ldr	r2, [r0, #0]
    4352:	4694      	mov	ip, r2
    4354:	4463      	add	r3, ip
    4356:	2210      	movs	r2, #16
    4358:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    435a:	1903      	adds	r3, r0, r4
    435c:	33ae      	adds	r3, #174	; 0xae
    435e:	781b      	ldrb	r3, [r3, #0]
    4360:	075b      	lsls	r3, r3, #29
    4362:	d43e      	bmi.n	43e2 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4364:	06ab      	lsls	r3, r5, #26
    4366:	d400      	bmi.n	436a <USB_Handler+0x176>
    4368:	e0b0      	b.n	44cc <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    436a:	4a6b      	ldr	r2, [pc, #428]	; (4518 <USB_Handler+0x324>)
    436c:	2301      	movs	r3, #1
    436e:	40a3      	lsls	r3, r4
    4370:	6811      	ldr	r1, [r2, #0]
    4372:	4399      	bics	r1, r3
    4374:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4376:	4b65      	ldr	r3, [pc, #404]	; (450c <USB_Handler+0x318>)
    4378:	6818      	ldr	r0, [r3, #0]
    437a:	0023      	movs	r3, r4
    437c:	3308      	adds	r3, #8
    437e:	015b      	lsls	r3, r3, #5
    4380:	6802      	ldr	r2, [r0, #0]
    4382:	4694      	mov	ip, r2
    4384:	4463      	add	r3, ip
    4386:	2220      	movs	r2, #32
    4388:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    438a:	1903      	adds	r3, r0, r4
    438c:	33ae      	adds	r3, #174	; 0xae
    438e:	781b      	ldrb	r3, [r3, #0]
    4390:	071b      	lsls	r3, r3, #28
    4392:	d400      	bmi.n	4396 <USB_Handler+0x1a2>
    4394:	e09a      	b.n	44cc <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    4396:	4961      	ldr	r1, [pc, #388]	; (451c <USB_Handler+0x328>)
    4398:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    439a:	0124      	lsls	r4, r4, #4
    439c:	1904      	adds	r4, r0, r4
    439e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    43a0:	4798      	blx	r3
    43a2:	e093      	b.n	44cc <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    43a4:	0142      	lsls	r2, r0, #5
    43a6:	4b5e      	ldr	r3, [pc, #376]	; (4520 <USB_Handler+0x32c>)
    43a8:	189b      	adds	r3, r3, r2
    43aa:	685a      	ldr	r2, [r3, #4]
    43ac:	0492      	lsls	r2, r2, #18
    43ae:	0c92      	lsrs	r2, r2, #18
    43b0:	495a      	ldr	r1, [pc, #360]	; (451c <USB_Handler+0x328>)
    43b2:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    43b4:	685a      	ldr	r2, [r3, #4]
    43b6:	0112      	lsls	r2, r2, #4
    43b8:	0c92      	lsrs	r2, r2, #18
    43ba:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    43bc:	685a      	ldr	r2, [r3, #4]
    43be:	0b92      	lsrs	r2, r2, #14
    43c0:	0392      	lsls	r2, r2, #14
    43c2:	605a      	str	r2, [r3, #4]
    43c4:	e787      	b.n	42d6 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    43c6:	4955      	ldr	r1, [pc, #340]	; (451c <USB_Handler+0x328>)
    43c8:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    43ca:	0162      	lsls	r2, r4, #5
    43cc:	4b54      	ldr	r3, [pc, #336]	; (4520 <USB_Handler+0x32c>)
    43ce:	189b      	adds	r3, r3, r2
    43d0:	89db      	ldrh	r3, [r3, #14]
    43d2:	221f      	movs	r2, #31
    43d4:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    43d6:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    43d8:	0123      	lsls	r3, r4, #4
    43da:	18c3      	adds	r3, r0, r3
    43dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43de:	4798      	blx	r3
    43e0:	e7a9      	b.n	4336 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    43e2:	494e      	ldr	r1, [pc, #312]	; (451c <USB_Handler+0x328>)
    43e4:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    43e6:	0162      	lsls	r2, r4, #5
    43e8:	4b4d      	ldr	r3, [pc, #308]	; (4520 <USB_Handler+0x32c>)
    43ea:	189b      	adds	r3, r3, r2
    43ec:	685b      	ldr	r3, [r3, #4]
    43ee:	011b      	lsls	r3, r3, #4
    43f0:	0c9b      	lsrs	r3, r3, #18
    43f2:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    43f4:	0123      	lsls	r3, r4, #4
    43f6:	18c3      	adds	r3, r0, r3
    43f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    43fa:	2100      	movs	r1, #0
    43fc:	4798      	blx	r3
    43fe:	e7b1      	b.n	4364 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4400:	8bac      	ldrh	r4, [r5, #28]
    4402:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4404:	0763      	lsls	r3, r4, #29
    4406:	d505      	bpl.n	4414 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4408:	2304      	movs	r3, #4
    440a:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    440c:	33a1      	adds	r3, #161	; 0xa1
    440e:	5cfb      	ldrb	r3, [r7, r3]
    4410:	07db      	lsls	r3, r3, #31
    4412:	d462      	bmi.n	44da <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    4414:	0723      	lsls	r3, r4, #28
    4416:	d50b      	bpl.n	4430 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    4418:	2200      	movs	r2, #0
    441a:	4b3f      	ldr	r3, [pc, #252]	; (4518 <USB_Handler+0x324>)
    441c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    441e:	4b3b      	ldr	r3, [pc, #236]	; (450c <USB_Handler+0x318>)
    4420:	6818      	ldr	r0, [r3, #0]
    4422:	2308      	movs	r3, #8
    4424:	6802      	ldr	r2, [r0, #0]
    4426:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4428:	339d      	adds	r3, #157	; 0x9d
    442a:	5cc3      	ldrb	r3, [r0, r3]
    442c:	079b      	lsls	r3, r3, #30
    442e:	d458      	bmi.n	44e2 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4430:	0663      	lsls	r3, r4, #25
    4432:	d508      	bpl.n	4446 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4434:	4b35      	ldr	r3, [pc, #212]	; (450c <USB_Handler+0x318>)
    4436:	6818      	ldr	r0, [r3, #0]
    4438:	2340      	movs	r3, #64	; 0x40
    443a:	6802      	ldr	r2, [r0, #0]
    443c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    443e:	3365      	adds	r3, #101	; 0x65
    4440:	5cc3      	ldrb	r3, [r0, r3]
    4442:	06db      	lsls	r3, r3, #27
    4444:	d450      	bmi.n	44e8 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4446:	06a3      	lsls	r3, r4, #26
    4448:	d508      	bpl.n	445c <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    444a:	4b30      	ldr	r3, [pc, #192]	; (450c <USB_Handler+0x318>)
    444c:	6818      	ldr	r0, [r3, #0]
    444e:	2320      	movs	r3, #32
    4450:	6802      	ldr	r2, [r0, #0]
    4452:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4454:	3385      	adds	r3, #133	; 0x85
    4456:	5cc3      	ldrb	r3, [r0, r3]
    4458:	071b      	lsls	r3, r3, #28
    445a:	d448      	bmi.n	44ee <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    445c:	06e3      	lsls	r3, r4, #27
    445e:	d508      	bpl.n	4472 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4460:	4b2a      	ldr	r3, [pc, #168]	; (450c <USB_Handler+0x318>)
    4462:	6818      	ldr	r0, [r3, #0]
    4464:	2310      	movs	r3, #16
    4466:	6802      	ldr	r2, [r0, #0]
    4468:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    446a:	3395      	adds	r3, #149	; 0x95
    446c:	5cc3      	ldrb	r3, [r0, r3]
    446e:	075b      	lsls	r3, r3, #29
    4470:	d440      	bmi.n	44f4 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4472:	0623      	lsls	r3, r4, #24
    4474:	d50b      	bpl.n	448e <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    4476:	2200      	movs	r2, #0
    4478:	4b27      	ldr	r3, [pc, #156]	; (4518 <USB_Handler+0x324>)
    447a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    447c:	4b23      	ldr	r3, [pc, #140]	; (450c <USB_Handler+0x318>)
    447e:	6818      	ldr	r0, [r3, #0]
    4480:	2380      	movs	r3, #128	; 0x80
    4482:	6802      	ldr	r2, [r0, #0]
    4484:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    4486:	3325      	adds	r3, #37	; 0x25
    4488:	5cc3      	ldrb	r3, [r0, r3]
    448a:	069b      	lsls	r3, r3, #26
    448c:	d435      	bmi.n	44fa <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    448e:	05e3      	lsls	r3, r4, #23
    4490:	d50c      	bpl.n	44ac <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    4492:	2200      	movs	r2, #0
    4494:	4b20      	ldr	r3, [pc, #128]	; (4518 <USB_Handler+0x324>)
    4496:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4498:	4b1c      	ldr	r3, [pc, #112]	; (450c <USB_Handler+0x318>)
    449a:	6818      	ldr	r0, [r3, #0]
    449c:	2380      	movs	r3, #128	; 0x80
    449e:	005b      	lsls	r3, r3, #1
    44a0:	6802      	ldr	r2, [r0, #0]
    44a2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    44a4:	3b5b      	subs	r3, #91	; 0x5b
    44a6:	5cc3      	ldrb	r3, [r0, r3]
    44a8:	065b      	lsls	r3, r3, #25
    44aa:	d429      	bmi.n	4500 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    44ac:	05a3      	lsls	r3, r4, #22
    44ae:	d50d      	bpl.n	44cc <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    44b0:	2200      	movs	r2, #0
    44b2:	4b19      	ldr	r3, [pc, #100]	; (4518 <USB_Handler+0x324>)
    44b4:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    44b6:	4b15      	ldr	r3, [pc, #84]	; (450c <USB_Handler+0x318>)
    44b8:	6818      	ldr	r0, [r3, #0]
    44ba:	2380      	movs	r3, #128	; 0x80
    44bc:	009b      	lsls	r3, r3, #2
    44be:	6802      	ldr	r2, [r0, #0]
    44c0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    44c2:	3b5c      	subs	r3, #92	; 0x5c
    44c4:	3bff      	subs	r3, #255	; 0xff
    44c6:	5cc3      	ldrb	r3, [r0, r3]
    44c8:	2b7f      	cmp	r3, #127	; 0x7f
    44ca:	d81c      	bhi.n	4506 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    44cc:	b003      	add	sp, #12
    44ce:	bc3c      	pop	{r2, r3, r4, r5}
    44d0:	4690      	mov	r8, r2
    44d2:	4699      	mov	r9, r3
    44d4:	46a2      	mov	sl, r4
    44d6:	46ab      	mov	fp, r5
    44d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	0038      	movs	r0, r7
    44de:	4798      	blx	r3
    44e0:	e798      	b.n	4414 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    44e2:	6883      	ldr	r3, [r0, #8]
    44e4:	4798      	blx	r3
    44e6:	e7a3      	b.n	4430 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    44e8:	6943      	ldr	r3, [r0, #20]
    44ea:	4798      	blx	r3
    44ec:	e7ab      	b.n	4446 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    44ee:	6903      	ldr	r3, [r0, #16]
    44f0:	4798      	blx	r3
    44f2:	e7b3      	b.n	445c <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    44f4:	68c3      	ldr	r3, [r0, #12]
    44f6:	4798      	blx	r3
    44f8:	e7bb      	b.n	4472 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    44fa:	6983      	ldr	r3, [r0, #24]
    44fc:	4798      	blx	r3
    44fe:	e7c6      	b.n	448e <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4500:	69c3      	ldr	r3, [r0, #28]
    4502:	4798      	blx	r3
    4504:	e7d2      	b.n	44ac <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4506:	6a03      	ldr	r3, [r0, #32]
    4508:	4798      	blx	r3
    450a:	e7df      	b.n	44cc <USB_Handler+0x2d8>
    450c:	20000324 	.word	0x20000324
    4510:	00005764 	.word	0x00005764
    4514:	000054ad 	.word	0x000054ad
    4518:	20000334 	.word	0x20000334
    451c:	20000338 	.word	0x20000338
    4520:	20000640 	.word	0x20000640
    4524:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4528:	0023      	movs	r3, r4
    452a:	332e      	adds	r3, #46	; 0x2e
    452c:	009b      	lsls	r3, r3, #2
    452e:	4642      	mov	r2, r8
    4530:	6812      	ldr	r2, [r2, #0]
    4532:	589b      	ldr	r3, [r3, r2]
    4534:	499e      	ldr	r1, [pc, #632]	; (47b0 <USB_Handler+0x5bc>)
    4536:	4642      	mov	r2, r8
    4538:	6810      	ldr	r0, [r2, #0]
    453a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    453c:	3401      	adds	r4, #1
    453e:	2c07      	cmp	r4, #7
    4540:	d0c4      	beq.n	44cc <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    4542:	0063      	lsls	r3, r4, #1
    4544:	5bdb      	ldrh	r3, [r3, r7]
    4546:	4233      	tst	r3, r6
    4548:	d003      	beq.n	4552 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    454a:	464a      	mov	r2, r9
    454c:	6812      	ldr	r2, [r2, #0]
    454e:	6812      	ldr	r2, [r2, #0]
    4550:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    4552:	422b      	tst	r3, r5
    4554:	d0f2      	beq.n	453c <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4556:	2c06      	cmp	r4, #6
    4558:	d1e6      	bne.n	4528 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    455a:	4b96      	ldr	r3, [pc, #600]	; (47b4 <USB_Handler+0x5c0>)
    455c:	891b      	ldrh	r3, [r3, #8]
    455e:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4560:	2280      	movs	r2, #128	; 0x80
    4562:	0052      	lsls	r2, r2, #1
    4564:	4013      	ands	r3, r2
    4566:	4a92      	ldr	r2, [pc, #584]	; (47b0 <USB_Handler+0x5bc>)
    4568:	6013      	str	r3, [r2, #0]
    456a:	e7dd      	b.n	4528 <USB_Handler+0x334>
    456c:	003c      	movs	r4, r7
    456e:	3459      	adds	r4, #89	; 0x59
    4570:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    4572:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    4574:	2201      	movs	r2, #1
    4576:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4578:	325f      	adds	r2, #95	; 0x5f
    457a:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    457c:	3a50      	subs	r2, #80	; 0x50
    457e:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4580:	3a0d      	subs	r2, #13
    4582:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4584:	46b8      	mov	r8, r7
    4586:	002f      	movs	r7, r5
    4588:	e0b9      	b.n	46fe <USB_Handler+0x50a>
    458a:	002a      	movs	r2, r5
    458c:	003d      	movs	r5, r7
    458e:	4647      	mov	r7, r8
    4590:	4690      	mov	r8, r2
    4592:	015b      	lsls	r3, r3, #5
    4594:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4596:	2308      	movs	r3, #8
    4598:	33ff      	adds	r3, #255	; 0xff
    459a:	5ceb      	ldrb	r3, [r5, r3]
    459c:	065b      	lsls	r3, r3, #25
    459e:	d516      	bpl.n	45ce <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    45a0:	2240      	movs	r2, #64	; 0x40
    45a2:	2308      	movs	r3, #8
    45a4:	33ff      	adds	r3, #255	; 0xff
    45a6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    45a8:	3b88      	subs	r3, #136	; 0x88
    45aa:	3bff      	subs	r3, #255	; 0xff
    45ac:	4642      	mov	r2, r8
    45ae:	4313      	orrs	r3, r2
    45b0:	4a81      	ldr	r2, [pc, #516]	; (47b8 <USB_Handler+0x5c4>)
    45b2:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    45b4:	2360      	movs	r3, #96	; 0x60
    45b6:	420b      	tst	r3, r1
    45b8:	d100      	bne.n	45bc <USB_Handler+0x3c8>
    45ba:	e787      	b.n	44cc <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    45bc:	9b01      	ldr	r3, [sp, #4]
    45be:	011b      	lsls	r3, r3, #4
    45c0:	18fb      	adds	r3, r7, r3
    45c2:	33e0      	adds	r3, #224	; 0xe0
    45c4:	681b      	ldr	r3, [r3, #0]
    45c6:	497c      	ldr	r1, [pc, #496]	; (47b8 <USB_Handler+0x5c4>)
    45c8:	0038      	movs	r0, r7
    45ca:	4798      	blx	r3
    45cc:	e77e      	b.n	44cc <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    45ce:	2308      	movs	r3, #8
    45d0:	33ff      	adds	r3, #255	; 0xff
    45d2:	5ceb      	ldrb	r3, [r5, r3]
    45d4:	069b      	lsls	r3, r3, #26
    45d6:	d5ed      	bpl.n	45b4 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    45d8:	2220      	movs	r2, #32
    45da:	2308      	movs	r3, #8
    45dc:	33ff      	adds	r3, #255	; 0xff
    45de:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    45e0:	4b75      	ldr	r3, [pc, #468]	; (47b8 <USB_Handler+0x5c4>)
    45e2:	4642      	mov	r2, r8
    45e4:	719a      	strb	r2, [r3, #6]
    45e6:	e7e5      	b.n	45b4 <USB_Handler+0x3c0>
    45e8:	003d      	movs	r5, r7
    45ea:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    45ec:	9a01      	ldr	r2, [sp, #4]
    45ee:	0013      	movs	r3, r2
    45f0:	3308      	adds	r3, #8
    45f2:	015b      	lsls	r3, r3, #5
    45f4:	18ed      	adds	r5, r5, r3
    45f6:	2310      	movs	r3, #16
    45f8:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    45fa:	18bb      	adds	r3, r7, r2
    45fc:	3361      	adds	r3, #97	; 0x61
    45fe:	33ff      	adds	r3, #255	; 0xff
    4600:	781b      	ldrb	r3, [r3, #0]
    4602:	06db      	lsls	r3, r3, #27
    4604:	d400      	bmi.n	4608 <USB_Handler+0x414>
    4606:	e761      	b.n	44cc <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4608:	0010      	movs	r0, r2
    460a:	0152      	lsls	r2, r2, #5
    460c:	4b69      	ldr	r3, [pc, #420]	; (47b4 <USB_Handler+0x5c0>)
    460e:	189b      	adds	r3, r3, r2
    4610:	685b      	ldr	r3, [r3, #4]
    4612:	049b      	lsls	r3, r3, #18
    4614:	0c9b      	lsrs	r3, r3, #18
    4616:	4968      	ldr	r1, [pc, #416]	; (47b8 <USB_Handler+0x5c4>)
    4618:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    461a:	0103      	lsls	r3, r0, #4
    461c:	18fb      	adds	r3, r7, r3
    461e:	33dc      	adds	r3, #220	; 0xdc
    4620:	681b      	ldr	r3, [r3, #0]
    4622:	4640      	mov	r0, r8
    4624:	4798      	blx	r3
    4626:	e751      	b.n	44cc <USB_Handler+0x2d8>
    4628:	002a      	movs	r2, r5
    462a:	003d      	movs	r5, r7
    462c:	4647      	mov	r7, r8
    462e:	4690      	mov	r8, r2
    4630:	015b      	lsls	r3, r3, #5
    4632:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4634:	2308      	movs	r3, #8
    4636:	33ff      	adds	r3, #255	; 0xff
    4638:	5ceb      	ldrb	r3, [r5, r3]
    463a:	079b      	lsls	r3, r3, #30
    463c:	d51e      	bpl.n	467c <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    463e:	2202      	movs	r2, #2
    4640:	2308      	movs	r3, #8
    4642:	33ff      	adds	r3, #255	; 0xff
    4644:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4646:	485c      	ldr	r0, [pc, #368]	; (47b8 <USB_Handler+0x5c4>)
    4648:	3b88      	subs	r3, #136	; 0x88
    464a:	3bff      	subs	r3, #255	; 0xff
    464c:	4642      	mov	r2, r8
    464e:	4313      	orrs	r3, r2
    4650:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4652:	9b01      	ldr	r3, [sp, #4]
    4654:	015a      	lsls	r2, r3, #5
    4656:	4b57      	ldr	r3, [pc, #348]	; (47b4 <USB_Handler+0x5c0>)
    4658:	189b      	adds	r3, r3, r2
    465a:	3310      	adds	r3, #16
    465c:	685b      	ldr	r3, [r3, #4]
    465e:	049b      	lsls	r3, r3, #18
    4660:	0c9b      	lsrs	r3, r3, #18
    4662:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4664:	078b      	lsls	r3, r1, #30
    4666:	d100      	bne.n	466a <USB_Handler+0x476>
    4668:	e730      	b.n	44cc <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    466a:	9b01      	ldr	r3, [sp, #4]
    466c:	330d      	adds	r3, #13
    466e:	011b      	lsls	r3, r3, #4
    4670:	18fb      	adds	r3, r7, r3
    4672:	685b      	ldr	r3, [r3, #4]
    4674:	4950      	ldr	r1, [pc, #320]	; (47b8 <USB_Handler+0x5c4>)
    4676:	0038      	movs	r0, r7
    4678:	4798      	blx	r3
    467a:	e727      	b.n	44cc <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    467c:	2308      	movs	r3, #8
    467e:	33ff      	adds	r3, #255	; 0xff
    4680:	5ceb      	ldrb	r3, [r5, r3]
    4682:	07db      	lsls	r3, r3, #31
    4684:	d5ee      	bpl.n	4664 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4686:	2201      	movs	r2, #1
    4688:	2308      	movs	r3, #8
    468a:	33ff      	adds	r3, #255	; 0xff
    468c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    468e:	484a      	ldr	r0, [pc, #296]	; (47b8 <USB_Handler+0x5c4>)
    4690:	4643      	mov	r3, r8
    4692:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4694:	9b01      	ldr	r3, [sp, #4]
    4696:	015b      	lsls	r3, r3, #5
    4698:	4a46      	ldr	r2, [pc, #280]	; (47b4 <USB_Handler+0x5c0>)
    469a:	18d2      	adds	r2, r2, r3
    469c:	6853      	ldr	r3, [r2, #4]
    469e:	049b      	lsls	r3, r3, #18
    46a0:	0c9b      	lsrs	r3, r3, #18
    46a2:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    46a4:	6853      	ldr	r3, [r2, #4]
    46a6:	011b      	lsls	r3, r3, #4
    46a8:	0c9b      	lsrs	r3, r3, #18
    46aa:	8083      	strh	r3, [r0, #4]
    46ac:	e7da      	b.n	4664 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    46ae:	2208      	movs	r2, #8
    46b0:	32ff      	adds	r2, #255	; 0xff
    46b2:	5c9a      	ldrb	r2, [r3, r2]
    46b4:	0752      	lsls	r2, r2, #29
    46b6:	d56e      	bpl.n	4796 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    46b8:	2004      	movs	r0, #4
    46ba:	2208      	movs	r2, #8
    46bc:	32ff      	adds	r2, #255	; 0xff
    46be:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    46c0:	9801      	ldr	r0, [sp, #4]
    46c2:	0142      	lsls	r2, r0, #5
    46c4:	4b3b      	ldr	r3, [pc, #236]	; (47b4 <USB_Handler+0x5c0>)
    46c6:	189b      	adds	r3, r3, r2
    46c8:	7a9b      	ldrb	r3, [r3, #10]
    46ca:	079b      	lsls	r3, r3, #30
    46cc:	d505      	bpl.n	46da <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    46ce:	4b39      	ldr	r3, [pc, #228]	; (47b4 <USB_Handler+0x5c0>)
    46d0:	189b      	adds	r3, r3, r2
    46d2:	7a9a      	ldrb	r2, [r3, #10]
    46d4:	2002      	movs	r0, #2
    46d6:	4382      	bics	r2, r0
    46d8:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    46da:	4b37      	ldr	r3, [pc, #220]	; (47b8 <USB_Handler+0x5c4>)
    46dc:	4642      	mov	r2, r8
    46de:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    46e0:	9b01      	ldr	r3, [sp, #4]
    46e2:	3308      	adds	r3, #8
    46e4:	015b      	lsls	r3, r3, #5
    46e6:	683a      	ldr	r2, [r7, #0]
    46e8:	4694      	mov	ip, r2
    46ea:	4463      	add	r3, ip
    46ec:	79db      	ldrb	r3, [r3, #7]
    46ee:	07db      	lsls	r3, r3, #31
    46f0:	d551      	bpl.n	4796 <USB_Handler+0x5a2>
    46f2:	e6eb      	b.n	44cc <USB_Handler+0x2d8>
    46f4:	3301      	adds	r3, #1
    46f6:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    46f8:	2b08      	cmp	r3, #8
    46fa:	d100      	bne.n	46fe <USB_Handler+0x50a>
    46fc:	e6e6      	b.n	44cc <USB_Handler+0x2d8>
    46fe:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4700:	9301      	str	r3, [sp, #4]
    4702:	0032      	movs	r2, r6
    4704:	411a      	asrs	r2, r3
    4706:	4661      	mov	r1, ip
    4708:	4211      	tst	r1, r2
    470a:	d0f3      	beq.n	46f4 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    470c:	001a      	movs	r2, r3
    470e:	3208      	adds	r2, #8
    4710:	0152      	lsls	r2, r2, #5
    4712:	18ba      	adds	r2, r7, r2
    4714:	79d2      	ldrb	r2, [r2, #7]
    4716:	b2d2      	uxtb	r2, r2
    4718:	7a21      	ldrb	r1, [r4, #8]
    471a:	4011      	ands	r1, r2
    471c:	7820      	ldrb	r0, [r4, #0]
    471e:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4720:	4648      	mov	r0, r9
    4722:	4210      	tst	r0, r2
    4724:	d000      	beq.n	4728 <USB_Handler+0x534>
    4726:	e730      	b.n	458a <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4728:	4650      	mov	r0, sl
    472a:	4210      	tst	r0, r2
    472c:	d000      	beq.n	4730 <USB_Handler+0x53c>
    472e:	e75b      	b.n	45e8 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4730:	4658      	mov	r0, fp
    4732:	4210      	tst	r0, r2
    4734:	d000      	beq.n	4738 <USB_Handler+0x544>
    4736:	e777      	b.n	4628 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4738:	200c      	movs	r0, #12
    473a:	4210      	tst	r0, r2
    473c:	d0da      	beq.n	46f4 <USB_Handler+0x500>
    473e:	002a      	movs	r2, r5
    4740:	003d      	movs	r5, r7
    4742:	4647      	mov	r7, r8
    4744:	4690      	mov	r8, r2
    4746:	015b      	lsls	r3, r3, #5
    4748:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    474a:	2208      	movs	r2, #8
    474c:	32ff      	adds	r2, #255	; 0xff
    474e:	5c9a      	ldrb	r2, [r3, r2]
    4750:	0712      	lsls	r2, r2, #28
    4752:	d5ac      	bpl.n	46ae <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4754:	3804      	subs	r0, #4
    4756:	2208      	movs	r2, #8
    4758:	32ff      	adds	r2, #255	; 0xff
    475a:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    475c:	9801      	ldr	r0, [sp, #4]
    475e:	0142      	lsls	r2, r0, #5
    4760:	4b14      	ldr	r3, [pc, #80]	; (47b4 <USB_Handler+0x5c0>)
    4762:	189b      	adds	r3, r3, r2
    4764:	7e9b      	ldrb	r3, [r3, #26]
    4766:	079b      	lsls	r3, r3, #30
    4768:	d505      	bpl.n	4776 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    476a:	4b12      	ldr	r3, [pc, #72]	; (47b4 <USB_Handler+0x5c0>)
    476c:	189b      	adds	r3, r3, r2
    476e:	7e9a      	ldrb	r2, [r3, #26]
    4770:	2002      	movs	r0, #2
    4772:	4382      	bics	r2, r0
    4774:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4776:	2380      	movs	r3, #128	; 0x80
    4778:	425b      	negs	r3, r3
    477a:	4642      	mov	r2, r8
    477c:	4313      	orrs	r3, r2
    477e:	4a0e      	ldr	r2, [pc, #56]	; (47b8 <USB_Handler+0x5c4>)
    4780:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4782:	9b01      	ldr	r3, [sp, #4]
    4784:	3308      	adds	r3, #8
    4786:	015b      	lsls	r3, r3, #5
    4788:	683a      	ldr	r2, [r7, #0]
    478a:	4694      	mov	ip, r2
    478c:	4463      	add	r3, ip
    478e:	79db      	ldrb	r3, [r3, #7]
    4790:	079b      	lsls	r3, r3, #30
    4792:	d500      	bpl.n	4796 <USB_Handler+0x5a2>
    4794:	e69a      	b.n	44cc <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4796:	230c      	movs	r3, #12
    4798:	420b      	tst	r3, r1
    479a:	d100      	bne.n	479e <USB_Handler+0x5aa>
    479c:	e696      	b.n	44cc <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    479e:	9b01      	ldr	r3, [sp, #4]
    47a0:	011b      	lsls	r3, r3, #4
    47a2:	18fb      	adds	r3, r7, r3
    47a4:	33d8      	adds	r3, #216	; 0xd8
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	4903      	ldr	r1, [pc, #12]	; (47b8 <USB_Handler+0x5c4>)
    47aa:	0038      	movs	r0, r7
    47ac:	4798      	blx	r3
    47ae:	e68d      	b.n	44cc <USB_Handler+0x2d8>
    47b0:	20000328 	.word	0x20000328
    47b4:	20000640 	.word	0x20000640
    47b8:	2000032c 	.word	0x2000032c

000047bc <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    47bc:	2200      	movs	r2, #0
    47be:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    47c0:	2301      	movs	r3, #1
    47c2:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    47c4:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    47c6:	70c3      	strb	r3, [r0, #3]
}
    47c8:	4770      	bx	lr
	...

000047cc <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    47cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    47ce:	46ce      	mov	lr, r9
    47d0:	4647      	mov	r7, r8
    47d2:	b580      	push	{r7, lr}
    47d4:	b083      	sub	sp, #12
    47d6:	0004      	movs	r4, r0
    47d8:	000d      	movs	r5, r1
    47da:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    47dc:	2300      	movs	r3, #0
    47de:	4a6e      	ldr	r2, [pc, #440]	; (4998 <usb_init+0x1cc>)
    47e0:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    47e2:	4a6e      	ldr	r2, [pc, #440]	; (499c <usb_init+0x1d0>)
    47e4:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    47e6:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    47e8:	496d      	ldr	r1, [pc, #436]	; (49a0 <usb_init+0x1d4>)
    47ea:	69ca      	ldr	r2, [r1, #28]
    47ec:	2020      	movs	r0, #32
    47ee:	4302      	orrs	r2, r0
    47f0:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    47f2:	af01      	add	r7, sp, #4
    47f4:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    47f6:	2201      	movs	r2, #1
    47f8:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    47fa:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    47fc:	3306      	adds	r3, #6
    47fe:	4699      	mov	r9, r3
    4800:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4802:	0039      	movs	r1, r7
    4804:	3808      	subs	r0, #8
    4806:	4b67      	ldr	r3, [pc, #412]	; (49a4 <usb_init+0x1d8>)
    4808:	4698      	mov	r8, r3
    480a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    480c:	464b      	mov	r3, r9
    480e:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4810:	0039      	movs	r1, r7
    4812:	2019      	movs	r0, #25
    4814:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4816:	78b3      	ldrb	r3, [r6, #2]
    4818:	466a      	mov	r2, sp
    481a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    481c:	4669      	mov	r1, sp
    481e:	2006      	movs	r0, #6
    4820:	4b61      	ldr	r3, [pc, #388]	; (49a8 <usb_init+0x1dc>)
    4822:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4824:	2006      	movs	r0, #6
    4826:	4b61      	ldr	r3, [pc, #388]	; (49ac <usb_init+0x1e0>)
    4828:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    482a:	782b      	ldrb	r3, [r5, #0]
    482c:	2201      	movs	r2, #1
    482e:	4313      	orrs	r3, r2
    4830:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4832:	78ab      	ldrb	r3, [r5, #2]
    4834:	07db      	lsls	r3, r3, #31
    4836:	d4fc      	bmi.n	4832 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4838:	4a5d      	ldr	r2, [pc, #372]	; (49b0 <usb_init+0x1e4>)
    483a:	78d3      	ldrb	r3, [r2, #3]
    483c:	2103      	movs	r1, #3
    483e:	438b      	bics	r3, r1
    4840:	2102      	movs	r1, #2
    4842:	430b      	orrs	r3, r1
    4844:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4846:	78d3      	ldrb	r3, [r2, #3]
    4848:	210c      	movs	r1, #12
    484a:	438b      	bics	r3, r1
    484c:	2108      	movs	r1, #8
    484e:	430b      	orrs	r3, r1
    4850:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4852:	4b58      	ldr	r3, [pc, #352]	; (49b4 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4854:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4856:	039b      	lsls	r3, r3, #14
    4858:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    485a:	2b1f      	cmp	r3, #31
    485c:	d100      	bne.n	4860 <usb_init+0x94>
    485e:	e08f      	b.n	4980 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4860:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4862:	019b      	lsls	r3, r3, #6
    4864:	4954      	ldr	r1, [pc, #336]	; (49b8 <usb_init+0x1ec>)
    4866:	400a      	ands	r2, r1
    4868:	4313      	orrs	r3, r2
    486a:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    486c:	4b51      	ldr	r3, [pc, #324]	; (49b4 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    486e:	681b      	ldr	r3, [r3, #0]
    4870:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4872:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4874:	2b1f      	cmp	r3, #31
    4876:	d100      	bne.n	487a <usb_init+0xae>
    4878:	e084      	b.n	4984 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    487a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    487c:	211f      	movs	r1, #31
    487e:	438a      	bics	r2, r1
    4880:	4313      	orrs	r3, r2
    4882:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4884:	4b4b      	ldr	r3, [pc, #300]	; (49b4 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    4886:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4888:	019b      	lsls	r3, r3, #6
    488a:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    488c:	2b07      	cmp	r3, #7
    488e:	d100      	bne.n	4892 <usb_init+0xc6>
    4890:	e07a      	b.n	4988 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4892:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4894:	031b      	lsls	r3, r3, #12
    4896:	4949      	ldr	r1, [pc, #292]	; (49bc <usb_init+0x1f0>)
    4898:	400a      	ands	r2, r1
    489a:	4313      	orrs	r3, r2
    489c:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    489e:	7832      	ldrb	r2, [r6, #0]
    48a0:	7829      	ldrb	r1, [r5, #0]
    48a2:	01d2      	lsls	r2, r2, #7
    48a4:	237f      	movs	r3, #127	; 0x7f
    48a6:	400b      	ands	r3, r1
    48a8:	4313      	orrs	r3, r2
    48aa:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    48ac:	7871      	ldrb	r1, [r6, #1]
    48ae:	782b      	ldrb	r3, [r5, #0]
    48b0:	2201      	movs	r2, #1
    48b2:	400a      	ands	r2, r1
    48b4:	0092      	lsls	r2, r2, #2
    48b6:	2104      	movs	r1, #4
    48b8:	438b      	bics	r3, r1
    48ba:	4313      	orrs	r3, r2
    48bc:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    48be:	4b40      	ldr	r3, [pc, #256]	; (49c0 <usb_init+0x1f4>)
    48c0:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    48c2:	78f3      	ldrb	r3, [r6, #3]
    48c4:	2b01      	cmp	r3, #1
    48c6:	d061      	beq.n	498c <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    48c8:	2b00      	cmp	r3, #0
    48ca:	d106      	bne.n	48da <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    48cc:	6822      	ldr	r2, [r4, #0]
    48ce:	8913      	ldrh	r3, [r2, #8]
    48d0:	210c      	movs	r1, #12
    48d2:	438b      	bics	r3, r1
    48d4:	2104      	movs	r1, #4
    48d6:	430b      	orrs	r3, r1
    48d8:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    48da:	2280      	movs	r2, #128	; 0x80
    48dc:	0052      	lsls	r2, r2, #1
    48de:	2100      	movs	r1, #0
    48e0:	4837      	ldr	r0, [pc, #220]	; (49c0 <usb_init+0x1f4>)
    48e2:	4b38      	ldr	r3, [pc, #224]	; (49c4 <usb_init+0x1f8>)
    48e4:	4798      	blx	r3
    48e6:	1d23      	adds	r3, r4, #4
    48e8:	0021      	movs	r1, r4
    48ea:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    48ec:	2200      	movs	r2, #0
    48ee:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    48f0:	428b      	cmp	r3, r1
    48f2:	d1fc      	bne.n	48ee <usb_init+0x122>
    48f4:	0021      	movs	r1, r4
    48f6:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    48f8:	2200      	movs	r2, #0
    48fa:	601a      	str	r2, [r3, #0]
    48fc:	605a      	str	r2, [r3, #4]
    48fe:	609a      	str	r2, [r3, #8]
    4900:	60da      	str	r2, [r3, #12]
    4902:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4904:	428b      	cmp	r3, r1
    4906:	d1f8      	bne.n	48fa <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4908:	2300      	movs	r3, #0
    490a:	22a4      	movs	r2, #164	; 0xa4
    490c:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    490e:	3201      	adds	r2, #1
    4910:	54a3      	strb	r3, [r4, r2]
    4912:	0023      	movs	r3, r4
    4914:	33a6      	adds	r3, #166	; 0xa6
    4916:	0021      	movs	r1, r4
    4918:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    491a:	2200      	movs	r2, #0
    491c:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    491e:	721a      	strb	r2, [r3, #8]
    4920:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4922:	4299      	cmp	r1, r3
    4924:	d1fa      	bne.n	491c <usb_init+0x150>
    4926:	0023      	movs	r3, r4
    4928:	33b8      	adds	r3, #184	; 0xb8
    492a:	0021      	movs	r1, r4
    492c:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    492e:	2200      	movs	r2, #0
    4930:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4932:	428b      	cmp	r3, r1
    4934:	d1fc      	bne.n	4930 <usb_init+0x164>
    4936:	0021      	movs	r1, r4
    4938:	3155      	adds	r1, #85	; 0x55
    493a:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    493c:	2200      	movs	r2, #0
    493e:	601a      	str	r2, [r3, #0]
    4940:	605a      	str	r2, [r3, #4]
    4942:	609a      	str	r2, [r3, #8]
    4944:	60da      	str	r2, [r3, #12]
    4946:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4948:	428b      	cmp	r3, r1
    494a:	d1f8      	bne.n	493e <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    494c:	2300      	movs	r3, #0
    494e:	22aa      	movs	r2, #170	; 0xaa
    4950:	0052      	lsls	r2, r2, #1
    4952:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    4954:	3202      	adds	r2, #2
    4956:	52a3      	strh	r3, [r4, r2]
    4958:	0023      	movs	r3, r4
    495a:	3359      	adds	r3, #89	; 0x59
    495c:	33ff      	adds	r3, #255	; 0xff
    495e:	3461      	adds	r4, #97	; 0x61
    4960:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    4962:	2200      	movs	r2, #0
    4964:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    4966:	721a      	strb	r2, [r3, #8]
    4968:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    496a:	42a3      	cmp	r3, r4
    496c:	d1fa      	bne.n	4964 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    496e:	2280      	movs	r2, #128	; 0x80
    4970:	4b15      	ldr	r3, [pc, #84]	; (49c8 <usb_init+0x1fc>)
    4972:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4974:	2000      	movs	r0, #0
    4976:	b003      	add	sp, #12
    4978:	bc0c      	pop	{r2, r3}
    497a:	4690      	mov	r8, r2
    497c:	4699      	mov	r9, r3
    497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4980:	3b1a      	subs	r3, #26
    4982:	e76d      	b.n	4860 <usb_init+0x94>
		pad_transp = 29;
    4984:	3b02      	subs	r3, #2
    4986:	e778      	b.n	487a <usb_init+0xae>
		pad_trim = 3;
    4988:	3b04      	subs	r3, #4
    498a:	e782      	b.n	4892 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    498c:	6822      	ldr	r2, [r4, #0]
    498e:	8913      	ldrh	r3, [r2, #8]
    4990:	3108      	adds	r1, #8
    4992:	438b      	bics	r3, r1
    4994:	8113      	strh	r3, [r2, #8]
    4996:	e7a0      	b.n	48da <usb_init+0x10e>
    4998:	20000334 	.word	0x20000334
    499c:	20000324 	.word	0x20000324
    49a0:	40000400 	.word	0x40000400
    49a4:	00002979 	.word	0x00002979
    49a8:	00002829 	.word	0x00002829
    49ac:	0000279d 	.word	0x0000279d
    49b0:	41005000 	.word	0x41005000
    49b4:	00806024 	.word	0x00806024
    49b8:	fffff83f 	.word	0xfffff83f
    49bc:	ffff8fff 	.word	0xffff8fff
    49c0:	20000640 	.word	0x20000640
    49c4:	0000559b 	.word	0x0000559b
    49c8:	e000e100 	.word	0xe000e100

000049cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    49cc:	e7fe      	b.n	49cc <Dummy_Handler>
	...

000049d0 <Reset_Handler>:
{
    49d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    49d2:	4a2a      	ldr	r2, [pc, #168]	; (4a7c <Reset_Handler+0xac>)
    49d4:	4b2a      	ldr	r3, [pc, #168]	; (4a80 <Reset_Handler+0xb0>)
    49d6:	429a      	cmp	r2, r3
    49d8:	d011      	beq.n	49fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    49da:	001a      	movs	r2, r3
    49dc:	4b29      	ldr	r3, [pc, #164]	; (4a84 <Reset_Handler+0xb4>)
    49de:	429a      	cmp	r2, r3
    49e0:	d20d      	bcs.n	49fe <Reset_Handler+0x2e>
    49e2:	4a29      	ldr	r2, [pc, #164]	; (4a88 <Reset_Handler+0xb8>)
    49e4:	3303      	adds	r3, #3
    49e6:	1a9b      	subs	r3, r3, r2
    49e8:	089b      	lsrs	r3, r3, #2
    49ea:	3301      	adds	r3, #1
    49ec:	009b      	lsls	r3, r3, #2
    49ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    49f0:	4823      	ldr	r0, [pc, #140]	; (4a80 <Reset_Handler+0xb0>)
    49f2:	4922      	ldr	r1, [pc, #136]	; (4a7c <Reset_Handler+0xac>)
    49f4:	588c      	ldr	r4, [r1, r2]
    49f6:	5084      	str	r4, [r0, r2]
    49f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    49fa:	429a      	cmp	r2, r3
    49fc:	d1fa      	bne.n	49f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    49fe:	4a23      	ldr	r2, [pc, #140]	; (4a8c <Reset_Handler+0xbc>)
    4a00:	4b23      	ldr	r3, [pc, #140]	; (4a90 <Reset_Handler+0xc0>)
    4a02:	429a      	cmp	r2, r3
    4a04:	d20a      	bcs.n	4a1c <Reset_Handler+0x4c>
    4a06:	43d3      	mvns	r3, r2
    4a08:	4921      	ldr	r1, [pc, #132]	; (4a90 <Reset_Handler+0xc0>)
    4a0a:	185b      	adds	r3, r3, r1
    4a0c:	2103      	movs	r1, #3
    4a0e:	438b      	bics	r3, r1
    4a10:	3304      	adds	r3, #4
    4a12:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4a14:	2100      	movs	r1, #0
    4a16:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4a18:	4293      	cmp	r3, r2
    4a1a:	d1fc      	bne.n	4a16 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4a1c:	4a1d      	ldr	r2, [pc, #116]	; (4a94 <Reset_Handler+0xc4>)
    4a1e:	21ff      	movs	r1, #255	; 0xff
    4a20:	4b1d      	ldr	r3, [pc, #116]	; (4a98 <Reset_Handler+0xc8>)
    4a22:	438b      	bics	r3, r1
    4a24:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4a26:	39fd      	subs	r1, #253	; 0xfd
    4a28:	2390      	movs	r3, #144	; 0x90
    4a2a:	005b      	lsls	r3, r3, #1
    4a2c:	4a1b      	ldr	r2, [pc, #108]	; (4a9c <Reset_Handler+0xcc>)
    4a2e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4a30:	4a1b      	ldr	r2, [pc, #108]	; (4aa0 <Reset_Handler+0xd0>)
    4a32:	78d3      	ldrb	r3, [r2, #3]
    4a34:	2503      	movs	r5, #3
    4a36:	43ab      	bics	r3, r5
    4a38:	2402      	movs	r4, #2
    4a3a:	4323      	orrs	r3, r4
    4a3c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4a3e:	78d3      	ldrb	r3, [r2, #3]
    4a40:	270c      	movs	r7, #12
    4a42:	43bb      	bics	r3, r7
    4a44:	2608      	movs	r6, #8
    4a46:	4333      	orrs	r3, r6
    4a48:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    4a4a:	4b16      	ldr	r3, [pc, #88]	; (4aa4 <Reset_Handler+0xd4>)
    4a4c:	7b98      	ldrb	r0, [r3, #14]
    4a4e:	2230      	movs	r2, #48	; 0x30
    4a50:	4390      	bics	r0, r2
    4a52:	2220      	movs	r2, #32
    4a54:	4310      	orrs	r0, r2
    4a56:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4a58:	7b99      	ldrb	r1, [r3, #14]
    4a5a:	43b9      	bics	r1, r7
    4a5c:	4331      	orrs	r1, r6
    4a5e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4a60:	7b9a      	ldrb	r2, [r3, #14]
    4a62:	43aa      	bics	r2, r5
    4a64:	4322      	orrs	r2, r4
    4a66:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    4a68:	4a0f      	ldr	r2, [pc, #60]	; (4aa8 <Reset_Handler+0xd8>)
    4a6a:	6853      	ldr	r3, [r2, #4]
    4a6c:	2180      	movs	r1, #128	; 0x80
    4a6e:	430b      	orrs	r3, r1
    4a70:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4a72:	4b0e      	ldr	r3, [pc, #56]	; (4aac <Reset_Handler+0xdc>)
    4a74:	4798      	blx	r3
        main();
    4a76:	4b0e      	ldr	r3, [pc, #56]	; (4ab0 <Reset_Handler+0xe0>)
    4a78:	4798      	blx	r3
    4a7a:	e7fe      	b.n	4a7a <Reset_Handler+0xaa>
    4a7c:	000057a0 	.word	0x000057a0
    4a80:	20000000 	.word	0x20000000
    4a84:	200000ec 	.word	0x200000ec
    4a88:	20000004 	.word	0x20000004
    4a8c:	200000ec 	.word	0x200000ec
    4a90:	20004834 	.word	0x20004834
    4a94:	e000ed00 	.word	0xe000ed00
    4a98:	00000000 	.word	0x00000000
    4a9c:	41007000 	.word	0x41007000
    4aa0:	41005000 	.word	0x41005000
    4aa4:	41004800 	.word	0x41004800
    4aa8:	41004000 	.word	0x41004000
    4aac:	00005541 	.word	0x00005541
    4ab0:	00004c61 	.word	0x00004c61

00004ab4 <tc_callback>:
	}
}

void tc_callback(struct tc_module *const module_inst)
{
	module_inst->hw->COUNT16.COUNT.reg = 65535 - (500000 / 8192);		//EXECUTION_TIMER_PERIOD sec period
    4ab4:	6803      	ldr	r3, [r0, #0]
    4ab6:	223e      	movs	r2, #62	; 0x3e
    4ab8:	4252      	negs	r2, r2
    4aba:	821a      	strh	r2, [r3, #16]
	Adc *const adc_module = module_inst->hw;
    4abc:	4b07      	ldr	r3, [pc, #28]	; (4adc <tc_callback+0x28>)
    4abe:	681a      	ldr	r2, [r3, #0]
    4ac0:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4ac2:	b25b      	sxtb	r3, r3
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	dbfb      	blt.n	4ac0 <tc_callback+0xc>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4ac8:	7b13      	ldrb	r3, [r2, #12]
    4aca:	2102      	movs	r1, #2
    4acc:	430b      	orrs	r3, r1
    4ace:	7313      	strb	r3, [r2, #12]
    4ad0:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4ad2:	b25b      	sxtb	r3, r3
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	dbfb      	blt.n	4ad0 <tc_callback+0x1c>
	
	adc_start_conversion(&adc_instance);
}
    4ad8:	4770      	bx	lr
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	2000479c 	.word	0x2000479c

00004ae0 <adc_complete_callback>:
{
    4ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ae2:	46c6      	mov	lr, r8
    4ae4:	b500      	push	{lr}
	adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    4ae6:	2280      	movs	r2, #128	; 0x80
    4ae8:	0192      	lsls	r2, r2, #6
    4aea:	4917      	ldr	r1, [pc, #92]	; (4b48 <adc_complete_callback+0x68>)
    4aec:	4817      	ldr	r0, [pc, #92]	; (4b4c <adc_complete_callback+0x6c>)
    4aee:	4b18      	ldr	r3, [pc, #96]	; (4b50 <adc_complete_callback+0x70>)
    4af0:	4798      	blx	r3
	counter += ADC_SAMPLES;
    4af2:	4a18      	ldr	r2, [pc, #96]	; (4b54 <adc_complete_callback+0x74>)
    4af4:	6813      	ldr	r3, [r2, #0]
    4af6:	2180      	movs	r1, #128	; 0x80
    4af8:	0189      	lsls	r1, r1, #6
    4afa:	468c      	mov	ip, r1
    4afc:	4463      	add	r3, ip
    4afe:	6013      	str	r3, [r2, #0]
	if(counter >= 8192)
    4b00:	4a15      	ldr	r2, [pc, #84]	; (4b58 <adc_complete_callback+0x78>)
    4b02:	4293      	cmp	r3, r2
    4b04:	d802      	bhi.n	4b0c <adc_complete_callback+0x2c>
}
    4b06:	bc04      	pop	{r2}
    4b08:	4690      	mov	r8, r2
    4b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ui_com_tx_start();
    4b0c:	4b13      	ldr	r3, [pc, #76]	; (4b5c <adc_complete_callback+0x7c>)
    4b0e:	4798      	blx	r3
    4b10:	4c0d      	ldr	r4, [pc, #52]	; (4b48 <adc_complete_callback+0x68>)
    4b12:	2380      	movs	r3, #128	; 0x80
    4b14:	01db      	lsls	r3, r3, #7
    4b16:	18e6      	adds	r6, r4, r3
			if (!udi_cdc_is_tx_ready()) {
    4b18:	4d11      	ldr	r5, [pc, #68]	; (4b60 <adc_complete_callback+0x80>)
				udi_cdc_putc(adc_result_buffer[i]);
    4b1a:	4b12      	ldr	r3, [pc, #72]	; (4b64 <adc_complete_callback+0x84>)
    4b1c:	4698      	mov	r8, r3
				udi_cdc_signal_overrun();
    4b1e:	4f12      	ldr	r7, [pc, #72]	; (4b68 <adc_complete_callback+0x88>)
    4b20:	e005      	b.n	4b2e <adc_complete_callback+0x4e>
				udi_cdc_putc(adc_result_buffer[i]);
    4b22:	2300      	movs	r3, #0
    4b24:	5ee0      	ldrsh	r0, [r4, r3]
    4b26:	47c0      	blx	r8
    4b28:	3402      	adds	r4, #2
		for(i=0;i<ADC_SAMPLES;i++)
    4b2a:	42b4      	cmp	r4, r6
    4b2c:	d006      	beq.n	4b3c <adc_complete_callback+0x5c>
			if (!udi_cdc_is_tx_ready()) {
    4b2e:	47a8      	blx	r5
    4b30:	2800      	cmp	r0, #0
    4b32:	d1f6      	bne.n	4b22 <adc_complete_callback+0x42>
				udi_cdc_signal_overrun();
    4b34:	47b8      	blx	r7
				ui_com_overflow();
    4b36:	4b0d      	ldr	r3, [pc, #52]	; (4b6c <adc_complete_callback+0x8c>)
    4b38:	4798      	blx	r3
    4b3a:	e7f5      	b.n	4b28 <adc_complete_callback+0x48>
		ui_com_tx_stop();
    4b3c:	4b0c      	ldr	r3, [pc, #48]	; (4b70 <adc_complete_callback+0x90>)
    4b3e:	4798      	blx	r3
		counter = 0;
    4b40:	2200      	movs	r2, #0
    4b42:	4b04      	ldr	r3, [pc, #16]	; (4b54 <adc_complete_callback+0x74>)
    4b44:	601a      	str	r2, [r3, #0]
}
    4b46:	e7de      	b.n	4b06 <adc_complete_callback+0x26>
    4b48:	20000744 	.word	0x20000744
    4b4c:	2000479c 	.word	0x2000479c
    4b50:	000016a5 	.word	0x000016a5
    4b54:	20004744 	.word	0x20004744
    4b58:	00001fff 	.word	0x00001fff
    4b5c:	000001d1 	.word	0x000001d1
    4b60:	0000098d 	.word	0x0000098d
    4b64:	00000a55 	.word	0x00000a55
    4b68:	000005dd 	.word	0x000005dd
    4b6c:	000001d5 	.word	0x000001d5
    4b70:	000001d3 	.word	0x000001d3

00004b74 <configure_tc_callbacks>:
{
    4b74:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance, tc_callback,TC_CALLBACK_OVERFLOW);
    4b76:	4c0c      	ldr	r4, [pc, #48]	; (4ba8 <configure_tc_callbacks+0x34>)
    4b78:	2200      	movs	r2, #0
    4b7a:	490c      	ldr	r1, [pc, #48]	; (4bac <configure_tc_callbacks+0x38>)
    4b7c:	0020      	movs	r0, r4
    4b7e:	4b0c      	ldr	r3, [pc, #48]	; (4bb0 <configure_tc_callbacks+0x3c>)
    4b80:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    4b82:	6820      	ldr	r0, [r4, #0]
    4b84:	4b0b      	ldr	r3, [pc, #44]	; (4bb4 <configure_tc_callbacks+0x40>)
    4b86:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    4b88:	4b0b      	ldr	r3, [pc, #44]	; (4bb8 <configure_tc_callbacks+0x44>)
    4b8a:	5c1a      	ldrb	r2, [r3, r0]
    4b8c:	231f      	movs	r3, #31
    4b8e:	4013      	ands	r3, r2
    4b90:	2201      	movs	r2, #1
    4b92:	0011      	movs	r1, r2
    4b94:	4099      	lsls	r1, r3
    4b96:	4b09      	ldr	r3, [pc, #36]	; (4bbc <configure_tc_callbacks+0x48>)
    4b98:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    4b9a:	7e63      	ldrb	r3, [r4, #25]
    4b9c:	2101      	movs	r1, #1
    4b9e:	430b      	orrs	r3, r1
    4ba0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    4ba2:	6823      	ldr	r3, [r4, #0]
    4ba4:	735a      	strb	r2, [r3, #13]
}
    4ba6:	bd10      	pop	{r4, pc}
    4ba8:	20004780 	.word	0x20004780
    4bac:	00004ab5 	.word	0x00004ab5
    4bb0:	000029d9 	.word	0x000029d9
    4bb4:	00002ac1 	.word	0x00002ac1
    4bb8:	00005778 	.word	0x00005778
    4bbc:	e000e100 	.word	0xe000e100

00004bc0 <configure_adc>:
{
    4bc0:	b510      	push	{r4, lr}
    4bc2:	b08c      	sub	sp, #48	; 0x30
	adc_get_config_defaults(&config_adc);
    4bc4:	4668      	mov	r0, sp
    4bc6:	4b18      	ldr	r3, [pc, #96]	; (4c28 <configure_adc+0x68>)
    4bc8:	4798      	blx	r3
	config_adc.gain_factor     = ADC_GAIN_FACTOR_1X;
    4bca:	2300      	movs	r3, #0
    4bcc:	9302      	str	r3, [sp, #8]
	config_adc.clock_source    = GCLK_GENERATOR_3;
    4bce:	2203      	movs	r2, #3
    4bd0:	4669      	mov	r1, sp
    4bd2:	700a      	strb	r2, [r1, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    4bd4:	466a      	mov	r2, sp
    4bd6:	804b      	strh	r3, [r1, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
    4bd8:	3302      	adds	r3, #2
    4bda:	704b      	strb	r3, [r1, #1]
	config_adc.differential_mode = true;
    4bdc:	3b01      	subs	r3, #1
    4bde:	74cb      	strb	r3, [r1, #19]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    4be0:	2300      	movs	r3, #0
    4be2:	730b      	strb	r3, [r1, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_PIN4;
    4be4:	2380      	movs	r3, #128	; 0x80
    4be6:	00db      	lsls	r3, r3, #3
    4be8:	81cb      	strh	r3, [r1, #14]
	config_adc.resolution      = ADC_RESOLUTION_14BIT;
    4bea:	2332      	movs	r3, #50	; 0x32
    4bec:	710b      	strb	r3, [r1, #4]
	adc_init(&adc_instance, ADC, &config_adc);
    4bee:	4c0f      	ldr	r4, [pc, #60]	; (4c2c <configure_adc+0x6c>)
    4bf0:	490f      	ldr	r1, [pc, #60]	; (4c30 <configure_adc+0x70>)
    4bf2:	0020      	movs	r0, r4
    4bf4:	4b0f      	ldr	r3, [pc, #60]	; (4c34 <configure_adc+0x74>)
    4bf6:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4bf8:	6822      	ldr	r2, [r4, #0]
    4bfa:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4bfc:	b25b      	sxtb	r3, r3
    4bfe:	2b00      	cmp	r3, #0
    4c00:	dbfb      	blt.n	4bfa <configure_adc+0x3a>
    4c02:	2180      	movs	r1, #128	; 0x80
    4c04:	0409      	lsls	r1, r1, #16
    4c06:	4b0c      	ldr	r3, [pc, #48]	; (4c38 <configure_adc+0x78>)
    4c08:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4c0a:	230f      	movs	r3, #15
    4c0c:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4c0e:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4c10:	7813      	ldrb	r3, [r2, #0]
    4c12:	2102      	movs	r1, #2
    4c14:	430b      	orrs	r3, r1
    4c16:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    4c18:	4b04      	ldr	r3, [pc, #16]	; (4c2c <configure_adc+0x6c>)
    4c1a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4c1c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4c1e:	b25b      	sxtb	r3, r3
    4c20:	2b00      	cmp	r3, #0
    4c22:	dbfb      	blt.n	4c1c <configure_adc+0x5c>
}
    4c24:	b00c      	add	sp, #48	; 0x30
    4c26:	bd10      	pop	{r4, pc}
    4c28:	00001185 	.word	0x00001185
    4c2c:	2000479c 	.word	0x2000479c
    4c30:	42004000 	.word	0x42004000
    4c34:	000011cd 	.word	0x000011cd
    4c38:	e000e100 	.word	0xe000e100

00004c3c <configure_adc_callbacks>:
{
    4c3c:	b510      	push	{r4, lr}
	adc_register_callback(&adc_instance, adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
    4c3e:	4c05      	ldr	r4, [pc, #20]	; (4c54 <configure_adc_callbacks+0x18>)
    4c40:	2200      	movs	r2, #0
    4c42:	4905      	ldr	r1, [pc, #20]	; (4c58 <configure_adc_callbacks+0x1c>)
    4c44:	0020      	movs	r0, r4
    4c46:	4b05      	ldr	r3, [pc, #20]	; (4c5c <configure_adc_callbacks+0x20>)
    4c48:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    4c4a:	7ee3      	ldrb	r3, [r4, #27]
    4c4c:	2201      	movs	r2, #1
    4c4e:	4313      	orrs	r3, r2
    4c50:	76e3      	strb	r3, [r4, #27]
}
    4c52:	bd10      	pop	{r4, pc}
    4c54:	2000479c 	.word	0x2000479c
    4c58:	00004ae1 	.word	0x00004ae1
    4c5c:	00001691 	.word	0x00001691

00004c60 <main>:

int main(void)
{
    4c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c62:	46de      	mov	lr, fp
    4c64:	4657      	mov	r7, sl
    4c66:	464e      	mov	r6, r9
    4c68:	4645      	mov	r5, r8
    4c6a:	b5e0      	push	{r5, r6, r7, lr}
    4c6c:	b08f      	sub	sp, #60	; 0x3c
	
	
	uint16_t adc_result;
	
	irq_initialize_vectors();
	cpu_irq_enable();
    4c6e:	2201      	movs	r2, #1
    4c70:	4b54      	ldr	r3, [pc, #336]	; (4dc4 <main+0x164>)
    4c72:	701a      	strb	r2, [r3, #0]
    4c74:	f3bf 8f5f 	dmb	sy
    4c78:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    4c7a:	4b53      	ldr	r3, [pc, #332]	; (4dc8 <main+0x168>)
    4c7c:	2400      	movs	r4, #0
    4c7e:	2500      	movs	r5, #0
    4c80:	701c      	strb	r4, [r3, #0]
    4c82:	705c      	strb	r4, [r3, #1]
    4c84:	709c      	strb	r4, [r3, #2]
    4c86:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    4c88:	711a      	strb	r2, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();
	
	/* Configuration of clock and board */
	system_init();
    4c8a:	4b50      	ldr	r3, [pc, #320]	; (4dcc <main+0x16c>)
    4c8c:	4798      	blx	r3
	
	configure_adc();
    4c8e:	4b50      	ldr	r3, [pc, #320]	; (4dd0 <main+0x170>)
    4c90:	4798      	blx	r3
	configure_adc_callbacks();
    4c92:	4b50      	ldr	r3, [pc, #320]	; (4dd4 <main+0x174>)
    4c94:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    4c96:	aa01      	add	r2, sp, #4
    4c98:	7094      	strb	r4, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    4c9a:	7194      	strb	r4, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    4c9c:	8114      	strh	r4, [r2, #8]
	config->run_in_standby             = false;
    4c9e:	2300      	movs	r3, #0
    4ca0:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    4ca2:	7295      	strb	r5, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    4ca4:	72d5      	strb	r5, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    4ca6:	7315      	strb	r5, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    4ca8:	7395      	strb	r5, [r2, #14]
	config->oneshot                    = false;
    4caa:	7355      	strb	r5, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    4cac:	7415      	strb	r5, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    4cae:	6154      	str	r4, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    4cb0:	6194      	str	r4, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    4cb2:	7715      	strb	r5, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    4cb4:	6214      	str	r4, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    4cb6:	6254      	str	r4, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    4cb8:	8514      	strh	r4, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    4cba:	8554      	strh	r4, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    4cbc:	8594      	strh	r4, [r2, #44]	; 0x2c
	s_configTc.clock_source = GCLK_GENERATOR_3;
    4cbe:	2303      	movs	r3, #3
    4cc0:	7013      	strb	r3, [r2, #0]
	s_configTc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
    4cc2:	2380      	movs	r3, #128	; 0x80
    4cc4:	00db      	lsls	r3, r3, #3
    4cc6:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_instance, TC4, &s_configTc);
    4cc8:	4c43      	ldr	r4, [pc, #268]	; (4dd8 <main+0x178>)
    4cca:	4944      	ldr	r1, [pc, #272]	; (4ddc <main+0x17c>)
    4ccc:	0020      	movs	r0, r4
    4cce:	4b44      	ldr	r3, [pc, #272]	; (4de0 <main+0x180>)
    4cd0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4cd2:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4cd4:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    4cd6:	b252      	sxtb	r2, r2
    4cd8:	2a00      	cmp	r2, #0
    4cda:	dbfb      	blt.n	4cd4 <main+0x74>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    4cdc:	881a      	ldrh	r2, [r3, #0]
    4cde:	2102      	movs	r1, #2
    4ce0:	430a      	orrs	r2, r1
    4ce2:	801a      	strh	r2, [r3, #0]
	
	configure_tc();
	configure_tc_callbacks();
    4ce4:	4b3f      	ldr	r3, [pc, #252]	; (4de4 <main+0x184>)
    4ce6:	4798      	blx	r3
	
	system_interrupt_set_priority(ADC_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_1);
    4ce8:	2101      	movs	r1, #1
    4cea:	2017      	movs	r0, #23
    4cec:	4c3e      	ldr	r4, [pc, #248]	; (4de8 <main+0x188>)
    4cee:	47a0      	blx	r4
	system_interrupt_set_priority(TC4_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    4cf0:	2100      	movs	r1, #0
    4cf2:	2013      	movs	r0, #19
    4cf4:	47a0      	blx	r4
	cpu_irq_enable();
    4cf6:	2201      	movs	r2, #1
    4cf8:	4b32      	ldr	r3, [pc, #200]	; (4dc4 <main+0x164>)
    4cfa:	701a      	strb	r2, [r3, #0]
    4cfc:	f3bf 8f5f 	dmb	sy
    4d00:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	ui_init();
    4d02:	4b3a      	ldr	r3, [pc, #232]	; (4dec <main+0x18c>)
    4d04:	4798      	blx	r3
	ui_powerdown();
    4d06:	4b3a      	ldr	r3, [pc, #232]	; (4df0 <main+0x190>)
    4d08:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    4d0a:	4b3a      	ldr	r3, [pc, #232]	; (4df4 <main+0x194>)
    4d0c:	4798      	blx	r3

	adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    4d0e:	2280      	movs	r2, #128	; 0x80
    4d10:	0192      	lsls	r2, r2, #6
    4d12:	4939      	ldr	r1, [pc, #228]	; (4df8 <main+0x198>)
    4d14:	4839      	ldr	r0, [pc, #228]	; (4dfc <main+0x19c>)
    4d16:	4b3a      	ldr	r3, [pc, #232]	; (4e00 <main+0x1a0>)
    4d18:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    4d1a:	4f2a      	ldr	r7, [pc, #168]	; (4dc4 <main+0x164>)
    4d1c:	2400      	movs	r4, #0
    4d1e:	1c26      	adds	r6, r4, #0
	while (!(*lock_ptr)) {
    4d20:	4d29      	ldr	r5, [pc, #164]	; (4dc8 <main+0x168>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    4d22:	46b8      	mov	r8, r7
    4d24:	2301      	movs	r3, #1
    4d26:	469c      	mov	ip, r3

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    4d28:	46bb      	mov	fp, r7
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    4d2a:	4b36      	ldr	r3, [pc, #216]	; (4e04 <main+0x1a4>)
    4d2c:	469a      	mov	sl, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    4d2e:	230f      	movs	r3, #15
    4d30:	4699      	mov	r9, r3
    4d32:	e00e      	b.n	4d52 <main+0xf2>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    4d34:	0019      	movs	r1, r3
		lock_ptr++;
    4d36:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    4d38:	1c4b      	adds	r3, r1, #1
    4d3a:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    4d3c:	7810      	ldrb	r0, [r2, #0]
    4d3e:	2800      	cmp	r0, #0
    4d40:	d0f8      	beq.n	4d34 <main+0xd4>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    4d42:	2b00      	cmp	r3, #0
    4d44:	d10f      	bne.n	4d66 <main+0x106>
		cpu_irq_enable();
    4d46:	4643      	mov	r3, r8
    4d48:	4662      	mov	r2, ip
    4d4a:	701a      	strb	r2, [r3, #0]
    4d4c:	f3bf 8f5f 	dmb	sy
    4d50:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
    4d52:	b672      	cpsid	i
    4d54:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4d58:	703e      	strb	r6, [r7, #0]
	while (!(*lock_ptr)) {
    4d5a:	782b      	ldrb	r3, [r5, #0]
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	d1f2      	bne.n	4d46 <main+0xe6>
    4d60:	0021      	movs	r1, r4
    4d62:	4a19      	ldr	r2, [pc, #100]	; (4dc8 <main+0x168>)
    4d64:	e7e7      	b.n	4d36 <main+0xd6>
    4d66:	b672      	cpsid	i
    4d68:	f3bf 8f5f 	dmb	sy
    4d6c:	465b      	mov	r3, fp
    4d6e:	701c      	strb	r4, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    4d70:	4653      	mov	r3, sl
    4d72:	699b      	ldr	r3, [r3, #24]
    4d74:	0a1b      	lsrs	r3, r3, #8
	rev = rev >> DSU_DID_REVISION_Pos;
    4d76:	464a      	mov	r2, r9
    4d78:	4013      	ands	r3, r2
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    4d7a:	2b02      	cmp	r3, #2
    4d7c:	d805      	bhi.n	4d8a <main+0x12a>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    4d7e:	4a22      	ldr	r2, [pc, #136]	; (4e08 <main+0x1a8>)
    4d80:	6850      	ldr	r0, [r2, #4]
    4d82:	23c0      	movs	r3, #192	; 0xc0
    4d84:	009b      	lsls	r3, r3, #2
    4d86:	4303      	orrs	r3, r0
    4d88:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    4d8a:	2902      	cmp	r1, #2
    4d8c:	d90b      	bls.n	4da6 <main+0x146>
    4d8e:	2903      	cmp	r1, #3
    4d90:	d011      	beq.n	4db6 <main+0x156>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    4d92:	4b0c      	ldr	r3, [pc, #48]	; (4dc4 <main+0x164>)
    4d94:	4662      	mov	r2, ip
    4d96:	701a      	strb	r2, [r3, #0]
    4d98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4d9c:	b662      	cpsie	i
  __ASM volatile ("dsb");
    4d9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    4da2:	bf30      	wfi
    4da4:	e7d5      	b.n	4d52 <main+0xf2>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    4da6:	4a19      	ldr	r2, [pc, #100]	; (4e0c <main+0x1ac>)
    4da8:	6913      	ldr	r3, [r2, #16]
    4daa:	2004      	movs	r0, #4
    4dac:	4383      	bics	r3, r0
    4dae:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    4db0:	4b17      	ldr	r3, [pc, #92]	; (4e10 <main+0x1b0>)
    4db2:	7059      	strb	r1, [r3, #1]
    4db4:	e7ed      	b.n	4d92 <main+0x132>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    4db6:	4a15      	ldr	r2, [pc, #84]	; (4e0c <main+0x1ac>)
    4db8:	6913      	ldr	r3, [r2, #16]
    4dba:	2104      	movs	r1, #4
    4dbc:	430b      	orrs	r3, r1
    4dbe:	6113      	str	r3, [r2, #16]
    4dc0:	e7e7      	b.n	4d92 <main+0x132>
    4dc2:	46c0      	nop			; (mov r8, r8)
    4dc4:	200000e8 	.word	0x200000e8
    4dc8:	20000344 	.word	0x20000344
    4dcc:	000029ad 	.word	0x000029ad
    4dd0:	00004bc1 	.word	0x00004bc1
    4dd4:	00004c3d 	.word	0x00004c3d
    4dd8:	20004780 	.word	0x20004780
    4ddc:	42003000 	.word	0x42003000
    4de0:	00002afd 	.word	0x00002afd
    4de4:	00004b75 	.word	0x00004b75
    4de8:	00002879 	.word	0x00002879
    4dec:	0000012d 	.word	0x0000012d
    4df0:	00000189 	.word	0x00000189
    4df4:	00000c01 	.word	0x00000c01
    4df8:	20000744 	.word	0x20000744
    4dfc:	2000479c 	.word	0x2000479c
    4e00:	000016a5 	.word	0x000016a5
    4e04:	41002000 	.word	0x41002000
    4e08:	41004000 	.word	0x41004000
    4e0c:	e000ed00 	.word	0xe000ed00
    4e10:	40000400 	.word	0x40000400

00004e14 <main_suspend_action>:
		
	}
}

void main_suspend_action(void)
{
    4e14:	b510      	push	{r4, lr}
	ui_powerdown();
    4e16:	4b01      	ldr	r3, [pc, #4]	; (4e1c <main_suspend_action+0x8>)
    4e18:	4798      	blx	r3
}
    4e1a:	bd10      	pop	{r4, pc}
    4e1c:	00000189 	.word	0x00000189

00004e20 <main_resume_action>:

void main_resume_action(void)
{
    4e20:	b510      	push	{r4, lr}
	ui_wakeup();
    4e22:	4b01      	ldr	r3, [pc, #4]	; (4e28 <main_resume_action+0x8>)
    4e24:	4798      	blx	r3
}
    4e26:	bd10      	pop	{r4, pc}
    4e28:	000001b9 	.word	0x000001b9

00004e2c <main_sof_action>:

void main_sof_action(void)
{
    4e2c:	b510      	push	{r4, lr}
	if (!main_b_cdc_enable)
    4e2e:	4b05      	ldr	r3, [pc, #20]	; (4e44 <main_sof_action+0x18>)
    4e30:	781b      	ldrb	r3, [r3, #0]
    4e32:	2b00      	cmp	r3, #0
    4e34:	d100      	bne.n	4e38 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    4e36:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    4e38:	4b03      	ldr	r3, [pc, #12]	; (4e48 <main_sof_action+0x1c>)
    4e3a:	4798      	blx	r3
    4e3c:	4b03      	ldr	r3, [pc, #12]	; (4e4c <main_sof_action+0x20>)
    4e3e:	4798      	blx	r3
    4e40:	e7f9      	b.n	4e36 <main_sof_action+0xa>
    4e42:	46c0      	nop			; (mov r8, r8)
    4e44:	2000033e 	.word	0x2000033e
    4e48:	00003421 	.word	0x00003421
    4e4c:	000001d9 	.word	0x000001d9

00004e50 <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    4e50:	b510      	push	{r4, lr}
	ui_powerdown();
    4e52:	4b01      	ldr	r3, [pc, #4]	; (4e58 <main_suspend_lpm_action+0x8>)
    4e54:	4798      	blx	r3
}
    4e56:	bd10      	pop	{r4, pc}
    4e58:	00000189 	.word	0x00000189

00004e5c <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    4e5c:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    4e5e:	4b01      	ldr	r3, [pc, #4]	; (4e64 <main_remotewakeup_lpm_disable+0x8>)
    4e60:	4798      	blx	r3
}
    4e62:	bd10      	pop	{r4, pc}
    4e64:	000001a9 	.word	0x000001a9

00004e68 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    4e68:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    4e6a:	4b01      	ldr	r3, [pc, #4]	; (4e70 <main_remotewakeup_lpm_enable+0x8>)
    4e6c:	4798      	blx	r3
}
    4e6e:	bd10      	pop	{r4, pc}
    4e70:	00000199 	.word	0x00000199

00004e74 <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
    4e74:	b510      	push	{r4, lr}
	main_b_cdc_enable = true;
    4e76:	2201      	movs	r2, #1
    4e78:	4b02      	ldr	r3, [pc, #8]	; (4e84 <main_cdc_enable+0x10>)
    4e7a:	701a      	strb	r2, [r3, #0]
	// Open communication
	uart_open(port);
    4e7c:	4b02      	ldr	r3, [pc, #8]	; (4e88 <main_cdc_enable+0x14>)
    4e7e:	4798      	blx	r3
	return true;
}
    4e80:	2001      	movs	r0, #1
    4e82:	bd10      	pop	{r4, pc}
    4e84:	2000033e 	.word	0x2000033e
    4e88:	00005151 	.word	0x00005151

00004e8c <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
    4e8c:	b510      	push	{r4, lr}
	main_b_cdc_enable = false;
    4e8e:	2200      	movs	r2, #0
    4e90:	4b02      	ldr	r3, [pc, #8]	; (4e9c <main_cdc_disable+0x10>)
    4e92:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
    4e94:	4b02      	ldr	r3, [pc, #8]	; (4ea0 <main_cdc_disable+0x14>)
    4e96:	4798      	blx	r3
}
    4e98:	bd10      	pop	{r4, pc}
    4e9a:	46c0      	nop			; (mov r8, r8)
    4e9c:	2000033e 	.word	0x2000033e
    4ea0:	00005189 	.word	0x00005189

00004ea4 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    4ea4:	b510      	push	{r4, lr}
	if (b_enable) {
    4ea6:	2900      	cmp	r1, #0
    4ea8:	d102      	bne.n	4eb0 <main_cdc_set_dtr+0xc>
		// Host terminal has open COM
		ui_com_open(port);
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    4eaa:	4b03      	ldr	r3, [pc, #12]	; (4eb8 <main_cdc_set_dtr+0x14>)
    4eac:	4798      	blx	r3
	}
}
    4eae:	bd10      	pop	{r4, pc}
		ui_com_open(port);
    4eb0:	4b02      	ldr	r3, [pc, #8]	; (4ebc <main_cdc_set_dtr+0x18>)
    4eb2:	4798      	blx	r3
    4eb4:	e7fb      	b.n	4eae <main_cdc_set_dtr+0xa>
    4eb6:	46c0      	nop			; (mov r8, r8)
    4eb8:	000001cb 	.word	0x000001cb
    4ebc:	000001c9 	.word	0x000001c9

00004ec0 <usart_rx_callback>:
 * Called by USART driver when receiving is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_rx_callback(struct usart_module *const module)
{
    4ec0:	b510      	push	{r4, lr}
	/* Data received */
	ui_com_tx_start();
    4ec2:	4b0b      	ldr	r3, [pc, #44]	; (4ef0 <usart_rx_callback+0x30>)
    4ec4:	4798      	blx	r3

	/* Transfer UART RX fifo to CDC TX */
	if (!udi_cdc_is_tx_ready()) {
    4ec6:	4b0b      	ldr	r3, [pc, #44]	; (4ef4 <usart_rx_callback+0x34>)
    4ec8:	4798      	blx	r3
    4eca:	2800      	cmp	r0, #0
    4ecc:	d00b      	beq.n	4ee6 <usart_rx_callback+0x26>
		/* Fifo full */
		udi_cdc_signal_overrun();
		ui_com_overflow();
	} else {
		udi_cdc_putc(rx_data);
    4ece:	4b0a      	ldr	r3, [pc, #40]	; (4ef8 <usart_rx_callback+0x38>)
    4ed0:	7818      	ldrb	r0, [r3, #0]
    4ed2:	4b0a      	ldr	r3, [pc, #40]	; (4efc <usart_rx_callback+0x3c>)
    4ed4:	4798      	blx	r3
	}

	ui_com_tx_stop();
    4ed6:	4b0a      	ldr	r3, [pc, #40]	; (4f00 <usart_rx_callback+0x40>)
    4ed8:	4798      	blx	r3

	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    4eda:	2201      	movs	r2, #1
    4edc:	4906      	ldr	r1, [pc, #24]	; (4ef8 <usart_rx_callback+0x38>)
    4ede:	4809      	ldr	r0, [pc, #36]	; (4f04 <usart_rx_callback+0x44>)
    4ee0:	4b09      	ldr	r3, [pc, #36]	; (4f08 <usart_rx_callback+0x48>)
    4ee2:	4798      	blx	r3

	return;
}
    4ee4:	bd10      	pop	{r4, pc}
		udi_cdc_signal_overrun();
    4ee6:	4b09      	ldr	r3, [pc, #36]	; (4f0c <usart_rx_callback+0x4c>)
    4ee8:	4798      	blx	r3
		ui_com_overflow();
    4eea:	4b09      	ldr	r3, [pc, #36]	; (4f10 <usart_rx_callback+0x50>)
    4eec:	4798      	blx	r3
    4eee:	e7f2      	b.n	4ed6 <usart_rx_callback+0x16>
    4ef0:	000001d1 	.word	0x000001d1
    4ef4:	0000098d 	.word	0x0000098d
    4ef8:	2000033f 	.word	0x2000033f
    4efc:	00000a55 	.word	0x00000a55
    4f00:	000001d3 	.word	0x000001d3
    4f04:	20004800 	.word	0x20004800
    4f08:	00002131 	.word	0x00002131
    4f0c:	000005dd 	.word	0x000005dd
    4f10:	000001d5 	.word	0x000001d5

00004f14 <usart_tx_callback>:
{
    4f14:	b510      	push	{r4, lr}
	tx_callback_flag = 1;
    4f16:	2201      	movs	r2, #1
    4f18:	4b0e      	ldr	r3, [pc, #56]	; (4f54 <usart_tx_callback+0x40>)
    4f1a:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_is_rx_ready()) {
    4f1c:	4b0e      	ldr	r3, [pc, #56]	; (4f58 <usart_tx_callback+0x44>)
    4f1e:	4798      	blx	r3
    4f20:	2800      	cmp	r0, #0
    4f22:	d10b      	bne.n	4f3c <usart_tx_callback+0x28>
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    4f24:	490d      	ldr	r1, [pc, #52]	; (4f5c <usart_tx_callback+0x48>)
    4f26:	2231      	movs	r2, #49	; 0x31
    4f28:	5c8b      	ldrb	r3, [r1, r2]
    4f2a:	2001      	movs	r0, #1
    4f2c:	4383      	bics	r3, r0
    4f2e:	548b      	strb	r3, [r1, r2]
		ui_com_rx_stop();
    4f30:	4b0b      	ldr	r3, [pc, #44]	; (4f60 <usart_tx_callback+0x4c>)
    4f32:	4798      	blx	r3
	tx_callback_flag = 0;
    4f34:	2200      	movs	r2, #0
    4f36:	4b07      	ldr	r3, [pc, #28]	; (4f54 <usart_tx_callback+0x40>)
    4f38:	701a      	strb	r2, [r3, #0]
}
    4f3a:	bd10      	pop	{r4, pc}
		ui_com_rx_start();
    4f3c:	4b09      	ldr	r3, [pc, #36]	; (4f64 <usart_tx_callback+0x50>)
    4f3e:	4798      	blx	r3
		tx_data = udi_cdc_getc();
    4f40:	4b09      	ldr	r3, [pc, #36]	; (4f68 <usart_tx_callback+0x54>)
    4f42:	4798      	blx	r3
    4f44:	4909      	ldr	r1, [pc, #36]	; (4f6c <usart_tx_callback+0x58>)
    4f46:	7008      	strb	r0, [r1, #0]
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    4f48:	2201      	movs	r2, #1
    4f4a:	4804      	ldr	r0, [pc, #16]	; (4f5c <usart_tx_callback+0x48>)
    4f4c:	4b08      	ldr	r3, [pc, #32]	; (4f70 <usart_tx_callback+0x5c>)
    4f4e:	4798      	blx	r3
    4f50:	e7f0      	b.n	4f34 <usart_tx_callback+0x20>
    4f52:	46c0      	nop			; (mov r8, r8)
    4f54:	20000340 	.word	0x20000340
    4f58:	00000811 	.word	0x00000811
    4f5c:	20004800 	.word	0x20004800
    4f60:	000001cf 	.word	0x000001cf
    4f64:	000001cd 	.word	0x000001cd
    4f68:	000008ed 	.word	0x000008ed
    4f6c:	20000341 	.word	0x20000341
    4f70:	00002111 	.word	0x00002111

00004f74 <uart_rx_notify>:

void uart_rx_notify(uint8_t port)
{
    4f74:	b510      	push	{r4, lr}
	UNUSED(port);
	if (!tx_callback_flag) {
    4f76:	4b0b      	ldr	r3, [pc, #44]	; (4fa4 <uart_rx_notify+0x30>)
    4f78:	781b      	ldrb	r3, [r3, #0]
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d000      	beq.n	4f80 <uart_rx_notify+0xc>
		ui_com_rx_start();
		usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
		tx_data = udi_cdc_getc();
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
	}
}
    4f7e:	bd10      	pop	{r4, pc}
		ui_com_rx_start();
    4f80:	4b09      	ldr	r3, [pc, #36]	; (4fa8 <uart_rx_notify+0x34>)
    4f82:	4798      	blx	r3
	module->callback_enable_mask |= (1 << callback_type);
    4f84:	4c09      	ldr	r4, [pc, #36]	; (4fac <uart_rx_notify+0x38>)
    4f86:	2231      	movs	r2, #49	; 0x31
    4f88:	5ca3      	ldrb	r3, [r4, r2]
    4f8a:	2101      	movs	r1, #1
    4f8c:	430b      	orrs	r3, r1
    4f8e:	54a3      	strb	r3, [r4, r2]
		tx_data = udi_cdc_getc();
    4f90:	4b07      	ldr	r3, [pc, #28]	; (4fb0 <uart_rx_notify+0x3c>)
    4f92:	4798      	blx	r3
    4f94:	4907      	ldr	r1, [pc, #28]	; (4fb4 <uart_rx_notify+0x40>)
    4f96:	7008      	strb	r0, [r1, #0]
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    4f98:	2201      	movs	r2, #1
    4f9a:	0020      	movs	r0, r4
    4f9c:	4b06      	ldr	r3, [pc, #24]	; (4fb8 <uart_rx_notify+0x44>)
    4f9e:	4798      	blx	r3
}
    4fa0:	e7ed      	b.n	4f7e <uart_rx_notify+0xa>
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	20000340 	.word	0x20000340
    4fa8:	000001cd 	.word	0x000001cd
    4fac:	20004800 	.word	0x20004800
    4fb0:	000008ed 	.word	0x000008ed
    4fb4:	20000341 	.word	0x20000341
    4fb8:	00002111 	.word	0x00002111

00004fbc <uart_config>:

void uart_config(uint8_t port,usb_cdc_line_coding_t *cfg)
{
    4fbc:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4fbe:	4b57      	ldr	r3, [pc, #348]	; (511c <uart_config+0x160>)
    4fc0:	2280      	movs	r2, #128	; 0x80
    4fc2:	05d2      	lsls	r2, r2, #23
    4fc4:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4fc6:	2200      	movs	r2, #0
    4fc8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4fca:	20ff      	movs	r0, #255	; 0xff
    4fcc:	8118      	strh	r0, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4fce:	2000      	movs	r0, #0
    4fd0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4fd2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4fd4:	2496      	movs	r4, #150	; 0x96
    4fd6:	01a4      	lsls	r4, r4, #6
    4fd8:	621c      	str	r4, [r3, #32]
	config->receiver_enable  = true;
    4fda:	2401      	movs	r4, #1
    4fdc:	2524      	movs	r5, #36	; 0x24
    4fde:	555c      	strb	r4, [r3, r5]
	config->transmitter_enable = true;
    4fe0:	3501      	adds	r5, #1
    4fe2:	555c      	strb	r4, [r3, r5]
	config->clock_polarity_inverted = false;
    4fe4:	3425      	adds	r4, #37	; 0x25
    4fe6:	551a      	strb	r2, [r3, r4]
	config->use_external_clock = false;
    4fe8:	3401      	adds	r4, #1
    4fea:	551a      	strb	r2, [r3, r4]
	config->ext_clock_freq   = 0;
    4fec:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4fee:	2488      	movs	r4, #136	; 0x88
    4ff0:	0364      	lsls	r4, r4, #13
    4ff2:	60dc      	str	r4, [r3, #12]
	config->run_in_standby   = false;
    4ff4:	242c      	movs	r4, #44	; 0x2c
    4ff6:	551a      	strb	r2, [r3, r4]
	config->generator_source = GCLK_GENERATOR_0;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4ff8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4ffa:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4ffc:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4ffe:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5000:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5002:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5004:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5006:	7618      	strb	r0, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5008:	7718      	strb	r0, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    500a:	7658      	strb	r0, [r3, #25]
	config->receive_pulse_length                    = 19;
    500c:	2213      	movs	r2, #19
    500e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5010:	7758      	strb	r0, [r3, #29]
	UNUSED(port);
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
	usart_conf.generator_source = GCLK_GENERATOR_3;
    5012:	2003      	movs	r0, #3
    5014:	321a      	adds	r2, #26
    5016:	5498      	strb	r0, [r3, r2]

	switch (cfg->bCharFormat) {
    5018:	790b      	ldrb	r3, [r1, #4]
    501a:	2b02      	cmp	r3, #2
    501c:	d102      	bne.n	5024 <uart_config+0x68>
	case CDC_STOP_BITS_2:
		usart_conf.stopbits = USART_STOPBITS_2;
    501e:	3213      	adds	r2, #19
    5020:	4b3e      	ldr	r3, [pc, #248]	; (511c <uart_config+0x160>)
    5022:	729a      	strb	r2, [r3, #10]
		/* Default stop bit = 1 stop bit */
		usart_conf.stopbits = USART_STOPBITS_1;
		break;
	}

	switch (cfg->bParityType) {
    5024:	794b      	ldrb	r3, [r1, #5]
    5026:	2b01      	cmp	r3, #1
    5028:	d067      	beq.n	50fa <uart_config+0x13e>
    502a:	2b02      	cmp	r3, #2
    502c:	d102      	bne.n	5034 <uart_config+0x78>
	case CDC_PAR_EVEN:
		usart_conf.parity = USART_PARITY_EVEN;
    502e:	2200      	movs	r2, #0
    5030:	4b3a      	ldr	r3, [pc, #232]	; (511c <uart_config+0x160>)
    5032:	811a      	strh	r2, [r3, #8]
	default:
		usart_conf.parity = USART_PARITY_NONE;
		break;
	}

	switch(cfg->bDataBits) {
    5034:	798b      	ldrb	r3, [r1, #6]
    5036:	2b06      	cmp	r3, #6
    5038:	d068      	beq.n	510c <uart_config+0x150>
    503a:	2b07      	cmp	r3, #7
    503c:	d06a      	beq.n	5114 <uart_config+0x158>
    503e:	2b05      	cmp	r3, #5
    5040:	d060      	beq.n	5104 <uart_config+0x148>
		usart_conf.character_size = USART_CHARACTER_SIZE_8BIT;
		break;
	}

	/* Options for USART. */
	usart_conf.baudrate = LE32_TO_CPU(cfg->dwDTERate);
    5042:	780a      	ldrb	r2, [r1, #0]
    5044:	784b      	ldrb	r3, [r1, #1]
    5046:	021b      	lsls	r3, r3, #8
    5048:	4313      	orrs	r3, r2
    504a:	788a      	ldrb	r2, [r1, #2]
    504c:	0412      	lsls	r2, r2, #16
    504e:	4313      	orrs	r3, r2
    5050:	78ca      	ldrb	r2, [r1, #3]
    5052:	0612      	lsls	r2, r2, #24
    5054:	431a      	orrs	r2, r3
    5056:	4b31      	ldr	r3, [pc, #196]	; (511c <uart_config+0x160>)
    5058:	621a      	str	r2, [r3, #32]
	usart_conf.mux_setting = CONF_USART_MUX_SETTING;
    505a:	2280      	movs	r2, #128	; 0x80
    505c:	0352      	lsls	r2, r2, #13
    505e:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_USART_PINMUX_PAD0;
    5060:	4a2f      	ldr	r2, [pc, #188]	; (5120 <uart_config+0x164>)
    5062:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_USART_PINMUX_PAD1;
    5064:	4a2f      	ldr	r2, [pc, #188]	; (5124 <uart_config+0x168>)
    5066:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_USART_PINMUX_PAD2;
    5068:	2201      	movs	r2, #1
    506a:	4252      	negs	r2, r2
    506c:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_USART_PINMUX_PAD3;
    506e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5070:	4d2d      	ldr	r5, [pc, #180]	; (5128 <uart_config+0x16c>)
    5072:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5074:	0020      	movs	r0, r4
    5076:	4b2d      	ldr	r3, [pc, #180]	; (512c <uart_config+0x170>)
    5078:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    507a:	231f      	movs	r3, #31
    507c:	4018      	ands	r0, r3
    507e:	3b1e      	subs	r3, #30
    5080:	4083      	lsls	r3, r0
    5082:	2280      	movs	r2, #128	; 0x80
    5084:	492a      	ldr	r1, [pc, #168]	; (5130 <uart_config+0x174>)
    5086:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5088:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    508a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    508c:	2b00      	cmp	r3, #0
    508e:	d1fc      	bne.n	508a <uart_config+0xce>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    5090:	6823      	ldr	r3, [r4, #0]
    5092:	2202      	movs	r2, #2
    5094:	4393      	bics	r3, r2
    5096:	6023      	str	r3, [r4, #0]
	usart_disable(&usart_module_edbg);
	usart_init(&usart_module_edbg, CONF_USART_BASE, &usart_conf);
    5098:	4d23      	ldr	r5, [pc, #140]	; (5128 <uart_config+0x16c>)
    509a:	4a20      	ldr	r2, [pc, #128]	; (511c <uart_config+0x160>)
    509c:	4925      	ldr	r1, [pc, #148]	; (5134 <uart_config+0x178>)
    509e:	0028      	movs	r0, r5
    50a0:	4b25      	ldr	r3, [pc, #148]	; (5138 <uart_config+0x17c>)
    50a2:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    50a4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    50a6:	0020      	movs	r0, r4
    50a8:	4b20      	ldr	r3, [pc, #128]	; (512c <uart_config+0x170>)
    50aa:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    50ac:	231f      	movs	r3, #31
    50ae:	4018      	ands	r0, r3
    50b0:	3b1e      	subs	r3, #30
    50b2:	4083      	lsls	r3, r0
    50b4:	4a1e      	ldr	r2, [pc, #120]	; (5130 <uart_config+0x174>)
    50b6:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    50b8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    50ba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    50bc:	2b00      	cmp	r3, #0
    50be:	d1fc      	bne.n	50ba <uart_config+0xfe>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    50c0:	6823      	ldr	r3, [r4, #0]
    50c2:	2202      	movs	r2, #2
    50c4:	4313      	orrs	r3, r2
    50c6:	6023      	str	r3, [r4, #0]
	usart_enable(&usart_module_edbg);

	/* Enable interrupts */
	usart_register_callback(&usart_module_edbg, usart_tx_callback,
    50c8:	4c17      	ldr	r4, [pc, #92]	; (5128 <uart_config+0x16c>)
    50ca:	2200      	movs	r2, #0
    50cc:	491b      	ldr	r1, [pc, #108]	; (513c <uart_config+0x180>)
    50ce:	0020      	movs	r0, r4
    50d0:	4e1b      	ldr	r6, [pc, #108]	; (5140 <uart_config+0x184>)
    50d2:	47b0      	blx	r6
    50d4:	2531      	movs	r5, #49	; 0x31
    50d6:	5d63      	ldrb	r3, [r4, r5]
    50d8:	2201      	movs	r2, #1
    50da:	4313      	orrs	r3, r2
    50dc:	5563      	strb	r3, [r4, r5]
			USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_module_edbg, usart_rx_callback,
    50de:	2201      	movs	r2, #1
    50e0:	4918      	ldr	r1, [pc, #96]	; (5144 <uart_config+0x188>)
    50e2:	0020      	movs	r0, r4
    50e4:	47b0      	blx	r6
    50e6:	5d63      	ldrb	r3, [r4, r5]
    50e8:	2202      	movs	r2, #2
    50ea:	4313      	orrs	r3, r2
    50ec:	5563      	strb	r3, [r4, r5]
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_RECEIVED);
	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    50ee:	2201      	movs	r2, #1
    50f0:	4915      	ldr	r1, [pc, #84]	; (5148 <uart_config+0x18c>)
    50f2:	0020      	movs	r0, r4
    50f4:	4b15      	ldr	r3, [pc, #84]	; (514c <uart_config+0x190>)
    50f6:	4798      	blx	r3
}
    50f8:	bd70      	pop	{r4, r5, r6, pc}
		usart_conf.parity = USART_PARITY_ODD;
    50fa:	2280      	movs	r2, #128	; 0x80
    50fc:	0192      	lsls	r2, r2, #6
    50fe:	4b07      	ldr	r3, [pc, #28]	; (511c <uart_config+0x160>)
    5100:	811a      	strh	r2, [r3, #8]
		break;
    5102:	e797      	b.n	5034 <uart_config+0x78>
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    5104:	2205      	movs	r2, #5
    5106:	4b05      	ldr	r3, [pc, #20]	; (511c <uart_config+0x160>)
    5108:	72da      	strb	r2, [r3, #11]
		break;
    510a:	e79a      	b.n	5042 <uart_config+0x86>
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    510c:	2206      	movs	r2, #6
    510e:	4b03      	ldr	r3, [pc, #12]	; (511c <uart_config+0x160>)
    5110:	72da      	strb	r2, [r3, #11]
		break;
    5112:	e796      	b.n	5042 <uart_config+0x86>
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    5114:	2207      	movs	r2, #7
    5116:	4b01      	ldr	r3, [pc, #4]	; (511c <uart_config+0x160>)
    5118:	72da      	strb	r2, [r3, #11]
		break;
    511a:	e792      	b.n	5042 <uart_config+0x86>
    511c:	200047c0 	.word	0x200047c0
    5120:	00160002 	.word	0x00160002
    5124:	00170002 	.word	0x00170002
    5128:	20004800 	.word	0x20004800
    512c:	00001c99 	.word	0x00001c99
    5130:	e000e100 	.word	0xe000e100
    5134:	42001400 	.word	0x42001400
    5138:	00001d29 	.word	0x00001d29
    513c:	00004f15 	.word	0x00004f15
    5140:	000020f9 	.word	0x000020f9
    5144:	00004ec1 	.word	0x00004ec1
    5148:	2000033f 	.word	0x2000033f
    514c:	00002131 	.word	0x00002131

00005150 <uart_open>:

void uart_open(uint8_t port)
{
    5150:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    5152:	4d0a      	ldr	r5, [pc, #40]	; (517c <uart_open+0x2c>)
    5154:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5156:	0020      	movs	r0, r4
    5158:	4b09      	ldr	r3, [pc, #36]	; (5180 <uart_open+0x30>)
    515a:	4798      	blx	r3
    515c:	231f      	movs	r3, #31
    515e:	4018      	ands	r0, r3
    5160:	3b1e      	subs	r3, #30
    5162:	4083      	lsls	r3, r0
    5164:	4a07      	ldr	r2, [pc, #28]	; (5184 <uart_open+0x34>)
    5166:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5168:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    516a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    516c:	2b00      	cmp	r3, #0
    516e:	d1fc      	bne.n	516a <uart_open+0x1a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5170:	6823      	ldr	r3, [r4, #0]
    5172:	2202      	movs	r2, #2
    5174:	4313      	orrs	r3, r2
    5176:	6023      	str	r3, [r4, #0]
	UNUSED(port);

	usart_enable(&usart_module_edbg);
}
    5178:	bd70      	pop	{r4, r5, r6, pc}
    517a:	46c0      	nop			; (mov r8, r8)
    517c:	20004800 	.word	0x20004800
    5180:	00001c99 	.word	0x00001c99
    5184:	e000e100 	.word	0xe000e100

00005188 <uart_close>:

void uart_close(uint8_t port)
{
    5188:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    518a:	4d0a      	ldr	r5, [pc, #40]	; (51b4 <uart_close+0x2c>)
    518c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    518e:	0020      	movs	r0, r4
    5190:	4b09      	ldr	r3, [pc, #36]	; (51b8 <uart_close+0x30>)
    5192:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5194:	231f      	movs	r3, #31
    5196:	4018      	ands	r0, r3
    5198:	3b1e      	subs	r3, #30
    519a:	4083      	lsls	r3, r0
    519c:	2280      	movs	r2, #128	; 0x80
    519e:	4907      	ldr	r1, [pc, #28]	; (51bc <uart_close+0x34>)
    51a0:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    51a2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    51a4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    51a6:	2b00      	cmp	r3, #0
    51a8:	d1fc      	bne.n	51a4 <uart_close+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    51aa:	6823      	ldr	r3, [r4, #0]
    51ac:	2202      	movs	r2, #2
    51ae:	4393      	bics	r3, r2
    51b0:	6023      	str	r3, [r4, #0]
	UNUSED(port);
	/* Close RS232 communication */
	usart_disable(&usart_module_edbg);
}
    51b2:	bd70      	pop	{r4, r5, r6, pc}
    51b4:	20004800 	.word	0x20004800
    51b8:	00001c99 	.word	0x00001c99
    51bc:	e000e100 	.word	0xe000e100

000051c0 <__udivsi3>:
    51c0:	2200      	movs	r2, #0
    51c2:	0843      	lsrs	r3, r0, #1
    51c4:	428b      	cmp	r3, r1
    51c6:	d374      	bcc.n	52b2 <__udivsi3+0xf2>
    51c8:	0903      	lsrs	r3, r0, #4
    51ca:	428b      	cmp	r3, r1
    51cc:	d35f      	bcc.n	528e <__udivsi3+0xce>
    51ce:	0a03      	lsrs	r3, r0, #8
    51d0:	428b      	cmp	r3, r1
    51d2:	d344      	bcc.n	525e <__udivsi3+0x9e>
    51d4:	0b03      	lsrs	r3, r0, #12
    51d6:	428b      	cmp	r3, r1
    51d8:	d328      	bcc.n	522c <__udivsi3+0x6c>
    51da:	0c03      	lsrs	r3, r0, #16
    51dc:	428b      	cmp	r3, r1
    51de:	d30d      	bcc.n	51fc <__udivsi3+0x3c>
    51e0:	22ff      	movs	r2, #255	; 0xff
    51e2:	0209      	lsls	r1, r1, #8
    51e4:	ba12      	rev	r2, r2
    51e6:	0c03      	lsrs	r3, r0, #16
    51e8:	428b      	cmp	r3, r1
    51ea:	d302      	bcc.n	51f2 <__udivsi3+0x32>
    51ec:	1212      	asrs	r2, r2, #8
    51ee:	0209      	lsls	r1, r1, #8
    51f0:	d065      	beq.n	52be <__udivsi3+0xfe>
    51f2:	0b03      	lsrs	r3, r0, #12
    51f4:	428b      	cmp	r3, r1
    51f6:	d319      	bcc.n	522c <__udivsi3+0x6c>
    51f8:	e000      	b.n	51fc <__udivsi3+0x3c>
    51fa:	0a09      	lsrs	r1, r1, #8
    51fc:	0bc3      	lsrs	r3, r0, #15
    51fe:	428b      	cmp	r3, r1
    5200:	d301      	bcc.n	5206 <__udivsi3+0x46>
    5202:	03cb      	lsls	r3, r1, #15
    5204:	1ac0      	subs	r0, r0, r3
    5206:	4152      	adcs	r2, r2
    5208:	0b83      	lsrs	r3, r0, #14
    520a:	428b      	cmp	r3, r1
    520c:	d301      	bcc.n	5212 <__udivsi3+0x52>
    520e:	038b      	lsls	r3, r1, #14
    5210:	1ac0      	subs	r0, r0, r3
    5212:	4152      	adcs	r2, r2
    5214:	0b43      	lsrs	r3, r0, #13
    5216:	428b      	cmp	r3, r1
    5218:	d301      	bcc.n	521e <__udivsi3+0x5e>
    521a:	034b      	lsls	r3, r1, #13
    521c:	1ac0      	subs	r0, r0, r3
    521e:	4152      	adcs	r2, r2
    5220:	0b03      	lsrs	r3, r0, #12
    5222:	428b      	cmp	r3, r1
    5224:	d301      	bcc.n	522a <__udivsi3+0x6a>
    5226:	030b      	lsls	r3, r1, #12
    5228:	1ac0      	subs	r0, r0, r3
    522a:	4152      	adcs	r2, r2
    522c:	0ac3      	lsrs	r3, r0, #11
    522e:	428b      	cmp	r3, r1
    5230:	d301      	bcc.n	5236 <__udivsi3+0x76>
    5232:	02cb      	lsls	r3, r1, #11
    5234:	1ac0      	subs	r0, r0, r3
    5236:	4152      	adcs	r2, r2
    5238:	0a83      	lsrs	r3, r0, #10
    523a:	428b      	cmp	r3, r1
    523c:	d301      	bcc.n	5242 <__udivsi3+0x82>
    523e:	028b      	lsls	r3, r1, #10
    5240:	1ac0      	subs	r0, r0, r3
    5242:	4152      	adcs	r2, r2
    5244:	0a43      	lsrs	r3, r0, #9
    5246:	428b      	cmp	r3, r1
    5248:	d301      	bcc.n	524e <__udivsi3+0x8e>
    524a:	024b      	lsls	r3, r1, #9
    524c:	1ac0      	subs	r0, r0, r3
    524e:	4152      	adcs	r2, r2
    5250:	0a03      	lsrs	r3, r0, #8
    5252:	428b      	cmp	r3, r1
    5254:	d301      	bcc.n	525a <__udivsi3+0x9a>
    5256:	020b      	lsls	r3, r1, #8
    5258:	1ac0      	subs	r0, r0, r3
    525a:	4152      	adcs	r2, r2
    525c:	d2cd      	bcs.n	51fa <__udivsi3+0x3a>
    525e:	09c3      	lsrs	r3, r0, #7
    5260:	428b      	cmp	r3, r1
    5262:	d301      	bcc.n	5268 <__udivsi3+0xa8>
    5264:	01cb      	lsls	r3, r1, #7
    5266:	1ac0      	subs	r0, r0, r3
    5268:	4152      	adcs	r2, r2
    526a:	0983      	lsrs	r3, r0, #6
    526c:	428b      	cmp	r3, r1
    526e:	d301      	bcc.n	5274 <__udivsi3+0xb4>
    5270:	018b      	lsls	r3, r1, #6
    5272:	1ac0      	subs	r0, r0, r3
    5274:	4152      	adcs	r2, r2
    5276:	0943      	lsrs	r3, r0, #5
    5278:	428b      	cmp	r3, r1
    527a:	d301      	bcc.n	5280 <__udivsi3+0xc0>
    527c:	014b      	lsls	r3, r1, #5
    527e:	1ac0      	subs	r0, r0, r3
    5280:	4152      	adcs	r2, r2
    5282:	0903      	lsrs	r3, r0, #4
    5284:	428b      	cmp	r3, r1
    5286:	d301      	bcc.n	528c <__udivsi3+0xcc>
    5288:	010b      	lsls	r3, r1, #4
    528a:	1ac0      	subs	r0, r0, r3
    528c:	4152      	adcs	r2, r2
    528e:	08c3      	lsrs	r3, r0, #3
    5290:	428b      	cmp	r3, r1
    5292:	d301      	bcc.n	5298 <__udivsi3+0xd8>
    5294:	00cb      	lsls	r3, r1, #3
    5296:	1ac0      	subs	r0, r0, r3
    5298:	4152      	adcs	r2, r2
    529a:	0883      	lsrs	r3, r0, #2
    529c:	428b      	cmp	r3, r1
    529e:	d301      	bcc.n	52a4 <__udivsi3+0xe4>
    52a0:	008b      	lsls	r3, r1, #2
    52a2:	1ac0      	subs	r0, r0, r3
    52a4:	4152      	adcs	r2, r2
    52a6:	0843      	lsrs	r3, r0, #1
    52a8:	428b      	cmp	r3, r1
    52aa:	d301      	bcc.n	52b0 <__udivsi3+0xf0>
    52ac:	004b      	lsls	r3, r1, #1
    52ae:	1ac0      	subs	r0, r0, r3
    52b0:	4152      	adcs	r2, r2
    52b2:	1a41      	subs	r1, r0, r1
    52b4:	d200      	bcs.n	52b8 <__udivsi3+0xf8>
    52b6:	4601      	mov	r1, r0
    52b8:	4152      	adcs	r2, r2
    52ba:	4610      	mov	r0, r2
    52bc:	4770      	bx	lr
    52be:	e7ff      	b.n	52c0 <__udivsi3+0x100>
    52c0:	b501      	push	{r0, lr}
    52c2:	2000      	movs	r0, #0
    52c4:	f000 f8f0 	bl	54a8 <__aeabi_idiv0>
    52c8:	bd02      	pop	{r1, pc}
    52ca:	46c0      	nop			; (mov r8, r8)

000052cc <__aeabi_uidivmod>:
    52cc:	2900      	cmp	r1, #0
    52ce:	d0f7      	beq.n	52c0 <__udivsi3+0x100>
    52d0:	e776      	b.n	51c0 <__udivsi3>
    52d2:	4770      	bx	lr

000052d4 <__divsi3>:
    52d4:	4603      	mov	r3, r0
    52d6:	430b      	orrs	r3, r1
    52d8:	d47f      	bmi.n	53da <__divsi3+0x106>
    52da:	2200      	movs	r2, #0
    52dc:	0843      	lsrs	r3, r0, #1
    52de:	428b      	cmp	r3, r1
    52e0:	d374      	bcc.n	53cc <__divsi3+0xf8>
    52e2:	0903      	lsrs	r3, r0, #4
    52e4:	428b      	cmp	r3, r1
    52e6:	d35f      	bcc.n	53a8 <__divsi3+0xd4>
    52e8:	0a03      	lsrs	r3, r0, #8
    52ea:	428b      	cmp	r3, r1
    52ec:	d344      	bcc.n	5378 <__divsi3+0xa4>
    52ee:	0b03      	lsrs	r3, r0, #12
    52f0:	428b      	cmp	r3, r1
    52f2:	d328      	bcc.n	5346 <__divsi3+0x72>
    52f4:	0c03      	lsrs	r3, r0, #16
    52f6:	428b      	cmp	r3, r1
    52f8:	d30d      	bcc.n	5316 <__divsi3+0x42>
    52fa:	22ff      	movs	r2, #255	; 0xff
    52fc:	0209      	lsls	r1, r1, #8
    52fe:	ba12      	rev	r2, r2
    5300:	0c03      	lsrs	r3, r0, #16
    5302:	428b      	cmp	r3, r1
    5304:	d302      	bcc.n	530c <__divsi3+0x38>
    5306:	1212      	asrs	r2, r2, #8
    5308:	0209      	lsls	r1, r1, #8
    530a:	d065      	beq.n	53d8 <__divsi3+0x104>
    530c:	0b03      	lsrs	r3, r0, #12
    530e:	428b      	cmp	r3, r1
    5310:	d319      	bcc.n	5346 <__divsi3+0x72>
    5312:	e000      	b.n	5316 <__divsi3+0x42>
    5314:	0a09      	lsrs	r1, r1, #8
    5316:	0bc3      	lsrs	r3, r0, #15
    5318:	428b      	cmp	r3, r1
    531a:	d301      	bcc.n	5320 <__divsi3+0x4c>
    531c:	03cb      	lsls	r3, r1, #15
    531e:	1ac0      	subs	r0, r0, r3
    5320:	4152      	adcs	r2, r2
    5322:	0b83      	lsrs	r3, r0, #14
    5324:	428b      	cmp	r3, r1
    5326:	d301      	bcc.n	532c <__divsi3+0x58>
    5328:	038b      	lsls	r3, r1, #14
    532a:	1ac0      	subs	r0, r0, r3
    532c:	4152      	adcs	r2, r2
    532e:	0b43      	lsrs	r3, r0, #13
    5330:	428b      	cmp	r3, r1
    5332:	d301      	bcc.n	5338 <__divsi3+0x64>
    5334:	034b      	lsls	r3, r1, #13
    5336:	1ac0      	subs	r0, r0, r3
    5338:	4152      	adcs	r2, r2
    533a:	0b03      	lsrs	r3, r0, #12
    533c:	428b      	cmp	r3, r1
    533e:	d301      	bcc.n	5344 <__divsi3+0x70>
    5340:	030b      	lsls	r3, r1, #12
    5342:	1ac0      	subs	r0, r0, r3
    5344:	4152      	adcs	r2, r2
    5346:	0ac3      	lsrs	r3, r0, #11
    5348:	428b      	cmp	r3, r1
    534a:	d301      	bcc.n	5350 <__divsi3+0x7c>
    534c:	02cb      	lsls	r3, r1, #11
    534e:	1ac0      	subs	r0, r0, r3
    5350:	4152      	adcs	r2, r2
    5352:	0a83      	lsrs	r3, r0, #10
    5354:	428b      	cmp	r3, r1
    5356:	d301      	bcc.n	535c <__divsi3+0x88>
    5358:	028b      	lsls	r3, r1, #10
    535a:	1ac0      	subs	r0, r0, r3
    535c:	4152      	adcs	r2, r2
    535e:	0a43      	lsrs	r3, r0, #9
    5360:	428b      	cmp	r3, r1
    5362:	d301      	bcc.n	5368 <__divsi3+0x94>
    5364:	024b      	lsls	r3, r1, #9
    5366:	1ac0      	subs	r0, r0, r3
    5368:	4152      	adcs	r2, r2
    536a:	0a03      	lsrs	r3, r0, #8
    536c:	428b      	cmp	r3, r1
    536e:	d301      	bcc.n	5374 <__divsi3+0xa0>
    5370:	020b      	lsls	r3, r1, #8
    5372:	1ac0      	subs	r0, r0, r3
    5374:	4152      	adcs	r2, r2
    5376:	d2cd      	bcs.n	5314 <__divsi3+0x40>
    5378:	09c3      	lsrs	r3, r0, #7
    537a:	428b      	cmp	r3, r1
    537c:	d301      	bcc.n	5382 <__divsi3+0xae>
    537e:	01cb      	lsls	r3, r1, #7
    5380:	1ac0      	subs	r0, r0, r3
    5382:	4152      	adcs	r2, r2
    5384:	0983      	lsrs	r3, r0, #6
    5386:	428b      	cmp	r3, r1
    5388:	d301      	bcc.n	538e <__divsi3+0xba>
    538a:	018b      	lsls	r3, r1, #6
    538c:	1ac0      	subs	r0, r0, r3
    538e:	4152      	adcs	r2, r2
    5390:	0943      	lsrs	r3, r0, #5
    5392:	428b      	cmp	r3, r1
    5394:	d301      	bcc.n	539a <__divsi3+0xc6>
    5396:	014b      	lsls	r3, r1, #5
    5398:	1ac0      	subs	r0, r0, r3
    539a:	4152      	adcs	r2, r2
    539c:	0903      	lsrs	r3, r0, #4
    539e:	428b      	cmp	r3, r1
    53a0:	d301      	bcc.n	53a6 <__divsi3+0xd2>
    53a2:	010b      	lsls	r3, r1, #4
    53a4:	1ac0      	subs	r0, r0, r3
    53a6:	4152      	adcs	r2, r2
    53a8:	08c3      	lsrs	r3, r0, #3
    53aa:	428b      	cmp	r3, r1
    53ac:	d301      	bcc.n	53b2 <__divsi3+0xde>
    53ae:	00cb      	lsls	r3, r1, #3
    53b0:	1ac0      	subs	r0, r0, r3
    53b2:	4152      	adcs	r2, r2
    53b4:	0883      	lsrs	r3, r0, #2
    53b6:	428b      	cmp	r3, r1
    53b8:	d301      	bcc.n	53be <__divsi3+0xea>
    53ba:	008b      	lsls	r3, r1, #2
    53bc:	1ac0      	subs	r0, r0, r3
    53be:	4152      	adcs	r2, r2
    53c0:	0843      	lsrs	r3, r0, #1
    53c2:	428b      	cmp	r3, r1
    53c4:	d301      	bcc.n	53ca <__divsi3+0xf6>
    53c6:	004b      	lsls	r3, r1, #1
    53c8:	1ac0      	subs	r0, r0, r3
    53ca:	4152      	adcs	r2, r2
    53cc:	1a41      	subs	r1, r0, r1
    53ce:	d200      	bcs.n	53d2 <__divsi3+0xfe>
    53d0:	4601      	mov	r1, r0
    53d2:	4152      	adcs	r2, r2
    53d4:	4610      	mov	r0, r2
    53d6:	4770      	bx	lr
    53d8:	e05d      	b.n	5496 <__divsi3+0x1c2>
    53da:	0fca      	lsrs	r2, r1, #31
    53dc:	d000      	beq.n	53e0 <__divsi3+0x10c>
    53de:	4249      	negs	r1, r1
    53e0:	1003      	asrs	r3, r0, #32
    53e2:	d300      	bcc.n	53e6 <__divsi3+0x112>
    53e4:	4240      	negs	r0, r0
    53e6:	4053      	eors	r3, r2
    53e8:	2200      	movs	r2, #0
    53ea:	469c      	mov	ip, r3
    53ec:	0903      	lsrs	r3, r0, #4
    53ee:	428b      	cmp	r3, r1
    53f0:	d32d      	bcc.n	544e <__divsi3+0x17a>
    53f2:	0a03      	lsrs	r3, r0, #8
    53f4:	428b      	cmp	r3, r1
    53f6:	d312      	bcc.n	541e <__divsi3+0x14a>
    53f8:	22fc      	movs	r2, #252	; 0xfc
    53fa:	0189      	lsls	r1, r1, #6
    53fc:	ba12      	rev	r2, r2
    53fe:	0a03      	lsrs	r3, r0, #8
    5400:	428b      	cmp	r3, r1
    5402:	d30c      	bcc.n	541e <__divsi3+0x14a>
    5404:	0189      	lsls	r1, r1, #6
    5406:	1192      	asrs	r2, r2, #6
    5408:	428b      	cmp	r3, r1
    540a:	d308      	bcc.n	541e <__divsi3+0x14a>
    540c:	0189      	lsls	r1, r1, #6
    540e:	1192      	asrs	r2, r2, #6
    5410:	428b      	cmp	r3, r1
    5412:	d304      	bcc.n	541e <__divsi3+0x14a>
    5414:	0189      	lsls	r1, r1, #6
    5416:	d03a      	beq.n	548e <__divsi3+0x1ba>
    5418:	1192      	asrs	r2, r2, #6
    541a:	e000      	b.n	541e <__divsi3+0x14a>
    541c:	0989      	lsrs	r1, r1, #6
    541e:	09c3      	lsrs	r3, r0, #7
    5420:	428b      	cmp	r3, r1
    5422:	d301      	bcc.n	5428 <__divsi3+0x154>
    5424:	01cb      	lsls	r3, r1, #7
    5426:	1ac0      	subs	r0, r0, r3
    5428:	4152      	adcs	r2, r2
    542a:	0983      	lsrs	r3, r0, #6
    542c:	428b      	cmp	r3, r1
    542e:	d301      	bcc.n	5434 <__divsi3+0x160>
    5430:	018b      	lsls	r3, r1, #6
    5432:	1ac0      	subs	r0, r0, r3
    5434:	4152      	adcs	r2, r2
    5436:	0943      	lsrs	r3, r0, #5
    5438:	428b      	cmp	r3, r1
    543a:	d301      	bcc.n	5440 <__divsi3+0x16c>
    543c:	014b      	lsls	r3, r1, #5
    543e:	1ac0      	subs	r0, r0, r3
    5440:	4152      	adcs	r2, r2
    5442:	0903      	lsrs	r3, r0, #4
    5444:	428b      	cmp	r3, r1
    5446:	d301      	bcc.n	544c <__divsi3+0x178>
    5448:	010b      	lsls	r3, r1, #4
    544a:	1ac0      	subs	r0, r0, r3
    544c:	4152      	adcs	r2, r2
    544e:	08c3      	lsrs	r3, r0, #3
    5450:	428b      	cmp	r3, r1
    5452:	d301      	bcc.n	5458 <__divsi3+0x184>
    5454:	00cb      	lsls	r3, r1, #3
    5456:	1ac0      	subs	r0, r0, r3
    5458:	4152      	adcs	r2, r2
    545a:	0883      	lsrs	r3, r0, #2
    545c:	428b      	cmp	r3, r1
    545e:	d301      	bcc.n	5464 <__divsi3+0x190>
    5460:	008b      	lsls	r3, r1, #2
    5462:	1ac0      	subs	r0, r0, r3
    5464:	4152      	adcs	r2, r2
    5466:	d2d9      	bcs.n	541c <__divsi3+0x148>
    5468:	0843      	lsrs	r3, r0, #1
    546a:	428b      	cmp	r3, r1
    546c:	d301      	bcc.n	5472 <__divsi3+0x19e>
    546e:	004b      	lsls	r3, r1, #1
    5470:	1ac0      	subs	r0, r0, r3
    5472:	4152      	adcs	r2, r2
    5474:	1a41      	subs	r1, r0, r1
    5476:	d200      	bcs.n	547a <__divsi3+0x1a6>
    5478:	4601      	mov	r1, r0
    547a:	4663      	mov	r3, ip
    547c:	4152      	adcs	r2, r2
    547e:	105b      	asrs	r3, r3, #1
    5480:	4610      	mov	r0, r2
    5482:	d301      	bcc.n	5488 <__divsi3+0x1b4>
    5484:	4240      	negs	r0, r0
    5486:	2b00      	cmp	r3, #0
    5488:	d500      	bpl.n	548c <__divsi3+0x1b8>
    548a:	4249      	negs	r1, r1
    548c:	4770      	bx	lr
    548e:	4663      	mov	r3, ip
    5490:	105b      	asrs	r3, r3, #1
    5492:	d300      	bcc.n	5496 <__divsi3+0x1c2>
    5494:	4240      	negs	r0, r0
    5496:	b501      	push	{r0, lr}
    5498:	2000      	movs	r0, #0
    549a:	f000 f805 	bl	54a8 <__aeabi_idiv0>
    549e:	bd02      	pop	{r1, pc}

000054a0 <__aeabi_idivmod>:
    54a0:	2900      	cmp	r1, #0
    54a2:	d0f8      	beq.n	5496 <__divsi3+0x1c2>
    54a4:	e716      	b.n	52d4 <__divsi3>
    54a6:	4770      	bx	lr

000054a8 <__aeabi_idiv0>:
    54a8:	4770      	bx	lr
    54aa:	46c0      	nop			; (mov r8, r8)

000054ac <__ctzsi2>:
    54ac:	4241      	negs	r1, r0
    54ae:	4008      	ands	r0, r1
    54b0:	211c      	movs	r1, #28
    54b2:	2301      	movs	r3, #1
    54b4:	041b      	lsls	r3, r3, #16
    54b6:	4298      	cmp	r0, r3
    54b8:	d301      	bcc.n	54be <__ctzsi2+0x12>
    54ba:	0c00      	lsrs	r0, r0, #16
    54bc:	3910      	subs	r1, #16
    54be:	0a1b      	lsrs	r3, r3, #8
    54c0:	4298      	cmp	r0, r3
    54c2:	d301      	bcc.n	54c8 <__ctzsi2+0x1c>
    54c4:	0a00      	lsrs	r0, r0, #8
    54c6:	3908      	subs	r1, #8
    54c8:	091b      	lsrs	r3, r3, #4
    54ca:	4298      	cmp	r0, r3
    54cc:	d301      	bcc.n	54d2 <__ctzsi2+0x26>
    54ce:	0900      	lsrs	r0, r0, #4
    54d0:	3904      	subs	r1, #4
    54d2:	a202      	add	r2, pc, #8	; (adr r2, 54dc <__ctzsi2+0x30>)
    54d4:	5c10      	ldrb	r0, [r2, r0]
    54d6:	1a40      	subs	r0, r0, r1
    54d8:	4770      	bx	lr
    54da:	46c0      	nop			; (mov r8, r8)
    54dc:	1d1d1c1b 	.word	0x1d1d1c1b
    54e0:	1e1e1e1e 	.word	0x1e1e1e1e
    54e4:	1f1f1f1f 	.word	0x1f1f1f1f
    54e8:	1f1f1f1f 	.word	0x1f1f1f1f

000054ec <__aeabi_lmul>:
    54ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ee:	46ce      	mov	lr, r9
    54f0:	4647      	mov	r7, r8
    54f2:	0415      	lsls	r5, r2, #16
    54f4:	0c2d      	lsrs	r5, r5, #16
    54f6:	002e      	movs	r6, r5
    54f8:	b580      	push	{r7, lr}
    54fa:	0407      	lsls	r7, r0, #16
    54fc:	0c14      	lsrs	r4, r2, #16
    54fe:	0c3f      	lsrs	r7, r7, #16
    5500:	4699      	mov	r9, r3
    5502:	0c03      	lsrs	r3, r0, #16
    5504:	437e      	muls	r6, r7
    5506:	435d      	muls	r5, r3
    5508:	4367      	muls	r7, r4
    550a:	4363      	muls	r3, r4
    550c:	197f      	adds	r7, r7, r5
    550e:	0c34      	lsrs	r4, r6, #16
    5510:	19e4      	adds	r4, r4, r7
    5512:	469c      	mov	ip, r3
    5514:	42a5      	cmp	r5, r4
    5516:	d903      	bls.n	5520 <__aeabi_lmul+0x34>
    5518:	2380      	movs	r3, #128	; 0x80
    551a:	025b      	lsls	r3, r3, #9
    551c:	4698      	mov	r8, r3
    551e:	44c4      	add	ip, r8
    5520:	464b      	mov	r3, r9
    5522:	4351      	muls	r1, r2
    5524:	4343      	muls	r3, r0
    5526:	0436      	lsls	r6, r6, #16
    5528:	0c36      	lsrs	r6, r6, #16
    552a:	0c25      	lsrs	r5, r4, #16
    552c:	0424      	lsls	r4, r4, #16
    552e:	4465      	add	r5, ip
    5530:	19a4      	adds	r4, r4, r6
    5532:	1859      	adds	r1, r3, r1
    5534:	1949      	adds	r1, r1, r5
    5536:	0020      	movs	r0, r4
    5538:	bc0c      	pop	{r2, r3}
    553a:	4690      	mov	r8, r2
    553c:	4699      	mov	r9, r3
    553e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005540 <__libc_init_array>:
    5540:	b570      	push	{r4, r5, r6, lr}
    5542:	2600      	movs	r6, #0
    5544:	4d0c      	ldr	r5, [pc, #48]	; (5578 <__libc_init_array+0x38>)
    5546:	4c0d      	ldr	r4, [pc, #52]	; (557c <__libc_init_array+0x3c>)
    5548:	1b64      	subs	r4, r4, r5
    554a:	10a4      	asrs	r4, r4, #2
    554c:	42a6      	cmp	r6, r4
    554e:	d109      	bne.n	5564 <__libc_init_array+0x24>
    5550:	2600      	movs	r6, #0
    5552:	f000 f915 	bl	5780 <_init>
    5556:	4d0a      	ldr	r5, [pc, #40]	; (5580 <__libc_init_array+0x40>)
    5558:	4c0a      	ldr	r4, [pc, #40]	; (5584 <__libc_init_array+0x44>)
    555a:	1b64      	subs	r4, r4, r5
    555c:	10a4      	asrs	r4, r4, #2
    555e:	42a6      	cmp	r6, r4
    5560:	d105      	bne.n	556e <__libc_init_array+0x2e>
    5562:	bd70      	pop	{r4, r5, r6, pc}
    5564:	00b3      	lsls	r3, r6, #2
    5566:	58eb      	ldr	r3, [r5, r3]
    5568:	4798      	blx	r3
    556a:	3601      	adds	r6, #1
    556c:	e7ee      	b.n	554c <__libc_init_array+0xc>
    556e:	00b3      	lsls	r3, r6, #2
    5570:	58eb      	ldr	r3, [r5, r3]
    5572:	4798      	blx	r3
    5574:	3601      	adds	r6, #1
    5576:	e7f2      	b.n	555e <__libc_init_array+0x1e>
    5578:	0000578c 	.word	0x0000578c
    557c:	0000578c 	.word	0x0000578c
    5580:	0000578c 	.word	0x0000578c
    5584:	00005790 	.word	0x00005790

00005588 <memcpy>:
    5588:	2300      	movs	r3, #0
    558a:	b510      	push	{r4, lr}
    558c:	429a      	cmp	r2, r3
    558e:	d100      	bne.n	5592 <memcpy+0xa>
    5590:	bd10      	pop	{r4, pc}
    5592:	5ccc      	ldrb	r4, [r1, r3]
    5594:	54c4      	strb	r4, [r0, r3]
    5596:	3301      	adds	r3, #1
    5598:	e7f8      	b.n	558c <memcpy+0x4>

0000559a <memset>:
    559a:	0003      	movs	r3, r0
    559c:	1882      	adds	r2, r0, r2
    559e:	4293      	cmp	r3, r2
    55a0:	d100      	bne.n	55a4 <memset+0xa>
    55a2:	4770      	bx	lr
    55a4:	7019      	strb	r1, [r3, #0]
    55a6:	3301      	adds	r3, #1
    55a8:	e7f9      	b.n	559e <memset+0x4>
    55aa:	0000      	movs	r0, r0
    55ac:	00001396 	.word	0x00001396
    55b0:	000015e2 	.word	0x000015e2
    55b4:	000015e2 	.word	0x000015e2
    55b8:	000015e2 	.word	0x000015e2
    55bc:	000015e2 	.word	0x000015e2
    55c0:	000015e2 	.word	0x000015e2
    55c4:	000015e2 	.word	0x000015e2
    55c8:	000015e2 	.word	0x000015e2
    55cc:	000015e2 	.word	0x000015e2
    55d0:	000015e2 	.word	0x000015e2
    55d4:	000015e2 	.word	0x000015e2
    55d8:	000015e2 	.word	0x000015e2
    55dc:	000015e2 	.word	0x000015e2
    55e0:	000015e2 	.word	0x000015e2
    55e4:	000015e2 	.word	0x000015e2
    55e8:	000015e2 	.word	0x000015e2
    55ec:	0000137e 	.word	0x0000137e
    55f0:	000015e2 	.word	0x000015e2
    55f4:	000015e2 	.word	0x000015e2
    55f8:	000015e2 	.word	0x000015e2
    55fc:	000015e2 	.word	0x000015e2
    5600:	000015e2 	.word	0x000015e2
    5604:	000015e2 	.word	0x000015e2
    5608:	000015e2 	.word	0x000015e2
    560c:	000015e2 	.word	0x000015e2
    5610:	000015e2 	.word	0x000015e2
    5614:	000015e2 	.word	0x000015e2
    5618:	000015e2 	.word	0x000015e2
    561c:	000015e2 	.word	0x000015e2
    5620:	000015e2 	.word	0x000015e2
    5624:	000015e2 	.word	0x000015e2
    5628:	000015e2 	.word	0x000015e2
    562c:	0000138e 	.word	0x0000138e
    5630:	000015e2 	.word	0x000015e2
    5634:	000015e2 	.word	0x000015e2
    5638:	000015e2 	.word	0x000015e2
    563c:	000015e2 	.word	0x000015e2
    5640:	000015e2 	.word	0x000015e2
    5644:	000015e2 	.word	0x000015e2
    5648:	000015e2 	.word	0x000015e2
    564c:	000015e2 	.word	0x000015e2
    5650:	000015e2 	.word	0x000015e2
    5654:	000015e2 	.word	0x000015e2
    5658:	000015e2 	.word	0x000015e2
    565c:	000015e2 	.word	0x000015e2
    5660:	000015e2 	.word	0x000015e2
    5664:	000015e2 	.word	0x000015e2
    5668:	000015e2 	.word	0x000015e2
    566c:	00001386 	.word	0x00001386
    5670:	0000139e 	.word	0x0000139e
    5674:	00001366 	.word	0x00001366
    5678:	00001376 	.word	0x00001376
    567c:	0000136e 	.word	0x0000136e
    5680:	00000002 	.word	0x00000002
    5684:	00000003 	.word	0x00000003
    5688:	00000028 	.word	0x00000028
    568c:	00000029 	.word	0x00000029
    5690:	00000004 	.word	0x00000004
    5694:	00000005 	.word	0x00000005
    5698:	00000006 	.word	0x00000006
    569c:	00000007 	.word	0x00000007
    56a0:	00000020 	.word	0x00000020
    56a4:	00000021 	.word	0x00000021
    56a8:	00000022 	.word	0x00000022
    56ac:	00000023 	.word	0x00000023
    56b0:	00000024 	.word	0x00000024
    56b4:	00000025 	.word	0x00000025
    56b8:	00000026 	.word	0x00000026
    56bc:	00000027 	.word	0x00000027
    56c0:	00000008 	.word	0x00000008
    56c4:	00000009 	.word	0x00000009
    56c8:	0000000a 	.word	0x0000000a
    56cc:	0000000b 	.word	0x0000000b
    56d0:	42000800 	.word	0x42000800
    56d4:	42000c00 	.word	0x42000c00
    56d8:	42001000 	.word	0x42001000
    56dc:	42001400 	.word	0x42001400
    56e0:	42001800 	.word	0x42001800
    56e4:	42001c00 	.word	0x42001c00
    56e8:	000022f6 	.word	0x000022f6
    56ec:	000022f2 	.word	0x000022f2
    56f0:	000022f2 	.word	0x000022f2
    56f4:	00002354 	.word	0x00002354
    56f8:	00002354 	.word	0x00002354
    56fc:	0000230a 	.word	0x0000230a
    5700:	000022fc 	.word	0x000022fc
    5704:	00002310 	.word	0x00002310
    5708:	00002342 	.word	0x00002342
    570c:	0000245c 	.word	0x0000245c
    5710:	0000243c 	.word	0x0000243c
    5714:	0000243c 	.word	0x0000243c
    5718:	000024c8 	.word	0x000024c8
    571c:	0000244e 	.word	0x0000244e
    5720:	0000246a 	.word	0x0000246a
    5724:	00002440 	.word	0x00002440
    5728:	00002478 	.word	0x00002478
    572c:	000024b8 	.word	0x000024b8
    5730:	42002c00 	.word	0x42002c00
    5734:	42003000 	.word	0x42003000
    5738:	42003400 	.word	0x42003400
    573c:	42003800 	.word	0x42003800
    5740:	42003c00 	.word	0x42003c00
    5744:	10000800 	.word	0x10000800
    5748:	40002000 	.word	0x40002000
    574c:	00008000 	.word	0x00008000
    5750:	00003dd4 	.word	0x00003dd4
    5754:	00003de2 	.word	0x00003de2
    5758:	00003e7c 	.word	0x00003e7c
    575c:	00003f1c 	.word	0x00003f1c
    5760:	00003f80 	.word	0x00003f80

00005764 <_usb_device_irq_bits>:
    5764:	00080004 00800070 01000001 00000200     ....p...........

00005774 <_usb_endpoint_irq_bits>:
    5774:	60100c03                                ...`

00005778 <tc_interrupt_vectors.13086>:
    5778:	15141312 00000016                       ........

00005780 <_init>:
    5780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5786:	bc08      	pop	{r3}
    5788:	469e      	mov	lr, r3
    578a:	4770      	bx	lr

0000578c <__init_array_start>:
    578c:	000000dd 	.word	0x000000dd

00005790 <_fini>:
    5790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5792:	46c0      	nop			; (mov r8, r8)
    5794:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5796:	bc08      	pop	{r3}
    5798:	469e      	mov	lr, r3
    579a:	4770      	bx	lr

0000579c <__fini_array_start>:
    579c:	000000b5 	.word	0x000000b5
